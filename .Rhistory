par(mar=c(4, 4, 1, 5), cex=1.5)
sy <- ontlook$year > 2003.5
plot(1, 1, type="n", log="y", las=1, xlim=range(ontlook$year[sy]), ylim=range(ontlook$Emr[sy], ontlook$Pmr[sy], na.rm=TRUE)/1000, xlab="Year", ylab="Adults")
for(i in 1:3) {
mycol <- blindcolz[c(3, 6, 5, 4, 2)[i]]
sel <- sy & ontlook$lscode==sus[i]
points(ontlook$year[sel], ontlook$Emr[sel]/1000, col=mycol, lwd=3, pch=16, type="o")
sel3 <- sel & ontlook$year>2008.5
mtext(ontlook$strname[sel3][1], side=4, at=median(ontlook$Emr[sel3]/1000, na.rm=TRUE), col=mycol, las=1, cex=1.5, line=0.2)
}
box()
# just Sterling & Black
windows(w=10, h=6)
par(mar=c(4, 4, 1, 5), cex=1.5)
sy <- ontlook$year > 2003.5
plot(1, 1, type="n", log="y", las=1, xlim=range(ontlook$year[sy]), ylim=range(ontlook$Emr[sy], ontlook$Pmr[sy], na.rm=TRUE)/1000, xlab="Year", ylab="Adults")
for(i in 4:5) {
mycol <- blindcolz[c(3, 6, 5, 4, 2)[i]]
sel <- sy & ontlook$lscode==sus[i]
points(ontlook$year[sel], ontlook$Emr[sel]/1000, col=mycol, lwd=3, pch=16, type="o")
sel3 <- sel & ontlook$year>2008.5
mtext(ontlook$strname[sel3][1], side=4, at=median(ontlook$Emr[sel3]/1000, na.rm=TRUE), col=mycol, las=1, cex=1.5, line=0.2)
}
box()
# just Sterling & Black ESTIMATED
windows(w=10, h=6)
par(mar=c(4, 4, 1, 5), cex=1.5)
sy <- ontlook$year > 2003.5
plot(1, 1, type="n", log="y", las=1, xlim=range(ontlook$year[sy]), ylim=range(ontlook$Emr[sy], ontlook$Pmr[sy], na.rm=TRUE)/1000, xlab="Year", ylab="Adults")
for(i in 4:5) {
mycol <- blindcolz[c(3, 6, 5, 4, 2)[i]]
sel <- sy & ontlook$lscode==sus[i]
lines(ontlook$year[sel], ontlook$COMBmr[sel]/1000, col=mycol, lwd=3, lty=2, lend="square")
points(ontlook$year[sel & is.na(ontlook$Emr)], ontlook$Pmr[sel & is.na(ontlook$Emr)]/1000, col=mycol, pch=16, cex=1.5)
sel3 <- sel & ontlook$year>2008.5
mtext(ontlook$strname[sel3][1], side=4, at=median(ontlook$Emr[sel3]/1000, na.rm=TRUE), col=mycol, las=1, cex=1.5, line=0.2)
}
box()
### spawner model and adult index time series overlaid
windows(h=4.5, w=5)
par(mar=c(4, 4, 2, 3), cex=1.2, yaxs="i")
i <- 5
myindxdf <- indices[[i]]$indxdf# year lake indxraw n.mr indxkeep indxkeep.lo indxkeep.hi
convfac <- indices[[i]]$scaleup
x1 <- myindxdf$year
y1 <- myindxdf$indxkeep/1000
ylo <- myindxdf$indxkeep.lo/1000
yhi <- myindxdf$indxkeep.hi/1000
yr <- 1.05*range(0, y1, yhi[x1>=YEAR1], na.rm=TRUE)
plot(x1, y1, type="n", xlim=range(x1[!is.na(y1)]), ylim=1.05*range(0, yhi, na.rm=TRUE), xlab="Year", ylab="Adult abundance  (thousands)", main=Lakenames[i], axes=FALSE)
axis(1)
axis(2, col=blindcolz[7], col.axis=blindcolz[7], las=1)
arrows(x1, ylo, x1, yhi, length=0, angle=90, code=3, lwd=10, lend="square", col="#ffddc1")
abline(h=targets.ai.adj$target[i]/1000, col=blindcolz[7], lty=2)
lines(x1, y1, col=blindcolz[7], type="o", pch=17, lwd=2)
par(mgp=c(3, 2.2, 0))
axis(4, at=pretty(convfac*yr)/convfac, labels=pretty(convfac*yr), col=blindcolz[3], col.axis=blindcolz[3], las=1, hadj=1)
box()
rm(ontlook, sus, sy, ss, mycol, sel, sel3, i, myindxdf, convfac, x1, y1, ylo, yhi, yr)
}
# summary table for trapped streams in spawner model, based on last X years of data
X <- 20
selmr <- dat$year > (as.numeric(lastyear)-X+0.5) & dat$est.source=="m-r"
tssm <- sort(unique(dat$lscode[selmr]))
sel <- dat$year > (as.numeric(lastyear)-X+0.5) & dat$lscode %in% tssm
mPE <- tapply(dat$Emr[sel], dat$lscode[sel], median, na.rm=TRUE)
mtc <- tapply(dat$trapcatch[sel], dat$lscode[sel], median, na.rm=TRUE)
mef <- tapply((dat$trapcatch/dat$Emr)[sel], dat$lscode[sel], median, na.rm=TRUE)
nyr <- tapply(!is.na(dat$Emr)[sel], dat$lscode[sel], sum)
wpyr <- tapply((dat$year-(as.numeric(lastyear)-X))[sel & !is.na(dat$Emr)], dat$lscode[sel & !is.na(dat$Emr)], sum)/((X+1)*(X/2))
mdf <- data.frame(mPE, mtc, mef, nyr, wpyr)
mdf <- cbind(dat[match(rownames(mdf), dat$lscode), c("lake", "country", "lscode", "strname", "estr")], mdf)
mdf$type <- c("", "Index")[mdf$lscode %in% unlist(index.streams) + 1]
rankl <- rank(rank(-mdf$wpyr) + rank(-mdf$mPE))
mdf$rank <- unlist(tapply(rankl, mdf$lake, rank))
ord <- order(mdf$lake, -(rank(mdf$mPE) + rank(mdf$nyr)))
ord <- order(mdf$lake, -mdf$mPE, -mdf$wpyr)
ord <- order(mdf$lake, mdf$rank)
mdf[ord, c("lake", "country", "lscode", "strname", "type", "rank", "nyr", "wpyr", "mPE", "mtc", "mef")]
rm(selmr, sel, mPE, mtc, mef, nyr, wpyr, rankl, ord)
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/1984-2014 US MarkRecap Summary.xlsx")
usmr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=2)
names(usmr) <- casefold(names(usmr))
names(usmr)[match(c("lk", "strm", "trib.name", "x.marked", "x.recap"), names(usmr))] <- c("lake", "estr", "trib", "marks", "recaps")
usmr$country <- "US"
usmr2 <- usmr[usmr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
# assume missing values are zeroes
#############################################################################################
# Okay.  So if the catch is NA, I'll assume it wasn't trapped.  
# But if the catch is some number (even if it's 0) and the marks and the recaps are NA, 
# I'll assume that there were 0 marks and or 0 recaps.
#############################################################################################
head(usmr2)
table(is.na(usmr2$catch), is.na(usmr2$marks), is.na(usmr2$recaps))
summary(usmr2[is.na(usmr2$catch), ])
with(usmr2, table(is.na(catch), is.na(marks) | marks<1, is.na(recaps) | recaps < 1)
)
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/1984-2014 US MarkRecap Summary.xlsx")
usmr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=2)
names(usmr) <- casefold(names(usmr))
names(usmr)[match(c("lk", "strm", "trib.name", "x.marked", "x.recap"), names(usmr))] <- c("lake", "estr", "trib", "marks", "recaps")
usmr$country <- "US"
usmr2 <- usmr[usmr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
# if the catch is NA, I assume it wasn't trapped
usmr2 <- usmr2[!is.na(usmr2$catch), ]
# if marks or recaps are NA, I assume they were zero
usmr2$marks[is.na(usmr2$marks)] <- 0
usmr2$recaps[is.na(usmr2$recaps)] <- 0
summary(usmr2)
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/marked and recaptured DFO.xlsx")
camr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(camr) <- casefold(names(camr))
names(camr)[match(c("stream_code", "stream_name", "marked", "recaptured"), names(camr))] <- c("estr", "trib", "marks", "recaps")
camr$country <- "Canada"
camr$lake <- match(camr$lake_code, Lakeabbs)
camr$catch <- NA
camr2 <- camr[camr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
summary(camr2)
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/marked and recaptured DFO.xlsx")
camr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(camr) <- casefold(names(camr))
names(camr)[match(c("stream_code", "stream_name", "marked", "recaptured"), names(camr))] <- c("estr", "trib", "marks", "recaps")
camr$country <- "Canada"
camr$lake <- match(camr$lake_code, Lakeabbs)
camr$catch <- NA
camr2 <- camr[camr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
summary(camr2)
camr2[is.na(camr2$recaps), ]
head(camr)
head(camr)
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/1984-2014 US MarkRecap Summary.xlsx")
usmr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=2)
names(usmr) <- casefold(names(usmr))
names(usmr)[match(c("lk", "strm", "trib.name", "x.marked", "x.recap"), names(usmr))] <- c("lake", "estr", "trib", "marks", "recaps")
usmr$country <- "US"
usmr2 <- usmr[usmr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
usmr2$branch <- ""
# if the catch is NA, I assume it wasn't trapped
usmr2 <- usmr2[!is.na(usmr2$catch), ]
# if marks or recaps are NA, I assume they were zero
usmr2$marks[is.na(usmr2$marks)] <- 0
usmr2$recaps[is.na(usmr2$recaps)] <- 0
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/marked and recaptured DFO.xlsx")
camr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(camr) <- casefold(names(camr))
names(camr)[match(c("stream_code", "stream_name", "marked", "recaptured". "branch_lentic_name"), names(camr))] <- c("estr", "trib", "marks", "recaps", "branch")
camr$country <- "Canada"
camr$lake <- match(camr$lake_code, Lakeabbs)
camr$catch <- NA
camr2 <- camr[camr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "branch", "year", "catch", "marks", "recaps")]
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/1984-2014 US MarkRecap Summary.xlsx")
usmr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=2)
names(usmr) <- casefold(names(usmr))
names(usmr)[match(c("lk", "strm", "trib.name", "x.marked", "x.recap"), names(usmr))] <- c("lake", "estr", "trib", "marks", "recaps")
usmr$country <- "US"
usmr2 <- usmr[usmr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
usmr2$branch <- ""
# if the catch is NA, I assume it wasn't trapped
usmr2 <- usmr2[!is.na(usmr2$catch), ]
# if marks or recaps are NA, I assume they were zero
usmr2$marks[is.na(usmr2$marks)] <- 0
usmr2$recaps[is.na(usmr2$recaps)] <- 0
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/marked and recaptured DFO.xlsx")
camr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(camr) <- casefold(names(camr))
names(camr)[match(c("stream_code", "stream_name", "marked", "recaptured", "branch_lentic_name"), names(camr))] <- c("estr", "trib", "marks", "recaps", "branch")
camr$country <- "Canada"
camr$lake <- match(camr$lake_code, Lakeabbs)
camr$catch <- NA
camr2 <- camr[camr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "branch", "year", "catch", "marks", "recaps")]
head(camr2)
summary(camr2)
camr2[is.na(camr2$recaps), ]
camr2[is.na(camr2$recaps), -7]
camr2[camr2$estr==571, ]
camr2[camr2$estr==571, -7]
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/1984-2014 US MarkRecap Summary.xlsx")
usmr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=2)
names(usmr) <- casefold(names(usmr))
names(usmr)[match(c("lk", "strm", "trib.name", "x.marked", "x.recap"), names(usmr))] <- c("lake", "estr", "trib", "marks", "recaps")
usmr$country <- "US"
usmr2 <- usmr[usmr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
usmr2$branch <- ""
# if the catch is NA, I assume it wasn't trapped
usmr2 <- usmr2[!is.na(usmr2$catch), ]
# if marks or recaps are NA, I assume they were zero
usmr2$marks[is.na(usmr2$marks)] <- 0
usmr2$recaps[is.na(usmr2$recaps)] <- 0
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/marked and recaptured DFO.xlsx")
camr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(camr) <- casefold(names(camr))
names(camr)[match(c("stream_code", "stream_name", "marked", "recaptured", "branch_lentic_name"), names(camr))] <- c("estr", "trib", "marks", "recaps", "branch")
camr$country <- "Canada"
camr$lake <- match(camr$lake_code, Lakeabbs)
camr$catch <- NA
camr2 <- camr[camr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "branch", "year", "catch", "marks", "recaps")]
both <- rbind(usmr2, camr2)
# create list of streams for matching with spawner model data
both$catlast <- ifelse(both$year==lastyear, both$catch, 0)
look <- aggregate(both[, c("catlast", "marks", "recaps")], both[, c("trib", "country", "estr", "lake")], median, na.rm=TRUE)
look <- look[, c("lake", "country", "estr", "trib", "catlast", "marks", "recaps")]
write.csv(look, "C:/JVA/Lamprey/Adults/AdultIndex/2014/mr-streams.csv", row.names=FALSE)
selmr <- dat$year > (as.numeric(lastyear)-X+0.5) & !is.na(dat$trapcatch)
tssm2 <- sort(unique(dat$lscode[selmr]))
look2 <- dat[dat$year==lastyear & dat$lscode %in% tssm2, c("lake", "country", "estr", "strname", "trapcatch", "lscode", "strcode", "reach")]
write.csv(look2[order(look2$lake, look2$estr, look2$country, look2$strname), ], "C:/JVA/Lamprey/Adults/AdultIndex/2014/sm-streams.csv", row.names=FALSE)
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/1984-2014 US MarkRecap Summary.xlsx")
usmr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=2)
names(usmr) <- casefold(names(usmr))
names(usmr)[match(c("lk", "strm", "trib.name", "x.marked", "x.recap"), names(usmr))] <- c("lake", "estr", "trib", "marks", "recaps")
usmr$country <- "US"
usmr2 <- usmr[usmr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
usmr2$branch <- ""
# if the catch is NA, I assume it wasn't trapped
usmr2 <- usmr2[!is.na(usmr2$catch), ]
# if marks or recaps are NA, I assume they were zero
usmr2$marks[is.na(usmr2$marks)] <- 0
usmr2$recaps[is.na(usmr2$recaps)] <- 0
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/marked and recaptured DFO.xlsx")
camr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(camr) <- casefold(names(camr))
names(camr)[match(c("stream_code", "stream_name", "marked", "recaptured", "branch_lentic_name"), names(camr))] <- c("estr", "trib", "marks", "recaps", "branch")
camr$country <- "Canada"
camr$lake <- match(camr$lake_code, Lakeabbs)
camr$catch <- NA
camr2 <- camr[camr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "branch", "year", "catch", "marks", "recaps")]
both <- rbind(usmr2, camr2)
# create list of streams for matching with spawner model data
both$catlast <- ifelse(both$year==lastyear, both$catch, 0)
look <- aggregate(both[, c("catlast", "marks", "recaps")], both[, c("branch", "trib", "country", "estr", "lake")], median, na.rm=TRUE)
look <- look[, c("lake", "country", "estr", "trib", "branch", "catlast", "marks", "recaps")]
write.csv(look, "C:/JVA/Lamprey/Adults/AdultIndex/2014/mr-streams.csv", row.names=FALSE)
selmr <- dat$year > (as.numeric(lastyear)-X+0.5) & !is.na(dat$trapcatch)
tssm2 <- sort(unique(dat$lscode[selmr]))
look2 <- dat[dat$year==lastyear & dat$lscode %in% tssm2, c("lake", "country", "estr", "strname", "trapcatch", "lscode", "strcode", "reach")]
write.csv(look2[order(look2$lake, look2$estr, look2$country, look2$strname), ], "C:/JVA/Lamprey/Adults/AdultIndex/2014/sm-streams.csv", row.names=FALSE)
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/1984-2014 US MarkRecap Summary.xlsx")
usmr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=2)
names(usmr) <- casefold(names(usmr))
names(usmr)[match(c("lk", "strm", "trib.name", "x.marked", "x.recap"), names(usmr))] <- c("lake", "estr", "trib", "marks", "recaps")
usmr$country <- "US"
usmr2 <- usmr[usmr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
# if the catch is NA, I assume it wasn't trapped
usmr2 <- usmr2[!is.na(usmr2$catch), ]
# if marks or recaps are NA, I assume they were zero
usmr2$marks[is.na(usmr2$marks)] <- 0
usmr2$recaps[is.na(usmr2$recaps)] <- 0
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/marked and recaptured DFO.xlsx")
camr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(camr) <- casefold(names(camr))
names(camr)[match(c("stream_code", "stream_name", "marked", "recaptured", "branch_lentic_name"), names(camr))] <- c("estr", "trib", "marks", "recaps", "branch")
camr$country <- "Canada"
camr$lake <- match(camr$lake_code, Lakeabbs)
camr$catch <- NA
camr2 <- camr[camr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "branch", "year", "catch", "marks", "recaps")]
camr2$trib <- paste(camr2$trib, camr2$branch, sep=" - ")
both <- rbind(usmr2, camr2)
# create list of streams for matching with spawner model data
both$catlast <- ifelse(both$year==lastyear, both$catch, 0)
look <- aggregate(both[, c("catlast", "marks", "recaps")], both[, c("trib", "country", "estr", "lake")], median, na.rm=TRUE)
look <- look[, c("lake", "country", "estr", "trib", "catlast", "marks", "recaps")]
write.csv(look, "C:/JVA/Lamprey/Adults/AdultIndex/2014/mr-streams.csv", row.names=FALSE)
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/1984-2014 US MarkRecap Summary.xlsx")
usmr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=2)
names(usmr) <- casefold(names(usmr))
names(usmr)[match(c("lk", "strm", "trib.name", "x.marked", "x.recap"), names(usmr))] <- c("lake", "estr", "trib", "marks", "recaps")
usmr$country <- "US"
usmr2 <- usmr[usmr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
# if the catch is NA, I assume it wasn't trapped
usmr2 <- usmr2[!is.na(usmr2$catch), ]
# if marks or recaps are NA, I assume they were zero
usmr2$marks[is.na(usmr2$marks)] <- 0
usmr2$recaps[is.na(usmr2$recaps)] <- 0
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/marked and recaptured DFO.xlsx")
camr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(camr) <- casefold(names(camr))
names(camr)[match(c("stream_code", "stream_name", "marked", "recaptured", "branch_lentic_name"), names(camr))] <- c("estr", "trib", "marks", "recaps", "branch")
camr$country <- "Canada"
camr$lake <- match(camr$lake_code, Lakeabbs)
camr$catch <- NA
camr2 <- camr[camr$year > (as.numeric(lastyear)-X+0.5), ]
camr2$trib <- paste(camr2$trib, camr2$branch, sep=" - ")
camr2 <- camr2[, c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
both <- rbind(usmr2, camr2)
# create list of streams for matching with spawner model data
both$catlast <- ifelse(both$year==lastyear, both$catch, 0)
look <- aggregate(both[, c("catlast", "marks", "recaps")], both[, c("trib", "country", "estr", "lake")], median, na.rm=TRUE)
look <- look[, c("lake", "country", "estr", "trib", "catlast", "marks", "recaps")]
write.csv(look, "C:/JVA/Lamprey/Adults/AdultIndex/2014/mr-streams.csv", row.names=FALSE)
# bring in STREAM KEY to connect mark/recap data to spawner model data
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/MatchStreams.xlsx")
key <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, startCol=12)
head(key)
# bring in STREAM KEY to connect mark/recap data to spawner model data
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/MatchStreams.xlsx")
key <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, startCol=12, endCol=16)
head(key)
# use this key to assign lscode (lake stream code) numbers to mark/recap data
markrecap <- merge(both, key, by="lscode", all=x)
head(both)
head(
# use this key to assign lscode (lake stream code) numbers to mark/recap data
markrecap <- merge(both, key, all=x)
# use this key to assign lscode (lake stream code) numbers to mark/recap data
markrecap <- merge(both, key, all=x)
# use this key to assign lscode (lake stream code) numbers to mark/recap data
markrecap <- merge(both, key, all=x)
# use this key to assign lscode (lake stream code) numbers to mark/recap data
markrecap <- merge(both, key, all.x=TRUE)
dim(both)
dim(markrecap)
head(markrecap)
dput(names(markrecap))
# use this key to assign lscode (lake stream code) numbers to mark/recap data
markrecap <- merge(both[, c("lake", "country", "estr", "trib", "year", "marks", "recaps")], key, all.x=TRUE)
head(markrecap)
# use this key to assign lscode (lake stream code) numbers to mark/recap data
both2 <- merge(both, key, all.x=TRUE)
# sum up the marks and recaps by lscode
both3 <- aggregate(both2[, c("marks", "recaps")], both2[, "lscode"], sum)
# sum up the marks and recaps by lscode
both3 <- aggregate(both2[, c("marks", "recaps")], list(both2$lscode), sum)
head(both3)
both3 <- aggregate(both2[, c("marks", "recaps")], list(lscode=both2$lscode), sum)
head(both3)
# sum up the marks and recaps by lscode
both3 <- aggregate(both2[, c("marks", "recaps")], both2[, c("year", "lscode")], sum)
head(both3)
mrkrec <- rbind(usmr2, camr2)
# create list of streams for matching with spawner model data
mrkrec$catlast <- ifelse(mrkrec$year==lastyear, mrkrec$catch, 0)
look <- aggregate(mrkrec[, c("catlast", "marks", "recaps")], mrkrec[, c("trib", "country", "estr", "lake")], median, na.rm=TRUE)
look <- look[, c("lake", "country", "estr", "trib", "catlast", "marks", "recaps")]
write.csv(look, "C:/JVA/Lamprey/Adults/AdultIndex/2014/mr-streams.csv", row.names=FALSE)
selmr <- dat$year > (as.numeric(lastyear)-X+0.5) & !is.na(dat$trapcatch)
tssm2 <- sort(unique(dat$lscode[selmr]))
look2 <- dat[dat$year==lastyear & dat$lscode %in% tssm2, c("lake", "country", "estr", "strname", "trapcatch", "lscode", "strcode", "reach")]
write.csv(look2[order(look2$lake, look2$estr, look2$country, look2$strname), ], "C:/JVA/Lamprey/Adults/AdultIndex/2014/sm-streams.csv", row.names=FALSE)
# bring in STREAM KEY to connect mark/recap data to spawner model data
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/MatchStreams.xlsx")
key <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, startCol=12, endCol=16)
# use this key to assign lscode (lake stream code) numbers to mark/recap data
mrkrec2 <- merge(mrkrec, key, all.x=TRUE)
# sum up the marks and recaps by lscode
mrkrec3 <- aggregate(mrkrec2[, c("marks", "recaps")], mrkrec2[, c("year", "lscode")], sum)
head(mrkrec3)
dim(mrkrec2)
dim(mrkrec3)
summary(mrkrec3)
# bring in mark/recap data from FWS and DFO
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/1984-2014 US MarkRecap Summary.xlsx")
usmr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=2)
names(usmr) <- casefold(names(usmr))
names(usmr)[match(c("lk", "strm", "trib.name", "x.marked", "x.recap"), names(usmr))] <- c("lake", "estr", "trib", "marks", "recaps")
usmr$country <- "US"
usmr2 <- usmr[usmr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
# if the catch is NA, I assume it wasn't trapped
usmr2 <- usmr2[!is.na(usmr2$catch), ]
# if marks or recaps are NA, I assume they were zero
usmr2$marks[is.na(usmr2$marks)] <- 0
usmr2$recaps[is.na(usmr2$recaps)] <- 0
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/marked and recaptured DFO.xlsx")
camr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(camr) <- casefold(names(camr))
names(camr)[match(c("stream_code", "stream_name", "marked", "recaptured", "branch_lentic_name"), names(camr))] <- c("estr", "trib", "marks", "recaps", "branch")
camr$country <- "Canada"
camr$lake <- match(camr$lake_code, Lakeabbs)
camr$catch <- NA
camr2 <- camr[camr$year > (as.numeric(lastyear)-X+0.5), ]
camr2$trib <- paste(camr2$trib, camr2$branch, sep=" - ")
camr2 <- camr2[, c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
# if marks is NA, I assume it wasn't trapped
camr2 <- camr2[!is.na(camr2$marks), ]
# if recaps is NA, I assume it was zero
camr2$recaps[is.na(camr2$recaps)] <- 0
mrkrec <- rbind(usmr2, camr2)
# create list of streams for matching with spawner model data
mrkrec$catlast <- ifelse(mrkrec$year==lastyear, mrkrec$catch, 0)
look <- aggregate(mrkrec[, c("catlast", "marks", "recaps")], mrkrec[, c("trib", "country", "estr", "lake")], median, na.rm=TRUE)
look <- look[, c("lake", "country", "estr", "trib", "catlast", "marks", "recaps")]
write.csv(look, "C:/JVA/Lamprey/Adults/AdultIndex/2014/mr-streams.csv", row.names=FALSE)
selmr <- dat$year > (as.numeric(lastyear)-X+0.5) & !is.na(dat$trapcatch)
tssm2 <- sort(unique(dat$lscode[selmr]))
look2 <- dat[dat$year==lastyear & dat$lscode %in% tssm2, c("lake", "country", "estr", "strname", "trapcatch", "lscode", "strcode", "reach")]
write.csv(look2[order(look2$lake, look2$estr, look2$country, look2$strname), ], "C:/JVA/Lamprey/Adults/AdultIndex/2014/sm-streams.csv", row.names=FALSE)
# bring in STREAM KEY to connect mark/recap data to spawner model data
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/MatchStreams.xlsx")
key <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, startCol=12, endCol=16)
# use this key to assign lscode (lake stream code) numbers to mark/recap data
mrkrec2 <- merge(mrkrec, key, all.x=TRUE)
# sum up the marks and recaps by lscode
mrkrec3 <- aggregate(mrkrec2[, c("marks", "recaps")], mrkrec2[, c("year", "lscode")], sum)
# then merge the mark/recap data with the spawner model data, by lscode
summary(mrkrec3)
cleanup()
search()
### summary table for trapped streams in spawner model, based on last X years of data ###
X <- 20
# bring in FWS mark/recap data
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/1984-2014 US MarkRecap Summary.xlsx")
usmr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=2)
names(usmr) <- casefold(names(usmr))
names(usmr)[match(c("lk", "strm", "trib.name", "x.marked", "x.recap"), names(usmr))] <- c("lake", "estr", "trib", "marks", "recaps")
usmr$country <- "US"
usmr2 <- usmr[usmr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
# these assumptions were okayed by Jess Barber 24 Sep 2014
# if the catch is NA, I assume it wasn't trapped
usmr2 <- usmr2[!is.na(usmr2$catch), ]
# if marks or recaps are NA, I assume they were zero
usmr2$marks[is.na(usmr2$marks)] <- 0
usmr2$recaps[is.na(usmr2$recaps)] <- 0
# bring in DFO mark/recap data
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/marked and recaptured DFO.xlsx")
camr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(camr) <- casefold(names(camr))
names(camr)[match(c("stream_code", "stream_name", "marked", "recaptured", "branch_lentic_name"), names(camr))] <- c("estr", "trib", "marks", "recaps", "branch")
camr$country <- "Canada"
camr$lake <- match(camr$lake_code, Lakeabbs)
camr$catch <- NA
camr2 <- camr[camr$year > (as.numeric(lastyear)-X+0.5), ]
camr2$trib <- paste(camr2$trib, camr2$branch, sep=" - ")
camr2 <- camr2[, c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
# these assumptions were okayed by Gale Bravener 25 Sep 2014
# if marks or recaps are NA, I assume they were zero
camr2$marks[is.na(camr2$marks)] <- 0
camr2$recaps[is.na(camr2$recaps)] <- 0
# bring in stream-specific data
dat <- read.csv("C:/JVA/Lamprey/Adults/SpawnDisModel/2014/StreamPEdynamicALLCOLS.csv", as.is=T)
dat$ls <- dat$lscode
lastyear <- max(dat$year)
### summary table for trapped streams in spawner model, based on last X years of data ###
X <- 20
# bring in FWS mark/recap data
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/1984-2014 US MarkRecap Summary.xlsx")
usmr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=2)
names(usmr) <- casefold(names(usmr))
names(usmr)[match(c("lk", "strm", "trib.name", "x.marked", "x.recap"), names(usmr))] <- c("lake", "estr", "trib", "marks", "recaps")
usmr$country <- "US"
usmr2 <- usmr[usmr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
# these assumptions were okayed by Jess Barber 24 Sep 2014
# if the catch is NA, I assume it wasn't trapped
usmr2 <- usmr2[!is.na(usmr2$catch), ]
# if marks or recaps are NA, I assume they were zero
usmr2$marks[is.na(usmr2$marks)] <- 0
usmr2$recaps[is.na(usmr2$recaps)] <- 0
# bring in DFO mark/recap data
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/marked and recaptured DFO.xlsx")
camr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(camr) <- casefold(names(camr))
names(camr)[match(c("stream_code", "stream_name", "marked", "recaptured", "branch_lentic_name"), names(camr))] <- c("estr", "trib", "marks", "recaps", "branch")
camr$country <- "Canada"
camr$lake <- match(camr$lake_code, Lakeabbs)
camr$catch <- NA
camr2 <- camr[camr$year > (as.numeric(lastyear)-X+0.5), ]
camr2$trib <- paste(camr2$trib, camr2$branch, sep=" - ")
camr2 <- camr2[, c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
# these assumptions were okayed by Gale Bravener 25 Sep 2014
# if marks or recaps are NA, I assume they were zero
camr2$marks[is.na(camr2$marks)] <- 0
camr2$recaps[is.na(camr2$recaps)] <- 0
# create two lists of streams for matching with spawner model data
mrkrec$catlast <- ifelse(mrkrec$year==lastyear, mrkrec$catch, 0)
look <- aggregate(mrkrec[, c("catlast", "marks", "recaps")], mrkrec[, c("trib", "country", "estr", "lake")], median, na.rm=TRUE)
look <- look[, c("lake", "country", "estr", "trib", "catlast", "marks", "recaps")]
write.csv(look, "C:/JVA/Lamprey/Adults/AdultIndex/2014/mr-streams.csv", row.names=FALSE)
selmr <- dat$year > (as.numeric(lastyear)-X+0.5) & !is.na(dat$trapcatch)
tssm2 <- sort(unique(dat$lscode[selmr]))
look2 <- dat[dat$year==lastyear & dat$lscode %in% tssm2, c("lake", "country", "estr", "strname", "trapcatch", "lscode", "strcode", "reach")]
write.csv(look2[order(look2$lake, look2$estr, look2$country, look2$strname), ], "C:/JVA/Lamprey/Adults/AdultIndex/2014/sm-streams.csv", row.names=FALSE)
# then the file MatchStreams.xlsx is manually edited to match up the streams
# bring in STREAM KEY to connect mark/recap data to spawner model data
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/MatchStreams.xlsx")
key <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, startCol=12, endCol=16)
# use this key to assign lscode (lake stream code) numbers to mark/recap data
mrkrec2 <- merge(mrkrec, key, all.x=TRUE)
# sum up the marks and recaps by lscode
mrkrec3 <- aggregate(mrkrec2[, c("marks", "recaps")], mrkrec2[, c("year", "lscode")], sum)
# then merge the mark/recap data with the spawner model data, by lscode
.Last
history
history(max.show=Inf)
# combine FWS and DFO mark/recap data
mrkrec <- rbind(usmr2, camr2)
# create two lists of streams for matching with spawner model data
mrkrec$catlast <- ifelse(mrkrec$year==lastyear, mrkrec$catch, 0)
look <- aggregate(mrkrec[, c("catlast", "marks", "recaps")], mrkrec[, c("trib", "country", "estr", "lake")], median, na.rm=TRUE)
look <- look[, c("lake", "country", "estr", "trib", "catlast", "marks", "recaps")]
write.csv(look, "C:/JVA/Lamprey/Adults/AdultIndex/2014/mr-streams.csv", row.names=FALSE)
selmr <- dat$year > (as.numeric(lastyear)-X+0.5) & !is.na(dat$trapcatch)
tssm2 <- sort(unique(dat$lscode[selmr]))
look2 <- dat[dat$year==lastyear & dat$lscode %in% tssm2, c("lake", "country", "estr", "strname", "trapcatch", "lscode", "strcode", "reach")]
write.csv(look2[order(look2$lake, look2$estr, look2$country, look2$strname), ], "C:/JVA/Lamprey/Adults/AdultIndex/2014/sm-streams.csv", row.names=FALSE)
# then the file MatchStreams.xlsx is manually edited to match up the streams
# bring in STREAM KEY to connect mark/recap data to spawner model data
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/MatchStreams.xlsx")
key <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, startCol=12, endCol=16)
# use this key to assign lscode (lake stream code) numbers to mark/recap data
mrkrec2 <- merge(mrkrec, key, all.x=TRUE)
# sum up the marks and recaps by lscode
mrkrec3 <- aggregate(mrkrec2[, c("marks", "recaps")], mrkrec2[, c("year", "lscode")], sum)
# then merge the mark/recap data with the spawner model data, by lscode
.Last <- function()
    if(interactive()) try(savehistory("~/.Rhistory"))
cleanup()
q()
.Last <- function()
    if(interactive()) try(savehistory())
q()
x <- 1
y <- 2
cleanup()
q()
loadhistory()
par(mar=c(4, 4, 1, 5), cex=1.5)
sy <- ontlook$year > 2003.5
plot(1, 1, type="n", log="y", las=1, xlim=range(ontlook$year[sy]), ylim=range(ontlook$Emr[sy], ontlook$Pmr[sy], na.rm=TRUE)/1000, xlab="Year", ylab="Adults")
for(i in 1:3) {
mycol <- blindcolz[c(3, 6, 5, 4, 2)[i]]
sel <- sy & ontlook$lscode==sus[i]
points(ontlook$year[sel], ontlook$Emr[sel]/1000, col=mycol, lwd=3, pch=16, type="o")
sel3 <- sel & ontlook$year>2008.5
mtext(ontlook$strname[sel3][1], side=4, at=median(ontlook$Emr[sel3]/1000, na.rm=TRUE), col=mycol, las=1, cex=1.5, line=0.2)
}
box()
# just Sterling & Black
windows(w=10, h=6)
par(mar=c(4, 4, 1, 5), cex=1.5)
sy <- ontlook$year > 2003.5
plot(1, 1, type="n", log="y", las=1, xlim=range(ontlook$year[sy]), ylim=range(ontlook$Emr[sy], ontlook$Pmr[sy], na.rm=TRUE)/1000, xlab="Year", ylab="Adults")
for(i in 4:5) {
mycol <- blindcolz[c(3, 6, 5, 4, 2)[i]]
sel <- sy & ontlook$lscode==sus[i]
points(ontlook$year[sel], ontlook$Emr[sel]/1000, col=mycol, lwd=3, pch=16, type="o")
sel3 <- sel & ontlook$year>2008.5
mtext(ontlook$strname[sel3][1], side=4, at=median(ontlook$Emr[sel3]/1000, na.rm=TRUE), col=mycol, las=1, cex=1.5, line=0.2)
}
box()
# just Sterling & Black ESTIMATED
windows(w=10, h=6)
par(mar=c(4, 4, 1, 5), cex=1.5)
sy <- ontlook$year > 2003.5
plot(1, 1, type="n", log="y", las=1, xlim=range(ontlook$year[sy]), ylim=range(ontlook$Emr[sy], ontlook$Pmr[sy], na.rm=TRUE)/1000, xlab="Year", ylab="Adults")
for(i in 4:5) {
mycol <- blindcolz[c(3, 6, 5, 4, 2)[i]]
sel <- sy & ontlook$lscode==sus[i]
lines(ontlook$year[sel], ontlook$COMBmr[sel]/1000, col=mycol, lwd=3, lty=2, lend="square")
points(ontlook$year[sel & is.na(ontlook$Emr)], ontlook$Pmr[sel & is.na(ontlook$Emr)]/1000, col=mycol, pch=16, cex=1.5)
sel3 <- sel & ontlook$year>2008.5
mtext(ontlook$strname[sel3][1], side=4, at=median(ontlook$Emr[sel3]/1000, na.rm=TRUE), col=mycol, las=1, cex=1.5, line=0.2)
}
box()
### spawner model and adult index time series overlaid
windows(h=4.5, w=5)
par(mar=c(4, 4, 2, 3), cex=1.2, yaxs="i")
i <- 5
myindxdf <- indices[[i]]$indxdf# year lake indxraw n.mr indxkeep indxkeep.lo indxkeep.hi
convfac <- indices[[i]]$scaleup
x1 <- myindxdf$year
y1 <- myindxdf$indxkeep/1000
ylo <- myindxdf$indxkeep.lo/1000
yhi <- myindxdf$indxkeep.hi/1000
yr <- 1.05*range(0, y1, yhi[x1>=YEAR1], na.rm=TRUE)
plot(x1, y1, type="n", xlim=range(x1[!is.na(y1)]), ylim=1.05*range(0, yhi, na.rm=TRUE), xlab="Year", ylab="Adult abundance  (thousands)", main=Lakenames[i], axes=FALSE)
axis(1)
axis(2, col=blindcolz[7], col.axis=blindcolz[7], las=1)
arrows(x1, ylo, x1, yhi, length=0, angle=90, code=3, lwd=10, lend="square", col="#ffddc1")
abline(h=targets.ai.adj$target[i]/1000, col=blindcolz[7], lty=2)
lines(x1, y1, col=blindcolz[7], type="o", pch=17, lwd=2)
par(mgp=c(3, 2.2, 0))
axis(4, at=pretty(convfac*yr)/convfac, labels=pretty(convfac*yr), col=blindcolz[3], col.axis=blindcolz[3], las=1, hadj=1)
box()
rm(ontlook, sus, sy, ss, mycol, sel, sel3, i, myindxdf, convfac, x1, y1, ylo, yhi, yr)
}
# summary table for trapped streams in spawner model, based on last X years of data
X <- 20
selmr <- dat$year > (as.numeric(lastyear)-X+0.5) & dat$est.source=="m-r"
tssm <- sort(unique(dat$lscode[selmr]))
sel <- dat$year > (as.numeric(lastyear)-X+0.5) & dat$lscode %in% tssm
mPE <- tapply(dat$Emr[sel], dat$lscode[sel], median, na.rm=TRUE)
mtc <- tapply(dat$trapcatch[sel], dat$lscode[sel], median, na.rm=TRUE)
mef <- tapply((dat$trapcatch/dat$Emr)[sel], dat$lscode[sel], median, na.rm=TRUE)
nyr <- tapply(!is.na(dat$Emr)[sel], dat$lscode[sel], sum)
wpyr <- tapply((dat$year-(as.numeric(lastyear)-X))[sel & !is.na(dat$Emr)], dat$lscode[sel & !is.na(dat$Emr)], sum)/((X+1)*(X/2))
mdf <- data.frame(mPE, mtc, mef, nyr, wpyr)
mdf <- cbind(dat[match(rownames(mdf), dat$lscode), c("lake", "country", "lscode", "strname", "estr")], mdf)
mdf$type <- c("", "Index")[mdf$lscode %in% unlist(index.streams) + 1]
rankl <- rank(rank(-mdf$wpyr) + rank(-mdf$mPE))
mdf$rank <- unlist(tapply(rankl, mdf$lake, rank))
ord <- order(mdf$lake, -(rank(mdf$mPE) + rank(mdf$nyr)))
ord <- order(mdf$lake, -mdf$mPE, -mdf$wpyr)
ord <- order(mdf$lake, mdf$rank)
mdf[ord, c("lake", "country", "lscode", "strname", "type", "rank", "nyr", "wpyr", "mPE", "mtc", "mef")]
rm(selmr, sel, mPE, mtc, mef, nyr, wpyr, rankl, ord)
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/1984-2014 US MarkRecap Summary.xlsx")
usmr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=2)
names(usmr) <- casefold(names(usmr))
names(usmr)[match(c("lk", "strm", "trib.name", "x.marked", "x.recap"), names(usmr))] <- c("lake", "estr", "trib", "marks", "recaps")
usmr$country <- "US"
usmr2 <- usmr[usmr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
# assume missing values are zeroes
#############################################################################################
# Okay.  So if the catch is NA, I'll assume it wasn't trapped.  
# But if the catch is some number (even if it's 0) and the marks and the recaps are NA, 
# I'll assume that there were 0 marks and or 0 recaps.
#############################################################################################
head(usmr2)
table(is.na(usmr2$catch), is.na(usmr2$marks), is.na(usmr2$recaps))
summary(usmr2[is.na(usmr2$catch), ])
with(usmr2, table(is.na(catch), is.na(marks) | marks<1, is.na(recaps) | recaps < 1)
)
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/1984-2014 US MarkRecap Summary.xlsx")
usmr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=2)
names(usmr) <- casefold(names(usmr))
names(usmr)[match(c("lk", "strm", "trib.name", "x.marked", "x.recap"), names(usmr))] <- c("lake", "estr", "trib", "marks", "recaps")
usmr$country <- "US"
usmr2 <- usmr[usmr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
# if the catch is NA, I assume it wasn't trapped
usmr2 <- usmr2[!is.na(usmr2$catch), ]
# if marks or recaps are NA, I assume they were zero
usmr2$marks[is.na(usmr2$marks)] <- 0
usmr2$recaps[is.na(usmr2$recaps)] <- 0
summary(usmr2)
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/marked and recaptured DFO.xlsx")
camr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(camr) <- casefold(names(camr))
names(camr)[match(c("stream_code", "stream_name", "marked", "recaptured"), names(camr))] <- c("estr", "trib", "marks", "recaps")
camr$country <- "Canada"
camr$lake <- match(camr$lake_code, Lakeabbs)
camr$catch <- NA
camr2 <- camr[camr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
summary(camr2)
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/marked and recaptured DFO.xlsx")
camr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(camr) <- casefold(names(camr))
names(camr)[match(c("stream_code", "stream_name", "marked", "recaptured"), names(camr))] <- c("estr", "trib", "marks", "recaps")
camr$country <- "Canada"
camr$lake <- match(camr$lake_code, Lakeabbs)
camr$catch <- NA
camr2 <- camr[camr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
summary(camr2)
camr2[is.na(camr2$recaps), ]
head(camr)
head(camr)
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/1984-2014 US MarkRecap Summary.xlsx")
usmr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=2)
names(usmr) <- casefold(names(usmr))
names(usmr)[match(c("lk", "strm", "trib.name", "x.marked", "x.recap"), names(usmr))] <- c("lake", "estr", "trib", "marks", "recaps")
usmr$country <- "US"
usmr2 <- usmr[usmr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
usmr2$branch <- ""
# if the catch is NA, I assume it wasn't trapped
usmr2 <- usmr2[!is.na(usmr2$catch), ]
# if marks or recaps are NA, I assume they were zero
usmr2$marks[is.na(usmr2$marks)] <- 0
usmr2$recaps[is.na(usmr2$recaps)] <- 0
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/marked and recaptured DFO.xlsx")
camr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(camr) <- casefold(names(camr))
names(camr)[match(c("stream_code", "stream_name", "marked", "recaptured". "branch_lentic_name"), names(camr))] <- c("estr", "trib", "marks", "recaps", "branch")
camr$country <- "Canada"
camr$lake <- match(camr$lake_code, Lakeabbs)
camr$catch <- NA
camr2 <- camr[camr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "branch", "year", "catch", "marks", "recaps")]
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/1984-2014 US MarkRecap Summary.xlsx")
usmr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=2)
names(usmr) <- casefold(names(usmr))
names(usmr)[match(c("lk", "strm", "trib.name", "x.marked", "x.recap"), names(usmr))] <- c("lake", "estr", "trib", "marks", "recaps")
usmr$country <- "US"
usmr2 <- usmr[usmr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
usmr2$branch <- ""
# if the catch is NA, I assume it wasn't trapped
usmr2 <- usmr2[!is.na(usmr2$catch), ]
# if marks or recaps are NA, I assume they were zero
usmr2$marks[is.na(usmr2$marks)] <- 0
usmr2$recaps[is.na(usmr2$recaps)] <- 0
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/marked and recaptured DFO.xlsx")
camr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(camr) <- casefold(names(camr))
names(camr)[match(c("stream_code", "stream_name", "marked", "recaptured", "branch_lentic_name"), names(camr))] <- c("estr", "trib", "marks", "recaps", "branch")
camr$country <- "Canada"
camr$lake <- match(camr$lake_code, Lakeabbs)
camr$catch <- NA
camr2 <- camr[camr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "branch", "year", "catch", "marks", "recaps")]
head(camr2)
summary(camr2)
camr2[is.na(camr2$recaps), ]
camr2[is.na(camr2$recaps), -7]
camr2[camr2$estr==571, ]
camr2[camr2$estr==571, -7]
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/1984-2014 US MarkRecap Summary.xlsx")
usmr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=2)
names(usmr) <- casefold(names(usmr))
names(usmr)[match(c("lk", "strm", "trib.name", "x.marked", "x.recap"), names(usmr))] <- c("lake", "estr", "trib", "marks", "recaps")
usmr$country <- "US"
usmr2 <- usmr[usmr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
usmr2$branch <- ""
# if the catch is NA, I assume it wasn't trapped
usmr2 <- usmr2[!is.na(usmr2$catch), ]
# if marks or recaps are NA, I assume they were zero
usmr2$marks[is.na(usmr2$marks)] <- 0
usmr2$recaps[is.na(usmr2$recaps)] <- 0
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/marked and recaptured DFO.xlsx")
camr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(camr) <- casefold(names(camr))
names(camr)[match(c("stream_code", "stream_name", "marked", "recaptured", "branch_lentic_name"), names(camr))] <- c("estr", "trib", "marks", "recaps", "branch")
camr$country <- "Canada"
camr$lake <- match(camr$lake_code, Lakeabbs)
camr$catch <- NA
camr2 <- camr[camr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "branch", "year", "catch", "marks", "recaps")]
both <- rbind(usmr2, camr2)
# create list of streams for matching with spawner model data
both$catlast <- ifelse(both$year==lastyear, both$catch, 0)
look <- aggregate(both[, c("catlast", "marks", "recaps")], both[, c("trib", "country", "estr", "lake")], median, na.rm=TRUE)
look <- look[, c("lake", "country", "estr", "trib", "catlast", "marks", "recaps")]
write.csv(look, "C:/JVA/Lamprey/Adults/AdultIndex/2014/mr-streams.csv", row.names=FALSE)
selmr <- dat$year > (as.numeric(lastyear)-X+0.5) & !is.na(dat$trapcatch)
tssm2 <- sort(unique(dat$lscode[selmr]))
look2 <- dat[dat$year==lastyear & dat$lscode %in% tssm2, c("lake", "country", "estr", "strname", "trapcatch", "lscode", "strcode", "reach")]
write.csv(look2[order(look2$lake, look2$estr, look2$country, look2$strname), ], "C:/JVA/Lamprey/Adults/AdultIndex/2014/sm-streams.csv", row.names=FALSE)
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/1984-2014 US MarkRecap Summary.xlsx")
usmr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=2)
names(usmr) <- casefold(names(usmr))
names(usmr)[match(c("lk", "strm", "trib.name", "x.marked", "x.recap"), names(usmr))] <- c("lake", "estr", "trib", "marks", "recaps")
usmr$country <- "US"
usmr2 <- usmr[usmr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
usmr2$branch <- ""
# if the catch is NA, I assume it wasn't trapped
usmr2 <- usmr2[!is.na(usmr2$catch), ]
# if marks or recaps are NA, I assume they were zero
usmr2$marks[is.na(usmr2$marks)] <- 0
usmr2$recaps[is.na(usmr2$recaps)] <- 0
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/marked and recaptured DFO.xlsx")
camr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(camr) <- casefold(names(camr))
names(camr)[match(c("stream_code", "stream_name", "marked", "recaptured", "branch_lentic_name"), names(camr))] <- c("estr", "trib", "marks", "recaps", "branch")
camr$country <- "Canada"
camr$lake <- match(camr$lake_code, Lakeabbs)
camr$catch <- NA
camr2 <- camr[camr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "branch", "year", "catch", "marks", "recaps")]
both <- rbind(usmr2, camr2)
# create list of streams for matching with spawner model data
both$catlast <- ifelse(both$year==lastyear, both$catch, 0)
look <- aggregate(both[, c("catlast", "marks", "recaps")], both[, c("branch", "trib", "country", "estr", "lake")], median, na.rm=TRUE)
look <- look[, c("lake", "country", "estr", "trib", "branch", "catlast", "marks", "recaps")]
write.csv(look, "C:/JVA/Lamprey/Adults/AdultIndex/2014/mr-streams.csv", row.names=FALSE)
selmr <- dat$year > (as.numeric(lastyear)-X+0.5) & !is.na(dat$trapcatch)
tssm2 <- sort(unique(dat$lscode[selmr]))
look2 <- dat[dat$year==lastyear & dat$lscode %in% tssm2, c("lake", "country", "estr", "strname", "trapcatch", "lscode", "strcode", "reach")]
write.csv(look2[order(look2$lake, look2$estr, look2$country, look2$strname), ], "C:/JVA/Lamprey/Adults/AdultIndex/2014/sm-streams.csv", row.names=FALSE)
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/1984-2014 US MarkRecap Summary.xlsx")
usmr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=2)
names(usmr) <- casefold(names(usmr))
names(usmr)[match(c("lk", "strm", "trib.name", "x.marked", "x.recap"), names(usmr))] <- c("lake", "estr", "trib", "marks", "recaps")
usmr$country <- "US"
usmr2 <- usmr[usmr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
# if the catch is NA, I assume it wasn't trapped
usmr2 <- usmr2[!is.na(usmr2$catch), ]
# if marks or recaps are NA, I assume they were zero
usmr2$marks[is.na(usmr2$marks)] <- 0
usmr2$recaps[is.na(usmr2$recaps)] <- 0
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/marked and recaptured DFO.xlsx")
camr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(camr) <- casefold(names(camr))
names(camr)[match(c("stream_code", "stream_name", "marked", "recaptured", "branch_lentic_name"), names(camr))] <- c("estr", "trib", "marks", "recaps", "branch")
camr$country <- "Canada"
camr$lake <- match(camr$lake_code, Lakeabbs)
camr$catch <- NA
camr2 <- camr[camr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "branch", "year", "catch", "marks", "recaps")]
camr2$trib <- paste(camr2$trib, camr2$branch, sep=" - ")
both <- rbind(usmr2, camr2)
# create list of streams for matching with spawner model data
both$catlast <- ifelse(both$year==lastyear, both$catch, 0)
look <- aggregate(both[, c("catlast", "marks", "recaps")], both[, c("trib", "country", "estr", "lake")], median, na.rm=TRUE)
look <- look[, c("lake", "country", "estr", "trib", "catlast", "marks", "recaps")]
write.csv(look, "C:/JVA/Lamprey/Adults/AdultIndex/2014/mr-streams.csv", row.names=FALSE)
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/1984-2014 US MarkRecap Summary.xlsx")
usmr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=2)
names(usmr) <- casefold(names(usmr))
names(usmr)[match(c("lk", "strm", "trib.name", "x.marked", "x.recap"), names(usmr))] <- c("lake", "estr", "trib", "marks", "recaps")
usmr$country <- "US"
usmr2 <- usmr[usmr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
# if the catch is NA, I assume it wasn't trapped
usmr2 <- usmr2[!is.na(usmr2$catch), ]
# if marks or recaps are NA, I assume they were zero
usmr2$marks[is.na(usmr2$marks)] <- 0
usmr2$recaps[is.na(usmr2$recaps)] <- 0
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/marked and recaptured DFO.xlsx")
camr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(camr) <- casefold(names(camr))
names(camr)[match(c("stream_code", "stream_name", "marked", "recaptured", "branch_lentic_name"), names(camr))] <- c("estr", "trib", "marks", "recaps", "branch")
camr$country <- "Canada"
camr$lake <- match(camr$lake_code, Lakeabbs)
camr$catch <- NA
camr2 <- camr[camr$year > (as.numeric(lastyear)-X+0.5), ]
camr2$trib <- paste(camr2$trib, camr2$branch, sep=" - ")
camr2 <- camr2[, c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
both <- rbind(usmr2, camr2)
# create list of streams for matching with spawner model data
both$catlast <- ifelse(both$year==lastyear, both$catch, 0)
look <- aggregate(both[, c("catlast", "marks", "recaps")], both[, c("trib", "country", "estr", "lake")], median, na.rm=TRUE)
look <- look[, c("lake", "country", "estr", "trib", "catlast", "marks", "recaps")]
write.csv(look, "C:/JVA/Lamprey/Adults/AdultIndex/2014/mr-streams.csv", row.names=FALSE)
# bring in STREAM KEY to connect mark/recap data to spawner model data
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/MatchStreams.xlsx")
key <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, startCol=12)
head(key)
# bring in STREAM KEY to connect mark/recap data to spawner model data
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/MatchStreams.xlsx")
key <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, startCol=12, endCol=16)
head(key)
# use this key to assign lscode (lake stream code) numbers to mark/recap data
markrecap <- merge(both, key, by="lscode", all=x)
head(both)
head(
# use this key to assign lscode (lake stream code) numbers to mark/recap data
markrecap <- merge(both, key, all=x)
# use this key to assign lscode (lake stream code) numbers to mark/recap data
markrecap <- merge(both, key, all=x)
# use this key to assign lscode (lake stream code) numbers to mark/recap data
markrecap <- merge(both, key, all=x)
# use this key to assign lscode (lake stream code) numbers to mark/recap data
markrecap <- merge(both, key, all.x=TRUE)
dim(both)
dim(markrecap)
head(markrecap)
dput(names(markrecap))
# use this key to assign lscode (lake stream code) numbers to mark/recap data
markrecap <- merge(both[, c("lake", "country", "estr", "trib", "year", "marks", "recaps")], key, all.x=TRUE)
head(markrecap)
# use this key to assign lscode (lake stream code) numbers to mark/recap data
both2 <- merge(both, key, all.x=TRUE)
# sum up the marks and recaps by lscode
both3 <- aggregate(both2[, c("marks", "recaps")], both2[, "lscode"], sum)
# sum up the marks and recaps by lscode
both3 <- aggregate(both2[, c("marks", "recaps")], list(both2$lscode), sum)
head(both3)
both3 <- aggregate(both2[, c("marks", "recaps")], list(lscode=both2$lscode), sum)
head(both3)
# sum up the marks and recaps by lscode
both3 <- aggregate(both2[, c("marks", "recaps")], both2[, c("year", "lscode")], sum)
head(both3)
mrkrec <- rbind(usmr2, camr2)
# create list of streams for matching with spawner model data
mrkrec$catlast <- ifelse(mrkrec$year==lastyear, mrkrec$catch, 0)
look <- aggregate(mrkrec[, c("catlast", "marks", "recaps")], mrkrec[, c("trib", "country", "estr", "lake")], median, na.rm=TRUE)
look <- look[, c("lake", "country", "estr", "trib", "catlast", "marks", "recaps")]
write.csv(look, "C:/JVA/Lamprey/Adults/AdultIndex/2014/mr-streams.csv", row.names=FALSE)
selmr <- dat$year > (as.numeric(lastyear)-X+0.5) & !is.na(dat$trapcatch)
tssm2 <- sort(unique(dat$lscode[selmr]))
look2 <- dat[dat$year==lastyear & dat$lscode %in% tssm2, c("lake", "country", "estr", "strname", "trapcatch", "lscode", "strcode", "reach")]
write.csv(look2[order(look2$lake, look2$estr, look2$country, look2$strname), ], "C:/JVA/Lamprey/Adults/AdultIndex/2014/sm-streams.csv", row.names=FALSE)
# bring in STREAM KEY to connect mark/recap data to spawner model data
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/MatchStreams.xlsx")
key <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, startCol=12, endCol=16)
# use this key to assign lscode (lake stream code) numbers to mark/recap data
mrkrec2 <- merge(mrkrec, key, all.x=TRUE)
# sum up the marks and recaps by lscode
mrkrec3 <- aggregate(mrkrec2[, c("marks", "recaps")], mrkrec2[, c("year", "lscode")], sum)
head(mrkrec3)
dim(mrkrec2)
dim(mrkrec3)
summary(mrkrec3)
# bring in mark/recap data from FWS and DFO
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/1984-2014 US MarkRecap Summary.xlsx")
usmr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=2)
names(usmr) <- casefold(names(usmr))
names(usmr)[match(c("lk", "strm", "trib.name", "x.marked", "x.recap"), names(usmr))] <- c("lake", "estr", "trib", "marks", "recaps")
usmr$country <- "US"
usmr2 <- usmr[usmr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
# if the catch is NA, I assume it wasn't trapped
usmr2 <- usmr2[!is.na(usmr2$catch), ]
# if marks or recaps are NA, I assume they were zero
usmr2$marks[is.na(usmr2$marks)] <- 0
usmr2$recaps[is.na(usmr2$recaps)] <- 0
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/marked and recaptured DFO.xlsx")
camr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(camr) <- casefold(names(camr))
names(camr)[match(c("stream_code", "stream_name", "marked", "recaptured", "branch_lentic_name"), names(camr))] <- c("estr", "trib", "marks", "recaps", "branch")
camr$country <- "Canada"
camr$lake <- match(camr$lake_code, Lakeabbs)
camr$catch <- NA
camr2 <- camr[camr$year > (as.numeric(lastyear)-X+0.5), ]
camr2$trib <- paste(camr2$trib, camr2$branch, sep=" - ")
camr2 <- camr2[, c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
# if marks is NA, I assume it wasn't trapped
camr2 <- camr2[!is.na(camr2$marks), ]
# if recaps is NA, I assume it was zero
camr2$recaps[is.na(camr2$recaps)] <- 0
mrkrec <- rbind(usmr2, camr2)
# create list of streams for matching with spawner model data
mrkrec$catlast <- ifelse(mrkrec$year==lastyear, mrkrec$catch, 0)
look <- aggregate(mrkrec[, c("catlast", "marks", "recaps")], mrkrec[, c("trib", "country", "estr", "lake")], median, na.rm=TRUE)
look <- look[, c("lake", "country", "estr", "trib", "catlast", "marks", "recaps")]
write.csv(look, "C:/JVA/Lamprey/Adults/AdultIndex/2014/mr-streams.csv", row.names=FALSE)
selmr <- dat$year > (as.numeric(lastyear)-X+0.5) & !is.na(dat$trapcatch)
tssm2 <- sort(unique(dat$lscode[selmr]))
look2 <- dat[dat$year==lastyear & dat$lscode %in% tssm2, c("lake", "country", "estr", "strname", "trapcatch", "lscode", "strcode", "reach")]
write.csv(look2[order(look2$lake, look2$estr, look2$country, look2$strname), ], "C:/JVA/Lamprey/Adults/AdultIndex/2014/sm-streams.csv", row.names=FALSE)
# bring in STREAM KEY to connect mark/recap data to spawner model data
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/MatchStreams.xlsx")
key <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, startCol=12, endCol=16)
# use this key to assign lscode (lake stream code) numbers to mark/recap data
mrkrec2 <- merge(mrkrec, key, all.x=TRUE)
# sum up the marks and recaps by lscode
mrkrec3 <- aggregate(mrkrec2[, c("marks", "recaps")], mrkrec2[, c("year", "lscode")], sum)
# then merge the mark/recap data with the spawner model data, by lscode
summary(mrkrec3)
cleanup()
search()
### summary table for trapped streams in spawner model, based on last X years of data ###
X <- 20
# bring in FWS mark/recap data
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/1984-2014 US MarkRecap Summary.xlsx")
usmr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=2)
names(usmr) <- casefold(names(usmr))
names(usmr)[match(c("lk", "strm", "trib.name", "x.marked", "x.recap"), names(usmr))] <- c("lake", "estr", "trib", "marks", "recaps")
usmr$country <- "US"
usmr2 <- usmr[usmr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
# these assumptions were okayed by Jess Barber 24 Sep 2014
# if the catch is NA, I assume it wasn't trapped
usmr2 <- usmr2[!is.na(usmr2$catch), ]
# if marks or recaps are NA, I assume they were zero
usmr2$marks[is.na(usmr2$marks)] <- 0
usmr2$recaps[is.na(usmr2$recaps)] <- 0
# bring in DFO mark/recap data
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/marked and recaptured DFO.xlsx")
camr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(camr) <- casefold(names(camr))
names(camr)[match(c("stream_code", "stream_name", "marked", "recaptured", "branch_lentic_name"), names(camr))] <- c("estr", "trib", "marks", "recaps", "branch")
camr$country <- "Canada"
camr$lake <- match(camr$lake_code, Lakeabbs)
camr$catch <- NA
camr2 <- camr[camr$year > (as.numeric(lastyear)-X+0.5), ]
camr2$trib <- paste(camr2$trib, camr2$branch, sep=" - ")
camr2 <- camr2[, c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
# these assumptions were okayed by Gale Bravener 25 Sep 2014
# if marks or recaps are NA, I assume they were zero
camr2$marks[is.na(camr2$marks)] <- 0
camr2$recaps[is.na(camr2$recaps)] <- 0
# bring in stream-specific data
dat <- read.csv("C:/JVA/Lamprey/Adults/SpawnDisModel/2014/StreamPEdynamicALLCOLS.csv", as.is=T)
dat$ls <- dat$lscode
lastyear <- max(dat$year)
### summary table for trapped streams in spawner model, based on last X years of data ###
X <- 20
# bring in FWS mark/recap data
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/1984-2014 US MarkRecap Summary.xlsx")
usmr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=2)
names(usmr) <- casefold(names(usmr))
names(usmr)[match(c("lk", "strm", "trib.name", "x.marked", "x.recap"), names(usmr))] <- c("lake", "estr", "trib", "marks", "recaps")
usmr$country <- "US"
usmr2 <- usmr[usmr$year > (as.numeric(lastyear)-X+0.5), c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
# these assumptions were okayed by Jess Barber 24 Sep 2014
# if the catch is NA, I assume it wasn't trapped
usmr2 <- usmr2[!is.na(usmr2$catch), ]
# if marks or recaps are NA, I assume they were zero
usmr2$marks[is.na(usmr2$marks)] <- 0
usmr2$recaps[is.na(usmr2$recaps)] <- 0
# bring in DFO mark/recap data
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/marked and recaptured DFO.xlsx")
camr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(camr) <- casefold(names(camr))
names(camr)[match(c("stream_code", "stream_name", "marked", "recaptured", "branch_lentic_name"), names(camr))] <- c("estr", "trib", "marks", "recaps", "branch")
camr$country <- "Canada"
camr$lake <- match(camr$lake_code, Lakeabbs)
camr$catch <- NA
camr2 <- camr[camr$year > (as.numeric(lastyear)-X+0.5), ]
camr2$trib <- paste(camr2$trib, camr2$branch, sep=" - ")
camr2 <- camr2[, c("lake", "country", "estr", "trib", "year", "catch", "marks", "recaps")]
# these assumptions were okayed by Gale Bravener 25 Sep 2014
# if marks or recaps are NA, I assume they were zero
camr2$marks[is.na(camr2$marks)] <- 0
camr2$recaps[is.na(camr2$recaps)] <- 0
# create two lists of streams for matching with spawner model data
mrkrec$catlast <- ifelse(mrkrec$year==lastyear, mrkrec$catch, 0)
look <- aggregate(mrkrec[, c("catlast", "marks", "recaps")], mrkrec[, c("trib", "country", "estr", "lake")], median, na.rm=TRUE)
look <- look[, c("lake", "country", "estr", "trib", "catlast", "marks", "recaps")]
write.csv(look, "C:/JVA/Lamprey/Adults/AdultIndex/2014/mr-streams.csv", row.names=FALSE)
selmr <- dat$year > (as.numeric(lastyear)-X+0.5) & !is.na(dat$trapcatch)
tssm2 <- sort(unique(dat$lscode[selmr]))
look2 <- dat[dat$year==lastyear & dat$lscode %in% tssm2, c("lake", "country", "estr", "strname", "trapcatch", "lscode", "strcode", "reach")]
write.csv(look2[order(look2$lake, look2$estr, look2$country, look2$strname), ], "C:/JVA/Lamprey/Adults/AdultIndex/2014/sm-streams.csv", row.names=FALSE)
# then the file MatchStreams.xlsx is manually edited to match up the streams
# bring in STREAM KEY to connect mark/recap data to spawner model data
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/MatchStreams.xlsx")
key <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, startCol=12, endCol=16)
# use this key to assign lscode (lake stream code) numbers to mark/recap data
mrkrec2 <- merge(mrkrec, key, all.x=TRUE)
# sum up the marks and recaps by lscode
mrkrec3 <- aggregate(mrkrec2[, c("marks", "recaps")], mrkrec2[, c("year", "lscode")], sum)
# then merge the mark/recap data with the spawner model data, by lscode
.Last
history
history(max.show=Inf)
# combine FWS and DFO mark/recap data
mrkrec <- rbind(usmr2, camr2)
# create two lists of streams for matching with spawner model data
mrkrec$catlast <- ifelse(mrkrec$year==lastyear, mrkrec$catch, 0)
look <- aggregate(mrkrec[, c("catlast", "marks", "recaps")], mrkrec[, c("trib", "country", "estr", "lake")], median, na.rm=TRUE)
look <- look[, c("lake", "country", "estr", "trib", "catlast", "marks", "recaps")]
write.csv(look, "C:/JVA/Lamprey/Adults/AdultIndex/2014/mr-streams.csv", row.names=FALSE)
selmr <- dat$year > (as.numeric(lastyear)-X+0.5) & !is.na(dat$trapcatch)
tssm2 <- sort(unique(dat$lscode[selmr]))
look2 <- dat[dat$year==lastyear & dat$lscode %in% tssm2, c("lake", "country", "estr", "strname", "trapcatch", "lscode", "strcode", "reach")]
write.csv(look2[order(look2$lake, look2$estr, look2$country, look2$strname), ], "C:/JVA/Lamprey/Adults/AdultIndex/2014/sm-streams.csv", row.names=FALSE)
# then the file MatchStreams.xlsx is manually edited to match up the streams
# bring in STREAM KEY to connect mark/recap data to spawner model data
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/AdultIndex/2014/MatchStreams.xlsx")
key <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, startCol=12, endCol=16)
# use this key to assign lscode (lake stream code) numbers to mark/recap data
mrkrec2 <- merge(mrkrec, key, all.x=TRUE)
# sum up the marks and recaps by lscode
mrkrec3 <- aggregate(mrkrec2[, c("marks", "recaps")], mrkrec2[, c("year", "lscode")], sum)
# then merge the mark/recap data with the spawner model data, by lscode
.Last <- function()
    if(interactive()) try(savehistory("~/.Rhistory"))
cleanup()
q()
.Last <- function()
    if(interactive()) try(savehistory())
q()
x <- 1
y <- 2
cleanup()
q()
?.Last
?history
date
date()
cat("\nSession ended at .................... ", date(), "\n")
cat("\nSession ended at ....................", date(), "\n")
options("R_HISTSIZE")
Sys.getenv("R_TEST")
Sys.getenv("R_HISTSIZE")
Sys.setenv(R_HISTSIZE = 999)
Sys.getenv("R_HISTSIZE")
jvaLast <- function(file=".Rhistory", nlines=10000) {
Sys.setenv(R_HISTSIZE = nlines)
cat("\nSession ended at ...............................", date(), "\n")
if(interactive()) try(savehistory(file))
}
jvaLast()
Sys.getenv("R_HISTSIZE")
.Last <- jvaLast
x <- 33333
cleanup()
q()
library(devtools)
library(roxygen2)
setwd("C:/JVA/GitHub")
install("jvamisc")
setwd("C:/JVA/R/Working Directory")
library(jvamisc)
?jvaLast
#' Shutdown
#'
#' One function with all the commands I typically want run at the end of an R session.
#' @param file Character scalar, file in which to save the commands history relative to current working directory, default ".Rhistory".
#' @param nlines Integer scalar, number of lines that saved to commands history, default 10,000.
#' @export
#' @seealso\code{\link{savehistory}}, \code{\link{Sys.setenv}}.
jvaLast <- function(file=".Rhistory", nlines=10000) {
if(interactive()) {
Sys.setenv(R_HISTSIZE = nlines)
cat("\nSession ended at ...............................", date(), "\n")
try(savehistory(file))
}
}
jvaLast()
library(devtools)
setwd("C:/JVA/GitHub/jvamisc")
document()
q()
