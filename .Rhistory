dat[obs %in% obs[duplicated(obs)], ]
search()
detach()
dat <- read.csv("C:/JVA/Consult/Kraus/Gill net walleye/GLIMMIX_alldata_commonmeshes (1).txt", sep="",
header=FALSE, col.names=c("year", "type", "mesh", "we", "holes", "catch", "secchi", "site", "serial"))
# site is a "block" effect representing the "pair" ... both location and year information
# mesh is a covariate
# type is a factor
dat <- dat[order(dat$year, dat$site, dat$type, dat$mesh), ]
attach(dat)
obs <- interaction(year, site, type, mesh)
dat[obs %in% obs[duplicated(obs)], ]
head(dat)
dat[obs %in% obs[duplicated(obs)], c("year", "site", "type", "mesh", "serial", "secchi", "catch", "holes", "we")]
table(site, year)
a <- table(site, year)
apply(a>0, 1, sum)
sort(apply(a>0, 1, sum))
dat$accum <- 100*catch/holes
dat$water <- cut(secchi, c(0, 1, 2, 4), right=FALSE, labels=FALSE)
dat$typef <- as.factor(type)
dat$sitef <- as.factor(site)
fit <- gam(we ~ typef + sitef + s(mesh, k=5) + s(secchi, k=5), data=dat)
summary(fit)
plot(fit, all.terms=TRUE)
fit <- glm(we ~ typef + sitef + poly(mesh, 2) + secchi, data=dat)
summary(fit)
fit <- aov(we ~ typef + sitef + poly(mesh, 2) + secchi, data=dat)
summary(fit)
fit <- aov(we ~ sitef + poly(mesh, 2) + secchi*typef, data=dat)
summary(fit)
fit <- aov(we ~ sitef + poly(mesh, 2) + secchi + typef, data=dat)
summary(fit)
plot(fit)
summary(we)
fit <- aov(sqrt(we) ~ sitef + poly(mesh, 2) + secchi + typef, data=dat)
summary(fit)
plot(fit)
plot(predict(fit), resid(fit))
windows()
par(mfrow=c(3, 2))
plot(predict(fit), resid(fit))
plot(sitef, resid(fit))
plot(mesh, resid(fit))
plot(secchi, resid(fit))
plot(typef, resid(fit))
detach(dat)
attach(dat)
windows()
par(mfrow=c(3, 2))
plot(predict(fit), resid(fit))
plot(sitef, resid(fit))
plot(mesh, resid(fit))
plot(secchi, resid(fit))
plot(typef, resid(fit))
windows()
par(mfrow=c(3, 2), mar=c(4, 4, 1, 1))
plot(predict(fit), predict(fit))
plot(sitef, predict(fit))
plot(mesh, predict(fit))
plot(secchi, predict(fit))
plot(typef, predict(fit))
par(mfrow=c(3, 2), mar=c(4, 4, 1, 1))
plot(predict(fit), predict(fit))
plot(sitef, predict(fit))
plot(jitter(mesh), predict(fit))
plot(jitter(secchi), predict(fit))
plot(typef, predict(fit))
par(mfrow=c(2, 3), mar=c(4, 4, 1, 1))
plot(sqrt(we), predict(fit))
plot(sitef, predict(fit))
plot(jitter(mesh), predict(fit))
plot(jitter(secchi), predict(fit))
plot(typef, predict(fit))
par(mfrow=c(2, 3), mar=c(4, 4, 1, 1))
plot(sqrt(we), predict(fit))
lines(loess.smooth(sqrt(we), predict(fit)))
plot(sitef, predict(fit))
plot(jitter(mesh), predict(fit))
lines(loess.smooth(mesh, predict(fit)))
plot(jitter(secchi), predict(fit))
lines(loess.smooth(secchi, predict(fit)))
plot(typef, predict(fit))
par(mfrow=c(2, 3), mar=c(4, 4, 1, 1))
plot(sqrt(we), predict(fit))
lines(loess.smooth(sqrt(we), predict(fit)), lwd=2, col="red")
plot(sitef, predict(fit))
plot(jitter(mesh), predict(fit))
lines(loess.smooth(mesh, predict(fit)), lwd=2, col="red")
plot(jitter(secchi), predict(fit))
lines(loess.smooth(secchi, predict(fit)), lwd=2, col="red")
plot(typef, predict(fit))
fit <- aov(sqrt(we) ~ sitef + poly(mesh, 2) + poly(secchi, 2) + typef, data=dat)
summary(fit)
windows()
par(mfrow=c(2, 3), mar=c(4, 4, 1, 1))
plot(predict(fit), resid(fit))
plot(sitef, resid(fit))
plot(mesh, resid(fit))
plot(secchi, resid(fit))
plot(typef, resid(fit))
graphics.off()
windows()
par(mfrow=c(2, 3), mar=c(4, 4, 1, 1))
plot(predict(fit), resid(fit))
abline(h=0, lwd=2, col="red")
plot(sitef, resid(fit))
abline(h=0, lwd=2, col="red")
plot(jitter(mesh), resid(fit))
abline(h=0, lwd=2, col="red")
plot(jitter(secchi), resid(fit))
abline(h=0, lwd=2, col="red")
plot(typef, resid(fit))
abline(h=0, lwd=2, col="red")
windows()
par(mfrow=c(2, 3), mar=c(4, 4, 1, 1))
plot(sqrt(we), predict(fit))
lines(loess.smooth(sqrt(we), predict(fit)), lwd=2, col="red")
plot(sitef, predict(fit))
plot(jitter(mesh), predict(fit))
lines(loess.smooth(mesh, predict(fit)), lwd=2, col="red")
plot(jitter(secchi), predict(fit))
lines(loess.smooth(secchi, predict(fit)), lwd=2, col="red")
plot(typef, predict(fit))
head(dat)
windows()
par(mfrow=c(2, 3), mar=c(4, 4, 1, 1))
plot(as.factor(year), resid(fit))
plot(sqrt(catch), resid(fit))
plot(serial, resid(fit))
plot(accum, resid(fit))
par(mfrow=c(2, 2), mar=c(4, 4, 1, 1))
plot(as.factor(year), resid(fit))
abline(h=0, lwd=2, col="red")
plot(sqrt(catch), resid(fit))
abline(h=0, lwd=2, col="red")
plot(sqrt(accum), resid(fit))
abline(h=0, lwd=2, col="red")
par(mfrow=c(2, 2), mar=c(4, 4, 1, 1))
plot(as.factor(year), resid(fit))
abline(h=0, lwd=2, col="red")
plot(sqrt(catch), resid(fit))
lines(loess.smooth(sqrt(catch), resid(fit)), lwd=2, col="cyan")
abline(h=0, lwd=2, col="red")
plot(sqrt(accum), resid(fit))
lines(loess.smooth(sqrt(accum), resid(fit)), lwd=2, col="cyan")
abline(h=0, lwd=2, col="red")
windows()
par(mfrow=c(2, 3), mar=c(4, 4, 1, 1))
plot(predict(fit), resid(fit))
abline(h=0, lwd=2, col="red")
plot(sqrt(we), resid(fit))
lines(loess.smooth(sqrt(we), resid(fit)), lwd=2, col="cyan")
abline(h=0, lwd=2, col="red")
plot(sitef, resid(fit))
abline(h=0, lwd=2, col="red")
plot(jitter(mesh), resid(fit))
abline(h=0, lwd=2, col="red")
plot(jitter(secchi), resid(fit))
abline(h=0, lwd=2, col="red")
plot(typef, resid(fit))
abline(h=0, lwd=2, col="red")
q()
# C:\JVA\Lamprey\Adults\AdultIndex\2014\AdultIndex v2.r
{ # functions
# the following seven plot.table related function are from the Systmatic Investor Toolbox
# load Systematic Investor Toolbox
# require(RCurl)
# sit = getURLContent("https://github.com/systematicinvestor/SIT/raw/master/sit.gz", binary=TRUE, followlocation=TRUE, ssl.verifypeer=FALSE)
# con = gzcon(rawConnection(sit, "rb"))
# source(con)
# close(con)
draw.cell <- function(title, r, c, text.cex = 1, bg.col = 'white', frame.cell = T) {
if(!frame.cell) bcol = bg.col else bcol = 'black'
rect((2*(c - 1) + .5), -(r - .5), (2*c + .5), -(r + .5), col = bg.col, border = bcol)
if( c == 1) {
text((2*(c - 1) + .5), -r, title, adj = 0, cex = text.cex)
} else if( r == 1 ) {
text((2*(c - 1) + .5), -r, title, adj = 0, cex = text.cex)
} else {
text((2*c + .5), -r, title, adj = 1, cex = text.cex)
}
}
plot.table.helper.auto.adjust.cex <- function(temp.table, keep.all.same.cex = FALSE) {
nr = nrow(temp.table)
nc = ncol(temp.table)
all.xrange = diff(par()$usr[1:2]) / nc
xrange = matrix( strwidth(paste('  ', temp.table), units = 'user', cex = 1), nc = nc)
all.yrange = diff(par()$usr[3:4]) / nr
yrange = matrix( 5/3 * strheight(temp.table, units = 'user', cex = 1), nc = nc)
plot.matrix.cex = pmin( round(all.yrange / yrange, 2) , round(all.xrange / xrange, 2) )
header.col.cex = min(plot.matrix.cex[1,-1])
header.row.cex = min(plot.matrix.cex[-1,1])
title.cex = plot.matrix.cex[1, 1]
data.cex = min(plot.matrix.cex[-1, -1])
if ( keep.all.same.cex ) {
plot.matrix.cex[] = min(plot.matrix.cex)
} else {
plot.matrix.cex[1,-1] = min(c(header.col.cex, header.row.cex))
plot.matrix.cex[-1,1] = min(c(header.col.cex, header.row.cex))
plot.matrix.cex[-1,-1]= min(c(header.col.cex, header.row.cex, data.cex))
plot.matrix.cex[1,1]= min(c(header.col.cex, header.row.cex, data.cex, title.cex))
plot.matrix.cex[1,-1] = min(c(header.col.cex))
plot.matrix.cex[-1,1] = min(c(header.row.cex))
plot.matrix.cex[-1,-1]= min(c(data.cex))
plot.matrix.cex[1,1]= min(c(title.cex))
}
return(plot.matrix.cex)
}
make.table <- function(nr, nc) {
savepar = par(mar = rep(1, 4))
plot(c(0.5, nc*2 + 0.5), c(-0.5, -(nr + 0.5)), xaxs = 'i', yaxs = 'i',
type = 'n', xlab = '', ylab = '', axes = FALSE)
savepar
}
trim <- function(s) {
s = sub(pattern = '^ +', replacement = '', x = s)
s = sub(pattern = ' +$', replacement = '', x = s)
return(s)
}
plot.table.param <- function(plot.matrix, smain = '', plot.matrix.cex, plot.matrix_bg.col, frame.cell = T, keep.all.same.cex = FALSE) {
n = nrow(plot.matrix)
pages = unique(c(seq(0, n, by = 120), n))
for(p in 1:(length(pages)-1)) {
rindex = (pages[p]+1) : pages[p+1]
temp.table = matrix('', nr = length(rindex)+1, nc = ncol(plot.matrix)+1)
temp.table[-1, -1] = plot.matrix[rindex,]
temp.table[1, -1] = colnames(plot.matrix)
temp.table[-1, 1] = rownames(plot.matrix)[rindex]
temp.table[1, 1] = smain
nr = nrow(temp.table)
nc = ncol(temp.table)
par(mar = c(0, 0, 0, 0), cex = 0.5)
oldpar = make.table(nr, nc)
text.cex = plot.matrix.cex[c(1, 1 + rindex), ]
text.cex = plot.table.helper.auto.adjust.cex(temp.table, keep.all.same.cex)
bg.col = plot.matrix_bg.col[c(1, 1 + rindex), ]
for(r in 1:nr) {
for(c in 1:nc) {
draw.cell( paste('', temp.table[r,c], '', sep=' '), r, c,
text.cex = text.cex[r,c], bg.col = bg.col[r,c], frame.cell = frame.cell)
}}
}
}
plot.table <- function(plot.matrix, smain="", text.cex=1, frame.cell=TRUE, highlight=FALSE, colorbar=FALSE, keep_all.same.cex=FALSE) {
if( is.null(rownames(plot.matrix)) & is.null(colnames(plot.matrix)) ) {
temp.matrix = plot.matrix
if( nrow(temp.matrix) == 1 ) temp.matrix = rbind("", temp.matrix)
if( ncol(temp.matrix) == 1 ) temp.matrix = cbind("", temp.matrix)
plot.matrix = temp.matrix[-1, -1, drop = FALSE]
colnames(plot.matrix) = temp.matrix[1, -1]
rownames(plot.matrix) = temp.matrix[-1, 1]
smain = temp.matrix[1, 1]
} else if( is.null(rownames(plot.matrix)) ) {
temp.matrix = plot.matrix
if( ncol(plot.matrix) == 1 ) temp.matrix = cbind("", temp.matrix)
plot.matrix = temp.matrix[, -1, drop = FALSE]
colnames(plot.matrix) = colnames(temp.matrix)[-1]
rownames(plot.matrix) = temp.matrix[,1]
smain = colnames(temp.matrix)[1]
} else if( is.null(colnames(plot.matrix)) ) {
temp.matrix = plot.matrix
if( nrow(temp.matrix) == 1 ) temp.matrix = rbind("", temp.matrix)
plot.matrix = temp.matrix[-1, , drop = FALSE]
rownames(plot.matrix) = rownames(temp.matrix)[-1]
colnames(plot.matrix) = temp.matrix[1, ]
smain = rownames(temp.matrix)[1]
}
plot.matrix[which(trim(plot.matrix) == "NA")] = ""
plot.matrix[which(trim(plot.matrix) == "NA%")] = ""
plot.matrix[which(is.na(plot.matrix))] = ""
nr = nrow(plot.matrix) + 1
nc = ncol(plot.matrix) + 1
is_highlight = TRUE
if(is.logical(highlight)) {
is_highlight = highlight
if(highlight) highlight = plot.table.helper.color(plot.matrix)
}
if(!is_highlight) {
plot.matrix.cex = matrix(1, nr = nr, nc = nc )
plot.matrix_bg.col = matrix("white", nr = nr, nc = nc )
plot.matrix_bg.col[seq(1, nr, 2), ] = "yellow"
plot.matrix_bg.col[1,] = "gray";
plot.table.param( plot.matrix, smain, plot.matrix.cex, plot.matrix_bg.col,
frame.cell, keep_all.same.cex)
} else {
plot.matrix.cex = matrix(1, nr = nr, nc = nc )
plot.matrix_bg.col = matrix("white", nr = nr, nc = nc )
plot.matrix_bg.col[1,] = "gray"
plot.matrix_bg.col[2:nr,2:nc] = highlight
plot.table.param(plot.matrix, smain, plot.matrix.cex, plot.matrix_bg.col,
frame.cell, keep_all.same.cex)
}
}
plot.table.helper.color <- function (temp) {
temp = matrix(as.double(gsub("[%,$]", "", temp)), nrow(temp), ncol(temp))
highlight = as.vector(temp)
cols = rep(NA, length(highlight))
ncols = length(highlight[!is.na(highlight)])
cols[1:ncols] = rev(rainbow(ncols, start=0.5/6, end=3.5/6))
o = sort.list(highlight, na.last = TRUE, decreasing = FALSE)
o1 = sort.list(o, na.last = TRUE, decreasing = FALSE)
highlight = matrix(cols[o1], nrow = nrow(temp))
highlight[is.na(temp)] = NA
return(highlight)
}
ModelEst <- function(fit, df) {
# derive regression estimates from log(y) fit
mse <- rev(as.matrix(summary(fit)[[1]])[, "Mean Sq"])[1]
plpe <- predict(fit, newdata=df, se.fit=T)
m <- plpe$fit
v <- plpe$se.fit^2 + mse
exp(m + v/2)
}
myrange <- function(x) {
if(all(is.na(x))) r <- c(NA, NA) else r <- range(x, na.rm=TRUE)
return(r)
}
jackindex <- function(m) {
# m is a matrix of numbers (stream PEs) with observations (years) as rows and individuals (streams) as columns
if(any(is.na(m))) stop("The input matrix may not have any missing values.")
# calculate the index as the sum of the columns for each row
rowsum <- apply(m, 1, sum)
# calculate the mean of the index
avgind <- mean(rowsum)
# recalculate the index, leaving out one individual at a time
loo <- apply(m, 2, function(column) (rowsum - column))
# rescale the loo index, relative to mean
looscaled <- apply(loo, 2, function(x) x/mean(x))
# convert to original scale
looscaled2 <- looscaled * avgind
# calculate range
ranges <- t(apply(looscaled2, 1, range))
cbind(index=rowsum, lo=ranges[, 1], hi=ranges[, 2])
}
# selstreams <- index.streams[[1]]
# allstreamdf <- dat
# alllakedf <- lk
# min.nmr=2
# show=FALSE
index.est <- function(selstreams, allstreamdf, alllakedf, min.nmr=2, show=FALSE) {
# INDEX OF ADULT SEA LAMPREY ABUNDANCE
### INPUTS
# selstreams = vector of stream ids, e.g., 1.064 (lake + strcode/1000)
# allstreamdf = data frame of mark-recap estimates for all streams, with vars:  year lake ls Emr CVmr
# alllakedf = data frame of lake-wide PEs from Mullett et al. (2003) spawner model with vars:  lake year PE
# min.nmr = minimum number of mark-recapture estimates needed in a year to generate an index, default 2
# show = print out a brief summary of the results, default FALSE
### OUTPUTS
# indfit = simple model used to predict missing mark-recap estimates
# streamdf = original allstreamdf, subsetted by selstreams, with estimates for missing mark-recaps
# indxdf = original alllakedf, subsetted by lake, with annual index, including raw (indxraw), kept based on min.nmr (indxkeep, indxkeep.lo, indxkeep.hi)
# scaleup = conversion factor used to scale up annual index to spawner model PE
streamdf <- allstreamdf[allstreamdf$ls %in% selstreams, ]
# error checks
check1 <- var(streamdf$lake)
if(is.na(check1) | is.null(check1)) stop("Either no streams selected or critical data missing.") else if(check1 > 0) stop("Selected streams should be only from ONE lake.")
if(any(is.na(match(c("year", "lake", "ls", "Emr", "CVmr"), names(allstreamdf))))) stop("allstreamdf must include these variables: year lake ls Emr CVmr.")
if(any(is.na(match(c("year", "lake", "PE"), names(alllakedf))))) stop("alllakedf must include these variables: lake year PE.")
# fill in missing mark-recap data
indfit <- aov(log(Emr) ~ as.factor(ls) + as.factor(year), data=streamdf, weights=1/CVmr^2)
# figure out estimable years (those with at least 1 m-r estimate)
n.mr <- tapply(!is.na(streamdf$Emr), streamdf$year, sum)
eyrs <- as.numeric(names(n.mr)[n.mr > 0.5])
estimable <- streamdf$year %in% eyrs
streamdf$Pmr <- NA
streamdf$Pmr[estimable] <- ModelEst(fit=indfit, df=streamdf[estimable, ])
streamdf$COMBmr <- ifelse(is.na(streamdf$Emr), streamdf$Pmr, streamdf$Emr)
# annual index (sum across streams)
indxdf <- aggregate(COMBmr ~ year + lake, streamdf, sum, na.rm=TRUE, na.action=na.pass)
names(indxdf)[names(indxdf)=="COMBmr"] <- "indxraw"
indxdf$indxraw[indxdf$indxraw==0] <- NA
# only keep lake-wide index for years with at least min.nmr mark-recap estimates
indxdf$n.mr <- n.mr
indxdf$indxkeep <- ifelse(indxdf$n.mr > (min.nmr - 0.5), indxdf$indxraw, NA)
indxdf$indxkeep.lo <- NA
indxdf$indxkeep.hi <- NA
# matrix of stream estimates (rows = years, columns = index streams)
streamests <- with(streamdf, tapply(COMBmr, list(year, ls), mean))
# selection of only those streams with a keepable index
selkeep <- !is.na(indxdf$indxkeep)
jack <- jackindex(streamests[selkeep, ])
indxdf$indxkeep.lo[selkeep] <- jack[, "lo"]
indxdf$indxkeep.hi[selkeep] <- jack[, "hi"]
# scale up the index to the spawner model PE
lk1 <- lk[lk$lake == streamdf$lake[1], ]
indxdf2 <- merge(lk1, indxdf, all=TRUE)
scaleup <- median(indxdf2$PE / indxdf2$indxkeep, na.rm=TRUE)
if(show) {
cat("\nindfit\n")
print(summary(indfit))
cat("\nstreamdf\n")
print(tail(streamdf[, c("lake", "year", "ls", "Emr", "CVmr", "Pmr", "COMBmr")]))
cat("\nscaleup\n")
print(scaleup)
cat("\nindxdf\n")
print(tail(indxdf[, c("lake", "year", "n.mr", "indxraw", "indxkeep", "indxkeep.lo", "indxkeep.hi")]))
}
list(indfit=indfit, streamdf=streamdf, scaleup=scaleup, indxdf=indxdf)
}
calctarg <- function(lakenum, adults, year, targyears, adjust=c(1, 1, 0.25, 1, 1)) {
# lakenum = vector of lake numbers (1-5)
# adults = vector of lakewide adult sea lamprey estimates
# year = vector of years
# targyears = list (length 5) of selected years from which to calculate targets
# lake huron target is 25% of
targets <- data.frame(lake=1:5, target=rep(NA, 5), lo=rep(NA, 5), hi=rep(NA, 5))
for(i in 1:5) {
pick5 <- adults[lakenum==i & is.element(year, targyears[[i]]) & !is.na(adults)]
if(length(pick5) > 0) {
targets$target[i] <- mean(pick5)
n <- length(pick5)
ci <- qnorm(1 - 0.05/2) * sqrt(var(pick5)) / sqrt(n)
targets[i, c("lo", "hi")] <- mean(pick5) + c(-1, 1)*ci# using z dist (known variance)
targets[i, c("target", "lo", "hi")] <- adjust[i]*targets[i, c("target", "lo", "hi")]
} else {
targets[i, c("target", "lo", "hi")] <- c(NA, NA, NA)
}
}
targets
}
}
# bring in lake-wide spawner data
lk <- read.csv("C:/JVA/Lamprey/Adults/SpawnDisModel/2014/LakePEdynamic.csv", as.is=T)
# bring in stream-specific data
dat <- read.csv("C:/JVA/Lamprey/Adults/SpawnDisModel/2014/StreamPEdynamicALLCOLS.csv", as.is=T)
dat$ls <- dat$lscode
# 2014-04-09 Jess and Gale agreed that the East Au Gres (38) should be replaced with the Au Sable (36) in Lake Huron
# 2014-04-10 Jess thinks that we should just stick with the East Au Gres (38)
index.streams <- list(
Sup = c(1, 2, 9, 29, 31, 32, 62),
Mic = c(5, 6, 15, 24, 26, 35),
Hur = c(10, 16, 27, 32, 999, 38),
Eri = c(1, 2, 3, 7, 9),
Ont = c(5, 9, 22, 23, 36)
)
index.streams <- lapply(1:5, function(i) i + index.streams[[i]]/1000)
# estimate adult index of abundance for each lake using index streams
indices <- lapply(index.streams, index.est, dat, lk)
# combine index data for all lakes in one dataframe
indxall <- do.call(rbind, lapply(indices, "[[", "indxdf"))
# calculate targets
sptargyrz <- list(1994:1998, 1988:1992, 1989:1993, 1991:1995, 1999:2003)
targyrz <- apply(sapply(sptargyrz, range), 2, paste, collapse="-")
# spawner model
targets.sm <- calctarg(lakenum=lk$lake, adults=lk$PE, year=lk$year, targyears=sptargyrz)
# adult index
targets.ai <- calctarg(lakenum=indxall$lake, adults=indxall$indxkeep, year=indxall$year, targyears=sptargyrz)
# spawner model targets scaled down to adult index
targets.sm.su <- cbind(lake=targets.sm[, 1], (1/sapply(indices, "[[", "scaleup")) * targets.sm[, -1])
# adult index adjusted
targets.ai.adj <- targets.ai
targets.ai.adj[is.na(targets.ai$target), ] <- targets.sm.su[is.na(targets.ai$target), ]
YEAR1 <- 1984
ls()
targets.ai
targets.ai.adj
targets.sm
targets.sm.su
lakenum=indxall$lake
adults=indxall$indxkeep
year=indxall$year
targyears=sptargyrz
adjust=c(1, 1, 0.25, 1, 1)
targets <- data.frame(lake=1:5, target=rep(NA, 5), lo=rep(NA, 5), hi=rep(NA, 5))
targets
i <- 2
pick5 <- adults[lakenum==i & is.element(year, targyears[[i]]) & !is.na(adults)]
pick5
head(adults)
adults
lakenum
targyears[[i]]
year
cbind(year, adults, lakenum)
cbind(year, adults, lakenum)[lakenum==i, ]
targets.ai
# calculate targets
sptargyrz <- list(1994:1998, 1988:1992, 1989:1993, 1991:1995, 1999:2003)
targyrz <- apply(sapply(sptargyrz, range), 2, paste, collapse="-")
# spawner model
targets.sm <- calctarg(lakenum=lk$lake, adults=lk$PE, year=lk$year, targyears=sptargyrz)
# adult index
targets.ai <- calctarg(lakenum=indxall$lake, adults=indxall$indxkeep, year=indxall$year, targyears=sptargyrz)
# spawner model targets scaled down to adult index
targets.sm.su <- cbind(lake=targets.sm[, 1], (1/sapply(indices, "[[", "scaleup")) * targets.sm[, -1])
# adult index adjusted
targets.ai.adj <- targets.ai
targets.ai.adj[is.na(targets.ai$target), ] <- targets.sm.su[is.na(targets.ai$target), ]
targets.ai
targets.ai.adj
write.csv(targets.ai.adj, "C:/JVA/Lamprey/Adults/AdultIndex/2014/AdultIndexTargets.csv", row.names=FALSE)
cleanup()
q()
install.packages("broom")
library(broom)
lmfit <- lm(mpg ~ wt, mtcars)
lmfit
summary(lmfit)
tidy(lmfit)
head(augment(lmfit))
glance(lmfit)
lmfit <- lm(mpg ~ wt, mtcars)
tidy(lmfit)
glance(lmfit)
lmfit <- lm(mpg ~ wt, mtcars)
tidy(lmfit)
glance(lmfit)
cleanup()
q()
library(shiny)
shiny::runGitHub("hclust-shiny", "joyofdata")
# C:\JVA\Consult\Stapanian\Amphib\Model selection with AIC.r
# which environmental variables best predict this index of amphibian biotic integrity
# relevant emails:
# 15 May 2013 - https://mail.google.com/mail/u/0/?shva=1#search/amphibian/13ea801401e50a84
#  8 Aug 2013 - https://mail.google.com/mail/u/1/?shva=1#inbox/1405defbc5969b40
# 27 Aug 2013 - https://mail.google.com/mail/u/1/?shva=1#inbox/140c042c5ba851fc
wb <- loadWorkbook("C:/JVA/Consult/Stapanian/Amphib/amphibians_Jean Apr18.xlsx")
dat <- readWorksheet(wb, sheet="Jean")
names(dat) <- make.names(casefold(names(dat)), unique=T, allow_=F)
dimnames(dat)[[1]] <- dat$site.code
rm(wb)
# Analysis 1 should include the following (17) as potential predictors: 
varz1 <- c("metric1", "metric2", "metric3", "metric4", "metric5", "metric6", "vibi.score", "water", "forest", "wtld.forest", "wtld.emerg", 
"pasture", "row.crop", "suburban", "transitional", "rock", "urban")
varz1 <- c("metric1", "metric2", "metric3", "metric4", "metric5", "metric6", "vibi.score", "water", "forest", "wtld.forest", "wtld.emerg", 
"pasture", "row.crop", "suburban", "transitional", "rock", "urban")
### data exploration ###
attach(dat)
# several variables need to be log transformed
logk <- function(x) {
mx <- min(x, na.rm=TRUE)
if(mx<0) {
x <- x + abs(mx)
mx <- 0
}
k <- min(x[x>0], na.rm=TRUE)/2
print(k)
log(x + min(x[x>0], na.rm=TRUE)/2)
}
tranvar <- logk(as.vector(dat[, c("water", "forest", "wtld.forest", "wtld.emerg", "pasture", "row.crop", "suburban", "transitional", "rock", "urban")]))
names(tranvar) <- paste0("log", names(tranvar))
head(tranvar)
dat2 <- cbind(dat, tranvar)
rm(logk, tranvar)
detach(dat)
# Analysis 1 should include the following (17) as potential predictors: 
varz1 <- c("metric1", "metric2", "metric3", "metric4", "metric5", "metric6", "vibi.score", "logwater", "logforest", "logwtld.forest", "logwtld.emerg", 
"logpasture", "logrow.crop", "logsuburban", "logtransitional", "logrock", "logurban")
v1namz <- c("ORAM~metric~1", "ORAM~metric~2", "ORAM~metric~3", "ORAM~metric~4", "ORAM~metric~5", "ORAM~metric~6", "OVIBI", 
"LDI[water]", "LDI[forest]", "LDI[wetland~forest]", "LDI[wetland~emergent]", "LDI[pasture]", "LDI[crop]", "LDI[suburban]", "LDI[transitional]", 
"LDI[rock]", "LDI[urban]")
# AbbreviationDescription                                                                             
# LDIwaterProp. standing water                                                              
# LDIforestProp. upland (non-hydric soils) forest                                   
# LDIwetland forestProp. wetland (hydric soils) forest                                         
# LDIwetland emergentProp. wetland dominated by emergent vegetation                
# LDIpastureProp. pasture
# LDIcropProp. agricultural row-crop land
# LDIsuburbanProp. suburban residential
# LDIrockProp. exposed rock substrate
# LDItransitionalProp. land being transitioned to an undefined use
# LDIurbanProp. urban area         
# ORAM metric 1Area (6)                                                                                                            
# ORAM metric 2Upland buffers and surrounding land use (14)
# ORAM metric 3Hydrology (30)          
# ORAM metric 4Habitat Alteration and Development (20)
# ORAM metric 5Special wetlands (10)
# ORAM metric 6Plant communities, interspersion, and microtopography (20)            
# OVIBI10 metrics describing wetland vegetation quality (100)
# get rid of four variables with few unique values
# metric5 (with 3 unique values), logtransitional (with 4), and metric1 and logrock (each with 6).
rid <- c(5, 15, 1, 16)
varz1 <- varz1[-rid]
v1namz <- v1namz[-rid]
attach(dat2)
ct <- t(
sapply(varz1, function(x) {
ct <- cor.test(dat2[, x], amphibi)
ctp <- ct$p.value
ctr <- as.vector(ct$estimate)
c(p=ctp, r=ctr)
})
)
title <- ifelse(ct[, "p"] < 0.05/length(varz1), paste0("bold('*'~", v1namz, ")"), v1namz)
windows(h=8, w=5.5)
#par(mfcol=c(6, 3), mar=c(2.5, 2, 1.5, 1), oma=c(0, 2.5, 0, 0), las=1, cex=0.7)
par(mfcol=c(5, 3), mar=c(2.5, 2, 1.5, 1), oma=c(0, 2.5, 0, 0), las=1, cex=0.7)
for(i in rev(order(ct[, "r"]))) plot(dat2[, varz1[i]], amphibi, xlab="", ylab="", main=as.expression(parse(text=title[i])))
mtext("AmphIBI", side=2, outer=TRUE, las=0, line=1)
suv <- sort(unique(veg.class))
windows(h=6.5, w=6.5)
map("state", mar=c(1, 1, 1, 1), region= "ohio", col="darkgray", lwd=2)
for(i in seq(suv)) {
sel <- veg.class==suv[i]
points(lon.dd[sel], lat.dd[sel], cex=2, lwd=2, pch=c(2, 1)[i], col=c("black", "gray")[i])
}
legend("bottomright", capwords(suv), pch=c(2, 1), col=c("black", "gray"), pt.lwd=2, pt.cex=2, cex=1.15, title="Veg. Class")
locator()
?map.scale
map.scale(x=-81.5, y=40.2, ratio=FALSE, relwidth=0.2)
locator()
map.scale(x=-82, y=40, ratio=FALSE, relwidth=0.2)
map.scale(x=-82.5, y=40, ratio=FALSE, relwidth=0.2)
map.scale(x=-82.25, y=40, ratio=FALSE, relwidth=0.2)
map("state", mar=c(1, 1, 1, 1), region= "ohio", col="darkgray", lwd=2)
for(i in seq(suv)) {
sel <- veg.class==suv[i]
points(lon.dd[sel], lat.dd[sel], cex=2, lwd=2, pch=c(2, 1)[i], col=c("black", "gray")[i])
}
legend("bottomright", capwords(suv), pch=c(2, 1), col=c("black", "gray"), pt.lwd=2, pt.cex=2, cex=1.15, title="Veg. Class")
map.scale(x=-82.25, y=40, ratio=FALSE, relwidth=0.2)
map.scale(x=-82.25, y=40.1, ratio=FALSE, relwidth=0.2)
map("state", mar=c(1, 1, 1, 1), region= "ohio", col="darkgray", lwd=2)
for(i in seq(suv)) {
sel <- veg.class==suv[i]
points(lon.dd[sel], lat.dd[sel], cex=2, lwd=2, pch=c(2, 1)[i], col=c("black", "gray")[i])
}
legend("bottomright", capwords(suv), pch=c(2, 1), col=c("black", "gray"), pt.lwd=2, pt.cex=2, cex=1.15, title="Veg. Class")
map.scale(x=-82.25, y=40.2, ratio=FALSE, relwidth=0.2)
locator()
map.scale(x=-83.1, y=41.9, ratio=FALSE, relwidth=0.2)
suv <- sort(unique(veg.class))
windows(h=6.5, w=6.5)
map("state", mar=c(1, 1, 1, 1), region= "ohio", col="darkgray", lwd=2)
for(i in seq(suv)) {
sel <- veg.class==suv[i]
points(lon.dd[sel], lat.dd[sel], cex=2, lwd=2, pch=c(2, 1)[i], col=c("black", "gray")[i])
}
legend("bottomright", capwords(suv), pch=c(2, 1), col=c("black", "gray"), pt.lwd=2, pt.cex=2, cex=1.15, title="Veg. Class")
map.scale(x=-82.25, y=40.2, ratio=FALSE, relwidth=0.2)
map.scale(x=-83, y=42, ratio=FALSE, relwidth=0.2)
library(GISTools)
?map.scale
suv <- sort(unique(veg.class))
windows(h=6.5, w=6.5)
map("state", mar=c(1, 1, 1, 1), region= "ohio", col="darkgray", lwd=2)
for(i in seq(suv)) {
sel <- veg.class==suv[i]
points(lon.dd[sel], lat.dd[sel], cex=2, lwd=2, pch=c(2, 1)[i], col=c("black", "gray")[i])
}
legend("bottomright", capwords(suv), pch=c(2, 1), col=c("black", "gray"), pt.lwd=2, pt.cex=2, cex=1.15, title="Veg. Class")
map.scale(x=-83, y=42, ratio=FALSE, relwidth=0.2)
maps::map.scale(x=-83, y=42, ratio=FALSE, relwidth=0.2)
locator()
north.arrow(xb=-80.7, yb=39.2, len=0.05, lab="N")
suv <- sort(unique(veg.class))
windows(h=6.5, w=6.5)
map("state", mar=c(1, 1, 1, 1), region= "ohio", col="darkgray", lwd=2)
for(i in seq(suv)) {
sel <- veg.class==suv[i]
points(lon.dd[sel], lat.dd[sel], cex=2, lwd=2, pch=c(2, 1)[i], col=c("black", "gray")[i])
}
legend("bottomright", capwords(suv), pch=c(2, 1), col=c("black", "gray"), pt.lwd=2, pt.cex=2, cex=1.15, title="Veg. Class")
maps::map.scale(x=-83, y=42, ratio=FALSE, relwidth=0.2)
north.arrow(xb=-80.7, yb=39.2, len=0.05, lab="N")
par(usr=c(-126, 94, 21, 193), xpd=NA)
polygon(c(-128, -128, -64, -64, -128), c(22, 52, 52, 22, 22), col="white", lwd=2)
map("state", add=T, mar=c(0, 0, 0, 0)) 
map("state", region="ohio", fill=T, add=T) 
cleanup()
q()
# C:\JVA\Consult\Stapanian\Amphib\Next Subm 2\Three Group Approach 2.r
# which environmental variables best predict this index of amphibian biotic integrity
# relevant emails:
# 15 May 2013 - https://mail.google.com/mail/u/0/?shva=1#search/amphibian/13ea801401e50a84
#  8 Aug 2013 - https://mail.google.com/mail/u/1/?shva=1#inbox/1405defbc5969b40
# 27 Aug 2013 - https://mail.google.com/mail/u/1/?shva=1#inbox/140c042c5ba851fc
library(GISTools)
# bring in data and create initial figures
source("C:/JVA/Consult/Stapanian/Amphib/Next Subm 2/Explore Figs 2.r")
select.varz <- function(varnames, mydat, max.no.ind.var) {
# keep only those varnames that have at least two unique non-missing values
varnames <- varnames[apply(mydat[, varnames], 2, function(x) {
y <- var(x[!is.na(x)])
!is.na(y) & y>0
})]
m <- allcombs(length(varnames), 0, max.no.ind.var)
dimnames(m)[[2]] <- varnames
# right side of the formula
rightside <- apply(m, 1, function(row) paste(varnames[row==1], collapse=" + "))
# if no predictors, use 1 to represent intercept only model
rightside[rightside==""] <- "1"
form <- paste("amphibi ~", rightside)
fits <- lapply(form, function(f) lm(formula(f), dat=mydat))
# AIC table
aictab <- AICc(fits)
bigtab <- cbind(formula=rightside[aictab$model], aictab)
nmodzfit <- dim(bigtab)[1]
# top models
topmods <- bigtab[bigtab$daicc < 2, ]
# add coefficients to top model
coef <- lapply(fits[topmods$model], coef)
xmod <- unique(unlist(lapply(coef, names)))
topcoef <- t(sapply(coef, function(x) 
{
blank <- rep(0, length(xmod))
blank[match(names(x), xmod)] <- x
blank
}))
dimnames(topcoef)[[2]] <- xmod
topmods <- cbind(signif(topcoef, 3), round(topmods[, c("n", "p", "rmse", "aicc", "daicc", "aiccw")], 2))
# single best model
bestnum <- bigtab$model[1]
bestfit <- fits[[bestnum]]
xvarz <- varnames[m[bestnum, ]==1]
# output
out <- list(xvarz=xvarz, nmodzfit=nmodzfit, bestfit=bestfit, topmods=topmods, allfits=fits, allmods=bigtab, allpreds=m)
print(out[1:4])
out
}
assess.fit <- function(fit, newd) {
p <- predict(fit, newdata=newd)
y <- newd$amphibi
r <- p - y
rmse <- sqrt(mean(r^2))
r2 <- calcr2(fitted=p, observed=y, nparam=length(labels(terms(freshfita)))+1)
list(cbind(p=p, y=y, r=r), rmse=rmse, r2=r2)
}
# assign each observation to one of three groups
# ensure even distribution of groups across vegetation classes and latitudes
dat3 <- dat2[order(dat2$veg.class, dat2$lat.dd), ]
dat3$group <- rep(1:3, length.out=dim(dat2)[1])
df <- dat3
### map
attach(df)
suv <- sort(unique(veg.class))
windows(h=6.5, w=6.5)
map("state", mar=c(1, 1, 1, 1), region= "ohio", col="darkgray", lwd=2)
for(i in seq(suv)) {
sel <- veg.class==suv[i]
points(lon.dd[sel], lat.dd[sel], cex=2, lwd=2, pch=c(2, 1)[i], col=group[sel]+1)
}
maps::map.scale(x=-83, y=42, ratio=FALSE, relwidth=0.2)
north.arrow(xb=-80.7, yb=39.2, len=0.05, lab="N")
#legend("bottomright", capwords(suv), pch=c(2, 1), col=c("black", "gray"), pt.lwd=2, pt.cex=2, cex=1.15, title="Veg. Class")
par(usr=c(-126, 94, 21, 193), xpd=NA)
polygon(c(-128, -128, -64, -64, -128), c(22, 52, 52, 22, 22), col="white", lwd=2)
map("state", add=T, mar=c(0, 0, 0, 0)) 
map("state", region="ohio", fill=T, add=T) 
locator()
windows(h=6.5, w=6.5)
map("state", mar=c(1, 1, 1, 1), region= "ohio", col="darkgray", lwd=2)
for(i in seq(suv)) {
sel <- veg.class==suv[i]
points(lon.dd[sel], lat.dd[sel], cex=2, lwd=2, pch=c(2, 1)[i], col=group[sel]+1)
}
locator()
maps::map.scale(x=-81.9, y=38.7, ratio=FALSE, relwidth=0.2)
north.arrow(xb=-80.7, yb=39.2, len=0.05, lab="N")
locator()
map("state", mar=c(1, 1, 1, 1), region= "ohio", col="darkgray", lwd=2)
for(i in seq(suv)) {
sel <- veg.class==suv[i]
points(lon.dd[sel], lat.dd[sel], cex=2, lwd=2, pch=c(2, 1)[i], col=group[sel]+1)
}
maps::map.scale(x=-81.9, y=38.7, ratio=FALSE, relwidth=0.2)
north.arrow(xb=-81.2, yb=39, len=0.05, lab="N")
map("state", mar=c(1, 1, 1, 1), region= "ohio", col="darkgray", lwd=2)
for(i in seq(suv)) {
sel <- veg.class==suv[i]
points(lon.dd[sel], lat.dd[sel], cex=2, lwd=2, pch=c(2, 1)[i], col=group[sel]+1)
}
maps::map.scale(x=-81.8, y=38.7, ratio=FALSE, relwidth=0.2)
north.arrow(xb=-81.2, yb=39, len=0.05, lab="N")
map("state", mar=c(1, 1, 1, 1), region= "ohio", col="darkgray", lwd=2)
for(i in seq(suv)) {
sel <- veg.class==suv[i]
points(lon.dd[sel], lat.dd[sel], cex=2, lwd=2, pch=c(2, 1)[i], col=group[sel]+1)
}
par(xpd=NA)
maps::map.scale(x=-81.8, y=38.7, ratio=FALSE, relwidth=0.2)
north.arrow(xb=-81.2, yb=39, len=0.05, lab="N")
par(usr=c(-126, 94, 21, 193), xpd=NA)
polygon(c(-128, -128, -64, -64, -128), c(22, 52, 52, 22, 22), col="white", lwd=2)
map("state", add=T, mar=c(0, 0, 0, 0)) 
map("state", region="ohio", fill=T, add=T) 
graphics.off()
map("state", region= "ohio")
locator()
maps::map.scale(x=-84, y=40, ratio=FALSE, relwidth=0.2)
locator()
north.arrow(xb=-83.4, yb=40.2, len=0.05, lab="N")
north.arrow(xb=-83.4, yb=41, len=0.05, lab="N")
map("state", region= "ohio")
q()
cleanup()
# C:\JVA\Consult\Lantry\Wounding model\Explore.r
# read in data
wb <- loadWorkbook("C:/JVA/Consult/Lantry/Wounding model/Mort funct2.xlsx")
raw <- readWorksheet(wb, sheet="StrainCPUE")
names(raw) <- jvanames(names(raw))
full <- readWorksheet(wb, sheet="SAS data")
names(full) <- jvanames(names(full))
head(raw)
  # xstrain strain2 year xyrcls age    lncpue       cpue
# 1     ONT SENlike 1990   1983   7 -2.768675 0.06274510
# 2     ONT SENlike 1991   1983   8 -2.610070 0.07352941
# 3     ONT SENlike 1992   1983   9 -3.396743 0.03348214
# 4     ONT SENlike 1993   1983  10 -4.158883 0.01562500
# 5     ONT SENlike 1991   1984   7 -0.255525 0.77450980
# 6     ONT SENlike 1992   1984   8 -1.142772 0.31893382
# rearrange data to calculate annual mortalities
attach(raw)
summary(log(cpue) - lncpue)
raw1 <- raw
raw1$year1 <- year
raw1$year2 <- year + 1
raw1$age1 <- age
raw1$age2 <- age + 1
raw1$cpue1 <- cpue
raw2 <- raw
raw2$year1 <- year - 1
raw2$year2 <- year
raw2$age1 <- age - 1
raw2$age2 <- age
raw2$cpue2 <- cpue
detach(raw)
rawpair <- merge(
raw1[, c("year1", "year2", "strain2", "xstrain", "xyrcls", "age1", "age2", "cpue1")],
raw2[, c("year1", "year2", "strain2", "xstrain", "xyrcls", "age1", "age2", "cpue2")],
all=TRUE
)
rawpair <- rawpair[!is.na(rawpair$cpue1) & !is.na(rawpair$cpue2), ]
rawpair$mort <- 1 - rawpair$cpue2/rawpair$cpue1
rm(raw1, raw2)
head(rawpair)
   # year1 year2 strain2 xstrain xyrcls age1 age2      cpue1      cpue2       mort
# 4   1986  1987 SUPlike     SUP   1979    7    8 0.87700321 0.38799895  0.5575855
# 6   1987  1988 SENlike     SEN   1979    8    9 0.03033088 0.09336623 -2.0782562
# 7   1987  1988 SENlike     SEN   1980    7    8 0.12132353 0.25844298 -1.1301967
# 9   1987  1988 SUPlike     SUP   1979    8    9 0.38799895 0.12438127  0.6794289
# 10  1987  1988 SUPlike     SUP   1980    7    8 1.57484244 0.68446898  0.5653730
# 12  1988  1989 SENlike     SEN   1979    9   10 0.09336623 0.04503676  0.5176332
# use AIC to determine best model predicting mortality from year, strain, and age/yrclass
rawpair$year1f <- as.factor(rawpair$year1)
rawpair$strain2f <- as.factor(rawpair$strain2)
rawpair$xstrainf <- as.factor(rawpair$xstrain)
rawpair$xyrclsf <- as.factor(rawpair$xyrcls)
rawpair$age1f <- as.factor(rawpair$age1)
rawpair$mort0 <- ifelse(rawpair$mort < 0, 0, rawpair$mort)
fit3a <- glm(mort0 ~ year1f + xstrainf + xyrclsf, data=rawpair)
fit3b <- glm(mort0 ~ year1f + strain2f + xyrclsf, data=rawpair)
fit3c <- glm(mort0 ~ year1f + xstrainf + age1f, data=rawpair)
fit3d <- glm(mort0 ~ year1f + strain2f + age1f, data=rawpair)
fit2a <- glm(mort0 ~ year1f + xstrainf, data=rawpair)
fit2b <- glm(mort0 ~ year1f + strain2f, data=rawpair)#### best model
fit2c <- glm(mort0 ~ year1f + xyrclsf, data=rawpair)
fit2d <- glm(mort0 ~ year1f + age1f, data=rawpair)
fit1 <- glm(mort0 ~ year1f, data=rawpair)
fit0 <- glm(mort0 ~ 1, data=rawpair)
AICc(list(fit3a, fit3b, fit3c, fit3d, fit2a, fit2b, fit2c, fit2d, fit1, fit0))
# summarize data across strains within strain groups
ssum <- aggregate(cbind(cpue1, cpue2) ~ year1 + year2 + strain2 + xyrcls + age1 + age2 + year1f + strain2f + xyrclsf + age1f, rawpair, sum)
ssum$mort <- 1 - ssum$cpue2/ssum$cpue1
ssum$mort0 <- ifelse(ssum$mort < 0, 0, ssum$mort)
head(ssum)
fit <- aov(mort0 ~ year1f + strain2f, data=ssum)
summary(fit)
fit <- lm(mort0 ~ year1f + strain2f, data=ssum)
summary(fit)
attach(ssum)
suy <- sort(unique(year1f))
sus <- sort(unique(strain2f))
newdata <- expand.grid(year1f=suy, strain2f=sus)
p <- cbind(newdata, predict(fit, newdata=newdata, interval="confidence"))
windows(w=9, h=3)
par(mar=c(4, 4, 1, 1), las=1)
plot(year1, mort0, type="n", ylim=0:1, xlab="Year t", ylab="Annual mortality  (from t to t+1)")
text(jitter(year1), mort0, substring(strain2f, 3, 3), col=blindcolz[as.numeric(strain2f)+1], cex=0.8)
for(i in seq_along(sus)) {
sel <- p$strain2f == sus[i]
lines(spline(as.numeric(as.character(p$year1f))[sel], p$fit[sel], n=1000), col=blindcolz[i+1], lwd=2)
}
for(i in seq_along(sus)) {
windows(w=9, h=3)
par(mar=c(4, 4, 1, 1), las=1)
plot(year1, mort0, type="n", ylim=0:1, xlab="Year t", ylab="Annual mortality  (from t to t+1)")
sel <- p$strain2f == sus[i]
shadepoly(as.numeric(as.character(p$year1f)), p$fit, p$lwr, p$upr, subsel=sel, kol=blindcolz[i+1])
}
sub <- p[sel, ]
x <- sub$fit[-dim(sub)[1]]
y <- sub$fit[-1]
cor.test(x, y)
windows(w=6.5, h=7)
par(mar=c(4, 4, 2, 1), las=1, cex=1.5, xaxs="i", yaxs="i", pty="s")
plot(x, y, xlim=0:1, ylim=0:1, xlab="Predicted mortality in year t", ylab="Predicted mortality in year t+1", main="Superior-like Strains")
abline(lsfit(x, y), lwd=2)
text(0.8, 0.8, paste("r =", round(cor.test(x, y)$estimate, 2)))
full[, 1:2]
full[1:2, ]
full[1:2, ]
dim(full)
dim(ssum)
dim(p)
sub
dim(sub)
look <- merge(full, sub, by.x="year.1.sept.", by.y="year1")
full$year.1.sept.
sub$year1 <- as.numeric(as.character(sub$year1f))
look <- merge(full, sub, by.x="year.1.sept.", by.y="year1")
dim(look)
sub$year1 <- as.numeric(as.character(sub$year1f))
look <- merge(full, sub, by.x="year.1.sept.", by.y="year1", all=TRUE)
dim(look)
look
names(look)
look[, c(1, 2, 4, 47, 49)]
windows()
plot(look$suplike.mort, look$fit)
attach(look)
windows()
plot(year1, fit, ylim=0:1, type="n", xlab="Year t", ylab="Predicted mortality in year t+1", main="Superior-like Strains")
lines(year1, suplike.mort, type="b", col="blue")
lines(year1, fit, type="b", pch=2, col="red")
year1
fit
rm(fit)
plot(year1, fit, ylim=0:1, type="n", xlab="Year t", ylab="Predicted mortality in year t+1", main="Superior-like Strains")
lines(year1, suplike.mort, type="b", col="blue")
lines(year1, fit, type="b", pch=2, col="red")
year1
fit
search()
dim(look)
dim(ssum)
look$year1
detach(ssum)
plot(year1, fit)
search()
look
search()
detach()
sub$year1 <- as.numeric(as.character(sub$year1f))
look <- merge(full, sub, by.x="year.1.sept.", by.y="year1", all=TRUE)
attach(look)
windows()
plot(year1f, fit, ylim=0:1, type="n", xlab="Year t", ylab="Predicted mortality in year t+1", main="Superior-like Strains")
lines(year1f, suplike.mort, type="b", col="blue")
lines(year1f, fit, type="b", pch=2, col="red")
windows()
plot(year1f, fit, type="n", ylim=0:1, xlab="Year t", ylab="Predicted mortality in year t+1", main="Superior-like Strains")
plot(year1, fit, type="n", ylim=0:1, xlab="Year t", ylab="Predicted mortality in year t+1", main="Superior-like Strains")
lines(year1, suplike.mort, type="o", col="blue")
lines(year1, fit, type="o", pch=2, col="red")
look
search()
detach()
sub$year1 <- as.numeric(as.character(sub$year1f))
look <- merge(sub, full, by.x="year1", by.y="year.1.sept.", all=TRUE)
attach(look)
windows()
plot(year1, fit, type="n", ylim=0:1, xlab="Year t", ylab="Predicted mortality in year t+1", main="Superior-like Strains")
lines(year1, suplike.mort, type="o", col="blue")
lines(year1, fit, type="o", pch=2, col="red")
par(mar=c(4, 4, 2, 1), las=1)
plot(year1, fit, type="n", ylim=0:1, xlab="Year t", ylab="Predicted mortality in year t+1", main="Superior-like Strains")
lines(year1, suplike.mort, type="o", col="blue")
lines(year1, fit, type="o", pch=2, col="red")
windows()
par(mar=c(4, 4, 2, 1), las=1)
plot(year1, fit, type="n", ylim=0:1, xlab="Year t", ylab="Predicted mortality in year t+1", main="Superior-like Strains")
lines(year1, suplike.mort, type="o", col=blindcolz[4])
lines(year1, fit, type="o", pch=2, col=blindcolz[2])
blindcolz
windows(w=9, h=3)
par(mar=c(4, 4, 2, 1), las=1)
plot(year1, fit, type="n", ylim=0:1, xlab="Year t", ylab="Predicted mortality in year t+1", main="Superior-like Strains")
lines(year1, suplike.mort, type="o", col=blindcolz[7], lwd=2)
lines(year1, fit, type="o", pch=2, col=blindcolz[3])
par(mar=c(4, 4, 2, 1), las=1)
plot(year1, fit, type="n", ylim=0:1, xlab="Year t", ylab="Predicted mortality in year t+1", main="Superior-like Strains")
lines(year1, suplike.mort, type="o", col=blindcolz[7], lwd=2)
lines(year1, fit, type="o", pch=2, col=blindcolz[3], lwd=2)
windows(w=9, h=3.5)
par(mar=c(4, 4, 2, 1), las=1)
plot(year1, fit, type="n", ylim=0:1, xlab="Year t", ylab="Predicted mortality in year t+1", main="Superior-like Strains")
lines(year1, suplike.mort, type="o", col=blindcolz[7], lwd=2)
lines(year1, fit, type="o", pch=2, col=blindcolz[3], lwd=2)
cleanup()
q()
# C:\JVA\Consult\Lantry\Wounding model\Explore.r
# read in data
wb <- loadWorkbook("C:/JVA/Consult/Lantry/Wounding model/Mort funct2.xlsx")
raw <- readWorksheet(wb, sheet="StrainCPUE")
names(raw) <- jvanames(names(raw))
full <- readWorksheet(wb, sheet="SAS data")
warnings()
names(full) <- jvanames(names(full))
head(raw)
  # xstrain strain2 year xyrcls age    lncpue       cpue
# 1     ONT SENlike 1990   1983   7 -2.768675 0.06274510
# 2     ONT SENlike 1991   1983   8 -2.610070 0.07352941
# 3     ONT SENlike 1992   1983   9 -3.396743 0.03348214
# 4     ONT SENlike 1993   1983  10 -4.158883 0.01562500
# 5     ONT SENlike 1991   1984   7 -0.255525 0.77450980
# 6     ONT SENlike 1992   1984   8 -1.142772 0.31893382
# rearrange data to calculate annual mortalities
attach(raw)
summary(log(cpue) - lncpue)
raw1 <- raw
raw1$year1 <- year
raw1$year2 <- year + 1
raw1$age1 <- age
raw1$age2 <- age + 1
raw1$cpue1 <- cpue
raw2 <- raw
raw2$year1 <- year - 1
raw2$year2 <- year
raw2$age1 <- age - 1
raw2$age2 <- age
raw2$cpue2 <- cpue
detach(raw)
rawpair <- merge(
raw1[, c("year1", "year2", "strain2", "xstrain", "xyrcls", "age1", "age2", "cpue1")],
raw2[, c("year1", "year2", "strain2", "xstrain", "xyrcls", "age1", "age2", "cpue2")],
all=TRUE
)
rawpair <- rawpair[!is.na(rawpair$cpue1) & !is.na(rawpair$cpue2), ]
rawpair$mort <- 1 - rawpair$cpue2/rawpair$cpue1
rm(raw1, raw2)
head(rawpair)
   # year1 year2 strain2 xstrain xyrcls age1 age2      cpue1      cpue2       mort
# 4   1986  1987 SUPlike     SUP   1979    7    8 0.87700321 0.38799895  0.5575855
# 6   1987  1988 SENlike     SEN   1979    8    9 0.03033088 0.09336623 -2.0782562
# 7   1987  1988 SENlike     SEN   1980    7    8 0.12132353 0.25844298 -1.1301967
# 9   1987  1988 SUPlike     SUP   1979    8    9 0.38799895 0.12438127  0.6794289
# 10  1987  1988 SUPlike     SUP   1980    7    8 1.57484244 0.68446898  0.5653730
# 12  1988  1989 SENlike     SEN   1979    9   10 0.09336623 0.04503676  0.5176332
# use AIC to determine best model predicting mortality from year, strain, and age/yrclass
rawpair$year1f <- as.factor(rawpair$year1)
rawpair$strain2f <- as.factor(rawpair$strain2)
rawpair$xstrainf <- as.factor(rawpair$xstrain)
rawpair$xyrclsf <- as.factor(rawpair$xyrcls)
rawpair$age1f <- as.factor(rawpair$age1)
rawpair$mort0 <- ifelse(rawpair$mort < 0, 0, rawpair$mort)
fit3a <- glm(mort0 ~ year1f + xstrainf + xyrclsf, data=rawpair)
fit3b <- glm(mort0 ~ year1f + strain2f + xyrclsf, data=rawpair)
fit3c <- glm(mort0 ~ year1f + xstrainf + age1f, data=rawpair)
fit3d <- glm(mort0 ~ year1f + strain2f + age1f, data=rawpair)
fit2a <- glm(mort0 ~ year1f + xstrainf, data=rawpair)
fit2b <- glm(mort0 ~ year1f + strain2f, data=rawpair)#### best model
fit2c <- glm(mort0 ~ year1f + xyrclsf, data=rawpair)
fit2d <- glm(mort0 ~ year1f + age1f, data=rawpair)
fit1 <- glm(mort0 ~ year1f, data=rawpair)
fit0 <- glm(mort0 ~ 1, data=rawpair)
AICc(list(fit3a, fit3b, fit3c, fit3d, fit2a, fit2b, fit2c, fit2d, fit1, fit0))
# summarize data across strains within strain groups
ssum <- aggregate(cbind(cpue1, cpue2) ~ year1 + year2 + strain2 + xyrcls + age1 + age2 + year1f + strain2f + xyrclsf + age1f, rawpair, sum)
ssum$mort <- 1 - ssum$cpue2/ssum$cpue1
ssum$mort0 <- ifelse(ssum$mort < 0, 0, ssum$mort)
head(ssum)
myfit <- aov(mort0 ~ year1f + strain2f, data=ssum)
summary(myfit)
myfit <- lm(mort0 ~ year1f + strain2f, data=ssum)
summary(myfit)
attach(ssum)
suy <- sort(unique(year1f))
sus <- sort(unique(strain2f))
newdata <- expand.grid(year1f=suy, strain2f=sus)
p <- cbind(newdata, predict(myfit, newdata=newdata, interval="confidence"))
windows(w=9, h=3.5)
par(mar=c(4, 4, 2, 1), las=1)
plot(year1, mort0, type="n", ylim=0:1, xlab="Year t", ylab="Annual mortality  (from t to t+1)", main="P = Superior-, N = Seneca-like Strain")
text(jitter(year1), mort0, substring(strain2f, 3, 3), col=blindcolz[as.numeric(strain2f)+1], cex=0.8)
for(i in seq_along(sus)) {
sel <- p$strain2f == sus[i]
lines(spline(as.numeric(as.character(p$year1f))[sel], p$fit[sel], n=1000), col=blindcolz[i+1], lwd=2)
points(as.numeric(as.character(p$year1f))[sel], p$fit[sel], col=blindcolz[i+1], pch=16)
}
for(i in seq_along(sus)) {
windows(w=9, h=3)
par(mar=c(4, 4, 1, 1), las=1)
plot(year1, mort0, type="n", ylim=0:1, xlab="Year t", ylab="Annual mortality  (from t to t+1)")
sel <- p$strain2f == sus[i]
shadepoly(as.numeric(as.character(p$year1f)), p$fit, p$lwr, p$upr, subsel=sel, kol=blindcolz[i+1])
}
detach(ssum)
sub <- p[sel, ]
x <- sub$fit[-dim(sub)[1]]
y <- sub$fit[-1]
cor.test(x, y)
windows(w=6.5, h=7)
par(mar=c(4, 4, 2, 1), las=1, cex=1.5, xaxs="i", yaxs="i", pty="s")
plot(x, y, xlim=0:1, ylim=0:1, xlab="Predicted mortality in year t", ylab="Predicted mortality in year t+1", main="Superior-like Strains")
abline(lsfit(x, y), lwd=2)
text(0.8, 0.8, paste("r =", round(cor.test(x, y)$estimate, 2)))
sub$year1 <- as.numeric(as.character(sub$year1f))
look <- merge(sub, full, by.x="year1", by.y="year.1.sept.", all=TRUE)
attach(look)
windows(w=9, h=3.5)
par(mar=c(4, 4, 2, 1), las=1)
plot(year1, fit, type="n", ylim=0:1, xlab="Year t", ylab="Predicted mortality in year t+1", main="Superior-like Strains")
lines(year1, suplike.mort, type="o", col=blindcolz[7], lwd=2)
lines(year1, fit, type="o", pch=2, col=blindcolz[3], lwd=2)
detach(look)
# C:\JVA\Consult\Lantry\Wounding model\Explore.r
# read in data
wb <- loadWorkbook("C:/JVA/Consult/Lantry/Wounding model/Mort funct2.xlsx")
raw <- readWorksheet(wb, sheet="StrainCPUE")
names(raw) <- jvanames(names(raw))
full <- readWorksheet(wb, sheet="SAS data")
warnings()
names(full) <- jvanames(names(full))
head(raw)
  # xstrain strain2 year xyrcls age    lncpue       cpue
# 1     ONT SENlike 1990   1983   7 -2.768675 0.06274510
# 2     ONT SENlike 1991   1983   8 -2.610070 0.07352941
# 3     ONT SENlike 1992   1983   9 -3.396743 0.03348214
# 4     ONT SENlike 1993   1983  10 -4.158883 0.01562500
# 5     ONT SENlike 1991   1984   7 -0.255525 0.77450980
# 6     ONT SENlike 1992   1984   8 -1.142772 0.31893382
# rearrange data to calculate annual mortalities
attach(raw)
summary(log(cpue) - lncpue)
raw1 <- raw
raw1$year1 <- year
raw1$year2 <- year + 1
raw1$age1 <- age
raw1$age2 <- age + 1
raw1$cpue1 <- cpue
raw2 <- raw
raw2$year1 <- year - 1
raw2$year2 <- year
raw2$age1 <- age - 1
raw2$age2 <- age
raw2$cpue2 <- cpue
detach(raw)
rawpair <- merge(
raw1[, c("year1", "year2", "strain2", "xstrain", "xyrcls", "age1", "age2", "cpue1")],
raw2[, c("year1", "year2", "strain2", "xstrain", "xyrcls", "age1", "age2", "cpue2")],
all=TRUE
)
rawpair <- rawpair[!is.na(rawpair$cpue1) & !is.na(rawpair$cpue2), ]
rawpair$mort <- 1 - rawpair$cpue2/rawpair$cpue1
rm(raw1, raw2)
head(rawpair)
   # year1 year2 strain2 xstrain xyrcls age1 age2      cpue1      cpue2       mort
# 4   1986  1987 SUPlike     SUP   1979    7    8 0.87700321 0.38799895  0.5575855
# 6   1987  1988 SENlike     SEN   1979    8    9 0.03033088 0.09336623 -2.0782562
# 7   1987  1988 SENlike     SEN   1980    7    8 0.12132353 0.25844298 -1.1301967
# 9   1987  1988 SUPlike     SUP   1979    8    9 0.38799895 0.12438127  0.6794289
# 10  1987  1988 SUPlike     SUP   1980    7    8 1.57484244 0.68446898  0.5653730
# 12  1988  1989 SENlike     SEN   1979    9   10 0.09336623 0.04503676  0.5176332
# use AIC to determine best model predicting mortality from year, strain, and age/yrclass
rawpair$year1f <- as.factor(rawpair$year1)
rawpair$strain2f <- as.factor(rawpair$strain2)
rawpair$xstrainf <- as.factor(rawpair$xstrain)
rawpair$xyrclsf <- as.factor(rawpair$xyrcls)
rawpair$age1f <- as.factor(rawpair$age1)
rawpair$mort0 <- ifelse(rawpair$mort < 0, 0, rawpair$mort)
fit3a <- glm(mort0 ~ year1f + xstrainf + xyrclsf, data=rawpair)
fit3b <- glm(mort0 ~ year1f + strain2f + xyrclsf, data=rawpair)
fit3c <- glm(mort0 ~ year1f + xstrainf + age1f, data=rawpair)
fit3d <- glm(mort0 ~ year1f + strain2f + age1f, data=rawpair)
fit2a <- glm(mort0 ~ year1f + xstrainf, data=rawpair)
fit2b <- glm(mort0 ~ year1f + strain2f, data=rawpair)#### best model
fit2c <- glm(mort0 ~ year1f + xyrclsf, data=rawpair)
fit2d <- glm(mort0 ~ year1f + age1f, data=rawpair)
fit1 <- glm(mort0 ~ year1f, data=rawpair)
fit0 <- glm(mort0 ~ 1, data=rawpair)
AICc(list(fit3a, fit3b, fit3c, fit3d, fit2a, fit2b, fit2c, fit2d, fit1, fit0))
# summarize data across strains within strain groups
ssum <- aggregate(cbind(cpue1, cpue2) ~ year1 + year2 + strain2 + xyrcls + age1 + age2 + year1f + strain2f + xyrclsf + age1f, rawpair, sum)
ssum$mort <- 1 - ssum$cpue2/ssum$cpue1
ssum$mort0 <- ifelse(ssum$mort < 0, 0, ssum$mort)
head(ssum)
myfit <- aov(mort0 ~ year1f + strain2f, data=ssum)
summary(myfit)
myfit <- lm(mort0 ~ year1f + strain2f, data=ssum)
summary(myfit)
attach(ssum)
suy <- sort(unique(year1f))
sus <- sort(unique(strain2f))
newdata <- expand.grid(year1f=suy, strain2f=sus)
p <- cbind(newdata, predict(myfit, newdata=newdata, interval="confidence"))
windows(w=9, h=3.5)
par(mar=c(4, 4, 2, 1), las=1)
plot(year1, mort0, type="n", ylim=0:1, xlab="Year t", ylab="Annual mortality  (from t to t+1)", main="P = Superior-, N = Seneca-like Strains")
text(jitter(year1), mort0, substring(strain2f, 3, 3), col=blindcolz[as.numeric(strain2f)+1], cex=0.8)
for(i in seq_along(sus)) {
sel <- p$strain2f == sus[i]
lines(spline(as.numeric(as.character(p$year1f))[sel], p$fit[sel], n=1000), col=blindcolz[i+1], lwd=2)
points(as.numeric(as.character(p$year1f))[sel], p$fit[sel], col=blindcolz[i+1], pch=16)
}
for(i in seq_along(sus)) {
windows(w=9, h=3)
par(mar=c(4, 4, 1, 1), las=1)
plot(year1, mort0, type="n", ylim=0:1, xlab="Year t", ylab="Annual mortality  (from t to t+1)")
sel <- p$strain2f == sus[i]
shadepoly(as.numeric(as.character(p$year1f)), p$fit, p$lwr, p$upr, subsel=sel, kol=blindcolz[i+1])
}
detach(ssum)
sub <- p[sel, ]
x <- sub$fit[-dim(sub)[1]]
y <- sub$fit[-1]
cor.test(x, y)
windows(w=6.5, h=7)
par(mar=c(4, 4, 2, 1), las=1, cex=1.5, xaxs="i", yaxs="i", pty="s")
plot(x, y, xlim=0:1, ylim=0:1, xlab="Predicted mortality in year t", ylab="Predicted mortality in year t+1", main="Superior-like Strains")
abline(lsfit(x, y), lwd=2)
text(0.8, 0.8, paste("r =", round(cor.test(x, y)$estimate, 2)))
sub$year1 <- as.numeric(as.character(sub$year1f))
look <- merge(sub, full, by.x="year1", by.y="year.1.sept.", all=TRUE)
attach(look)
windows(w=9, h=3.5)
par(mar=c(4, 4, 2, 1), las=1)
plot(year1, fit, type="n", ylim=0:1, xlab="Year t", ylab="Predicted mortality in year t+1", main="Superior-like Strains")
lines(year1, suplike.mort, type="o", pch=2, col=blindcolz[7], lwd=2)
lines(year1, fit, type="o", pch=16, col=blindcolz[3], lwd=2)
detach(look)
fit4a <- glm(mort0 ~ year1f*xstrainf + xyrclsf, data=rawpair)
fit4b <- glm(mort0 ~ year1f*strain2f + xyrclsf, data=rawpair)
fit4c <- glm(mort0 ~ year1f*xstrainf + age1f, data=rawpair)
fit4d <- glm(mort0 ~ year1f*strain2f + age1f, data=rawpair)
fit3a <- glm(mort0 ~ year1f + xstrainf + xyrclsf, data=rawpair)
fit3b <- glm(mort0 ~ year1f + strain2f + xyrclsf, data=rawpair)
fit3c <- glm(mort0 ~ year1f + xstrainf + age1f, data=rawpair)
fit3d <- glm(mort0 ~ year1f + strain2f + age1f, data=rawpair)
fit2a <- glm(mort0 ~ year1f + xstrainf, data=rawpair)
fit2b <- glm(mort0 ~ year1f + strain2f, data=rawpair)#### best model
fit2c <- glm(mort0 ~ year1f + xyrclsf, data=rawpair)
fit2d <- glm(mort0 ~ year1f + age1f, data=rawpair)
fit1 <- glm(mort0 ~ year1f, data=rawpair)
fit0 <- glm(mort0 ~ 1, data=rawpair)
AICc(list(fit4a, fit4b, fit4c, fit4d, fit3a, fit3b, fit3c, fit3d, fit2a, fit2b, fit2c, fit2d, fit1, fit0))
?cheat
wb <- loadWorkbook("C:/JVA/Consult/Shively/Snowmelt.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
dim(dat)
head(dat)
graphics.off()
plotdf(dat)
with(dat, table(Event, EventTime, Site, Replicate))
with(dat, table(Event, EventTime, paste(Site, Replicate)))
3*8*3*3
dim(dat)
3*7*3*3
216-189
head(dat)
table(dat$Date)
with(dat, table(Event, EventTime, paste(Site, Replicate)), Date)
with(dat, table(Event, EventTime, paste(Site, Replicate), Date))
with(dat, table(paste(Event, EventTime, Date), paste(Site, Replicate)))
head(dat)
lapply(dat, class)
attach(dat)
# look at design
table(paste(Event, EventTime, Date), paste(Site, Replicate))
plot(Date, lgEC, pch=as.factor(Site))
plot(Date, LgEC, pch=as.factor(Site))
as.factor(Site)
plot(Date, LgEC, pch=as.numeric(as.factor(Site)))
windows(h=4, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(Date, LgEC, pch=as.numeric(as.factor(Site)))
sitecode <- as.numeric(as.factor(Site))
windows(h=4, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(Date, LgEC, pch=sitecode, col=sitecode+1)
aggregate(LgEC ~ Date + Site, dat, mean)
# look at design
table(paste(Event, EventTime, Date), paste(Site, Replicate))
sitecode <- as.numeric(as.factor(Site))
sus <- sort(unique(sitecode))
sue <- sort(unique(Event))
meanz <- aggregate(LgEC ~ Date + Site, dat, mean)
windows(h=4, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(Date, LgEC, pch=sitecode, col=sitecode+1)
for(i in seq(sus)) {
for(j in seq(sue)) {
sel <- sitecode==sus[i] & Event==sue[j]
lines(Date[sel], LgEC[sel], col=i+1)
}}
meanz
meanz <- aggregate(LgEC ~ Date + Site + Event, dat, mean)
head(meanz)
search()
detach()
cleanup()
wb <- loadWorkbook("C:/JVA/Consult/Shively/Snowmelt.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
head(dat)
        # Date Event EventTime Site Replicate     LgEC
# 1 2014-02-18     1         1   DC         1 1.462398
# 2 2014-02-18     1         1   DC         2 1.690196
# 3 2014-02-18     1         1   DC         3 1.662758
# 4 2014-02-19     1         2   DC         1 1.785330
# 5 2014-02-19     1         2   DC         2 1.785330
# 6 2014-02-19     1         2   DC         3 1.707570
dat$sitecode <- as.numeric(as.factor(dat$Site))
attach(dat)
# look at design
table(paste(Event, EventTime, Date), paste(Site, Replicate))
sus <- sort(unique(sitecode))
sue <- sort(unique(Event))
meanz <- aggregate(LgEC ~ Date + sitecode + Event, dat, mean)
meanz
windows(h=4, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(Date, LgEC, pch=sitecode, col=sitecode+1)
for(i in seq(sus)) {
for(j in seq(sue)) {
sel <- meanz$sitecode==sus[i] & meanz$Event==sue[j]
lines(meanz$Date[sel], meanz$LgEC[sel], col=i+1)
}}
par(mar=c(4, 4, 1, 1), las=1)
plot(Date, LgEC, pch=sitecode, col=sitecode+1)
for(i in seq(sus)) {
for(j in seq(sue)) {
sel <- meanz$sitecode==sus[i] & meanz$Event==sue[j]
lines(spline(meanz$Date[sel], meanz$LgEC[sel], 1000), col=i+1, lwd=2)
}}
par(mar=c(4, 4, 1, 1), las=1)
plot(Date, LgEC, pch=sitecode, col=sitecode+1)
for(i in seq(sus)) {
for(j in seq(sue)) {
sel <- meanz$sitecode==sus[i] & meanz$Event==sue[j]
lines(meanz$Date[sel], meanz$LgEC[sel], col=i+1, lwd=2)
#lines(spline(meanz$Date[sel], meanz$LgEC[sel], 1000), col=i+1, lwd=2)
}}
windows(h=4, w=9)
par(mar=c(4, 4, 1, 1), las=1)
for(j in seq(sue)) {
sel <- Event==sue[j]
plot(Date[sel], LgEC[sel], pch=sitecode, col=sitecode+1)
for(i in seq(sus)) {
sel <- meanz$sitecode==sus[i] & meanz$Event==sue[j]
lines(meanz$Date[sel], meanz$LgEC[sel], col=i+1, lwd=2)
#lines(spline(meanz$Date[sel], meanz$LgEC[sel], 1000), col=i+1, lwd=2)
}
}
windows()
par(mar=c(4, 4, 1, 1), mfrow=c(3, 1), las=1)
for(j in seq(sue)) {
sel <- Event==sue[j]
plot(Date[sel], LgEC[sel], pch=sitecode, col=sitecode+1)
for(i in seq(sus)) {
sel <- meanz$sitecode==sus[i] & meanz$Event==sue[j]
lines(meanz$Date[sel], meanz$LgEC[sel], col=i+1, lwd=2)
#lines(spline(meanz$Date[sel], meanz$LgEC[sel], 1000), col=i+1, lwd=2)
}
}
windows(h=9, w=6.5)
par(mar=c(4, 4, 1, 1), mfrow=c(3, 1), las=1)
for(j in seq(sue)) {
sel <- Event==sue[j]
plot(Date[sel], LgEC[sel], pch=sitecode, col=sitecode+1)
for(i in seq(sus)) {
sel <- meanz$sitecode==sus[i] & meanz$Event==sue[j]
lines(meanz$Date[sel], meanz$LgEC[sel], col=i+1, lwd=2)
#lines(spline(meanz$Date[sel], meanz$LgEC[sel], 1000), col=i+1, lwd=2)
}
}
par(mar=c(4, 4, 1, 1), mfrow=c(3, 1), las=1)
for(j in seq(sue)) {
sel <- Event==sue[j]
plot(Date[sel], LgEC[sel], pch=sitecode, ylim=range(LgEC), col=sitecode+1)
for(i in seq(sus)) {
sel <- meanz$sitecode==sus[i] & meanz$Event==sue[j]
lines(meanz$Date[sel], meanz$LgEC[sel], col=i+1, lwd=2)
#lines(spline(meanz$Date[sel], meanz$LgEC[sel], 1000), col=i+1, lwd=2)
}
}
axislogk
search()
ls(4)
stringin("log", ls(4))
prettylog
?prettylog
vals <- rlnorm(100, 6)
summary(vals)
prettylog(vals, 1, 0)
prettylog(vals, 1)
prettylog(vals, c(1, 2, 5))
x <- 10^LgEC
x
prettylog(x)
prettylog(x, extra=0)
prettylog(x, lead=1, extra=0)
pl <- prettylog(10^LgEC, lead=1, extra=0)
axis(4, at=log10(pl), pl)
windows(h=9, w=6.5)
par(mar=c(3, 3, 1, 1), mfrow=c(3, 1), las=1, oma=c(2, 2, 0, 2))
for(j in seq(sue)) {
sel <- Event==sue[j]
plot(Date[sel], LgEC[sel], pch=sitecode, ylim=range(LgEC), col=sitecode+1, xlab="", ylab="")
for(i in seq(sus)) {
sel <- meanz$sitecode==sus[i] & meanz$Event==sue[j]
lines(meanz$Date[sel], meanz$LgEC[sel], col=i+1, lwd=2)
#lines(spline(meanz$Date[sel], meanz$LgEC[sel], 1000), col=i+1, lwd=2)
}
}
mtext("Date", side=1, outer=TRUE)
mtext("E. coli concentration", side=2, outer=TRUE)
pl <- prettylog(10^LgEC, lead=1, extra=0)
axis(4, at=log10(pl), pl)
windows(h=9, w=6.5)
par(mar=c(3, 3, 1, 1), mfrow=c(3, 1), oma=c(2, 2, 0, 2))
for(j in seq(sue)) {
sel <- Event==sue[j]
plot(Date[sel], LgEC[sel], pch=sitecode, ylim=range(LgEC), col=sitecode+1, las=1, xlab="", ylab="")
for(i in seq(sus)) {
sel <- meanz$sitecode==sus[i] & meanz$Event==sue[j]
lines(meanz$Date[sel], meanz$LgEC[sel], col=i+1, lwd=2)
#lines(spline(meanz$Date[sel], meanz$LgEC[sel], 1000), col=i+1, lwd=2)
}
}
mtext("Date", side=1, outer=TRUE)
mtext("E. coli concentration", side=2, outer=TRUE)
pl <- prettylog(10^LgEC, lead=1, extra=0)
axis(4, at=log10(pl), pl)
windows(h=9, w=6.5)
par(mar=c(3, 3, 1, 1), mfrow=c(3, 1), oma=c(2, 2, 0, 2))
for(j in seq(sue)) {
sel <- Event==sue[j]
plot(Date[sel], LgEC[sel], pch=sitecode, ylim=range(LgEC), col=sitecode+1, las=1, xlab="", ylab="")
axis(4, at=log10(pl), pl, las=1)
for(i in seq(sus)) {
sel <- meanz$sitecode==sus[i] & meanz$Event==sue[j]
lines(meanz$Date[sel], meanz$LgEC[sel], col=i+1, lwd=2)
#lines(spline(meanz$Date[sel], meanz$LgEC[sel], 1000), col=i+1, lwd=2)
}
}
mtext("Date", side=1, outer=TRUE)
mtext("E. coli concentration  (log scale)", side=2, outer=TRUE)
mtext("E. coli concentration  (artithmetic scale)", side=2, outer=TRUE)
par(mar=c(3, 3, 1, 1), mfrow=c(3, 1), oma=c(2, 2, 0, 2))
for(j in seq(sue)) {
sel <- Event==sue[j]
plot(Date[sel], LgEC[sel], pch=sitecode, ylim=range(LgEC), col=sitecode+1, las=1, xlab="", ylab="")
axis(4, at=log10(pl), pl, las=1)
for(i in seq(sus)) {
sel <- meanz$sitecode==sus[i] & meanz$Event==sue[j]
lines(meanz$Date[sel], meanz$LgEC[sel], col=i+1, lwd=2)
#lines(spline(meanz$Date[sel], meanz$LgEC[sel], 1000), col=i+1, lwd=2)
}
}
mtext("Date", side=1, outer=TRUE)
mtext("E. coli concentration  (log scale)", side=2, outer=TRUE)
mtext("E. coli concentration  (artithmetic scale)", side=4, outer=TRUE)
windows(h=9, w=6.5)
par(mar=c(3, 3, 1, 3), mfrow=c(3, 1), oma=c(2, 2, 0, 2))
for(j in seq(sue)) {
sel <- Event==sue[j]
plot(Date[sel], LgEC[sel], pch=sitecode, ylim=range(LgEC), col=sitecode+1, las=1, xlab="", ylab="")
axis(4, at=log10(pl), pl, las=1)
for(i in seq(sus)) {
sel <- meanz$sitecode==sus[i] & meanz$Event==sue[j]
lines(meanz$Date[sel], meanz$LgEC[sel], col=i+1, lwd=2)
#lines(spline(meanz$Date[sel], meanz$LgEC[sel], 1000), col=i+1, lwd=2)
}
}
mtext("Date", side=1, outer=TRUE)
mtext("E. coli concentration  (log scale)", side=2, outer=TRUE)
mtext("E. coli concentration  (artithmetic scale)", side=4, outer=TRUE)
# look at design
table(paste(Event, EventTime, Date), paste(Site, Replicate))
sus <- sort(unique(sitecode))
sue <- sort(unique(Event))
meanz <- aggregate(LgEC ~ Date + sitecode + Event, dat, mean)
pl <- prettylog(10^LgEC, lead=1, extra=0)
windows(h=9, w=6.5)
par(mar=c(3, 3, 1, 3), mfrow=c(3, 1), oma=c(2, 2, 0, 2))
for(j in seq(sue)) {
sel <- Event==sue[j]
plot(Date[sel], LgEC[sel], pch=sitecode, ylim=range(LgEC), col=sitecode+1, las=1, xlab="", ylab="")
axis(4, at=log10(pl), pl, las=1)
for(i in seq(sus)) {
sel2 <- meanz$sitecode==sus[i] & meanz$Event==sue[j]
lines(meanz$Date[sel2], meanz$LgEC[sel2], col=i+1, lwd=2)
}
}
mtext("Date", side=1, outer=TRUE)
mtext("E. coli concentration  (log scale)", side=2, outer=TRUE)
mtext("E. coli concentration  (artithmetic scale)", side=4, outer=TRUE)
meanz
j
i <- 1
sel2 <- meanz$sitecode==sus[i] & meanz$Event==sue[j]
meanz[sel2, ]
dat[Event==sue[j] & sitecode==sus[i], ]
windows(h=9, w=6.5)
par(mar=c(3, 3, 1, 3), mfrow=c(3, 1), oma=c(2, 2, 0, 2))
for(j in seq(sue)) {
sel <- Event==sue[j]
plot(Date[sel], LgEC[sel], pch=sitecode[sel], ylim=range(LgEC), col=sitecode+1, las=1, xlab="", ylab="")
axis(4, at=log10(pl), pl, las=1)
for(i in seq(sus)) {
sel2 <- meanz$sitecode==sus[i] & meanz$Event==sue[j]
lines(meanz$Date[sel2], meanz$LgEC[sel2], col=i+1, lwd=2)
}
}
mtext("Date", side=1, outer=TRUE)
mtext("E. coli concentration  (log scale)", side=2, outer=TRUE)
mtext("E. coli concentration  (artithmetic scale)", side=4, outer=TRUE)
windows(h=9, w=6.5)
par(mar=c(3, 3, 1, 3), mfrow=c(3, 1), oma=c(2, 2, 0, 2))
for(j in seq(sue)) {
sel <- Event==sue[j]
plot(Date[sel], LgEC[sel], pch=sitecode[sel], col=sitecode[sel]+1, ylim=range(LgEC), las=1, xlab="", ylab="")
axis(4, at=log10(pl), pl, las=1)
for(i in seq(sus)) {
sel2 <- meanz$sitecode==sus[i] & meanz$Event==sue[j]
lines(meanz$Date[sel2], meanz$LgEC[sel2], col=i+1, lwd=2)
}
}
mtext("Date", side=1, outer=TRUE)
mtext("E. coli concentration  (log scale)", side=2, outer=TRUE)
mtext("E. coli concentration  (artithmetic scale)", side=4, outer=TRUE)
par(mar=c(3, 3, 1, 3), mfrow=c(3, 1), oma=c(2, 2, 2, 2))
for(j in seq(sue)) {
sel <- Event==sue[j]
plot(Date[sel], LgEC[sel], pch=sitecode[sel], col=sitecode[sel]+1, ylim=range(LgEC), las=1, xlab="", ylab="")
axis(4, at=log10(pl), pl, las=1)
for(i in seq(sus)) {
sel2 <- meanz$sitecode==sus[i] & meanz$Event==sue[j]
lines(meanz$Date[sel2], meanz$LgEC[sel2], col=i+1, lwd=2)
}
}
mtext("Date", side=1, outer=TRUE)
mtext("E. coli concentration", side=2, outer=TRUE)
mtext("(log scale)", side=2, outer=TRUE)
mtext("(artithmetic scale)", side=4, outer=TRUE)
par(mar=c(3, 3, 1, 3), mfrow=c(3, 1), oma=c(2, 2, 2, 2))
for(j in seq(sue)) {
sel <- Event==sue[j]
plot(Date[sel], LgEC[sel], pch=sitecode[sel], col=sitecode[sel]+1, ylim=range(LgEC), las=1, xlab="", ylab="")
axis(4, at=log10(pl), pl, las=1)
for(i in seq(sus)) {
sel2 <- meanz$sitecode==sus[i] & meanz$Event==sue[j]
lines(meanz$Date[sel2], meanz$LgEC[sel2], col=i+1, lwd=2)
}
}
mtext("Date", side=1, outer=TRUE)
mtext("E. coli concentration", side=3, outer=TRUE)
mtext("(log scale)", side=2, outer=TRUE)
mtext("(artithmetic scale)", side=4, outer=TRUE)
sus <- sort(unique(sitecode))
sue <- sort(unique(Event))
meanz <- aggregate(LgEC ~ Date + sitecode + Event, dat, mean)
pl <- prettylog(10^LgEC, lead=c(1, 5) extra=0)
windows(h=9, w=6.5)
par(mar=c(3, 3, 1, 3), mfrow=c(3, 1), oma=c(2, 2, 2, 2))
for(j in seq(sue)) {
sel <- Event==sue[j]
plot(Date[sel], LgEC[sel], pch=sitecode[sel], col=sitecode[sel]+1, ylim=range(LgEC), las=1, xlab="", ylab="")
axis(4, at=log10(pl), pl, las=1)
for(i in seq(sus)) {
sel2 <- meanz$sitecode==sus[i] & meanz$Event==sue[j]
lines(meanz$Date[sel2], meanz$LgEC[sel2], col=i+1, lwd=2)
}
}
mtext("Date", side=1, outer=TRUE)
mtext("E. coli concentration", side=3, outer=TRUE)
mtext("(log scale)", side=2, outer=TRUE)
mtext("(artithmetic scale)", side=4, outer=TRUE)
# look at design
table(paste(Event, EventTime, Date), paste(Site, Replicate))
sus <- sort(unique(sitecode))
sue <- sort(unique(Event))
meanz <- aggregate(LgEC ~ Date + sitecode + Event, dat, mean)
pl <- prettylog(10^LgEC, lead=c(1, 5), extra=0)
windows(h=9, w=6.5)
par(mar=c(3, 3, 1, 3), mfrow=c(3, 1), oma=c(2, 2, 2, 2))
for(j in seq(sue)) {
sel <- Event==sue[j]
plot(Date[sel], LgEC[sel], pch=sitecode[sel], col=sitecode[sel]+1, ylim=range(LgEC), las=1, xlab="", ylab="")
axis(4, at=log10(pl), pl, las=1)
for(i in seq(sus)) {
sel2 <- meanz$sitecode==sus[i] & meanz$Event==sue[j]
lines(meanz$Date[sel2], meanz$LgEC[sel2], col=i+1, lwd=2)
}
}
mtext("Date", side=1, outer=TRUE)
mtext("E. coli concentration", side=3, outer=TRUE)
mtext("(log scale)", side=2, outer=TRUE)
mtext("(artithmetic scale)", side=4, outer=TRUE)
sus <- sort(unique(sitecode))
sue <- sort(unique(Event))
meanz <- aggregate(LgEC ~ Date + sitecode + Event, dat, mean)
pl <- prettylog(10^LgEC, lead=c(1, 3, 5), extra=0)
windows(h=9, w=6.5)
par(mar=c(3, 3, 1, 3), mfrow=c(3, 1), oma=c(2, 2, 2, 2))
for(j in seq(sue)) {
sel <- Event==sue[j]
plot(Date[sel], LgEC[sel], pch=sitecode[sel], col=sitecode[sel]+1, ylim=range(LgEC), las=1, xlab="", ylab="")
axis(4, at=log10(pl), pl, las=1)
for(i in seq(sus)) {
sel2 <- meanz$sitecode==sus[i] & meanz$Event==sue[j]
lines(meanz$Date[sel2], meanz$LgEC[sel2], col=i+1, lwd=2)
}
}
mtext("Date", side=1, outer=TRUE)
mtext("E. coli concentration", side=3, outer=TRUE)
mtext("(log scale)", side=2, outer=TRUE)
mtext("(artithmetic scale)", side=4, outer=TRUE)
sus <- sort(unique(sitecode))
sue <- sort(unique(Event))
meanz <- aggregate(LgEC ~ Date + sitecode + Event, dat, mean)
pl <- prettylog(10^LgEC, lead=c(1, 2, 5), extra=0)
windows(h=9, w=6.5)
par(mar=c(3, 3, 1, 3), mfrow=c(3, 1), oma=c(2, 2, 2, 2))
for(j in seq(sue)) {
sel <- Event==sue[j]
plot(Date[sel], LgEC[sel], pch=sitecode[sel], col=sitecode[sel]+1, ylim=range(LgEC), las=1, xlab="", ylab="")
axis(4, at=log10(pl), pl, las=1)
for(i in seq(sus)) {
sel2 <- meanz$sitecode==sus[i] & meanz$Event==sue[j]
lines(meanz$Date[sel2], meanz$LgEC[sel2], col=i+1, lwd=2)
}
}
mtext("Date", side=1, outer=TRUE)
mtext("E. coli concentration", side=3, outer=TRUE)
mtext("(log scale)", side=2, outer=TRUE)
mtext("(artithmetic scale)", side=4, outer=TRUE)
windows(h=9, w=6.5)
par(mar=c(3, 3, 1, 3), mfrow=c(3, 1), oma=c(2, 2, 2, 2))
for(j in seq(sue)) {
sel <- Event==sue[j]
plot(Date[sel], LgEC[sel], pch=sitecode[sel], col=sitecode[sel]+1, ylim=range(LgEC), las=1, xlab="", ylab="")
axis(4, at=log10(pl), pl, las=1)
mtext(paste("Event", j), side=3, line=-2, adj=0.9)
for(i in seq(sus)) {
sel2 <- meanz$sitecode==sus[i] & meanz$Event==sue[j]
lines(meanz$Date[sel2], meanz$LgEC[sel2], col=i+1, lwd=2)
}
}
mtext("Date", side=1, outer=TRUE)
mtext("E. coli concentration", side=3, outer=TRUE)
mtext("(log scale)", side=2, outer=TRUE)
mtext("(artithmetic scale)", side=4, outer=TRUE)
windows(h=9, w=6.5)
par(mar=c(3, 3, 1, 3), mfrow=c(3, 1), oma=c(2, 2, 2, 2))
for(j in seq(sue)) {
sel <- Event==sue[j]
plot(Date[sel], LgEC[sel], pch=sitecode[sel], col=sitecode[sel]+1, ylim=range(LgEC), las=1, xlab="", ylab="")
axis(4, at=log10(pl), pl, las=1)
mtext(paste("Event", j), side=3, line=-2, adj=0.98)
for(i in seq(sus)) {
sel2 <- meanz$sitecode==sus[i] & meanz$Event==sue[j]
lines(meanz$Date[sel2], meanz$LgEC[sel2], col=i+1, lwd=2)
}
}
mtext("Date", side=1, outer=TRUE)
mtext("E. coli concentration", side=3, outer=TRUE)
mtext("(log scale)", side=2, outer=TRUE)
mtext("(artithmetic scale)", side=4, outer=TRUE)
sort(unique(Site))
head(dat)
dat
windows(h=9, w=6.5)
par(mar=c(3, 3, 1, 3), mfrow=c(3, 1), oma=c(2, 2, 2, 2))
for(j in seq(sue)) {
sel <- Event==sue[j]
plot(Date[sel], LgEC[sel], type="n", ylim=range(LgEC), las=1, xlab="", ylab="")
text(Date[sel], LgEC[sel], c("C", "D", "K")[sitecode[sel]], col=sitecode[sel]+1)
axis(4, at=log10(pl), pl, las=1)
mtext(paste("Event", j), side=3, line=-2, adj=0.98)
for(i in seq(sus)) {
sel2 <- meanz$sitecode==sus[i] & meanz$Event==sue[j]
lines(meanz$Date[sel2], meanz$LgEC[sel2], col=i+1, lwd=2)
}
if(j==3) {
legend("bottom", 
}
}
mtext("Date", side=1, outer=TRUE)
mtext("E. coli concentration", side=3, outer=TRUE)
mtext("(log scale)", side=2, outer=TRUE)
mtext("(artithmetic scale)", side=4, outer=TRUE)
windows(h=9, w=6.5)
par(mar=c(3, 3, 1, 3), mfrow=c(3, 1), oma=c(2, 2, 2, 2))
for(j in seq(sue)) {
sel <- Event==sue[j]
plot(Date[sel], LgEC[sel], type="n", ylim=range(LgEC), las=1, xlab="", ylab="")
text(Date[sel], LgEC[sel], c("C", "D", "K")[sitecode[sel]], col=sitecode[sel]+1)
axis(4, at=log10(pl), pl, las=1)
mtext(paste("Event", j), side=3, line=-2, adj=0.98)
for(i in seq(sus)) {
sel2 <- meanz$sitecode==sus[i] & meanz$Event==sue[j]
lines(meanz$Date[sel2], meanz$LgEC[sel2], col=i+1, lwd=2)
}
}
mtext("Date", side=1, outer=TRUE)
mtext("E. coli concentration", side=3, outer=TRUE)
mtext("(log scale)", side=2, outer=TRUE)
mtext("(artithmetic scale)", side=4, outer=TRUE)
table(paste(Event, EventTime, Date), paste(Site, Replicate))
par(mar=c(3, 3, 1, 3), mfrow=c(3, 1), oma=c(2, 2, 2, 2))
for(j in seq(sue)) {
sel <- Event==sue[j]
plot(Date[sel], LgEC[sel], type="n", ylim=range(LgEC), las=1, xlab="", ylab="")
text(Date[sel], LgEC[sel], c("C", "D", "K")[sitecode[sel]], col=sitecode[sel]+1)
axis(4, at=log10(pl), pl, las=1)
mtext(paste("Event", j), side=3, line=-2, adj=0.98)
for(i in seq(sus)) {
sel2 <- meanz$sitecode==sus[i] & meanz$Event==sue[j]
lines(meanz$Date[sel2], meanz$LgEC[sel2], col=i+1, lwd=2)
}
}
mtext("Date", side=1, outer=TRUE)
mtext("E. coli Density", side=3, outer=TRUE)
mtext("(log scale)", side=2, outer=TRUE)
mtext("(artithmetic scale)", side=4, outer=TRUE)
dim(meanz)
fit <- glm(LgEC ~ as.factor(Date) + as.factor(Site), data=meanz)
head(meanz)
fit <- glm(LgEC ~ as.factor(Date) + as.factor(sitecode), data=meanz)
summary(fit)
fit <- aov(LgEC ~ as.factor(Date) + as.factor(sitecode), data=meanz)
summary(fit)
meanz$p <- fit$fitted
head(meanz)
meanz$Date + 1
meanz$Date + 1000
meanz$Date + 60*60*24
meanz$Date2 <- meanz$Date + 60*60*24
head(meanz)
meanz$r <- fit$resid
fit <- aov(LgEC ~ as.factor(Date) + as.factor(sitecode), data=meanz)
meanz$r1 <- fit$resid
meanz$r2 <- fit$resid
meanz$Date2 <- meanz$Date + 60*60*24
dat1 <- meanz[, c("Date", "Date2", "sitecode", "r1")]
dat2 <- meanz[, c("Date", "sitecode", "r2")]
merge(dat1, dat2, by.x=c("Date2", "sitecode"), by.y=c("Date", "sitecode"))
dat1 <- meanz[, c("Date", "Date2", "sitecode", "r1")]
dat2 <- meanz[, c("Date", "sitecode", "r2")]
dat12 <- merge(dat1, dat2, by.x=c("Date2", "sitecode"), by.y=c("Date", "sitecode"))
windows()
plot(dat12$r1, dat12$r2)
cor.texcor.test(dat12$r1, dat12$r2)
cor.test(dat12$r1, dat12$r2)
meanz
head(meanz)
meanz <- aggregate(LgEC ~ Date + Site + sitecode + Event, dat, mean)
write.csv(meanz[, c("Date", "Site", "Event", "LgEC")], "C:/JVA/Consult/Shively/SnowmeltMeans.csv")
write.csv(meanz[, c("Date", "Site", "Event", "LgEC")], "C:/JVA/Consult/Shively/SnowmeltMeans.csv", row.names=FALSE)
unique(dat$Site)
cleanup()
q()
?numbers2words
numbers2words(c(4560000000, -123, 1000, 12))
?capwords
# C:\JVA\Consult\Yule\Superior Coreg\PhotoCaliper.r
library(jpeg)
# read in the data
wb <- loadWorkbook("C:/JVA/Consult/Yule/Superior Coreg/2014 Caliper and SigmaScan Correction Data JVA.xlsx")
ydat <- readWorksheet(wb, sheet="Caliper & Sigma for Analyses", startRow=1)
# kdat <- readWorksheet(wb, sheet="Koelz Superior Data", startRow=1)
# start a document
doc <- startrtf(file=paste(Sys.Date(), "Caliper vs. Photo"), dir="C:/JVA/Consult/Yule/Superior Coreg")
heading("Lake Superior Coregonid Morphometrics")
heading("Caliper vs. Photo Measurements", 2)
heading("for Dan Yule and Allison Derose", 3)
heading("by Jean Adams", 3)
heading(Sys.Date(), 3)
para(
"Truss measurements from Lake Superior coregonids were made using two methods: distances measured in three dimensions using calipers on actual fish and",
" distances measured in two dimensions using digitized side-view photos of fish.",
"  For trusses between two points that both lie on the 'boundary' of a side-viewed fish (Figure ", jvamiscenv$figcount, "),",
" measurements made with calipers and photos should be the same.",
"  This encompasses most of the truss measurements made (Table).",
"  However, if either of the two points does NOT lie on the 'boundary' of a side-viewed fish,",
" measurements made with calipers will be longer than those made with photos.",
"  The expected relation between the measures can be summarized using the Pythagorean theorem,")
para("P2 = C2 + T2,")
para("where P (the hypotenuse) is the photo measure, C is the caliper measure, and T is the offset in the transverse (left to right relative to the fish)",
" direction between the two points (Figure ", jvamiscenv$figcount+1, ").")
para("We have no empirical measurements of the offset for any given truss,",
" but we can assume that there is a relation between the offset and the length of the fish, which may vary with species or species group.", 
"  We will use the caliper measured standard length so that the results of the model may be applied to Koelz' data later.", 
"  So, for each truss (other than standard length), we will fit six models (listed in order from least to most complex) relating the caliper and photo measures,",
" with the difference of the squared measures as the response (P2 - C2) and explanatory variables",
" (1) none; (2) fish length;",
" (3) fish length and species group; (4) fish length, species group, and their interaction;",
" (5) fish length and species; and (6) fish length, species, and their interaction.",
"  For the standard length truss, we will fit three models relating the caliper and photo measures,",
" with the same response and explanatory variables (1) none, (2.5) species group, and (4.5) species.",
"  The best of these models will be selected for each truss, by choosing the simplest model (the lowest numbered model)",
" with a sample size adjusted Akaike's information criterion (AICc) within 2 of the minimum.",
"  If the intercept only model is selected and the 95% confidence interval of the intercept includes zero, then no conversion between measures is required."
)
figimg <- function() {
par(mar=rep(0, 4))
plotblank(axes=FALSE)
pusr <- par("usr")
rasterImage(img, pusr[1], pusr[3], pusr[2], pusr[4])
}
img <- readJPEG("C:/JVA/Consult/Yule/Superior Coreg/FishBoundary.jpg")
figu("The 'boundary' of a side-viewed fish.", FIG=figimg, w=6.5, h=dim(img)[1]/dim(img)[2]*6.5)
img <- readJPEG("C:/JVA/Consult/Yule/Superior Coreg/TopView.jpg")
figu("The relation between truss measures displayed on a top-viewed fish, when one of the points does not lie on the 'boundary' of a side-viewed fish.", 
FIG=figimg, w=6.5, h=dim(img)[1]/dim(img)[2]*6.5)
ord <- c(1, 2, 3, 8, 14, 6, 19, 7, 9, 12, 20, 21, 4, 10, 11, 13, 15, 18, 16, 5, 17)
Ptruss <- sort(stringin("sigma", names(ydat)))[ord]
Ctruss <- sort(stringin("caliper", names(ydat)))[ord]
truss <- substring(Ptruss, 7)
exp.none <- c("L", "O", "SD", "SA", "D", "DH", "DB", "DA", "AH", "AB", "AD")
exp.some <- c("M", "S", "H", "E", "V", "AV", "P", "PV")
exp.unkn <- c("AV.V", "PV.P")
expect <- rep("1 none", length(truss))
expect[truss %in% exp.some] <- "2-5 some"
expect[truss %in% exp.unkn] <- "6 unkn"
exp1not1 <- resb$truss[resb$expect=="1 none" & resb$bestmodel!=1]
bestmodel <- rep(NA, length(truss))
windows(w=6.5, h=8)
fig <- function() {
par(mfrow=c(7, 3), mar=c(0, 0, 0, 0), oma=c(2, 2, 1, 1))
for(i in seq_along(truss)) {
P <- ydat[, Ptruss[i]]
C <- ydat[, Ctruss[i]]
CL <- ydat[, "CALIPER.L"]
PL <- ydat[, "SIGMA.L"]
S <- as.factor(ydat$SPECIES)
G <- as.factor(ydat$TYPE)
Y <- P/PL
X <- C/CL
if(truss[i]=="L") {
fits <- list(
lm(P ~ C),
lm(P ~ C + G),
lm(P ~ C + S)
)
aic <- AICc(fits)
print(truss[i])
print(aic)
mm <- min(aic$model[aic$daicc<2])
bestmodel[i] <- c(1, 1.5, 3.5)[mm]
if(mm==1) kol <- "black" else if(mm==2) kol <- blindcolz[as.numeric(G)+1] else kol <- as.numeric(S)+1
# eqscplot(C, P, type="n", xlim=range(C, P), ylim=range(C, P), axes=FALSE, xlab="", ylab="")
plot(C, P, type="n", axes=FALSE, xlab="", ylab="")
abline(0, 1)
text(C, P, substring(S, 1, 1), col=kol)
points(C, fits[[mm]]$fitted, pch=16, col=kol)
box()
mtext(paste(truss[i], bestmodel[i], sep="-"), side=3, line=-1.5, adj=0.05, cex=0.8)
} else {
fits <- list(
lm(Y ~ X),
lm(Y ~ X + G),
lm(Y ~ X*G),
lm(Y ~ X + S),
lm(Y ~ X*S)
)
aic <- AICc(fits)
print(truss[i])
print(aic)
mm <- min(aic$model[aic$daicc<2])
bestmodel[i] <- mm
if(mm==1) kol <- "black" else if(mm<3.5) kol <- blindcolz[as.numeric(G)+1] else kol <- as.numeric(S)+1
# eqscplot(X, Y, type="n", xlim=range(X, Y), ylim=range(X, Y), axes=FALSE, xlab="", ylab="")
plot(X, Y, type="n", axes=FALSE, xlab="", ylab="")
abline(0, 1)
text(X, Y, substring(S, 1, 1), col=kol)
points(X, fits[[mm]]$fitted, pch=16, col=kol)
box()
mtext(paste(truss[i], bestmodel[i], sep="-"), side=3, line=-1.5, adj=0.05, cex=0.8)
}
}
mtext("Caliper Truss/Length", side=1, outer=TRUE, line=0.5)
mtext("Photo Truss/Length", side=2, outer=TRUE, line=0.5)
}
figu("Observed (letters) and model-predicted (solid circles) relation between length-adjusted truss lengths measured with calipers and photos.", newpage="port")
res <- data.frame(truss, expect, bestmodel)
resb <- res[order(res$expect, res$bestmodel, res$truss), ]
resb
# ord <- match(resb$truss, truss)
tab <- resb
tabl("Expected model and AICc-based best model for each truss.", row.names=FALSE)
exp1not1 <- resb$truss[resb$expect=="1 none" & resb$bestmodel!=1]
capwords(numbers2words(length(exp1not1)))
exp1not1
bestmodel
i <- 1
P <- ydat[, Ptruss[i]]
C <- ydat[, Ctruss[i]]
CL <- ydat[, "CALIPER.L"]
PL <- ydat[, "SIGMA.L"]
S <- as.factor(ydat$SPECIES)
G <- as.factor(ydat$TYPE)
Y <- P/PL
X <- C/CL
fits <- list(
lm(Y ~ X),
lm(Y ~ X + G),
lm(Y ~ X*G),
lm(Y ~ X + S),
lm(Y ~ X*S)
)
aic <- AICc(fits)
print(truss[i])
print(aic)
mm <- min(aic$model[aic$daicc<2])
bestmodel[i] <- mm
bestmodel
mm
bestmodel <- rep(NA, length(truss))
windows(w=6.5, h=8)
fig <- function() {
par(mfrow=c(7, 3), mar=c(0, 0, 0, 0), oma=c(2, 2, 1, 1))
for(i in seq_along(truss)) {
P <- ydat[, Ptruss[i]]
C <- ydat[, Ctruss[i]]
CL <- ydat[, "CALIPER.L"]
PL <- ydat[, "SIGMA.L"]
S <- as.factor(ydat$SPECIES)
G <- as.factor(ydat$TYPE)
Y <- P/PL
X <- C/CL
if(truss[i]=="L") {
fits <- list(
lm(P ~ C),
lm(P ~ C + G),
lm(P ~ C + S)
)
aic <- AICc(fits)
print(truss[i])
print(aic)
mm <- min(aic$model[aic$daicc<2])
bestmodel[i] <<- c(1, 1.5, 3.5)[mm]
if(mm==1) kol <- "black" else if(mm==2) kol <- blindcolz[as.numeric(G)+1] else kol <- as.numeric(S)+1
# eqscplot(C, P, type="n", xlim=range(C, P), ylim=range(C, P), axes=FALSE, xlab="", ylab="")
plot(C, P, type="n", axes=FALSE, xlab="", ylab="")
abline(0, 1)
text(C, P, substring(S, 1, 1), col=kol)
points(C, fits[[mm]]$fitted, pch=16, col=kol)
box()
mtext(paste(truss[i], bestmodel[i], sep="-"), side=3, line=-1.5, adj=0.05, cex=0.8)
} else {
fits <- list(
lm(Y ~ X),
lm(Y ~ X + G),
lm(Y ~ X*G),
lm(Y ~ X + S),
lm(Y ~ X*S)
)
aic <- AICc(fits)
print(truss[i])
print(aic)
mm <- min(aic$model[aic$daicc<2])
bestmodel[i] <<- mm
if(mm==1) kol <- "black" else if(mm<3.5) kol <- blindcolz[as.numeric(G)+1] else kol <- as.numeric(S)+1
# eqscplot(X, Y, type="n", xlim=range(X, Y), ylim=range(X, Y), axes=FALSE, xlab="", ylab="")
plot(X, Y, type="n", axes=FALSE, xlab="", ylab="")
abline(0, 1)
text(X, Y, substring(S, 1, 1), col=kol)
points(X, fits[[mm]]$fitted, pch=16, col=kol)
box()
mtext(paste(truss[i], bestmodel[i], sep="-"), side=3, line=-1.5, adj=0.05, cex=0.8)
}
}
mtext("Caliper Truss/Length", side=1, outer=TRUE, line=0.5)
mtext("Photo Truss/Length", side=2, outer=TRUE, line=0.5)
}
figu("Observed (letters) and model-predicted (solid circles) relation between length-adjusted truss lengths measured with calipers and photos.", newpage="port")
res <- data.frame(truss, expect, bestmodel)
resb <- res[order(res$expect, res$bestmodel, res$truss), ]
resb
# ord <- match(resb$truss, truss)
tab <- resb
tabl("Expected model and AICc-based best model for each truss.", row.names=FALSE)
exp1not1 <- resb$truss[resb$expect=="1 none" & resb$bestmodel!=1]
bestmodel
exp1not1
capwords(numbers2words(length(exp1not1)))
fig()
resb
cut(resb$bestmodel, c(0, 1.5, 3.7, 
ord <- c(1, 2, 3, 8, 14, 6, 19, 7, 9, 12, 20, 21, 4, 10, 11, 13, 15, 18, 16, 5, 17)
Ptruss <- sort(stringin("sigma", names(ydat)))[ord]
Ctruss <- sort(stringin("caliper", names(ydat)))[ord]
truss <- substring(Ptruss, 7)
exp.none <- c("L", "O", "SD", "SA", "D", "DH", "DB", "DA", "AH", "AB", "AD")
exp.some <- c("M", "S", "H", "E", "V", "AV", "P", "PV")
exp.unkn <- c("AV.V", "PV.P")
expect <- rep("1 none", length(truss))
expect[truss %in% exp.some] <- "2-5 some"
expect[truss %in% exp.unkn] <- "6 unkn"
bestmodel <- rep(NA, length(truss))
fig <- function() {
par(mfrow=c(7, 3), mar=c(0, 0, 0, 0), oma=c(2, 2, 1, 1))
for(i in seq_along(truss)) {
P <- ydat[, Ptruss[i]]
C <- ydat[, Ctruss[i]]
CL <- ydat[, "CALIPER.L"]
PL <- ydat[, "SIGMA.L"]
S <- as.factor(ydat$SPECIES)
G <- as.factor(ydat$TYPE)
Y <- P/PL
X <- C/CL
if(truss[i]=="L") {
fits <- list(
lm(P ~ C),
lm(P ~ C + G),
lm(P ~ C*G),
lm(P ~ C + S)
lm(P ~ C*S)
)
aic <- AICc(fits)
print(truss[i])
print(aic)
mm <- min(aic$model[aic$daicc<2])
bestmodel[i] <<- mm - 0.5
if(mm==1) kol <- "black" else if(mm<3.5) kol <- blindcolz[as.numeric(G)+1] else kol <- as.numeric(S)+1
plot(C, P, type="n", axes=FALSE, xlab="", ylab="")
abline(0, 1)
text(C, P, substring(S, 1, 1), col=kol)
points(C, fits[[mm]]$fitted, pch=16, col=kol)
box()
mtext(paste(truss[i], bestmodel[i], sep="-"), side=3, line=-1.5, adj=0.05, cex=0.8)
} else {
fits <- list(
lm(Y ~ X),
lm(Y ~ X + G),
lm(Y ~ X*G),
lm(Y ~ X + S),
lm(Y ~ X*S)
)
aic <- AICc(fits)
print(truss[i])
print(aic)
mm <- min(aic$model[aic$daicc<2])
bestmodel[i] <<- mm
if(mm==1) kol <- "black" else if(mm<3.5) kol <- blindcolz[as.numeric(G)+1] else kol <- as.numeric(S)+1
plot(X, Y, type="n", axes=FALSE, xlab="", ylab="")
abline(0, 1)
text(X, Y, substring(S, 1, 1), col=kol)
points(X, fits[[mm]]$fitted, pch=16, col=kol)
box()
mtext(paste(truss[i], bestmodel[i], sep="-"), side=3, line=-1.5, adj=0.05, cex=0.8)
}
}
mtext("Caliper Truss/Length", side=1, outer=TRUE, line=0.5)
mtext("Photo Truss/Length", side=2, outer=TRUE, line=0.5)
}
ord <- c(1, 2, 3, 8, 14, 6, 19, 7, 9, 12, 20, 21, 4, 10, 11, 13, 15, 18, 16, 5, 17)
Ptruss <- sort(stringin("sigma", names(ydat)))[ord]
Ctruss <- sort(stringin("caliper", names(ydat)))[ord]
truss <- substring(Ptruss, 7)
exp.none <- c("L", "O", "SD", "SA", "D", "DH", "DB", "DA", "AH", "AB", "AD")
exp.some <- c("M", "S", "H", "E", "V", "AV", "P", "PV")
exp.unkn <- c("AV.V", "PV.P")
expect <- rep("1 none", length(truss))
expect[truss %in% exp.some] <- "2-5 some"
expect[truss %in% exp.unkn] <- "6 unkn"
bestmodel <- rep(NA, length(truss))
fig <- function() {
par(mfrow=c(7, 3), mar=c(0, 0, 0, 0), oma=c(2, 2, 1, 1))
for(i in seq_along(truss)) {
P <- ydat[, Ptruss[i]]
C <- ydat[, Ctruss[i]]
CL <- ydat[, "CALIPER.L"]
PL <- ydat[, "SIGMA.L"]
S <- as.factor(ydat$SPECIES)
G <- as.factor(ydat$TYPE)
Y <- P/PL
X <- C/CL
if(truss[i]=="L") {
fits <- list(
lm(P ~ C),
lm(P ~ C + G),
lm(P ~ C*G),
lm(P ~ C + S)
lm(P ~ C*S)
)
aic <- AICc(fits)
print(truss[i])
print(aic)
mm <- min(aic$model[aic$daicc<2])
bestmodel[i] <<- mm - 0.5
if(mm==1) kol <- "black" else if(mm<3.5) kol <- blindcolz[as.numeric(G)+1] else kol <- as.numeric(S)+1
plot(C, P, type="n", axes=FALSE, xlab="", ylab="")
abline(0, 1)
text(C, P, substring(S, 1, 1), col=kol)
points(C, fits[[mm]]$fitted, pch=16, col=kol)
box()
mtext(paste(truss[i], bestmodel[i], sep="-"), side=3, line=-1.5, adj=0.05, cex=0.8)
} else {
fits <- list(
lm(Y ~ X),
lm(Y ~ X + G),
lm(Y ~ X*G),
lm(Y ~ X + S),
lm(Y ~ X*S)
)
aic <- AICc(fits)
print(truss[i])
print(aic)
mm <- min(aic$model[aic$daicc<2])
bestmodel[i] <<- mm
if(mm==1) kol <- "black" else if(mm<3.5) kol <- blindcolz[as.numeric(G)+1] else kol <- as.numeric(S)+1
plot(X, Y, type="n", axes=FALSE, xlab="", ylab="")
abline(0, 1)
text(X, Y, substring(S, 1, 1), col=kol)
points(X, fits[[mm]]$fitted, pch=16, col=kol)
box()
mtext(paste(truss[i], bestmodel[i], sep="-"), side=3, line=-1.5, adj=0.05, cex=0.8)
}
}
mtext("Caliper Truss/Length", side=1, outer=TRUE, line=0.5)
mtext("Photo Truss/Length", side=2, outer=TRUE, line=0.5)
}
fig <- function() {
par(mfrow=c(7, 3), mar=c(0, 0, 0, 0), oma=c(2, 2, 1, 1))
for(i in seq_along(truss)) {
P <- ydat[, Ptruss[i]]
C <- ydat[, Ctruss[i]]
CL <- ydat[, "CALIPER.L"]
PL <- ydat[, "SIGMA.L"]
S <- as.factor(ydat$SPECIES)
G <- as.factor(ydat$TYPE)
Y <- P/PL
X <- C/CL
if(truss[i]=="L") {
fits <- list(
lm(P ~ C),
lm(P ~ C + G),
lm(P ~ C*G),
lm(P ~ C + S),
lm(P ~ C*S)
)
aic <- AICc(fits)
print(truss[i])
print(aic)
mm <- min(aic$model[aic$daicc<2])
bestmodel[i] <<- mm - 0.5
if(mm==1) kol <- "black" else if(mm<3.5) kol <- blindcolz[as.numeric(G)+1] else kol <- as.numeric(S)+1
plot(C, P, type="n", axes=FALSE, xlab="", ylab="")
abline(0, 1)
text(C, P, substring(S, 1, 1), col=kol)
points(C, fits[[mm]]$fitted, pch=16, col=kol)
box()
mtext(paste(truss[i], bestmodel[i], sep="-"), side=3, line=-1.5, adj=0.05, cex=0.8)
} else {
fits <- list(
lm(Y ~ X),
lm(Y ~ X + G),
lm(Y ~ X*G),
lm(Y ~ X + S),
lm(Y ~ X*S)
)
aic <- AICc(fits)
print(truss[i])
print(aic)
mm <- min(aic$model[aic$daicc<2])
bestmodel[i] <<- mm
if(mm==1) kol <- "black" else if(mm<3.5) kol <- blindcolz[as.numeric(G)+1] else kol <- as.numeric(S)+1
plot(X, Y, type="n", axes=FALSE, xlab="", ylab="")
abline(0, 1)
text(X, Y, substring(S, 1, 1), col=kol)
points(X, fits[[mm]]$fitted, pch=16, col=kol)
box()
mtext(paste(truss[i], bestmodel[i], sep="-"), side=3, line=-1.5, adj=0.05, cex=0.8)
}
}
mtext("Caliper Truss/Length", side=1, outer=TRUE, line=0.5)
mtext("Photo Truss/Length", side=2, outer=TRUE, line=0.5)
}
fig()
res <- data.frame(truss, expect, bestmodel)
resb <- res[order(res$expect, res$bestmodel, res$truss), ]
resb
res <- data.frame(truss, expect, bestmodel)
resb <- res[order(res$bestmodel, res$expect, res$truss), ]
resb
Ptruss <- sort(stringin("sigma", names(ydat)))
truss <- substring(Ptruss, 7)
Ptruss <- sort(stringin("sigma", names(ydat)))
truss <- substring(Ptruss, 7)
ord <- match(resb$truss, truss)
ord
dput(ord)
dput(as.numeric(ord))
ord <- c(1, 2, 3, 8, 14, 21, 6, 19, 5, 7, 9, 12, 20, 4, 10, 11, 13, 15, 18, 16, 17)
Ptruss <- sort(stringin("sigma", names(ydat)))[ord]
Ctruss <- sort(stringin("caliper", names(ydat)))[ord]
truss <- substring(Ptruss, 7)
exp.none <- c("L", "O", "SD", "SA", "D", "DH", "DB", "DA", "AH", "AB", "AD")
exp.some <- c("M", "S", "H", "E", "V", "AV", "P", "PV")
exp.unkn <- c("AV.V", "PV.P")
expect <- rep("1 none", length(truss))
expect[truss %in% exp.some] <- "2-5 some"
expect[truss %in% exp.unkn] <- "6 unkn"
bestmodel <- rep(NA, length(truss))
fig <- function() {
par(mfrow=c(7, 3), mar=c(0, 0, 0, 0), oma=c(2, 2, 1, 1))
for(i in seq_along(truss)) {
P <- ydat[, Ptruss[i]]
C <- ydat[, Ctruss[i]]
CL <- ydat[, "CALIPER.L"]
PL <- ydat[, "SIGMA.L"]
S <- as.factor(ydat$SPECIES)
G <- as.factor(ydat$TYPE)
Y <- P/PL
X <- C/CL
if(truss[i]=="L") {
fits <- list(
lm(P ~ C),
lm(P ~ C + G),
lm(P ~ C*G),
lm(P ~ C + S),
lm(P ~ C*S)
)
aic <- AICc(fits)
print(truss[i])
print(aic)
mm <- min(aic$model[aic$daicc<2])
bestmodel[i] <<- mm - 0.5
if(mm==1) kol <- "black" else if(mm<3.5) kol <- blindcolz[as.numeric(G)+1] else kol <- as.numeric(S)+1
plot(C, P, type="n", axes=FALSE, xlab="", ylab="")
abline(0, 1)
text(C, P, substring(S, 1, 1), col=kol)
points(C, fits[[mm]]$fitted, pch=16, col=kol)
box()
mtext(paste(truss[i], bestmodel[i], sep="-"), side=3, line=-1.5, adj=0.05, cex=0.8)
} else {
fits <- list(
lm(Y ~ X),
lm(Y ~ X + G),
lm(Y ~ X*G),
lm(Y ~ X + S),
lm(Y ~ X*S)
)
aic <- AICc(fits)
print(truss[i])
print(aic)
mm <- min(aic$model[aic$daicc<2])
bestmodel[i] <<- mm
if(mm==1) kol <- "black" else if(mm<3.5) kol <- blindcolz[as.numeric(G)+1] else kol <- as.numeric(S)+1
plot(X, Y, type="n", axes=FALSE, xlab="", ylab="")
abline(0, 1)
text(X, Y, substring(S, 1, 1), col=kol)
points(X, fits[[mm]]$fitted, pch=16, col=kol)
box()
mtext(paste(truss[i], bestmodel[i], sep="-"), side=3, line=-1.5, adj=0.05, cex=0.8)
}
}
mtext("Caliper Truss/Length", side=1, outer=TRUE, line=0.5)
mtext("Photo Truss/Length", side=2, outer=TRUE, line=0.5)
}
fig()
res <- data.frame(truss, expect, bestmodel)
resb <- res[order(res$bestmodel, res$expect, res$truss), ]
resb
cut(bestmodel, c(0, 1.2, 3.2, 5.2))
cut(bestmodel, c(0, 1.2, 3.2, 5.2), labels=FALSE)
table(cut(bestmodel, c(0, 1.2, 3.2, 5.2), labels=FALSE))
?table
table(cut(bestmodel, c(0, 1.2, 3.2, 5.2, 6), labels=FALSE))
modsum <- table(cut(bestmodel, c(0, 1.2, 3.2, 5.2), labels=FALSE))
capwords(modsum[1])
modsum <- table(cut(bestmodel, c(0, 1.2, 3.2, 5.2), labels=FALSE))
capwords(numbers2words(modsum[1]))
table(ydat$SPECIES)
truss
i <- 11
P <- ydat[, Ptruss[i]]
C <- ydat[, Ctruss[i]]
CL <- ydat[, "CALIPER.L"]
PL <- ydat[, "SIGMA.L"]
S <- as.factor(ydat$SPECIES)
G <- as.factor(ydat$TYPE)
Y <- P/PL
X <- C/CL
windows()
plot(X, Y)
identify(X, Y)
i <- 20
P <- ydat[, Ptruss[i]]
C <- ydat[, Ctruss[i]]
CL <- ydat[, "CALIPER.L"]
PL <- ydat[, "SIGMA.L"]
S <- as.factor(ydat$SPECIES)
G <- as.factor(ydat$TYPE)
Y <- P/PL
X <- C/CL
plot(X, Y)
identify(X, Y)
i <- 9
P <- ydat[, Ptruss[i]]
C <- ydat[, Ctruss[i]]
CL <- ydat[, "CALIPER.L"]
PL <- ydat[, "SIGMA.L"]
S <- as.factor(ydat$SPECIES)
G <- as.factor(ydat$TYPE)
Y <- P/PL
X <- C/CL
plot(X, Y)
identify(X, Y)
i <- 21
P <- ydat[, Ptruss[i]]
C <- ydat[, Ctruss[i]]
CL <- ydat[, "CALIPER.L"]
PL <- ydat[, "SIGMA.L"]
S <- as.factor(ydat$SPECIES)
G <- as.factor(ydat$TYPE)
Y <- P/PL
X <- C/CL
 plot(X, Y)
identify(X, Y)
ydat[c(25, 50, 54, 66), ]
names(ydat)
ydat[c(25, 50, 54, 66), c(1:4, 24, 40, 14, 35, 20, 42, 25, 41, 47)]
ydat[c(25, 50, 54, 66), c(1:4, 24, 40, 14, 35, 20, 42, 25, 41, 47)]
ydat[c(25, 50, 54, 66), c(1:4, 24, 40, 14, 35, 20, 42, 25, 43, 47)]
ydat[c(25, 50, 54, 66), c(1:2, 24, 40, 14, 35, 20, 42, 25, 43, 47)]
# C:\JVA\Consult\Yule\Superior Coreg\PhotoCaliper.r
library(jpeg)
# read in the data
wb <- loadWorkbook("C:/JVA/Consult/Yule/Superior Coreg/2014 Caliper and SigmaScan Correction Data JVA.xlsx")
ydat <- readWorksheet(wb, sheet="Caliper & Sigma for Analyses", startRow=1)
# kdat <- readWorksheet(wb, sheet="Koelz Superior Data", startRow=1)
# start a document
doc <- startrtf(file=paste(Sys.Date(), "Caliper vs. Photo"), dir="C:/JVA/Consult/Yule/Superior Coreg")
heading("Lake Superior Coregonid Morphometrics")
heading("Caliper vs. Photo Measurements", 2)
heading("for Dan Yule and Allison Derose", 3)
heading("by Jean Adams", 3)
heading(Sys.Date(), 3)
para(
"Truss measurements from Lake Superior coregonids were made using two methods: distances measured in three dimensions using calipers on actual fish and",
" distances measured in two dimensions using digitized side-view photos of fish.",
"  For trusses between two points that both lie on the 'boundary' of a side-viewed fish (Figure ", jvamiscenv$figcount, "),",
" measurements made with calipers and photos should be the same.",
"  This encompasses most of the truss measurements made (Table).",
"  However, if either of the two points does NOT lie on the 'boundary' of a side-viewed fish,",
" measurements made with calipers will be longer than those made with photos.",
"  The expected relation between the measures can be summarized using the Pythagorean theorem,")
para("P2 = C2 + T2,")
para("where P (the hypotenuse) is the photo measure, C is the caliper measure, and T is the offset in the transverse (left to right relative to the fish)",
" direction between the two points (Figure ", jvamiscenv$figcount+1, ").")
para("We have no empirical measurements of the offset for any given truss,",
" but we can assume that there is a relation between the offset and the length of the fish, which may vary with species or species group.", 
"  So, for each truss (other than standard length), we fit five models (listed in order from least to most complex) relating the caliper and photo measures,",
" with the ratio of the photo truss measure to the photo standard length as the response (PT/PL) and explanatory variables",
" (1) the ratio of the caliper truss measure to the caliper standard length (CT/CL);",
" (2) CT/CL and species group (G);",
" (3) CT/CL, G, and their interaction;",
" (4) CT/CL and species (S);",
" (5) CT/CL, S, and their interaction.",
"  For the standard length truss, we fit five models relating the caliper and photo measures,",
" with the photo standard length as the response (PL) and explanatory variables"
" (0.5) CL;",
" (1.5) CL and G,"
" (2.5) CL, G, and their interaction;"
" (3.5) CL and S;",
" (4.5) CL, S, and their interaction."
"  The best of these models were selected for each truss, by choosing the simplest model (the lowest numbered model)",
" with a sample size adjusted Akaike's information criterion (AICc) within 2 of the minimum.",
"  If the intercept only model is selected and the 95% confidence interval of the intercept includes zero, then no conversion between measures is required."
)
figimg <- function() {
par(mar=rep(0, 4))
plotblank(axes=FALSE)
pusr <- par("usr")
rasterImage(img, pusr[1], pusr[3], pusr[2], pusr[4])
}
img <- readJPEG("C:/JVA/Consult/Yule/Superior Coreg/FishBoundary.jpg")
figu("The 'boundary' of a side-viewed fish.", FIG=figimg, w=6.5, h=dim(img)[1]/dim(img)[2]*6.5)
img <- readJPEG("C:/JVA/Consult/Yule/Superior Coreg/TopView.jpg")
figu("The relation between truss measures displayed on a top-viewed fish, when one of the points does not lie on the 'boundary' of a side-viewed fish.", 
FIG=figimg, w=6.5, h=dim(img)[1]/dim(img)[2]*6.5)
ord <- c(1, 2, 3, 8, 14, 21, 6, 19, 5, 7, 9, 12, 20, 4, 10, 11, 13, 15, 18, 16, 17)
Ptruss <- sort(stringin("sigma", names(ydat)))[ord]
Ctruss <- sort(stringin("caliper", names(ydat)))[ord]
truss <- substring(Ptruss, 7)
exp.none <- c("L", "O", "SD", "SA", "D", "DH", "DB", "DA", "AH", "AB", "AD")
exp.some <- c("M", "S", "H", "E", "V", "AV", "P", "PV")
exp.unkn <- c("AV.V", "PV.P")
expect <- rep("1 none", length(truss))
expect[truss %in% exp.some] <- "2-5 some"
expect[truss %in% exp.unkn] <- "6 unkn"
bestmodel <- rep(NA, length(truss))
fig <- function() {
par(mfrow=c(7, 3), mar=c(0, 0, 0, 0), oma=c(2, 2, 1, 1))
for(i in seq_along(truss)) {
P <- ydat[, Ptruss[i]]
C <- ydat[, Ctruss[i]]
CL <- ydat[, "CALIPER.L"]
PL <- ydat[, "SIGMA.L"]
S <- as.factor(ydat$SPECIES)
G <- as.factor(ydat$TYPE)
Y <- P/PL
X <- C/CL
if(truss[i]=="L") {
fits <- list(
lm(P ~ C),
lm(P ~ C + G),
lm(P ~ C*G),
lm(P ~ C + S),
lm(P ~ C*S)
)
aic <- AICc(fits)
print(truss[i])
print(aic)
mm <- min(aic$model[aic$daicc<2])
bestmodel[i] <<- mm - 0.5
if(mm==1) kol <- "black" else if(mm<3.5) kol <- blindcolz[as.numeric(G)+1] else kol <- as.numeric(S)+1
plot(C, P, type="n", axes=FALSE, xlab="", ylab="")
abline(0, 1)
text(C, P, substring(S, 1, 1), col=kol)
points(C, fits[[mm]]$fitted, pch=16, col=kol)
box()
mtext(paste(truss[i], bestmodel[i], sep="-"), side=3, line=-1.5, adj=0.05, cex=0.8)
} else {
fits <- list(
lm(Y ~ X),
lm(Y ~ X + G),
lm(Y ~ X*G),
lm(Y ~ X + S),
lm(Y ~ X*S)
)
aic <- AICc(fits)
print(truss[i])
print(aic)
mm <- min(aic$model[aic$daicc<2])
bestmodel[i] <<- mm
if(mm==1) kol <- "black" else if(mm<3.5) kol <- blindcolz[as.numeric(G)+1] else kol <- as.numeric(S)+1
plot(X, Y, type="n", axes=FALSE, xlab="", ylab="")
abline(0, 1)
text(X, Y, substring(S, 1, 1), col=kol)
points(X, fits[[mm]]$fitted, pch=16, col=kol)
box()
mtext(paste(truss[i], bestmodel[i], sep="-"), side=3, line=-1.5, adj=0.05, cex=0.8)
}
}
mtext("Caliper Truss/Length", side=1, outer=TRUE, line=0.5)
mtext("Photo Truss/Length", side=2, outer=TRUE, line=0.5)
}
figu("Observed (letters) and model-predicted (solid circles) relation between length-adjusted truss lengths measured with calipers and photos.", newpage="port")
res <- data.frame(truss, expect, bestmodel)
resb <- res[order(res$bestmodel, res$expect, res$truss), ]
resb
# run this again if you need to reorder
# Ptruss <- sort(stringin("sigma", names(ydat)))
# truss <- substring(Ptruss, 7)
# ord <- match(resb$truss, truss)
# dput(as.numeric(ord))
para("There appeared to be some outliers in the data, specifically the measures of AV/V, DH, PV, and PV/P for four fish.")
# ydat[c(25, 50, 54, 66), c(1:2, 24, 40, 14, 35, 20, 42, 25, 43, 47)]
modsum <- table(cut(bestmodel, c(0, 1.2, 3.2, 5.2), labels=FALSE))
capwords(numbers2words(modsum[1]))
para("The relation between caliper and photo measurements did not vary by species for ", numbers2words(modsum[1]), " of the truss lengths,",
" depended on species groups for ", numbers2words(modsum[2]), " of the truss lengths,",
" and depended on species for ", numbers2words(modsum[3]), " of the truss lengths (Figure ", jvamiscenv$figcount-1, ", Table ", jvamiscenv$tabcount, ").")
tab <- resb
tabl("Expected model and AICc-based best model for each truss.", row.names=FALSE)
endrtf()
cleanup()
graphics.off()
# C:\JVA\Consult\Yule\Superior Coreg\PhotoCaliper.r
library(jpeg)
# read in the data
wb <- loadWorkbook("C:/JVA/Consult/Yule/Superior Coreg/2014 Caliper and SigmaScan Correction Data JVA.xlsx")
ydat <- readWorksheet(wb, sheet="Caliper & Sigma for Analyses", startRow=1)
# kdat <- readWorksheet(wb, sheet="Koelz Superior Data", startRow=1)
# start a document
doc <- startrtf(file=paste(Sys.Date(), "Caliper vs. Photo"), dir="C:/JVA/Consult/Yule/Superior Coreg")
heading("Lake Superior Coregonid Morphometrics")
heading("Caliper vs. Photo Measurements", 2)
heading("for Dan Yule and Allison Derose", 3)
heading("by Jean Adams", 3)
heading(Sys.Date(), 3)
para(
"Truss measurements from Lake Superior coregonids were made using two methods: distances measured in three dimensions using calipers on actual fish and",
" distances measured in two dimensions using digitized side-view photos of fish.",
"  For trusses between two points that both lie on the 'boundary' of a side-viewed fish (Figure ", jvamiscenv$figcount, "),",
" measurements made with calipers and photos should be the same.",
"  This encompasses most of the truss measurements made (Table).",
"  However, if either of the two points does NOT lie on the 'boundary' of a side-viewed fish,",
" measurements made with calipers will be longer than those made with photos.",
"  The expected relation between the measures can be summarized using the Pythagorean theorem,")
para("P2 = C2 + T2,")
para("where P (the hypotenuse) is the photo measure, C is the caliper measure, and T is the offset in the transverse (left to right relative to the fish)",
" direction between the two points (Figure ", jvamiscenv$figcount+1, ").")
para("We have no empirical measurements of the offset for any given truss,",
" but we can assume that there is a relation between the offset and the length of the fish, which may vary with species or species group.", 
"  So, for each truss (other than standard length), we fit five models (listed in order from least to most complex) relating the caliper and photo measures,",
" with the ratio of the photo truss measure to the photo standard length as the response (PT/PL) and explanatory variables",
" (1) the ratio of the caliper truss measure to the caliper standard length (CT/CL);",
" (2) CT/CL and species group (G);",
" (3) CT/CL, G, and their interaction;",
" (4) CT/CL and species (S);",
" (5) CT/CL, S, and their interaction.",
"  For the standard length truss, we fit five models relating the caliper and photo measures,",
" with the photo standard length as the response (PL) and explanatory variables",
" (0.5) CL;",
" (1.5) CL and G,",
" (2.5) CL, G, and their interaction;",
" (3.5) CL and S;",
" (4.5) CL, S, and their interaction.",
"  The best of these models were selected for each truss, by choosing the simplest model (the lowest numbered model)",
" with a sample size adjusted Akaike's information criterion (AICc) within 2 of the minimum.",
"  If the intercept only model is selected and the 95% confidence interval of the intercept includes zero, then no conversion between measures is required."
)
figimg <- function() {
par(mar=rep(0, 4))
plotblank(axes=FALSE)
pusr <- par("usr")
rasterImage(img, pusr[1], pusr[3], pusr[2], pusr[4])
}
img <- readJPEG("C:/JVA/Consult/Yule/Superior Coreg/FishBoundary.jpg")
figu("The 'boundary' of a side-viewed fish.", FIG=figimg, w=6.5, h=dim(img)[1]/dim(img)[2]*6.5)
img <- readJPEG("C:/JVA/Consult/Yule/Superior Coreg/TopView.jpg")
figu("The relation between truss measures displayed on a top-viewed fish, when one of the points does not lie on the 'boundary' of a side-viewed fish.", 
FIG=figimg, w=6.5, h=dim(img)[1]/dim(img)[2]*6.5)
ord <- c(1, 2, 3, 8, 14, 21, 6, 19, 5, 7, 9, 12, 20, 4, 10, 11, 13, 15, 18, 16, 17)
Ptruss <- sort(stringin("sigma", names(ydat)))[ord]
Ctruss <- sort(stringin("caliper", names(ydat)))[ord]
truss <- substring(Ptruss, 7)
exp.none <- c("L", "O", "SD", "SA", "D", "DH", "DB", "DA", "AH", "AB", "AD")
exp.some <- c("M", "S", "H", "E", "V", "AV", "P", "PV")
exp.unkn <- c("AV.V", "PV.P")
expect <- rep("1 none", length(truss))
expect[truss %in% exp.some] <- "2-5 some"
expect[truss %in% exp.unkn] <- "6 unkn"
bestmodel <- rep(NA, length(truss))
fig <- function() {
par(mfrow=c(7, 3), mar=c(0, 0, 0, 0), oma=c(2, 2, 1, 1))
for(i in seq_along(truss)) {
P <- ydat[, Ptruss[i]]
C <- ydat[, Ctruss[i]]
CL <- ydat[, "CALIPER.L"]
PL <- ydat[, "SIGMA.L"]
S <- as.factor(ydat$SPECIES)
G <- as.factor(ydat$TYPE)
Y <- P/PL
X <- C/CL
if(truss[i]=="L") {
fits <- list(
lm(P ~ C),
lm(P ~ C + G),
lm(P ~ C*G),
lm(P ~ C + S),
lm(P ~ C*S)
)
aic <- AICc(fits)
print(truss[i])
print(aic)
mm <- min(aic$model[aic$daicc<2])
bestmodel[i] <<- mm - 0.5
if(mm==1) kol <- "black" else if(mm<3.5) kol <- blindcolz[as.numeric(G)+1] else kol <- as.numeric(S)+1
plot(C, P, type="n", axes=FALSE, xlab="", ylab="")
abline(0, 1)
text(C, P, substring(S, 1, 1), col=kol)
points(C, fits[[mm]]$fitted, pch=16, col=kol)
box()
mtext(paste(truss[i], bestmodel[i], sep="-"), side=3, line=-1.5, adj=0.05, cex=0.8)
} else {
fits <- list(
lm(Y ~ X),
lm(Y ~ X + G),
lm(Y ~ X*G),
lm(Y ~ X + S),
lm(Y ~ X*S)
)
aic <- AICc(fits)
print(truss[i])
print(aic)
mm <- min(aic$model[aic$daicc<2])
bestmodel[i] <<- mm
if(mm==1) kol <- "black" else if(mm<3.5) kol <- blindcolz[as.numeric(G)+1] else kol <- as.numeric(S)+1
plot(X, Y, type="n", axes=FALSE, xlab="", ylab="")
abline(0, 1)
text(X, Y, substring(S, 1, 1), col=kol)
points(X, fits[[mm]]$fitted, pch=16, col=kol)
box()
mtext(paste(truss[i], bestmodel[i], sep="-"), side=3, line=-1.5, adj=0.05, cex=0.8)
}
}
mtext("Caliper Truss/Length", side=1, outer=TRUE, line=0.5)
mtext("Photo Truss/Length", side=2, outer=TRUE, line=0.5)
}
figu("Observed (letters) and model-predicted (solid circles) relation between length-adjusted truss lengths measured with calipers and photos.", newpage="port")
res <- data.frame(truss, expect, bestmodel)
resb <- res[order(res$bestmodel, res$expect, res$truss), ]
resb
# run this again if you need to reorder
# Ptruss <- sort(stringin("sigma", names(ydat)))
# truss <- substring(Ptruss, 7)
# ord <- match(resb$truss, truss)
# dput(as.numeric(ord))
para("There appeared to be some outliers in the data, specifically the measures of AV/V, DH, PV, and PV/P for four fish.")
# ydat[c(25, 50, 54, 66), c(1:2, 24, 40, 14, 35, 20, 42, 25, 43, 47)]
modsum <- table(cut(bestmodel, c(0, 1.2, 3.2, 5.2), labels=FALSE))
para("The relation between caliper and photo measurements did not vary by species for ", numbers2words(modsum[1]), " of the truss lengths,",
" depended on species groups for ", numbers2words(modsum[2]), " of the truss lengths,",
" and depended on species for ", numbers2words(modsum[3]), " of the truss lengths (Figure ", jvamiscenv$figcount-1, ", Table ", jvamiscenv$tabcount, ").")
tab <- resb
tabl("Expected model and AICc-based best model for each truss.", row.names=FALSE)
endrtf()
length(truss)
tab
# C:\JVA\Consult\Yule\Superior Coreg\PhotoCaliper.r
library(jpeg)
# read in the data
wb <- loadWorkbook("C:/JVA/Consult/Yule/Superior Coreg/2014 Caliper and SigmaScan Correction Data JVA.xlsx")
ydat <- readWorksheet(wb, sheet="Caliper & Sigma for Analyses", startRow=1)
# kdat <- readWorksheet(wb, sheet="Koelz Superior Data", startRow=1)
# start a document
doc <- startrtf(file=paste(Sys.Date(), "Caliper vs. Photo"), dir="C:/JVA/Consult/Yule/Superior Coreg")
heading("Lake Superior Coregonid Morphometrics")
heading("Caliper vs. Photo Measurements", 2)
heading("for Dan Yule and Allison Derose", 3)
heading("by Jean Adams", 3)
heading(Sys.Date(), 3)
para(
"Truss measurements from Lake Superior coregonids were made using two methods: distances measured in three dimensions using calipers on actual fish and",
" distances measured in two dimensions using digitized side-view photos of fish.",
"  For trusses between two points that both lie on the 'boundary' of a side-viewed fish (Figure ", jvamiscenv$figcount, "),",
" measurements made with calipers and photos should be the same.",
"  This encompasses 11 of the 21 truss measurements made.",
"  However, if either of the two points does NOT lie on the 'boundary' of a side-viewed fish,",
" measurements made with calipers will be longer than those made with photos.",
"  The expected relation between the measures can be summarized using the Pythagorean theorem,")
para("P2 = C2 + T2,")
para("where P (the hypotenuse) is the photo measure, C is the caliper measure, and T is the offset in the transverse (left to right relative to the fish)",
" direction between the two points (Figure ", jvamiscenv$figcount+1, ").")
para("We have no empirical measurements of the offset for any given truss,",
" but we can assume that there is a relation between the offset and the length of the fish, which may vary with species or species group.")
para("For each truss (other than standard length), we fit five models (listed in order from least to most complex) relating the caliper and photo measures,",
" with the ratio of the photo truss measure to the photo standard length as the response (PT/PL) and explanatory variables:")
para("(1) the ratio of the caliper truss measure to the caliper standard length (CT/CL);")
para("(2) CT/CL and species group (G);")
para("(3) CT/CL, G, and their interaction;")
para("(4) CT/CL and species (S);")
para("(5) CT/CL, S, and their interaction.")
para("For the standard length truss, we fit five models relating the caliper and photo measures,",
" with the photo standard length as the response (PL) and explanatory variables:")
para("(0.5) CL;")
para("(1.5) CL and G,")
para("(2.5) CL, G, and their interaction;")
para("(3.5) CL and S;")
para("(4.5) CL, S, and their interaction.")
para("The best of these models were selected for each truss, by choosing the simplest model (the lowest numbered model)",
" with a sample size adjusted Akaike's information criterion (AICc) within 2 of the minimum.")
figimg <- function() {
par(mar=rep(0, 4))
plotblank(axes=FALSE)
pusr <- par("usr")
rasterImage(img, pusr[1], pusr[3], pusr[2], pusr[4])
}
img <- readJPEG("C:/JVA/Consult/Yule/Superior Coreg/FishBoundary.jpg")
figu("The 'boundary' of a side-viewed fish.", FIG=figimg, w=6.5, h=dim(img)[1]/dim(img)[2]*6.5)
img <- readJPEG("C:/JVA/Consult/Yule/Superior Coreg/TopView.jpg")
figu("The relation between truss measures displayed on a top-viewed fish, when one of the points does not lie on the 'boundary' of a side-viewed fish.", 
FIG=figimg, w=6.5, h=dim(img)[1]/dim(img)[2]*6.5)
ord <- c(1, 2, 3, 8, 14, 21, 6, 19, 5, 7, 9, 12, 20, 4, 10, 11, 13, 15, 18, 16, 17)
Ptruss <- sort(stringin("sigma", names(ydat)))[ord]
Ctruss <- sort(stringin("caliper", names(ydat)))[ord]
truss <- substring(Ptruss, 7)
exp.none <- c("L", "O", "SD", "SA", "D", "DH", "DB", "DA", "AH", "AB", "AD")
exp.some <- c("M", "S", "H", "E", "V", "AV", "P", "PV")
exp.unkn <- c("AV.V", "PV.P")
expect <- rep("0.5-1 none", length(truss))
expect[truss %in% exp.some] <- "1.5-5 some"
expect[truss %in% exp.unkn] <- "6 unkn"
bestmodel <- rep(NA, length(truss))
fig <- function() {
par(mfrow=c(7, 3), mar=c(0, 0, 0, 0), oma=c(2, 2, 1, 1))
for(i in seq_along(truss)) {
P <- ydat[, Ptruss[i]]
C <- ydat[, Ctruss[i]]
CL <- ydat[, "CALIPER.L"]
PL <- ydat[, "SIGMA.L"]
S <- as.factor(ydat$SPECIES)
G <- as.factor(ydat$TYPE)
Y <- P/PL
X <- C/CL
if(truss[i]=="L") {
fits <- list(
lm(P ~ C),
lm(P ~ C + G),
lm(P ~ C*G),
lm(P ~ C + S),
lm(P ~ C*S)
)
aic <- AICc(fits)
print(truss[i])
print(aic)
mm <- min(aic$model[aic$daicc<2])
bestmodel[i] <<- mm - 0.5
if(mm==1) kol <- "black" else if(mm<3.5) kol <- blindcolz[as.numeric(G)+1] else kol <- as.numeric(S)+1
plot(C, P, type="n", axes=FALSE, xlab="", ylab="")
abline(0, 1)
text(C, P, substring(S, 1, 1), col=kol)
points(C, fits[[mm]]$fitted, pch=16, col=kol)
box()
mtext(paste(truss[i], bestmodel[i], sep="-"), side=3, line=-1.5, adj=0.05, cex=0.8)
} else {
fits <- list(
lm(Y ~ X),
lm(Y ~ X + G),
lm(Y ~ X*G),
lm(Y ~ X + S),
lm(Y ~ X*S)
)
aic <- AICc(fits)
print(truss[i])
print(aic)
mm <- min(aic$model[aic$daicc<2])
bestmodel[i] <<- mm
if(mm==1) kol <- "black" else if(mm<3.5) kol <- blindcolz[as.numeric(G)+1] else kol <- as.numeric(S)+1
plot(X, Y, type="n", axes=FALSE, xlab="", ylab="")
abline(0, 1)
text(X, Y, substring(S, 1, 1), col=kol)
points(X, fits[[mm]]$fitted, pch=16, col=kol)
box()
mtext(paste(truss[i], bestmodel[i], sep="-"), side=3, line=-1.5, adj=0.05, cex=0.8)
}
}
mtext("Caliper Truss/Length", side=1, outer=TRUE, line=0.5)
mtext("Photo Truss/Length", side=2, outer=TRUE, line=0.5)
}
figu("Observed (letters) and model-predicted (solid circles) relation between length-adjusted truss lengths measured with calipers and photos.", 
"Truss abbreviation and model number identify each plot.  Colors are used to indicate significant species or species group effects.",
newpage="port")
res <- data.frame(truss, expect, bestmodel)
resb <- res[order(res$bestmodel, res$expect, res$truss), ]
resb
# run this again if you need to reorder
# Ptruss <- sort(stringin("sigma", names(ydat)))
# truss <- substring(Ptruss, 7)
# ord <- match(resb$truss, truss)
# dput(as.numeric(ord))
para("There appeared to be some outliers in the data, specifically the measures of AV/V, DH, PV, and PV/P for four fish (Figure ", jvamiscenv$figcount, ").")
# ydat[c(25, 50, 54, 66), c(1:2, 24, 40, 14, 35, 20, 42, 25, 43, 47)]
modsum <- table(cut(bestmodel, c(0, 1.2, 3.2, 5.2), labels=FALSE))
para("The relation between caliper and photo measurements did not vary by species for ", numbers2words(modsum[1]), " of the truss lengths",
" and did depend on species group or species for ", numbers2words(modsum[2]), " and ", numbers2words(modsum[3]), 
" of the truss lengths, respectively (Figure ", jvamiscenv$figcount-1, ", Table ", jvamiscenv$tabcount, ").")
tab <- resb
tabl("Expected model and AICc-based best model for each truss.", row.names=FALSE)
endrtf()
q()
cleanup()
q()
# C:\JVA\Consult\Lantry\Wounding model\Explore.r
# read in data
wb <- loadWorkbook("C:/JVA/Consult/Lantry/Wounding model/Mort funct2.xlsx")
raw <- readWorksheet(wb, sheet="StrainCPUE")
names(raw) <- jvanames(names(raw))
full <- readWorksheet(wb, sheet="SAS data")
warnings()
names(full) <- jvanames(names(full))
head(raw)
  # xstrain strain2 year xyrcls age    lncpue       cpue
# 1     ONT SENlike 1990   1983   7 -2.768675 0.06274510
# 2     ONT SENlike 1991   1983   8 -2.610070 0.07352941
# 3     ONT SENlike 1992   1983   9 -3.396743 0.03348214
# 4     ONT SENlike 1993   1983  10 -4.158883 0.01562500
# 5     ONT SENlike 1991   1984   7 -0.255525 0.77450980
# 6     ONT SENlike 1992   1984   8 -1.142772 0.31893382
# rearrange data to calculate annual mortalities
attach(raw)
summary(log(cpue) - lncpue)
raw1 <- raw
raw1$year1 <- year
raw1$year2 <- year + 1
raw1$age1 <- age
raw1$age2 <- age + 1
raw1$cpue1 <- cpue
raw2 <- raw
raw2$year1 <- year - 1
raw2$year2 <- year
raw2$age1 <- age - 1
raw2$age2 <- age
raw2$cpue2 <- cpue
detach(raw)
rawpair <- merge(
raw1[, c("year1", "year2", "strain2", "xstrain", "xyrcls", "age1", "age2", "cpue1")],
raw2[, c("year1", "year2", "strain2", "xstrain", "xyrcls", "age1", "age2", "cpue2")],
all=TRUE
)
rawpair <- rawpair[!is.na(rawpair$cpue1) & !is.na(rawpair$cpue2), ]
rawpair$mort <- 1 - rawpair$cpue2/rawpair$cpue1
rm(raw1, raw2)
head(rawpair)
   # year1 year2 strain2 xstrain xyrcls age1 age2      cpue1      cpue2       mort
# 4   1986  1987 SUPlike     SUP   1979    7    8 0.87700321 0.38799895  0.5575855
# 6   1987  1988 SENlike     SEN   1979    8    9 0.03033088 0.09336623 -2.0782562
# 7   1987  1988 SENlike     SEN   1980    7    8 0.12132353 0.25844298 -1.1301967
# 9   1987  1988 SUPlike     SUP   1979    8    9 0.38799895 0.12438127  0.6794289
# 10  1987  1988 SUPlike     SUP   1980    7    8 1.57484244 0.68446898  0.5653730
# 12  1988  1989 SENlike     SEN   1979    9   10 0.09336623 0.04503676  0.5176332
# use AIC to determine best model predicting mortality from year, strain, and age/yrclass
rawpair$year1f <- as.factor(rawpair$year1)
rawpair$strain2f <- as.factor(rawpair$strain2)
rawpair$xstrainf <- as.factor(rawpair$xstrain)
rawpair$xyrclsf <- as.factor(rawpair$xyrcls)
rawpair$age1f <- as.factor(rawpair$age1)
rawpair$mort0 <- ifelse(rawpair$mort < 0, 0, rawpair$mort)
fit4a <- glm(mort0 ~ year1f*xstrainf + xyrclsf, data=rawpair)
fit4b <- glm(mort0 ~ year1f*strain2f + xyrclsf, data=rawpair)
fit4c <- glm(mort0 ~ year1f*xstrainf + age1f, data=rawpair)
fit4d <- glm(mort0 ~ year1f*strain2f + age1f, data=rawpair)
fit3a <- glm(mort0 ~ year1f + xstrainf + xyrclsf, data=rawpair)
fit3b <- glm(mort0 ~ year1f + strain2f + xyrclsf, data=rawpair)
fit3c <- glm(mort0 ~ year1f + xstrainf + age1f, data=rawpair)
fit3d <- glm(mort0 ~ year1f + strain2f + age1f, data=rawpair)
fit2a <- glm(mort0 ~ year1f + xstrainf, data=rawpair)
fit2b <- glm(mort0 ~ year1f + strain2f, data=rawpair)#### best model
fit2c <- glm(mort0 ~ year1f + xyrclsf, data=rawpair)
fit2d <- glm(mort0 ~ year1f + age1f, data=rawpair)
fit1 <- glm(mort0 ~ year1f, data=rawpair)
fit0 <- glm(mort0 ~ 1, data=rawpair)
AICc(list(fit4a, fit4b, fit4c, fit4d, fit3a, fit3b, fit3c, fit3d, fit2a, fit2b, fit2c, fit2d, fit1, fit0))
fit2b
myfit <- aov(mort0 ~ year1f + strain2f, data=ssum)
summary(myfit)
# summarize data across strains within strain groups
ssum <- aggregate(cbind(cpue1, cpue2) ~ year1 + year2 + strain2 + xyrcls + age1 + age2 + year1f + strain2f + xyrclsf + age1f, rawpair, sum)
ssum$mort <- 1 - ssum$cpue2/ssum$cpue1
ssum$mort0 <- ifelse(ssum$mort < 0, 0, ssum$mort)
head(ssum)
myfit <- aov(mort0 ~ year1f + strain2f, data=ssum)
summary(myfit)
myfit <- aov(mort0 ~ strain2f + year1f, data=ssum)
summary(myfit)
cleanup()
q()
list.csv <- function(mydir, add.source=TRUE) {
 # combine all csv files in a given directory into a single list
filenames <- list.files(mydir)[grep(".csv$", list.files(mydir))]
nfiles <- length(filenames)
# create an empty list where all the files will be stored
files.list <- vector(mode="list", length=nfiles)
for(i in 1:nfiles) {
# read the data into a temporary file
temp <- read.csv(paste(mydir, filenames[i], sep=""), as.is=TRUE)
# add a new column identifying the source file
if(add.source) temp$source <- filenames[i]
# put the data into the list
files.list[[i]] <- temp
}
}
mylist <- list.csv("C:/JVA/Consult/Lantry/Wounding model")
mylist <- list.csv("C:/JVA/Consult/Lantry/Wounding model/")
length(mylist)
mylist
list.csv <- function(mydir, add.source=TRUE) {
 # combine all csv files in a given directory into a single list
filenames <- list.files(mydir)[grep(".csv$", list.files(mydir))]
nfiles <- length(filenames)
# create an empty list where all the files will be stored
files.list <- vector(mode="list", length=nfiles)
for(i in 1:nfiles) {
# read the data into a temporary file
temp <- read.csv(paste(mydir, filenames[i], sep=""), as.is=TRUE)
# add a new column identifying the source file
if(add.source) temp$source <- filenames[i]
# put the data into the list
files.list[[i]] <- temp
}
files.list
}
mylist <- list.csv("C:/JVA/Consult/Lantry/Wounding model/")
length(mylist)
mylist
mylist <- list.csv("C:/JVA/Consult/Lantry/Walleye bioenergetics/")
length(mylist)
lapply(mylist, head)
lapply(mylist, head)
lapply(mylist, head)
lapply(mylist, head)
lapply(mylist, as.matrix)
q()
?cheat
boogfiles <- c("C:/JVA/Lamprey/ChemControl/Resistance/Boogaard/1989-1990 combined tox data TFM sea lamprey.xls", 
"C:/JVA/Lamprey/ChemControl/Resistance/Boogaard/1997 1998 combined tox data TFM sea lamprey.xls", 
"C:/JVA/Lamprey/ChemControl/Resistance/Boogaard/2001-2003 combined tox data TFM sea lamprey.xls", 
"C:/JVA/Lamprey/ChemControl/Resistance/Boogaard/2009 combined tox data TFM sea lamprey.xls", 
"C:/JVA/Lamprey/ChemControl/Resistance/Boogaard/On-site tests-Ludington-- Final JVAmod.xls", 
"C:/JVA/Lamprey/ChemControl/Resistance/Boogaard/On-site tests-Canada JVAmod.xls")
startr <- c(6, 6, 6, 5, 6, 6, 1)
datlist <- vector(length(boogfiles), "list")
datlist <- vector("list", length(boogfiles))
datlist
do.call
boogfiles <- c("C:/JVA/Lamprey/ChemControl/Resistance/Boogaard/1989-1990 combined tox data TFM sea lamprey.xls", 
"C:/JVA/Lamprey/ChemControl/Resistance/Boogaard/1997 1998 combined tox data TFM sea lamprey.xls", 
"C:/JVA/Lamprey/ChemControl/Resistance/Boogaard/2001-2003 combined tox data TFM sea lamprey.xls", 
"C:/JVA/Lamprey/ChemControl/Resistance/Boogaard/2009 combined tox data TFM sea lamprey.xls", 
"C:/JVA/Lamprey/ChemControl/Resistance/Boogaard/On-site tests-Ludington-- Final JVAmod.xls", 
"C:/JVA/Lamprey/ChemControl/Resistance/Boogaard/On-site tests-Canada JVAmod.xls")
startr <- c(6, 6, 6, 5, 6, 6, 1)
datlist <- vector("list", length(boogfiles))
for(i in seq_along(boogfiles)) {
wb <- loadWorkbook(boogfiles[i])
datlist[[i]] <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=startr[i])
}
dat <- do.call(rbind, datlist)
lapply(datlist, head)
lapply(datlist, head)
library(plyr)
dat <- do.call(rbind.fill, datlist)
head(dat)
jvanames
library(plyr)
boogfiles <- c("C:/JVA/Lamprey/ChemControl/Resistance/Boogaard/1989-1990 combined tox data TFM sea lamprey.xls", 
"C:/JVA/Lamprey/ChemControl/Resistance/Boogaard/1997 1998 combined tox data TFM sea lamprey.xls", 
"C:/JVA/Lamprey/ChemControl/Resistance/Boogaard/2001-2003 combined tox data TFM sea lamprey.xls", 
"C:/JVA/Lamprey/ChemControl/Resistance/Boogaard/2009 combined tox data TFM sea lamprey.xls", 
"C:/JVA/Lamprey/ChemControl/Resistance/Boogaard/On-site tests-Ludington-- Final JVAmod.xls", 
"C:/JVA/Lamprey/ChemControl/Resistance/Boogaard/On-site tests-Canada JVAmod.xls")
startr <- c(6, 6, 6, 5, 6, 6, 1)
datlist <- vector("list", length(boogfiles))
for(i in seq_along(boogfiles)) {
wb <- loadWorkbook(boogfiles[i])
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=startr[i])
names(dat) <- jvanames(names(dat))
datlist[[i]] <- dat
}
dat <- do.call(rbind.fill, datlist)
head(dat)
library(plyr)
boogdir <- "C:/JVA/Lamprey/ChemControl/Resistance/Boogaard/"
boogfiles <- c("1989-1990 combined tox data TFM sea lamprey.xls", 
"1997 1998 combined tox data TFM sea lamprey.xls", 
"2001-2003 combined tox data TFM sea lamprey.xls", 
"2009 combined tox data TFM sea lamprey.xls", 
"On-site tests-Ludington-- Final JVAmod.xls", 
"On-site tests-Canada JVAmod.xls")
startr <- c(6, 6, 6, 5, 6, 6, 1)
datlist <- vector("list", length(boogfiles))
for(i in seq_along(boogfiles)) {
wb <- loadWorkbook(paste0(boodir, boogfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=startr[i])
names(dat) <- jvanames(names(dat))
dat$source <- boogfiles[i]
datlist[[i]] <- dat
}
dat <- do.call(rbind.fill, datlist)
head(dat)
library(plyr)
boogdir <- "C:/JVA/Lamprey/ChemControl/Resistance/Boogaard/"
boogfiles <- c("1989-1990 combined tox data TFM sea lamprey.xls", 
"1997 1998 combined tox data TFM sea lamprey.xls", 
"2001-2003 combined tox data TFM sea lamprey.xls", 
"2009 combined tox data TFM sea lamprey.xls", 
"On-site tests-Ludington-- Final JVAmod.xls", 
"On-site tests-Canada JVAmod.xls")
startr <- c(6, 6, 6, 5, 6, 6, 1)
datlist <- vector("list", length(boogfiles))
for(i in seq_along(boogfiles)) {
wb <- loadWorkbook(paste0(boogdir, boogfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=startr[i])
names(dat) <- jvanames(names(dat))
dat$source <- boogfiles[i]
datlist[[i]] <- dat
}
dat <- do.call(rbind.fill, datlist)
head(dat)
summary(dat)
dat[is.na(dat$tank), ]
dat[is.na(dat$total), ]
# remove rows with all missing data
dat1 <- dat[!is.na(dat$total), ]
summary(dat1)
table(dat1$alk.nom)
table(dat1$alk.ave)
dat1$alk.nom <- as.numeric(dat1$alk.nom)
dat1$alk.ave <- as.numeric(dat1$alk.ave)
summary(dat1)
dat1[is.na(dat1$alk.ave), ]
dat1[1790:1810, ]
dat1[1780:1800, ]
library(plyr)
boogdir <- "C:/JVA/Lamprey/ChemControl/Resistance/Boogaard/"
boogfiles <- c("1989-1990 combined tox data TFM sea lamprey.xls", 
"1997 1998 combined tox data TFM sea lamprey.xls", 
"2001-2003 combined tox data TFM sea lamprey.xls", 
"2009 combined tox data TFM sea lamprey.xls", 
"On-site tests-Ludington-- Final JVAmod.xls", 
"On-site tests-Canada JVAmod.xls")
startr <- c(6, 6, 6, 5, 6, 6, 1)
datlist <- vector("list", length(boogfiles))
for(i in seq_along(boogfiles)) {
wb <- loadWorkbook(paste0(boogdir, boogfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=startr[i])
names(dat) <- jvanames(names(dat))
dat$source <- boogfiles[i]
datlist[[i]] <- dat
}
dat <- do.call(rbind.fill, datlist)
head(dat)
# remove rows with all missing data
dat1 <- dat[!is.na(dat$total), ]
# convert to numeric
dat1$alk.nom <- as.numeric(dat1$alk.nom)
dat1$alk.ave <- as.numeric(dat1$alk.ave)
summary(dat1)
unique(dat1$col10)
unique(dat1$col11)
unique(dat1$col12)
names(dat1)
dput(names(dat1))
# remove rows with all missing data
dat1 <- dat[!is.na(dat$total), ]
# remove columns with all missing data
dat1 <- dat1[, c("date", "tank", "ph.nom", "ph.ave", "alk.nom", "alk.ave", "tfm", "dead", "total", "x.nic.nom", "x.nic.ave", "location", "note", "source")
# convert to numeric
dat1$alk.nom <- as.numeric(dat1$alk.nom)
dat1$alk.ave <- as.numeric(dat1$alk.ave)
# remove rows with all missing data
dat1 <- dat[!is.na(dat$total), ]
# remove columns with all missing data
dat1 <- dat1[, c("date", "tank", "ph.nom", "ph.ave", "alk.nom", "alk.ave", "tfm", "dead", "total", "x.nic.nom", "x.nic.ave", "location", "note", "source")]
# convert to numeric
dat1$alk.nom <- as.numeric(dat1$alk.nom)
dat1$alk.ave <- as.numeric(dat1$alk.ave)
summary(dat1)
table(dat1$ph.nom)
plot(sort(dat1$ph.ave[is.na(dat1$ph.nom)]))
plotdf(dat1)
unique(dat1$note)
table(is.na(dat1$note))
dat1[!is.na(dat1$note), ]
dat1[750:800, ]
# look at notes
dat1[!is.na(dat1$note), ]
dat1[dat1$location=="Nunns Creek", ]
# look at notes
dat1[!is.na(dat1$note), ]
dat1[!is.na(dat1$location) & dat1$location=="Nunns Creek", ]
dat1[!is.na(dat1$location) & dat1$location=="Nunns Creek" & dat1$tank %in% 16:20, ]
dim(dat1)
dat1 <- dat1[!(!is.na(dat1$location) & dat1$location=="Nunns Creek" & dat1$tank %in% 16:20), ]
dim(dat1)
summary(dat1)
unique(dat1$note)
unique(dat1$x.nic.nom)
# remove rows with all missing data
dat1 <- dat[!is.na(dat$total), ]
# remove columns with all missing data
dat1 <- dat1[, c("date", "tank", "ph.nom", "ph.ave", "alk.nom", "alk.ave", "tfm", "dead", "total", "x.nic.nom", "x.nic.ave", "location", "note", "source")]
# convert to numeric
dat1$alk.nom <- as.numeric(dat1$alk.nom)
dat1$alk.ave <- as.numeric(dat1$alk.ave)
# fill in zeroes for missing niclosamides
dat1$x.nic.nom[is.na(dat1$x.nic.nom)] <- 0
dat1$x.nic.ave[is.na(dat1$x.nic.ave)] <- 0
# look at notes
dat1[!is.na(dat1$note), ]
dat1[!is.na(dat1$location) & dat1$location=="Nunns Creek", ]
# eliminate two brown trout records
dat1[!is.na(dat1$location) & dat1$location=="Nunns Creek" & dat1$tank %in% 16:20, ]
dat1 <- dat1[!(!is.na(dat1$location) & dat1$location=="Nunns Creek" & dat1$tank %in% 16:20), ]
head(dat1)
ls()
cleanup()
# C:\JVA\Lamprey\ChemControl\Resistance\Boogaard\ReadBoogaard.r
library(plyr)
boogdir <- "C:/JVA/Lamprey/ChemControl/Resistance/Boogaard/"
boogfiles <- c("1989-1990 combined tox data TFM sea lamprey.xls", 
"1997 1998 combined tox data TFM sea lamprey.xls", 
"2001-2003 combined tox data TFM sea lamprey.xls", 
"2009 combined tox data TFM sea lamprey.xls", 
"On-site tests-Ludington-- Final JVAmod.xls", 
"On-site tests-Canada JVAmod.xls")
startr <- c(6, 6, 6, 5, 6, 6, 1)
datlist <- vector("list", length(boogfiles))
for(i in seq_along(boogfiles)) {
wb <- loadWorkbook(paste0(boogdir, boogfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=startr[i])
names(dat) <- jvanames(names(dat))
dat$source <- boogfiles[i]
datlist[[i]] <- dat
}
dat <- do.call(rbind.fill, datlist)
head(dat)
# remove rows with all missing data
dat1 <- dat[!is.na(dat$total), ]
# remove columns with all missing data
dat1 <- dat1[, c("date", "tank", "ph.nom", "ph.ave", "alk.nom", "alk.ave", "tfm", "dead", "total", "x.nic.nom", "x.nic.ave", "location", "note", "source")]
# convert to numeric
dat1$alk.nom <- as.numeric(dat1$alk.nom)
dat1$alk.ave <- as.numeric(dat1$alk.ave)
# fill in zeroes for missing niclosamides
dat1$x.nic.nom[is.na(dat1$x.nic.nom)] <- 0
dat1$x.nic.ave[is.na(dat1$x.nic.ave)] <- 0
# look at notes
dat1[!is.na(dat1$note), ]
dat1[!is.na(dat1$location) & dat1$location=="Nunns Creek", ]
# eliminate two brown trout records
dat1[!is.na(dat1$location) & dat1$location=="Nunns Creek" & dat1$tank %in% 16:20, ]
dat1 <- dat1[!(!is.na(dat1$location) & dat1$location=="Nunns Creek" & dat1$tank %in% 16:20), ]
head(dat1)
        # date tank ph.nom ph.ave alk.nom alk.ave  tfm dead total x.nic.nom x.nic.ave location note                                          source
# 1 1989-02-20    1    6.5   6.54      30      27 0.47   20    20         0         0     <NA> <NA> 1989-1990 combined tox data TFM sea lamprey.xls
# 2 1989-02-20    2    6.5   6.54      30      27 0.38   20    20         0         0     <NA> <NA> 1989-1990 combined tox data TFM sea lamprey.xls
# 3 1989-02-20    3    6.5   6.54      30      27 0.31   20    20         0         0     <NA> <NA> 1989-1990 combined tox data TFM sea lamprey.xls
# 4 1989-02-20    4    6.5   6.54      30      27 0.26   19    20         0         0     <NA> <NA> 1989-1990 combined tox data TFM sea lamprey.xls
# 5 1989-02-20    5    6.5   6.54      30      27 0.20   11    20         0         0     <NA> <NA> 1989-1990 combined tox data TFM sea lamprey.xls
# 6 1989-02-20    6    6.5   6.54      30      27 0.17    2    20         0         0     <NA> <NA> 1989-1990 combined tox data TFM sea lamprey.xls
boogdat <- dat1
rm(boogdir, boogfiles, startr, datlist, dat, dat1)
ls()
rm(boogdir, boogfiles, startr, datlist, i, wb, dat, dat1)
ls()
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
myfiles
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(boogdir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$source <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <-  <- do.call(rbind.fill, sheetlist)
}
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(boogdir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$source <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$source <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
print(paste(i, j, sep="-"))
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$source <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
i
j
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$source <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
sheetlist[[j]]
stringin
grep("old", myfiles)
myfiles
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
grep("old", myfiles)
myfiles[-grep("old", myfiles)]
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
# all csv files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
# exclude files with "old" in their names
myfiles <- myfiles[-grep("old", myfiles)]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
print(paste(i, j, sep="-"))
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$source <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
sheetlist[[j]]
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
# all csv files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
# exclude files with "old" in their names
myfiles <- myfiles[-grep("old", myfiles)]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
print(paste(i, j, sep="-"))
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$source <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
dat
myfiles[i]
mysheets[j]
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
# all csv files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
# exclude files with "old" in their names
myfiles <- myfiles[-grep("old", myfiles)]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
print(paste(i, j, sep="-"))
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$source <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
dat <- do.call(rbind.fill, datlist)
head(dat)
stringin("date", names(dat))
dim(dat)
lapply(datlist, function(df) {
unique(c(df$start.date[!is.na(df$start.date)], df$df$end.date[!is.na(df$end.date)]))
}
)
head(datlist[[35]])
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
# all csv files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
# exclude files with "old" in their names
myfiles <- myfiles[-grep("old", myfiles)]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$source <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
dat <- do.call(rbind.fill, datlist)
lapply(datlist, function(df) {
unique(c(df$start.date[!is.na(df$start.date)], df$df$end.date[!is.na(df$end.date)]))
}
)
unlist(unique(c(df$start.date[!is.na(df$start.date)], df$df$end.date[!is.na(df$end.date)])))
unique(c(df$start.date[!is.na(df$start.date)], df$df$end.date[!is.na(df$end.date)]))
a <- lapply(datlist, function(df) {
unique(c(df$start.date[!is.na(df$start.date)], df$df$end.date[!is.na(df$end.date)]))
}
)
a
unlist(a)
lapply(a, as.character)
unlist(lapply(a, as.character))
sort(unlist(lapply(a, as.character)))
a <- lapply(datlist, function(df) {
unique(c(df$start.date[!is.na(df$start.date)], df$df$end.date[!is.na(df$end.date)]))
}
)
b <- sort(unlist(lapply(a, as.character)))
b
as.Date(b)
dat <- do.call(rbind.fill, datlist)
a <- lapply(datlist, function(df) {
unique(c(df$start.date[!is.na(df$start.date)], df$df$end.date[!is.na(df$end.date)]))
}
)
b <- as.Date(unlist(lapply(a, as.character)))
b2 <- unlist(a)
b
b2
plot(b, b2)
length(datlist)
look <- do.call(rbind.fill, datlist[1:20])
look <- do.call(rbind.fill, datlist[1:10])
look <- do.call(rbind.fill, datlist[11:20])
look <- do.call(rbind.fill, datlist[11:15])
look <- do.call(rbind.fill, datlist[11:12])
look <- do.call(rbind.fill, datlist[11:13])
datlist[[13]]
# C:\JVA\Lamprey\ChemControl\Resistance\McGarry\ReadMcGarry.r
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
# all csv files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
# exclude files with "old" in their names
myfiles <- myfiles[-grep("old", myfiles)]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$source <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
dat <- do.call(rbind.fill, datlist)
look <- do.call(rbind.fill, datlist[1:20])
look <- do.call(rbind.fill, datlist[1:30])
look <- do.call(rbind.fill, datlist[1:25])
look <- do.call(rbind.fill, datlist[1:27])
look <- do.call(rbind.fill, datlist[1:26])
datlist[[27]]
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
# all csv files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
# exclude files with "old" in their names
myfiles <- myfiles[-grep("old", myfiles)]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$source <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
dat <- do.call(rbind.fill, datlist)
head(dat)
# C:\JVA\Lamprey\ChemControl\Resistance\McGarry\ReadMcGarry.r
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
# all csv files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
# exclude files with "old" in their names
myfiles <- myfiles[-grep("old", myfiles)]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$source <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
if(FALSE) {
# try to figure out errors
a <- lapply(datlist, function(df) unique(c(df$start.date[!is.na(df$start.date)], df$df$end.date[!is.na(df$end.date)])) )
b <- as.Date(unlist(lapply(a, as.character)))
b2 <- unlist(a)
look <- do.call(rbind.fill, datlist[1:26])
}
dat <- do.call(rbind.fill, datlist)
head(dat)
# C:\JVA\Lamprey\ChemControl\Resistance\McGarry\ReadMcGarry.r
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
# all csv files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
# exclude files with "old" in their names
myfiles <- myfiles[-grep("old", myfiles)]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$source <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
if(FALSE) {
# try to figure out errors
a <- lapply(datlist, function(df) unique(c(df$start.date[!is.na(df$start.date)], df$df$end.date[!is.na(df$end.date)])) )
b <- as.Date(unlist(lapply(a, as.character)))
b2 <- unlist(a)
look <- do.call(rbind.fill, datlist[1:26])
}
dat <- do.call(rbind.fill, datlist)
head(dat)
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
# all csv files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
# exclude files with "old" in their names
myfiles <- myfiles[-grep("old", myfiles)]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$folder <- "McGarry"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
if(FALSE) {
# try to figure out errors
a <- lapply(datlist, function(df) unique(c(df$start.date[!is.na(df$start.date)], df$df$end.date[!is.na(df$end.date)])) )
b <- as.Date(unlist(lapply(a, as.character)))
b2 <- unlist(a)
look <- do.call(rbind.fill, datlist[1:26])
}
dat <- do.call(rbind.fill, datlist)
head(dat)
summary(dat)
unique(dat$test.no.)
unique(dat$check.time)
unique(dat$discomfort)
unique(dat$dead)
# C:\JVA\Lamprey\ChemControl\Resistance\McGarry\ReadMcGarry.r
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
# all csv files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
# exclude files with "old" in their names
myfiles <- myfiles[-grep("old", myfiles)]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$folder <- "McGarry"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
if(FALSE) {
# try to figure out errors
a <- lapply(datlist, function(df) unique(c(df$start.date[!is.na(df$start.date)], df$df$end.date[!is.na(df$end.date)])) )
b <- as.Date(unlist(lapply(a, as.character)))
b2 <- unlist(a)
look <- do.call(rbind.fill, datlist[1:26])
}
dat <- do.call(rbind.fill, datlist)
head(dat)
# convert to numeric
dat$dead <- as.numeric(dat$dead)
summary(dat)
McGarrydat <- dat
head(McGarrydat)
rm(mydir, myfiles, datlist, i, wb, mysheets, dat)
ls()
rm(mydir, myfiles, datlist, i, wb, mysheets, sheetlist, j, dat)
ls()
??accdb
mdbConnect <- odbcConnectAccess2007("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/Toxicity Data.accdb") 
??odbcConnectAccess2007
library(RODBC)
utils:::menuInstallPkgs()
library(RODBC)
mdbConnect <- odbcConnectAccess2007("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/Toxicity Data.accdb") 
testdb <- file.path("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/Toxicity Data.accdb")
channel <- odbcConnectAccess2007(testdb)
?odbcConnectAccess2007
?setwd
getwd()
orig <- getwd()
library(RODBC)
orig <- getwd()
setwd("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki")
testdb <- file.path("Toxicity Data.accdb")
channel <- odbcConnectAccess2007(testdb)
# Getting Access data into R
# http://sandymuspratt.blogspot.com/2013/01/getting-access-data-into-r.html
# I couldn't get it to work, so I just exported each table individually to an Excel file, and I will work with them instead
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/"
# all xlsx files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
# exclude files with "old" in their names
# myfiles <- myfiles[-grep("old", myfiles)]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=startr[i])
names(dat) <- jvanames(names(dat))
dat$folder <- "Nowicki"
dat$file <- myfiles[i]
datlist[[i]] <- dat
}
# Getting Access data into R
# http://sandymuspratt.blogspot.com/2013/01/getting-access-data-into-r.html
# I couldn't get it to work, so I just exported each table individually to an Excel file, and I will work with them instead
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/"
# all xlsx files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
# exclude files with "old" in their names
# myfiles <- myfiles[-grep("old", myfiles)]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
names(dat) <- jvanames(names(dat))
dat$folder <- "Nowicki"
dat$file <- myfiles[i]
datlist[[i]] <- dat
}
getwd()
orig
setwd(orig)
cleanup()
q()
# C:\JVA\Lamprey\ChemControl\Resistance\Nowicki\ReadNowicki.r
# Getting Access data into R
# http://sandymuspratt.blogspot.com/2013/01/getting-access-data-into-r.html
# I couldn't get it to work, so I just exported each table individually to an Excel file, and I will work with them instead
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/"
# all xlsx files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
# exclude files with "old" in their names
# myfiles <- myfiles[-grep("old", myfiles)]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
names(dat) <- jvanames(names(dat))
dat$folder <- "Nowicki"
dat$file <- myfiles[i]
datlist[[i]] <- dat
}
i
length(myfiles)
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
names(dat) <- jvanames(names(dat))
dat$folder <- "Nowicki"
dat$file <- myfiles[i]
datlist[[i]] <- dat
?loadWorkbook
rm(wb)
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
names(dat) <- jvanames(names(dat))
dat$folder <- "Nowicki"
dat$file <- myfiles[i]
datlist[[i]] <- dat
}
utils::recover
ls()
myfiles
# Getting Access data into R
# http://sandymuspratt.blogspot.com/2013/01/getting-access-data-into-r.html
# I couldn't get it to work, so I just exported each table individually to an Excel file, and I will work with them instead
# ALSO, I had to change the first column heading from ID to XID in the Main table to read it into R 
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/"
# all xlsx files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
# exclude files with "old" in their names
myfiles <- myfiles[-grep("old", myfiles)]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
names(dat) <- jvanames(names(dat))
dat$folder <- "Nowicki"
dat$file <- myfiles[i]
datlist[[i]] <- dat
}
i
dim(dat)
head(dat)
myfiles
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
i <- 10
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
head(dat)
myfiles)
myfiles
myfiles
dput(myfiles)
# Getting Access data into R
# http://sandymuspratt.blogspot.com/2013/01/getting-access-data-into-r.html
# I couldn't get it to work, so I just exported each table individually to an Excel file, and I will work with them instead
# ALSO, I had to change the first column heading from ID to XID in the Main table to read it into R 
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/"
# xlsx files in directory
myfiles <- c("_Chemicals.xlsx", "_Formulations.xlsx", "_Labs.xlsx", "_Lakes.xlsx", "_Species.xlsx", "_Streams.xlsx", "_Test_Types.xlsx", "CheckTimes.xlsx")
mycsv <- "Main.csv"
datlist <- vector("list", length(myfiles)+1)
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
names(dat) <- jvanames(names(dat))
dat$folder <- "Nowicki"
dat$file <- myfiles[i]
datlist[[i]] <- dat
}
datlist[[length(myfiles)+1]] <- read.csv(paste0(mydir, mycsv), as.is=TRUE)
length(datlist)
lapply(datlist, head)
lapply(datlist, head)
lapply(datlist, head)
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/"
# xlsx files in directory
myfiles <- c("_Chemicals.xlsx", "_Formulations.xlsx", "_Labs.xlsx", "_Lakes.xlsx", "_Species.xlsx", "_Streams.xlsx", "_Test_Types.xlsx", "CheckTimes.xlsx")
mycsv <- "Main.csv"
datlist <- vector("list", length(myfiles)+1)
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
names(dat) <- jvanames(names(dat))
datlist[[i]] <- dat
}
datlist[[length(myfiles)+1]] <- read.csv(paste0(mydir, mycsv), as.is=TRUE)
lapply(datlist, head)
lapply(datlist, head, 3)
myfiles
jvanames(myfiles)
dput(jvanames(myfiles))
names(datlist) <- c("chemicals", "formulations", "labs", "lakes", "species", "streams", "testtypes", "checktimes", "main")
lapply(datlist, head, 3)
datlist$main$folder <- "Nowicki"
datlist$main$file <- "Toxicity Data.accdb"
lapply(datlist, head, 3)
ls()
# C:\JVA\Lamprey\ChemControl\Resistance\Nowicki\ReadNowicki.r
# Getting Access data into R
# http://sandymuspratt.blogspot.com/2013/01/getting-access-data-into-r.html
# I couldn't get it to work, so I just exported each table individually to an Excel file, and I will work with them instead
# ALSO, I had to save the Main table as a csv file to read it into R 
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/"
# xlsx files in directory
myfiles <- c("_Chemicals.xlsx", "_Formulations.xlsx", "_Labs.xlsx", "_Lakes.xlsx", "_Species.xlsx", "_Streams.xlsx", "_Test_Types.xlsx", "CheckTimes.xlsx")
mycsv <- "Main.csv"
datlist <- vector("list", length(myfiles)+1)
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
names(dat) <- jvanames(names(dat))
datlist[[i]] <- dat
}
datlist[[length(myfiles)+1]] <- read.csv(paste0(mydir, mycsv), as.is=TRUE)
names(datlist) <- c("chemicals", "formulations", "labs", "lakes", "species", "streams", "testtypes", "checktimes", "main")
datlist$main$folder <- "Nowicki"
datlist$main$file <- "Toxicity Data.accdb"
Nowdat <- datlist
rm(mydir, myfiles, datlist, dat)
lapply(Nowdat, head, 3)
i
myfiles[8]
cleanup()
# Getting Access data into R
# http://sandymuspratt.blogspot.com/2013/01/getting-access-data-into-r.html
# I couldn't get it to work, so I just exported each table individually to an Excel file, and I will work with them instead
# ALSO, I had to save the Main table as a csv file to read it into R 
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/"
# xlsx files in directory
myfiles <- c("_Chemicals.xlsx", "_Formulations.xlsx", "_Labs.xlsx", "_Lakes.xlsx", "_Species.xlsx", "_Streams.xlsx", "_Test_Types.xlsx", "CheckTimes.xlsx")
mycsv <- "Main.csv"
datlist <- vector("list", length(myfiles)+1)
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
names(dat) <- jvanames(names(dat))
datlist[[i]] <- dat
}
rm(wb)
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
names(dat) <- jvanames(names(dat))
datlist[[i]] <- dat
}
i
cleanup()
# Getting Access data into R
# http://sandymuspratt.blogspot.com/2013/01/getting-access-data-into-r.html
# I couldn't get it to work, so I just exported each table individually to an Excel file, and I will work with them instead
# ALSO, I had to save the Main table as a csv file to read it into R 
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/"
# xlsx files in directory
myfiles <- c("_Chemicals.xlsx", "_Formulations.xlsx", "_Labs.xlsx", "_Lakes.xlsx", "_Species.xlsx", "_Streams.xlsx", "_Test_Types.xlsx", "CheckTimes.xlsx")
datlist <- vector("list", length(myfiles)+1)
rm(wb)
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
names(dat) <- jvanames(names(dat))
datlist[[i]] <- dat
}
datlist[[length(myfiles)+1]] <- read.csv(paste0(mydir, "CheckTimes"), as.is=TRUE)
datlist[[length(myfiles)+2]] <- read.csv(paste0(mydir, "Main"), as.is=TRUE)
q()
# Getting Access data into R
# http://sandymuspratt.blogspot.com/2013/01/getting-access-data-into-r.html
# I couldn't get it to work, so I just exported each table individually to an Excel file, and I will work with them instead
# ALSO, I had to save the Main table as a csv file to read it into R 
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/"
# xlsx files in directory
myfiles <- c("_Chemicals.xlsx", "_Formulations.xlsx", "_Labs.xlsx", "_Lakes.xlsx", "_Species.xlsx", "_Streams.xlsx", "_Test_Types.xlsx", "CheckTimes.xlsx")
datlist <- vector("list", length(myfiles)+1)
rm(wb)
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
names(dat) <- jvanames(names(dat))
datlist[[i]] <- dat
}
datlist[[length(myfiles)+1]] <- read.csv(paste0(mydir, "CheckTimes"), as.is=TRUE)
datlist[[length(myfiles)+2]] <- read.csv(paste0(mydir, "Main"), as.is=TRUE)
datlist[[length(myfiles)+1]] <- read.csv(paste0(mydir, "CheckTimes.csv"), as.is=TRUE)
datlist[[length(myfiles)+2]] <- read.csv(paste0(mydir, "Main.csv"), as.is=TRUE)
names(datlist) <- c("chemicals", "formulations", "labs", "lakes", "species", "streams", "testtypes", "checktimes", "main")
datlist$main$folder <- "Nowicki"
datlist$main$file <- "Toxicity Data.accdb"
Nowdat <- datlist
rm(mydir, myfiles, datlist, dat)
lapply(Nowdat, head, 3)
length(datlist)
length(Nowdat)
cleanup()
q()
# C:\JVA\Lamprey\ChemControl\Resistance\Nowicki\ReadNowicki.r
# Getting Access data into R
# http://sandymuspratt.blogspot.com/2013/01/getting-access-data-into-r.html
# I couldn't get it to work, so I just exported each table individually to an Excel file, and I will work with them instead
# ALSO, I had to save the Main table as a csv file to read it into R 
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/"
# xlsx files in directory
myfiles <- c("_Chemicals.xlsx", "_Formulations.xlsx", "_Labs.xlsx", "_Lakes.xlsx", "_Species.xlsx", "_Streams.xlsx", "_Test_Types.xlsx")
datlist <- vector("list", length(myfiles)+2)
rm(wb)
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
names(dat) <- jvanames(names(dat))
datlist[[i]] <- dat
}
datlist[[length(myfiles)+1]] <- read.csv(paste0(mydir, "CheckTimes.csv"), as.is=TRUE)
datlist[[length(myfiles)+2]] <- read.csv(paste0(mydir, "Main.csv"), as.is=TRUE)
names(datlist) <- c("chemicals", "formulations", "labs", "lakes", "species", "streams", "testtypes", "checktimes", "main")
datlist$main$folder <- "Nowicki"
datlist$main$file <- "Toxicity Data.accdb"
Nowdat <- datlist
lapply(Nowdat, head, 3)
lapply(Nowdat, head, 3)
rm(mydir, myfiles, datlist, dat)
ls()
wb <- loadWorkbook("C:/JVA/Lamprey/ChemControl/Resistance/Pubs/TechReports.xlsx")
mysheets <- getSheets(wb)
datlist <- vector("list", length(mysheets))
startr <- c(9, 3, 4, 3)
for(i in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=startr[i])
names(dat) <- jvanames(names(dat))
dat$folder <- "Pubs"
dat$file <- "TechReports.xlsx"
dat$sheet <- mysheets[i]
datlist[[i]] <- dat
}
datlist
mysheets
startr
# C:\JVA\Lamprey\ChemControl\Resistance\Pubs\ReadPubs.r
wb <- loadWorkbook("C:/JVA/Lamprey/ChemControl/Resistance/Pubs/TechReports.xlsx")
mysheets <- getSheets(wb)
datlist <- vector("list", length(mysheets))
startr <- c(9, 3, 4, 3)
for(i in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[i], startRow=startr[i])
names(dat) <- jvanames(names(dat))
dat$folder <- "Pubs"
dat$file <- "TechReports.xlsx"
dat$sheet <- mysheets[i]
datlist[[i]] <- dat
}
datlist
ls()
Pubdat <- datlist
rm(wb, mysheets, datlist, startr, i, dat)
lapply(Pubdat, head, 3)
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
# all xlsx files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
myfiles
# C:\JVA\Lamprey\ChemControl\Resistance\Robertson\ReadRobertson.r
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
# all xlsx files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
myfiles
dput(myfiles)
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
# all xlsx files in directory
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
datlist
dat <- do.call(rbind.fill, datlist)
summary(dat)
dat$start.date
dat$start.date[!is.na(dat$start.date)]
sort(dat$start.date[!is.na(dat$start.date)])
dat$start.date[!is.na(dat$start.date)]
a <- dat$start.date[!is.na(dat$start.date)]
a
stringin("/", a)
stringin
stringin("/", a, value=FALSE)
?grep
grep("/", a)
# C:\JVA\Lamprey\ChemControl\Resistance\Robertson\ReadRobertson.r
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
# all xlsx files in directory
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
a <- dat$start.date[!is.na(dat$start.date)]
a
dat
dat$start.date
cleanup()
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
dat <- do.call(rbind.fill, datlist)
a <- dat$start.date[!is.na(dat$start.date)]
a
dat[!is.na(dat$start.date)]
dat[!is.na(dat$start.date), ]
# C:\JVA\Lamprey\ChemControl\Resistance\Robertson\ReadRobertson.r
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
dat <- do.call(rbind.fill, datlist)
a <- dat$start.date[!is.na(dat$start.date)]
a
rm(wb)
q()
# C:\JVA\Lamprey\ChemControl\Resistance\Robertson\ReadRobertson.r
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
dat <- do.call(rbind.fill, datlist)
a <- dat$start.date[!is.na(dat$start.date)]
a
cleanup()
q()
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
dat <- do.call(rbind.fill, datlist)
a <- dat$start.date[!is.na(dat$start.date)]
a
i
ls()
rm(wb)
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
dat <- do.call(rbind.fill, datlist)
a <- dat$start.date[!is.na(dat$start.date)]
a
cleanup()
q()
mydir <- "C:/JVA/R/CharCal"
progname <- "CharCalendarYear.r"
inputfile <- "CharlotteCalendarYear.xls"
# source(paste(mydir, progname, sep="/"))
library(TeachingDemos)
library(XLConnect)
library(jpeg)
source(paste(mydir, progname, sep="/"))
source(paste(mydir, progname, sep="/"))
library(TeachingDemos)
library(XLConnect)
library(jpeg)
numdays <- function(mm, year) {
# modification of code on http://stackoverflow.com/questions/6243088/find-out-the-number-of-days-of-a-month-in-r
date <- as.Date(paste(year, mm, 15, sep="-"))
    m <- format(date, format="%m")
    while (format(date, format="%m") == m) {
        date <- date + 1
}
    return(as.integer(format(date - 1, format="%d")))
}
wb <- loadWorkbook(paste(mydir, inputfile, sep="/"), create=TRUE)
sheetz <- getSheets(wb)
monthstodo <- 1:12
### MONTHLY CALENDAR ###
quest <- readWorksheet(wb, sheet="Question")
if(is.numeric(quest$Answer)) {
monthstodo <- c(monthstodo, quest$Answer)
cat(paste0("\n\n\n\n\nYou have requested a monthly calendar for ", casefold(month.name[quest$Answer], TRUE), ".\n"))
} else {
cat("\n\nYou have not requested a monthly calendar.  Only a yearly calendar will be created.\n")
}
### YEARLY CALENDAR ###
time.summary <- vector("list", 12)
count <- 0
for(i in monthstodo) {
count <- count + 1
dat <- readWorksheet(wb, sheet=sheetz[i])
hhmmss <- strsplit(sapply(strsplit(as.character(dat$Start.time), " "), "[", 2), ":")
hh1 <- as.numeric(sapply(hhmmss, "[", 1))
mm1 <- sapply(hhmmss, "[", 2)
hh <- ifelse(hh1>12, hh1-12, hh1)
mm <- ifelse(mm1 == "00", "", paste0(":", mm1))
ap <- ifelse(hh1>=12, "p", "a")
dat$time.format <- paste0(hh, mm, ap)
dat$time.format[dat$time.format=="0a"] <- "12a"
dat$timex <- (hh1+as.numeric(mm1)/60)/24
dat$Timex <- dat$Start.day + dat$timex
col.dat <- readWorksheet(wb, sheet="Colors")
mm <- match(substr(sheetz[i], 1, 3), month.abb)
year <- as.numeric(substr(sheetz[i], 4, 7))
nd <- numdays(mm, year)
nr <- dim(dat)[1]
# midpoints of bars
dat$midtime <- c(dat$Timex[-1], nd+1) - (c(dat$Timex[-1], nd+1) - dat$Timex)/2
dat$midday <- floor(dat$midtime)
dat$midx <- dat$midtime - dat$midday
dhm1 <- dat$Start.day + hh1/24 + as.numeric(mm1)/60/24
dhm2 <- c(dhm1[-1], nd + 1)
days <- dhm2 - dhm1
# only add first 12 months to summary list
if(count < 12.5) {
time.summary[[i]] <- data.frame(year=year, month=mm, startday=dat$Start.day, person=dat$Person, duration=days)
}
attach(dat)
# create jpeg for first 12 months, and pdf for selected month
if(count < 12.5) {
jpeg(paste0(mydir, "/temp/", sheetz[i], ".jpg"), width=7.5, height=3*10/4, units="in", res=72, quality=100)
} else {
pdf(file=paste0(mydir, "/", sheetz[i], " Calendar as of ", Sys.Date(), ".pdf"), 
width=10, height=7.5, paper="USr")
}
setday <- cal(mm, year)
# create a data frame with the far left and right for every day of the month
pusr <- par("usr")
long <- expand.grid(Start.day=1:nd, timex=pusr[1:2]+c(-0.01, 0.01))
both <- merge(dat[, c("Person", "Start.day", "timex")], long, all=TRUE)
both <- merge(both, col.dat, all.x=TRUE)
both <- both[order(both$Start.day, both$timex), ]
colnow <- both$Color[1]
par(xpd=NA)
for(j in 1:nr) {
# only print times for selected month calendar ... and use bigger font for year calendar
if(count > 12.5) {
setday(Start.day[j])
text(timex[j], 0.7, time.format[j], srt=50, adj=0, cex=1.3)
setday(midday[j])
text(midx[j], 0.1, Person[j], font=2, cex=2)
} else {
setday(midday[j])
text(midx[j], 0.1, Person[j], font=2, cex=3)
}
}
for(j in 2:dim(both)[1]) {
setday(both$Start.day[j-1])
if(!is.na(both$Color[j-1])) colnow <- both$Color[j-1]
if(both$Start.day[j-1]==both$Start.day[j]) {
lines(c(both$timex[j-1], both$timex[j]), c(0.4, 0.4), lwd=30, col=colnow, lend="butt")
}
}
for(j in 1:nr) {
setday(Start.day[j])
lines(c(timex[j], timex[j]), c(0.2, 0.6), lend="butt", lwd=2)
}
detach(dat)
}
search()
detach(3)
detach(2)
search()
monthstodo
### YEARLY CALENDAR ###
time.summary <- vector("list", 12)
count <- 0
i
search()
source(paste(mydir, progname, sep="/"))
i
search()
detach()
ls()
count
setday
cal(mm, year)
setday <- cal(mm, year)
# create a data frame with the far left and right for every day of the month
pusr <- par("usr")
long <- expand.grid(Start.day=1:nd, timex=pusr[1:2]+c(-0.01, 0.01))
both <- merge(dat[, c("Person", "Start.day", "timex")], long, all=TRUE)
both <- merge(both, col.dat, all.x=TRUE)
both <- both[order(both$Start.day, both$timex), ]
colnow <- both$Color[1]
j
setday(midday[j])
text(midx[j], 0.1, Person[j], font=2, cex=3)
search()
attach(dat)
setday(midday[j])
text(midx[j], 0.1, Person[j], font=2, cex=3)
setday
?setday
midday[j])
midday[j]
midday
dat
search()
detach()
dat <- readWorksheet(wb, sheet=sheetz[i])
hhmmss <- strsplit(sapply(strsplit(as.character(dat$Start.time), " "), "[", 2), ":")
hh1 <- as.numeric(sapply(hhmmss, "[", 1))
mm1 <- sapply(hhmmss, "[", 2)
hh <- ifelse(hh1>12, hh1-12, hh1)
mm <- ifelse(mm1 == "00", "", paste0(":", mm1))
ap <- ifelse(hh1>=12, "p", "a")
dat$time.format <- paste0(hh, mm, ap)
dat$time.format[dat$time.format=="0a"] <- "12a"
dat$timex <- (hh1+as.numeric(mm1)/60)/24
dat$Timex <- dat$Start.day + dat$timex
col.dat <- readWorksheet(wb, sheet="Colors")
mm <- match(substr(sheetz[i], 1, 3), month.abb)
year <- as.numeric(substr(sheetz[i], 4, 7))
nd <- numdays(mm, year)
nr <- dim(dat)[1]
dat
i
i <- 3
dat <- readWorksheet(wb, sheet=sheetz[i])
hhmmss <- strsplit(sapply(strsplit(as.character(dat$Start.time), " "), "[", 2), ":")
hh1 <- as.numeric(sapply(hhmmss, "[", 1))
mm1 <- sapply(hhmmss, "[", 2)
hh <- ifelse(hh1>12, hh1-12, hh1)
mm <- ifelse(mm1 == "00", "", paste0(":", mm1))
ap <- ifelse(hh1>=12, "p", "a")
dat$time.format <- paste0(hh, mm, ap)
dat$time.format[dat$time.format=="0a"] <- "12a"
dat$timex <- (hh1+as.numeric(mm1)/60)/24
dat$Timex <- dat$Start.day + dat$timex
col.dat <- readWorksheet(wb, sheet="Colors")
mm <- match(substr(sheetz[i], 1, 3), month.abb)
year <- as.numeric(substr(sheetz[i], 4, 7))
nd <- numdays(mm, year)
nr <- dim(dat)[1]
dat
hhmmss
i <- 4
dat <- readWorksheet(wb, sheet=sheetz[i])
hhmmss <- strsplit(sapply(strsplit(as.character(dat$Start.time), " "), "[", 2), ":")
hh1 <- as.numeric(sapply(hhmmss, "[", 1))
mm1 <- sapply(hhmmss, "[", 2)
hh <- ifelse(hh1>12, hh1-12, hh1)
mm <- ifelse(mm1 == "00", "", paste0(":", mm1))
ap <- ifelse(hh1>=12, "p", "a")
dat$time.format <- paste0(hh, mm, ap)
dat$time.format[dat$time.format=="0a"] <- "12a"
dat$timex <- (hh1+as.numeric(mm1)/60)/24
dat$Timex <- dat$Start.day + dat$timex
hhmmss
as.character(dat$Start.time)
i <- 3
dat <- readWorksheet(wb, sheet=sheetz[i])
hhmmss <- strsplit(sapply(strsplit(as.character(dat$Start.time), " "), "[", 2), ":")
hhmmss
as.character(dat$Start.time)
search()
source(paste(mydir, progname, sep="/"))
i
search()
detach()
source(paste(mydir, progname, sep="/"))
cleanup()
q()
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
dat <- do.call(rbind.fill, datlist)
a <- dat$start.date[!is.na(dat$start.date)]
a
i
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
paste0(mydir, myfiles[i])
utils:::menuInstallPkgs()
library(xlsx)
mydata <- read.xlsx(paste0(mydir, myfiles[i]), 1)
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
dat <- do.call(rbind.fill, datlist)
a <- dat$start.date[!is.na(dat$start.date)]
a
search()
detach(2)
detach(2)
search()
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
dat <- do.call(rbind.fill, datlist)
a <- dat$start.date[!is.na(dat$start.date)]
a
lapply(datlist, head, 2)
lapply(datlist, head, 2)
stringin("dat", names(datlist[[1]]))
stringin("date", names(datlist[[1]]))
lapply(datlist, function(df) lapply(df[, c("start.date", "water.chem..date")], class)
)
datlist[[1]][, c("start.date", "water.chem..date")]
datlist[[1]][!is.na(datlist[[1]]$ph), c("start.date", "water.chem..date")]
length(datlist)
datlist[[1]][!is.na(datlist[[1]]$ph), c("start.date", "water.chem..date")]
datlist[[2]][!is.na(datlist[[2]]$ph), c("start.date", "water.chem..date")]
datlist[[3]][!is.na(datlist[[3]]$ph), c("start.date", "water.chem..date")]
datlist[[4]][!is.na(datlist[[4]]$ph), c("start.date", "water.chem..date")]
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
dat <- do.call(rbind.fill, datlist)
a <- dat$start.date[!is.na(dat$start.date)]
a
datlist[[1]][!is.na(datlist[[1]]$ph), c("start.date", "water.chem..date")]
datlist[[2]][!is.na(datlist[[2]]$ph), c("start.date", "water.chem..date")]
datlist[[3]][!is.na(datlist[[3]]$ph), c("start.date", "water.chem..date")]
datlist[[4]][!is.na(datlist[[4]]$ph), c("start.date", "water.chem..date")]
a <- datlist[[3]][!is.na(datlist[[3]]$ph), c("start.date", "water.chem..date")]
a
as.POSIXlt(a[, 1])
a[, 1]
stringin("-", a[, 1])
stringin("-", a[, 2])
?cheat
x <- a[, 2]
# replace all punctuation marks with hyphens
gsub("[[:punct:]]", "-", x)
x
x <- a[, 2]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x)
# break up string into three parts
splitstr(x2, "-")
strsplit
strsplit(x2, "-")
# break up string into three parts
x3 <- strsplit(x2, "-")
nc3 <- lapply(x3, nchar)
nc3
# length of 3rd string
nc3 <- lapply(x3, function(y) nchar(y)[3])
nc3
# if last string is length 4, move it to first
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[3, 1, 2] else y
}
)
x3
x3[[1]]
y <- x3[[1]]
if(nchar(y)[3] > 3) y[3, 1, 2] else y
nchar(y)[3]
y[3, 1, 2]
# if last string is length 4, move it to first
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
nc3
a <- datlist[[3]][!is.na(datlist[[3]]$ph), c("start.date", "water.chem..date")]
a
x <- a[, 2]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
lapply(nc3, paste, collapse="-")
x2
# if 3rd string is length 4, move it to 1st
nc3 <- sapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
nc3
a <- datlist[[3]][!is.na(datlist[[3]]$ph), c("start.date", "water.chem..date")]
a
x <- a[, 2]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
sapply(nc3, paste, collapse="-")
# combine three parts again
x4 <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x4)
datlist[[1]][!is.na(datlist[[1]]$ph), c("start.date", "water.chem..date")]
datlist[[2]][!is.na(datlist[[2]]$ph), c("start.date", "water.chem..date")]
datlist[[3]][!is.na(datlist[[3]]$ph), c("start.date", "water.chem..date")]
datlist[[4]][!is.na(datlist[[4]]$ph), c("start.date", "water.chem..date")]
makedate(datlist[[3]]$start.date)
makedate(datlist[[3]]$water.chem..date)
makedate(datlist[[4]]$start.date)
makedate(datlist[[4]]$water.chem..date)
makedate <- function(x) {
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x4 <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x4)
}
makedate(datlist[[3]]$start.date)
makedate(datlist[[3]]$water.chem..date)
makedate(datlist[[4]]$start.date)
makedate(datlist[[4]]$water.chem..date)
datlist[[3]]$start.date
is.na(datlist[[3]]$start.date)
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x4 <- sapply(nc3, paste, collapse="-")
x[sel] <- as.POSIXlt(x4)
x
}
makedate(datlist[[3]]$start.date)
makedate(datlist[[3]]$water.chem..date)
makedate(datlist[[4]]$start.date)
makedate(datlist[[4]]$water.chem..date)
x <- datlist[[3]]$start.date
x
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x4 <- sapply(nc3, paste, collapse="-")
x
x4
x <- datlist[[3]]$start.date
x
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
sapply(nc3, paste, collapse="-")
x[sel] <- sapply(nc3, paste, collapse="-")
x
as.POSIXlt(x)
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
makedate(datlist[[3]]$start.date)
makedate(datlist[[3]]$water.chem..date)
makedate(datlist[[4]]$start.date)
makedate(datlist[[4]]$water.chem..date)
datlist[[3]]$start.date <- makedate(datlist[[3]]$start.date)
datlist[[3]]$water.chem..date <- makedate(datlist[[3]]$water.chem..date)
datlist[[4]]$start.date <- makedate(datlist[[4]]$start.date)
datlist[[4]]$water.chem..date <- makedate(datlist[[4]]$water.chem..date)
dat <- do.call(rbind.fill, datlist)
search()
# C:\JVA\Lamprey\ChemControl\Resistance\Robertson\ReadRobertson.r
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
datlist[[3]]$start.date <- makedate(datlist[[3]]$start.date)
datlist[[3]]$water.chem..date <- makedate(datlist[[3]]$water.chem..date)
datlist[[4]]$start.date <- makedate(datlist[[4]]$start.date)
datlist[[4]]$water.chem..date <- makedate(datlist[[4]]$water.chem..date)
dat <- do.call(rbind.fill, datlist)
a <- dat$start.date[!is.na(dat$start.date)]
a
lapply(dat, class)
head(dat)
summary(dat)
dat[, c("conc.", "ill", "dead")]
is.na(dat$conc.)
test1 <- is.na(dat$conc.)
test2 <- is.na(as.numeric(dat$conc.))
dat[!test1 & test2, ]
x <- dat$ill
test1 <- is.na(x)
test2 <- is.na(as.numeric(x))
dat[!test1 & test2, ]
x <- dat$dead
test1 <- is.na(x)
test2 <- is.na(as.numeric(x))
dat[!test1 & test2, ]
# C:\JVA\Lamprey\ChemControl\Resistance\Robertson\ReadRobertson.r
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
datlist[[3]]$start.date <- makedate(datlist[[3]]$start.date)
datlist[[3]]$water.chem..date <- makedate(datlist[[3]]$water.chem..date)
datlist[[4]]$start.date <- makedate(datlist[[4]]$start.date)
datlist[[4]]$water.chem..date <- makedate(datlist[[4]]$water.chem..date)
dat <- do.call(rbind.fill, datlist)
summary(dat)
# C:\JVA\Lamprey\ChemControl\Resistance\Robertson\ReadRobertson.r
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
datlist[[3]]$start.date <- makedate(datlist[[3]]$start.date)
datlist[[3]]$water.chem..date <- makedate(datlist[[3]]$water.chem..date)
datlist[[4]]$start.date <- makedate(datlist[[4]]$start.date)
datlist[[4]]$water.chem..date <- makedate(datlist[[4]]$water.chem..date)
dat <- do.call(rbind.fill, datlist)
summary(dat)
cleanup()
# C:\JVA\Lamprey\ChemControl\Resistance\Robertson\ReadRobertson.r
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
datlist[[3]]$start.date <- makedate(datlist[[3]]$start.date)
datlist[[3]]$water.chem..date <- makedate(datlist[[3]]$water.chem..date)
datlist[[4]]$start.date <- makedate(datlist[[4]]$start.date)
datlist[[4]]$water.chem..date <- makedate(datlist[[4]]$water.chem..date)
dat <- do.call(rbind.fill, datlist)
Robdat <- dat
head(Robdat)
rm(mydir, myfiles, datlist, i, wb, mysheets, sheetlist, j, dat)
ls()
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
myfiles <- "Historical TFM Testing.xlsx"
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
lapply(datlist, head)
length(datlist)
i
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
j
j <- 1
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
j <- 1
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
lapply(sheetlist, head)
mysheets
j <- 1
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
j <- 2
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
lapply(sheetlist, head)
datlist[[i]] <- do.call(rbind.fill, sheetlist)
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
myfiles <- "Historical TFM Testing.xlsx"
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
cleanup()
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
myfiles <- "Historical TFM Testing.xlsx"
datlist <- vector("list", length(myfiles))
i <- 1
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
cleanup()
q()
i <- 1
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
myfiles <- "Historical TFM Testing.xlsx"
datlist <- vector("list", length(myfiles))
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
stringin("date", names(sheetlist[[1]]))
class(dat$start.date)
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)=="character") dat$start.date <- makedate(dat$start.date)
if(class(dat$end.date)=="character") dat$end.date <- makedate(dat$end.date)
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)=="character") dat$start.date <- makedate(dat$start.date)
if(class(dat$end.date)=="character") dat$end.date <- makedate(dat$end.date)
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
j <- 1
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)=="character") dat$start.date <- makedate(dat$start.date)
if(class(dat$end.date)=="character") dat$end.date <- makedate(dat$end.date)
sheetlist[[j]] <- dat
class(dat$start.date)=="character"
class(dat$start.date)
class(dat$start.date)[1]=="character"
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(dat$start.date)
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(dat$end.date)
sheetlist[[j]] <- dat
j <- 2
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(dat$start.date)
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(dat$end.date)
sheetlist[[j]] <- dat
class(dat$start.date)[1]
dat$start.date
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(substring(dat$start.date, 1, 10))
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(substring(dat$start.date, 1, 10))
sheetlist[[j]] <- dat
datlist[[i]] <- do.call(rbind.fill, sheetlist)
lapply(sheetlist, head)
lapply(sheetlist, head)
lapply(sheetlist, class)
lapply(sheetlist, lapply, class)
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(substring(dat$start.date, 1, 10))
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(substring(dat$start.date, 1, 10))
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
lapply(sheetlist[[1]], class)
lapply(sheetlist[[2]], class)
head(sheetlist[[1]])
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(substring(dat$start.date, 1, 10))
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(substring(dat$start.date, 1, 10))
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
head(sheetlist[[1]])
head(sheetlist[[2]])
unique(sheetlist[[2]]$start.time)
cleanup()
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
library(plyr)
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
myfiles <- "Historical TFM Testing.xlsx"
datlist <- vector("list", length(myfiles))
i <- 1
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(substring(dat$start.date, 1, 10))
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(substring(dat$start.date, 1, 10))
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
lapply(sheetlist, head)
lapply(sheetlist[[1]][, 1:9], class)
lapply(sheetlist[[2]][, 1:9], class)
lapply(sheetlist[[1]][, 1:10], class)
lapply(sheetlist[[2]][, 1:10], class)
unique(sheetlist[[2]]$start.time)
unique(sheetlist[[2]]$end.time)
rm(wb)
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(substring(dat$start.date, 1, 10))
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(substring(dat$start.date, 1, 10))
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
length(datlist)
datlist
rm(wb)
library(plyr)
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
myfiles <- "Historical TFM Testing.xlsx"
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(substring(dat$start.date, 1, 10))
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(substring(dat$start.date, 1, 10))
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
Karendat <- datlist[[1]]
head(Karendat)
rm(mydir, myfiles, datlist, i, wb, mysheets, sheetlist, j, makedate, dat)
ls()
cleanup()
q()
# read in all the raw data
source("C:/JVA/Lamprey/ChemControl/Resistance/McGarry/ReadMcGarry.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/ReadNowicki.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
ls()
q()
# C:\JVA\Lamprey\ChemControl\Resistance\Analysis\Resist.r
# read in all the raw data
source("C:/JVA/Lamprey/ChemControl/Resistance/McGarry/ReadMcGarry.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/ReadNowicki.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
# use Nowdat as comparison
lapply(Nowdat, head, 3)
head(McGarrydat)
head(Karendat)
head(Robdat)
# use Nowdat as comparison
lapply(Nowdat, head, 3)
head(McGarrydat)
head(Karendat)
head(Robdat)
# use Nowdat as comparison
lapply(Nowdat, head, 2)
head(McGarrydat, 2)
head(Karendatm, 2)
head(Robdat, 2)
# use Nowdat as comparison
lapply(Nowdat, head, 2)
head(McGarrydat, 2)
head(Karendat, 2)
head(Robdat, 2)
n <- names(Nowdat$main)
m <- names(McGarrydat)
k <- names(Karendat)
r <- names(Robdat)
n
unique(c(m, k, r))
sort(n)
sort(unique(c(m, k, r)))
dput(sort(n))
mnames <- matrix(
c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comments",
"conc.", "Concentration",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested_Species_1", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species_1", 
"source.of.animals", "Test_Species_1_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit"
), ncol=2, byrow=TRUE)
mnames
match(n, mnames[, 2])
n[is.na(match(n, mnames[, 2]))]
m[is.na(match(m, mnames[, 1]))]
a <- unique(c(m, k, r))
a[is.na(match(a, mnames[, 1]))]
c <- names(Nowdat$checktimes)
c
sort(a[is.na(match(a, mnames[, 1]))])
sort(c)
head(Nowdat$checktime)
dput(sort(c))
sort(a[is.na(match(a, mnames[, 1]))])
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Karendat)
r <- names(Robdat)
a <- unique(c(m, k, r))
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comments",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested_Species_1", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species_1", 
"source.of.animals", "Test_Species_1_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit"
), ncol=2, byrow=TRUE)
n[is.na(match(n, mainnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1]))])
sort(c)
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Karendat)
r <- names(Robdat)
a <- unique(c(m, k, r))
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comments",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested_Species_1", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species_1", 
"source.of.animals", "Test_Species_1_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit"
), ncol=2, byrow=TRUE)
subnames <- matrix(c(
"check.time", "Check_Time", 
"conc.", "concentration_t", 
"dead", "Test_Species_1_Dead", 
"ill", "Test_Species_1_Sick"
), ncol=2, byrow=TRUE)
n[is.na(match(n, mainnames[, 2]))]
c[is.na(match(c, subnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
m
k
r
head(Karendat)
summary(Karendat$col28)
unique(Karendat$col28)
sort(k)
table(Karendat$col28=="")
Karendat[Karendat$col28=="", ]
Karendat[Karendat$col28!="", ]
Karendat[!is.na(Karendat$col28), ]
unique(Karendat$col28)
# C:\JVA\Lamprey\ChemControl\Resistance\Slaght\ReadSlaght.r
library(plyr)
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
myfiles <- "Historical TFM Testing.xlsx"
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(substring(dat$start.date, 1, 10))
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(substring(dat$start.date, 1, 10))
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
Karendat <- datlist[[1]]
head(Karendat)
rm(mydir, myfiles, datlist, i, wb, mysheets, sheetlist, j, makedate, dat)
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Karendat)
r <- names(Robdat)
a <- unique(c(m, k, r))
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comments",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested_Species_1", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species_1", 
"source.of.animals", "Test_Species_1_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit"
), ncol=2, byrow=TRUE)
subnames <- matrix(c(
"check.time", "Check_Time", 
"conc.", "concentration_t", 
"dead", "Test_Species_1_Dead", 
"ill", "Test_Species_1_Sick"
), ncol=2, byrow=TRUE)
n[is.na(match(n, mainnames[, 2]))]
c[is.na(match(c, subnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
look <- function(varname) {
print(unique(McGarrydat[, varname]))
print(unique(Karendat[, varname]))
print(unique(Robdat[, varname]))
invisible()
}
look("acc..no.")
look("aerated.")
look <- function(varname) {
if(varname in m) print(unique(McGarrydat[, varname]))
if(varname in k) print(unique(Karendat[, varname]))
if(varname in r) print(unique(Robdat[, varname]))
invisible()
}
look("aerated.")
look <- function(varname) {
if(varname %in% m) print(unique(McGarrydat[, varname]))
if(varname %in% k) print(unique(Karendat[, varname]))
if(varname %in% r) print(unique(Robdat[, varname]))
invisible()
}
look("aerated.")
look("cond.")
look("water.chem..date")
look("alk..unit")
look("conc..unit")
look("cond..unit")
look("container")
look("cumulative..dead")
m
k
r
sort(m)
sort(k)
sort(r)
Slaghtdat <- Karendat
Slaghtdat
tabattach(Slaghtdat)
attach(Slaghtdat)
table(species)
unique(species)
table(is.na(species))
sum(table(species))
unique(cumulative..dead)
summary(cumulative..dead)
newdead <- cumulative..dead
newdead[!is.na(species) & is.na(cumulative..dead)] <- 0
newdead <- fill(newdead)
unique(newdead)
table(newdead)
summary(newdead)
Slaghtdat[is.na(newdead), ]
search()
detach()
library(plyr)
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
myfiles <- "Historical TFM Testing.xlsx"
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(substring(dat$start.date, 1, 10))
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(substring(dat$start.date, 1, 10))
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
Slaghtdat <- datlist[[1]]
# the cumulative number of dead was recorded only when there was a new death (same for ill)
# so, a series of numbers like 0, 1, 0, 2, 0 represents new dead 0, 1, 0, 1, 0, and true cumulative dead 0, 1, 1, 2, 2
# to make these numbers conform to the number of dead recorded in other data sheets, they will be converted to "new dead"
# first, if the first row of so-called cumdead is missing, set the number of new dead to zero
attach(Slaghtdat)
newdead <- cumulative..dead
newdead[!is.na(species) & is.na(cumulative..dead)] <- 0
newdead <- fill(newdead)
summary(newdead)
cumdead <- cumulative..dead
cumdead[!is.na(species) & is.na(cumulative..dead)] <- 0
cumdead <- fill(cumdead)
cumdeadb4 <- c(NA, cumdead[-length(cumdead)])
newdead <- ifelse(!is.na(species), cumdead, cumdead-cumdeadb4)
dput(names(Slaghtdat))
cbind(Slaghtdat[, c("species", "total.no..tested", "check.time", "cumulative..dead")], cumdead, newdead)
convert
k
r
m
k
sort(k)
# C:\JVA\Lamprey\ChemControl\Resistance\Slaght\ReadSlaght.r
library(plyr)
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
myfiles <- "Historical TFM Testing.xlsx"
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(substring(dat$start.date, 1, 10))
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(substring(dat$start.date, 1, 10))
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
Slaghtdat <- datlist[[1]]
# the cumulative number of dead was recorded only when there was a new death (same for ill)
# so, a series of numbers like 0, 1, 0, 2, 0 represents new dead 0, 1, 0, 1, 0, and true cumulative dead 0, 1, 1, 2, 2
# to make these numbers conform to the number of dead recorded in other data sheets, they will be converted to "new dead"
convert <- function(cumsortof) {
# convert so-called cumulative dead/ill numbers to real new dead/ill numbers
cumdead <- cumsortof
# change all zeroes to missings
cumdead[!is.na(cumdead) & cumdead < 0.5] <- NA
# first, if the first row of so-called cumdead is missing, set the number of new dead to zero
cumdead[!is.na(species) & is.na(cumsortof)] <- 0
# then, fill in the remaining missing values with the previous value
cumdead <- fill(cumdead)
# then calculate the new dead as the difference along the cumdead
cumdeadb4 <- c(NA, cumdead[-length(cumdead)])
newdead <- ifelse(!is.na(species), cumdead, cumdead-cumdeadb4)
newdead
}
Slaghtdat$dead <- convert(Slaghtdat$cumulative..dead)
Slaghtdat$ill <- convert(Slaghtdat$cumulative..ill)
head(Slaghtdat)
Slaghtdat <- datlist[[1]]
# the cumulative number of dead was recorded only when there was a new death (same for ill)
# so, a series of numbers like 0, 1, 0, 2, 0 represents new dead 0, 1, 0, 1, 0, and true cumulative dead 0, 1, 1, 2, 2
# to make these numbers conform to the number of dead recorded in other data sheets, they will be converted to "new dead"
convert <- function(cumsortof) {
# convert so-called cumulative dead/ill numbers to real new dead/ill numbers
cumdead <- cumsortof
# change all zeroes to missings
cumdead[!is.na(cumdead) & cumdead < 0.5] <- NA
# first, if the first row of so-called cumdead is missing, set the number of new dead to zero
cumdead[!is.na(species) & is.na(cumsortof)] <- 0
# then, fill in the remaining missing values with the previous value
cumdead <- fill(cumdead)
# then calculate the new dead as the difference along the cumdead
cumdeadb4 <- c(NA, cumdead[-length(cumdead)])
newdead <- ifelse(!is.na(species), cumdead, cumdead-cumdeadb4)
newdead
}
Slaghtdat$ill <- convert(Slaghtdat$cumulative..ill)
Slaghtdat$dead <- convert(Slaghtdat$cumulative..dead)
head(Slaghtdat)
rm(mydir, myfiles, datlist, i, wb, mysheets, sheetlist, j, makedate, dat)
ls()
look("discomfort")
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
dput(sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))]))
head(McGarrydat, 2)
table(McGarrydat$check.time)
summary(McGarrydat$check.time)
McGarrydat[is.na(McGarrdat$check.time), ]
McGarrydat[is.na(McGarrydat$check.time), ]
a <- McGarrydat[is.na(McGarrydat$check.time), ]
summary(a)
dim9a)
dim(a)
McGarrydat[is.na(McGarrydat$check.time) & !is.na(McGarrydat$dead), ]
source("C:/JVA/Lamprey/ChemControl/Resistance/McGarry/ReadMcGarry.r")
McGarrydat[is.na(McGarrydat$check.time) & !is.na(McGarrydat$dead), ]
McGarrydat
dim(McGarrydat)
# a blank line was left between many entries
McGarrydat <- McGarrydat[!is.na(McGarrydat$check.time), ]
dim(McGarrydat)
summary(McGarrydat)
newid <- cumsum(!is.na(McGarrydat$start.date))
newid
summary(newid)
McGarrydat$ID <- cumsum(!is.na(McGarrydat$start.date))
summary(Slaghtdat)
summary(Robdat)
cleanup()
q()
# read in all the raw data
source("C:/JVA/Lamprey/ChemControl/Resistance/McGarry/ReadMcGarry.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/ReadNowicki.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
# use Nowdat as comparison
lapply(Nowdat, head, 2)
head(McGarrydat, 2)
head(Slaghtdat, 2)
head(Robdat, 2)
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Slaghtdat)
r <- names(Robdat)
a <- unique(c(m, k, r))
summary(Nowdat$main)
summary(Nowdat$main)
Nowdat$main
summary(Nowdat$checktimes)
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
head(Slaghtdat)
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
# C:\JVA\Lamprey\ChemControl\Resistance\Slaght\ReadSlaght.r
library(plyr)
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
myfiles <- "Historical TFM Testing.xlsx"
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(substring(dat$start.date, 1, 10))
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(substring(dat$start.date, 1, 10))
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
Slaghtdat <- datlist[[1]]
# the cumulative number of dead was recorded only when there was a new death (same for ill)
# so, a series of numbers like 0, 1, 0, 2, 0 represents new dead 0, 1, 0, 1, 0, and true cumulative dead 0, 1, 1, 2, 2
# to make these numbers conform to the number of dead recorded in other data sheets, they will be converted to "new dead"
convert <- function(cumsortof, firstrow) {
# convert so-called cumulative dead/ill numbers to real new dead/ill numbers
cumdead <- cumsortof
# change all zeroes to missings
cumdead[!is.na(cumdead) & cumdead < 0.5] <- NA
# first, if the first row of so-called cumdead is missing, set the number of new dead to zero
cumdead[!is.na(firstrow) & is.na(cumsortof)] <- 0
# then, fill in the remaining missing values with the previous value
cumdead <- fill(cumdead)
# then calculate the new dead as the difference along the cumdead
cumdeadb4 <- c(NA, cumdead[-length(cumdead)])
newdead <- ifelse(!is.na(firstrow), cumdead, cumdead-cumdeadb4)
newdead
}
Slaghtdat$ill <- convert(Slaghtdat$cumulative..ill, Slaghtdat$species)
Slaghtdat$dead <- convert(Slaghtdat$cumulative..dead, Slaghtdat$species)
Slaghtdat$ID <- cumsum(!is.na(Slaghtdat$start.date))
head(Slaghtdat)
rm(mydir, myfiles, datlist, i, wb, mysheets, sheetlist, j, makedate, dat, convert)
if(FALSE) {
x <- dat$dead
test1 <- is.na(x)
test2 <- is.na(as.numeric(x))
dat[!test1 & test2, ]
# try to figure out errors
a <- lapply(datlist, function(df) unique(c(df$start.date[!is.na(df$start.date)], df$df$end.date[!is.na(df$end.date)])) )
b <- as.Date(unlist(lapply(a, as.character)))
b2 <- unlist(a)
look <- do.call(rbind.fill, datlist[1:26])
# convert to numeric
dat$dead <- as.numeric(dat$dead)
}
source("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
head(McGarrydat)
tapply(McGarrydat$check.time, McGarrydat$ID, max)
# convert end.date and end.time to Duration
mmax <- tapply(McGarrydat$check.time, McGarrydat$ID, max)
indx <- tapply(McGarrydat$check.time, McGarrydat$ID)
McGarrydat$Duration <- mmax[indx]
head(Slaght)
head(Slaghtdat)
a <- Slaghtdat$start.date
b <- Slaghtdat$start.time
c <- Slaghtdat$end.date
d <- Slaghtdat$end.time
as.numeric(a)
as.numeric(b)
as.numeric(c)
as.numeric(d)
as.numeric(b) - as.numeric(a)
(as.numeric(b) - as.numeric(a))/60/60/24
b
as.numeric(c) - as.numeric(a)
as.numeric(c) - as.numeric(a)/60/60/24
(as.numeric(c) - as.numeric(a))/60/60/24
as.numeric(d) - as.numeric(b)
(as.numeric(d) - as.numeric(b)) / 60/60/24
d
b
d[1:100]
b[1:100]
(as.numeric(d) - as.numeric(b))
(as.numeric(b) - as.numeric(d))
14400/60/60
(as.numeric(c) + as.numeric(d) - (as.numeric(a) + as.numeric(b)))/60/60
Slaghtdat$Duration <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
Slaghtdat
head(Robdat)
mmax <- tapply(Robdat$check.time, Robdat$ID, max)
indx <- tapply(Robdat$check.time, Robdat$ID)
maxtime <- mmax[indx]
(as.numeric(maxtime) - as.numeric(Robdat$start.time))/60/60
maxtime
mmax <- tapply(Robdat$check.time, Robdat$ID, max, na.rm=TRUE)
indx <- tapply(Robdat$check.time, Robdat$ID)
maxtime <- mmax[indx]
(as.numeric(maxtime) - as.numeric(Robdat$start.time))/60/60
# calculate Duration
mmax <- tapply(McGarrydat$check.time, McGarrydat$ID, max)
indx <- tapply(McGarrydat$check.time, McGarrydat$ID)
McGarrydat$Duration <- mmax[indx]
Slaghtdat$Duration <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
mmax <- tapply(Robdat$check.time, Robdat$ID, max, na.rm=TRUE)
indx <- tapply(Robdat$check.time, Robdat$ID)
maxtime <- mmax[indx]
Robdat$Duration <- (as.numeric(maxtime) - as.numeric(Robdat$start.time))/60/60
# added to main
# c("acc..no.", "aerated.", "cond.", "cond..unit", "water.chem..date", "file", "folder", "sheet", "water")
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comment_ID",
"Comments", "Comment_ID",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested_Species_1", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species_1", 
"source.of.animals", "Test_Species_1_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit"
"acc..no.", "Acc_No",
"aerated.", "Aerated", 
"cond.", "Conductivity",
"cond..unit", "Conductivity_Unit",
"water.chem..date", "Water_Chem_Date",
"folder", "Folder", 
"file", "File",
"sheet", "Sheet",
"water", "Water_Name"
), ncol=2, byrow=TRUE)
# added to main
# c("acc..no.", "aerated.", "cond.", "cond..unit", "water.chem..date", "file", "folder", "sheet", "water")
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comment_ID",
"Comments", "Comment_ID",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested_Species_1", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species_1", 
"source.of.animals", "Test_Species_1_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit",
"acc..no.", "Acc_No",
"aerated.", "Aerated", 
"cond.", "Conductivity",
"cond..unit", "Conductivity_Unit",
"water.chem..date", "Water_Chem_Date",
"folder", "Folder", 
"file", "File",
"sheet", "Sheet",
"water", "Water_Name"
), ncol=2, byrow=TRUE)
mainnames
# added to sub
# "specific.comment..regarding.just.the.corresponding.line.of.data."
subnames <- matrix(c(
"check.time", "Check_Time", 
"conc.", "concentration_t", 
"dead", "Test_Species_1_Dead", 
"ill", "Test_Species_1_Sick",
"specific.comment..regarding.just.the.corresponding.line.of.data.", "Comment_Tank"
), ncol=2, byrow=TRUE)
n[is.na(match(n, mainnames[, 2]))]
c[is.na(match(c, subnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Slaghtdat)
r <- names(Robdat)
a <- unique(c(m, k, r))
n[is.na(match(n, mainnames[, 2]))]
c[is.na(match(c, subnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
cleanup()
search()
# read in all the raw data
source("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/ReadNowicki.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/McGarry/ReadMcGarry.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
# use Nowdat as comparison
lapply(Nowdat, head, 2)
head(McGarrydat, 2)
head(Slaghtdat, 2)
head(Robdat, 2)
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Slaghtdat)
r <- names(Robdat)
a <- unique(c(m, k, r))
# added to main
# c("acc..no.", "aerated.", "cond.", "cond..unit", "water.chem..date", "file", "folder", "sheet", "water")
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comment_ID",
"Comments", "Comment_ID",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested_Species_1", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species_1", 
"source.of.animals", "Test_Species_1_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit",
"acc..no.", "Acc_No",
"aerated.", "Aerated", 
"cond.", "Conductivity",
"cond..unit", "Conductivity_Unit",
"water.chem..date", "Water_Chem_Date",
"water", "Water_Name"
), ncol=2, byrow=TRUE)
# added to sub
# "specific.comment..regarding.just.the.corresponding.line.of.data."
subnames <- matrix(c(
"check.time", "Check_Time", 
"conc.", "concentration_t", 
"dead", "Test_Species_1_Dead", 
"ill", "Test_Species_1_Sick",
"specific.comment..regarding.just.the.corresponding.line.of.data.", "Comment_Tank"
), ncol=2, byrow=TRUE)
n[is.na(match(n, mainnames[, 2]))]
c[is.na(match(c, subnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
source("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/ReadNowicki.r")
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Slaghtdat)
r <- names(Robdat)
a <- unique(c(m, k, r))
# added to main
# c("acc..no.", "aerated.", "cond.", "cond..unit", "water.chem..date", "file", "folder", "sheet", "water")
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comment_ID",
"Comments", "Comment_ID",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested_Species_1", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species_1", 
"source.of.animals", "Test_Species_1_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit",
"acc..no.", "Acc_No",
"aerated.", "Aerated", 
"cond.", "Conductivity",
"cond..unit", "Conductivity_Unit",
"water.chem..date", "Water_Chem_Date",
"water", "Water_Name"
), ncol=2, byrow=TRUE)
# added to sub
# "specific.comment..regarding.just.the.corresponding.line.of.data."
subnames <- matrix(c(
"check.time", "Check_Time", 
"conc.", "concentration_t", 
"dead", "Test_Species_1_Dead", 
"ill", "Test_Species_1_Sick",
"specific.comment..regarding.just.the.corresponding.line.of.data.", "Comment_Tank"
), ncol=2, byrow=TRUE)
n[is.na(match(n, mainnames[, 2]))]
c[is.na(match(c, subnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
c
# split up Nowicki data by species
Main1 <- Nowdat$main
Main1 <- Main1[, !(names(Main1) %in% c("Test_Species_2", "Number_Tested_Species_2", "Test_Species_2_Source"))]
Sub1 <- Nowdat$checktimes
Sub1 <- Sub1[, !(names(Sub1) %in% c("Test_Species_2_Sick", "Test_Species_2_Dead"))]
Sub1$Species <- Main1$Test_Species_1[match(Sub1$ID, Main1$ID)]
Sub1$Number_Tested <- Number_Tested_Species_1[match(Sub1$ID, Main1$ID)]
Sub1$Test_Source <- Main1$Test_Species_1_Source[match(Sub1$ID, Main1$ID)]
# split up Nowicki data by species
Main1 <- Nowdat$main
Main1 <- Main1[, !(names(Main1) %in% c("Test_Species_2", "Number_Tested_Species_2", "Test_Species_2_Source"))]
Sub1 <- Nowdat$checktimes
Sub1 <- Sub1[, !(names(Sub1) %in% c("Test_Species_2_Sick", "Test_Species_2_Dead"))]
Sub1$Species <- Main1$Test_Species_1[match(Sub1$ID, Main1$ID)]
Sub1$Number_Tested <- Main1$Number_Tested_Species_1[match(Sub1$ID, Main1$ID)]
Sub1$Test_Source <- Main1$Test_Species_1_Source[match(Sub1$ID, Main1$ID)]
head(Main1)
head(Sub1)
# split up Nowicki data by species
Main1 <- Nowdat$main
Main1 <- Main1[, !(names(Main1) %in% c("Test_Species_2", "Number_Tested_Species_2", "Test_Species_2_Source"))]
Sub1 <- Nowdat$checktimes
Sub1 <- Sub1[, !(names(Sub1) %in% c("Test_Species_2_Sick", "Test_Species_2_Dead"))]
sm <- [match(Sub1$ID, Main1$ID)]
Sub1$Species <- Main1$Test_Species_1[sm]
Sub1$Number_Tested <- Main1$Number_Tested_Species_1[sm]
Sub1$Test_Source <- Main1$Test_Species_1_Source[sm]
Sub1$Hours <- (as.numeric(Sub1$Check_Date) + as.numeric(Sub1$Check_Time) -
(as.numeric(Main1$Start_Date) + as.numeric(Main1$Start_Time))[sm])/60/60
# split up Nowicki data by species
Main1 <- Nowdat$main
Main1 <- Main1[, !(names(Main1) %in% c("Test_Species_2", "Number_Tested_Species_2", "Test_Species_2_Source"))]
Sub1 <- Nowdat$checktimes
Sub1 <- Sub1[, !(names(Sub1) %in% c("Test_Species_2_Sick", "Test_Species_2_Dead"))]
sm <- match(Sub1$ID, Main1$ID)
Sub1$Species <- Main1$Test_Species_1[sm]
Sub1$Number_Tested <- Main1$Number_Tested_Species_1[sm]
Sub1$Test_Source <- Main1$Test_Species_1_Source[sm]
Sub1$Hours <- (as.numeric(Sub1$Check_Date) + as.numeric(Sub1$Check_Time) -
(as.numeric(Main1$Start_Date) + as.numeric(Main1$Start_Time))[sm])/60/60
summary(Main1)
summary(Sub1)
head(Main1)
as.Date(Main1$Start_Date, "%m/%d/%Y")
?as.Date
?strftime
strptime(paste(Main1$Start_Date, Main1$Start_Time), "%m/%d/%Y %H:%M")
head(Main1)
strptime(paste(Main1$Start_Date, Main1$Start_Time), "%m/%d/%Y %H:%M")
Main1 <- Nowdat$main
Main1 <- Main1[, !(names(Main1) %in% c("Test_Species_2", "Number_Tested_Species_2", "Test_Species_2_Source"))]
mdt <- strptime(paste(Main1$Start_Date, Main1$Start_Time), "%m/%d/%Y %H:%M")
Sub1 <- Nowdat$checktimes
Sub1 <- Sub1[, !(names(Sub1) %in% c("Test_Species_2_Sick", "Test_Species_2_Dead"))]
sdt <- strptime(paste(Sub1$Check_Date, Sub1$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub1$ID, Main1$ID)
Sub1$Species <- Main1$Test_Species_1[sm]
Sub1$Number_Tested <- Main1$Number_Tested_Species_1[sm]
Sub1$Test_Source <- Main1$Test_Species_1_Source[sm]
Sub1$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
head(Sub1)
dput(names(Main1))
dput(names(Sub1))
match(names(Main1), mainnames[, 1])
?match
match(mainnames[, 1], names(Main1))
!is.na(match(names(Main1), mainnames[, 1]))
recode(names(Main1), mainnames[, 1], mainnames[, 2])
?recode
recode(names(Main1), mainnames[, 1], mainnames[, 2], must.match=FALSE)
keepmain <- c("ID", "Test_Type", "Lake", "Stream", "Water_Not_Lake_Or_Stream", 
"Location", "Lab", "Start_Date", "Start_Time", "Test_Number", 
"Chemical", "Formulation", "Concentration", "Water_Temp", "Water_Temp_Unit", "pH", 
"Total_Alkalinity", "Comment_ID", "Burrowed", "Duration", "Folder", "File")
Main1 <- Nowdat$main
Main1 <- Main1[, !(names(Main1) %in% c("Test_Species_2", "Number_Tested_Species_2", "Test_Species_2_Source"))]
mdt <- strptime(paste(Main1$Start_Date, Main1$Start_Time), "%m/%d/%Y %H:%M")
Sub1 <- Nowdat$checktimes
Sub1 <- Sub1[, !(names(Sub1) %in% c("Test_Species_2_Sick", "Test_Species_2_Dead"))]
sdt <- strptime(paste(Sub1$Check_Date, Sub1$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub1$ID, Main1$ID)
Sub1$Species <- Main1$Test_Species_1[sm]
Sub1$Number_Tested <- Main1$Number_Tested_Species_1[sm]
Sub1$Test_Source <- Main1$Test_Species_1_Source[sm]
Sub1$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main1) <- recode(names(Main1), mainnames[, 1], mainnames[, 2], must.match=FALSE)
Main1 <- Main1[, keepmain]
head(Main1)
names(Sub1) <- recode(names(Sub1), subnames[, 1], subnames[, 2], must.match=FALSE)
dput(names(Sub1))
# added to sub
# "specific.comment..regarding.just.the.corresponding.line.of.data."
subnames <- matrix(c(
"check.time", "Check_Time", 
"conc.", "concentration_t", 
"dead", "Test_Dead", 
"Test_Species_1_Dead", "Test_Dead", 
"Test_Species_2_Dead", "Test_Dead", 
"ill", "Test_Sick",
"Test_Species_1_Sick", "Test_Sick",
"Test_Species_2_Sick", "Test_Sick",
"specific.comment..regarding.just.the.corresponding.line.of.data.", "Comment_Tank"
), ncol=2, byrow=TRUE)
names(Sub1) <- recode(names(Sub1), subnames[, 1], subnames[, 2], must.match=FALSE)
dput(names(Sub1))
keepmain <- c("ID", "Test_Type", "Lake", "Stream", "Water_Not_Lake_Or_Stream", 
"Location", "Lab", "Start_Date", "Start_Time", "Test_Number", 
"Chemical", "Formulation", "Concentration", "Water_Temp", "Water_Temp_Unit", "pH", 
"Total_Alkalinity", "Comment_ID", "Burrowed", "Duration", "Folder", "File")
keepsub <- c("ID", "Test_Sick", "Test_Dead", 
"concentration_t", "pH_t", "DO_t", "water_temp_t", "alkalinity_t", 
"concentrationB_t", "Species", "Number_Tested", "Test_Source", "Hours")
Main1 <- Nowdat$main
Main1 <- Main1[, !(names(Main1) %in% c("Test_Species_2", "Number_Tested_Species_2", "Test_Species_2_Source"))]
mdt <- strptime(paste(Main1$Start_Date, Main1$Start_Time), "%m/%d/%Y %H:%M")
Sub1 <- Nowdat$checktimes
Sub1 <- Sub1[, !(names(Sub1) %in% c("Test_Species_2_Sick", "Test_Species_2_Dead"))]
sdt <- strptime(paste(Sub1$Check_Date, Sub1$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub1$ID, Main1$ID)
Sub1$Species <- Main1$Test_Species_1[sm]
Sub1$Number_Tested <- Main1$Number_Tested_Species_1[sm]
Sub1$Test_Source <- Main1$Test_Species_1_Source[sm]
Sub1$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main1) <- recode(names(Main1), mainnames[, 1], mainnames[, 2], must.match=FALSE)
Main1 <- Main1[, keepmain]
names(Sub1) <- recode(names(Sub1), subnames[, 1], subnames[, 2], must.match=FALSE)
Sub1 <- Sub1[, keepsub]
Main2 <- Nowdat$main
Main2 <- Main2[, !(names(Main2) %in% c("Test_Species_1", "Number_Tested_Species_1", "Test_Species_1_Source"))]
mdt <- strptime(paste(Main2$Start_Date, Main2$Start_Time), "%m/%d/%Y %H:%M")
Sub2 <- Nowdat$checktimes
Sub2 <- Sub2[, !(names(Sub2) %in% c("Test_Species_1_Sick", "Test_Species_1_Dead"))]
sdt <- strptime(paste(Sub2$Check_Date, Sub2$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub2$ID, Main2$ID)
Sub2$Species <- Main2$Test_Species_2[sm]
Sub2$Number_Tested <- Main2$Number_Tested_Species_2[sm]
Sub2$Test_Source <- Main2$Test_Species_2_Source[sm]
Sub2$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main2) <- recode(names(Main2), mainnames[, 1], mainnames[, 2], must.match=FALSE)
Main2 <- Main2[, keepmain]
names(Sub2) <- recode(names(Sub2), subnames[, 1], subnames[, 2], must.match=FALSE)
Sub2 <- Sub2[, keepsub]
head(Main1)
head(Main2)
all.equal(Main1, Main2)
head(Sub1)
head(Sub2)
all.equal(Main1, Main2)
Main <- Main1
Sub <- rbind(Sub1, Sub2)
head(Main)
head(Sub)
head(McGarrydat)
recode(names(McGarrydat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
mainnames
# added to main
# c("acc..no.", "aerated.", "cond.", "cond..unit", "water.chem..date", "file", "folder", "sheet", "water")
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comment_ID",
"Comments", "Comment_ID",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested", 
"Number_Tested_Species_1", "Number_Tested", 
"Number_Tested_Species_2", "Number_Tested", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species", 
"Test_Species_1", "Test_Species", 
"Test_Species_2", "Test_Species", 
"source.of.animals", "Test_Source", 
"Test_Species_1_Source", "Test_Source", 
"Test_Species_2_Source", "Test_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit",
"acc..no.", "Acc_No",
"aerated.", "Aerated", 
"cond.", "Conductivity",
"cond..unit", "Conductivity_Unit",
"water.chem..date", "Water_Chem_Date",
"water", "Water_Name"
), ncol=2, byrow=TRUE)
mainnames
recode(names(McGarrydat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
recode(names(McGarrydat), subnames[, 1], subnames[, 2], must.match=FALSE)
# split up others into a main and a sub
names(McGarrydat) <- recode(names(McGarrydat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(McGarrydat) <- recode(names(McGarrydat), subnames[, 1], subnames[, 2], must.match=FALSE)
head(McGarrydat)
dput(names(McGarrydat))
summary(McGarrydat$checktime)
summary(McGarrydat$check.time)
summary(McGarrydat$Check_Time)
# added to sub
# "specific.comment..regarding.just.the.corresponding.line.of.data."
subnames <- matrix(c(
"check.time", "Hours", 
"conc.", "concentration_t", 
"dead", "Test_Dead", 
"Test_Species_1_Dead", "Test_Dead", 
"Test_Species_2_Dead", "Test_Dead", 
"ill", "Test_Sick",
"Test_Species_1_Sick", "Test_Sick",
"Test_Species_2_Sick", "Test_Sick",
"specific.comment..regarding.just.the.corresponding.line.of.data.", "Comment_Tank"
), ncol=2, byrow=TRUE)
names(McGarrydat)
names(McGarrydat)[25]
names(McGarrydat)[25] <- "Hours"
names(McGarrydat)
m.main <- McGarrydat[!is.na(McGarrydat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Conductivity", "Conductivity_Unit", "Test_Number", "pH", "Total_Alkalinity", 
"Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "ID")]
m.sub <- McGarrydat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours", 
"Test_Sick", "Test_Dead", "Comment_Tank", "ID")]
head(m.main)
head(m.sub)
?fill
a <- m.sub[1:100, ]
lapply(a, fill)
apply(a, 2, fill)
sapply(a, fill)
lapply(a, fill)
data.frame(lapply(a, fill))
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2], must.match=FALSE)
head(Slaghtdat)
dput(names(Slaghtdat))
k.main <- Slaghtdat[!is.na(Slaghtdat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Test_Number", "pH", "Total_Alkalinity", "Chemical", 
"Formulation", "Folder", "File", "Sheet", "Aerated", "Comment_ID")]
k.sub <- Slaghtdat[, c("concentration_t", "conc..unit", "Test_Source", 
"Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID")]
head(k.main)
head(k.sub)
table(k.sub$Hours)
strptime(Slaghtdat$Hours, "%H%M")
as.numeric(strptime(Slaghtdat$Hours, "%H%M")) - as.numeric(Slaghtdat$Start_Time)
strptime(paste(Slaghtdat$Start_Date, Slaghtdat$Start_Time), "%m/%d/%Y %H:%M")
head(Slaghtdat)
dt1 <- as.numeric(Slaghtdat$Start_Date) + as.numeric(Slaghtdat$Start_Time)
dt2 <- as.numeric(Slaghtdat$Start_Date) + as.numeric(strptime(Slaghtdat$Hours, "%H%M"))
dt1 <- as.numeric(Slaghtdat$Start_Date) + as.numeric(Slaghtdat$Start_Time)
dt2 <- as.numeric(Slaghtdat$Start_Date) + as.numeric(strptime(Slaghtdat$Hours, "%H%M"))
hrs <- (dt2-dt1)/60/60
hrs
Slaghtdat$Start_Date
as.character(Slaghtdat$Start_Date)
strptime(paste(as.character(Slaghtdat$Start_Date), Slaghtdat$Hours), "%Y-%m-%d %H%M")
dt1 <- as.numeric(Slaghtdat$Start_Date) + as.numeric(Slaghtdat$Start_Time)
dt2 <- as.numeric(strptime(paste(as.character(Slaghtdat$Start_Date), Slaghtdat$Hours), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs
cbind(dt1, dt2)
cbind(Slaghtdat$Start_Time
Slaghtdat$Start_Time
dt1 <- as.numeric(Slaghtdat$Start_Time)
dt2 <- as.numeric(strptime(paste("1899-12-31", Slaghtdat$Hours), "%Y-%m-%d %H%M"))
cbind(dt1, dt2)
hrs <- (dt2-dt1)/60/60
hrs
table(hrs)
plot(hrs)
dt1 <- as.numeric(Slaghtdat$Start_Time)
dt2 <- as.numeric(strptime(paste("1899-12-31", Slaghtdat$Hours), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
plot(hrs)
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2], must.match=FALSE)
dt1 <- as.numeric(Slaghtdat$Start_Time)
dt2 <- as.numeric(strptime(paste("1899-12-31", Slaghtdat$Hours), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Slaghtdat$Hours <- hrs
k.main <- Slaghtdat[!is.na(Slaghtdat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Test_Number", "pH", "Total_Alkalinity", "Chemical", 
"Formulation", "Folder", "File", "Sheet", "Aerated", "Comment_ID")]
k.sub <- Slaghtdat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID")]
head(k.main)
head(k.sub)
# split up others into a main and a sub
names(McGarrydat) <- recode(names(McGarrydat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(McGarrydat) <- recode(names(McGarrydat), subnames[, 1], subnames[, 2], must.match=FALSE)
m.main <- McGarrydat[!is.na(McGarrydat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Conductivity", "Conductivity_Unit", "Test_Number", "pH", "Total_Alkalinity", 
"Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "ID")]
m.sub <- McGarrydat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours", 
"Test_Sick", "Test_Dead", "Comment_Tank", "ID")]
head(m.sub)
summary(m.sub)
table(m.sub$Test_Species)
table(is.na(m.sub$Test_Species))
# split up others into a main and a sub
names(McGarrydat) <- recode(names(McGarrydat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(McGarrydat) <- recode(names(McGarrydat), subnames[, 1], subnames[, 2], must.match=FALSE)
m.main <- McGarrydat[!is.na(McGarrydat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Conductivity", "Conductivity_Unit", "Test_Number", "pH", "Total_Alkalinity", 
"Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "ID")]
m.sub <- McGarrydat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours", 
"Test_Sick", "Test_Dead", "Comment_Tank", "ID")]
m.sub$concentration_t <- fill(m.sub$concentration_t)
m.sub$Test_Species <- fill(m.sub$Test_Species)
m.sub$Number_Tested  <- fill(m.sub$Number_Tested)
m.sub$Test_Sick[is.na(m.sub$Test_Sick)] <- 0
m.sub$Test_Dead[is.na(m.sub$Test_Dead)] <- 0
head(m.main)
head(m.sub)
is <- paste(m.sub$ID, m.sub$species)
is <- paste(m.sub$ID, m.sub$species)
tapply(m.sub$Test_Source, is, fill)
is <- paste(m.sub$ID, m.sub$Test_Species)
tapply(m.sub$Test_Source, is, fill)
tapply(m.sub$Test_Source, is, function(x) length(unique(x)))
m.sub[m.sub$ID==15176, ]
m.main[m.main$ID==15176, ]
m.sub$Test_Source[m.sub$ID==15176 & m.sub$Test_Species=="Sea Lamprey"]
tapply(m.sub$Test_Source, is, function(x) length(unique(x)))
sort(tapply(m.sub$Test_Source, is, function(x) length(unique(x))))
unique(m.sub$Test_Source)
sort(unique(m.sub$Test_Source))
a <- c("a", NA, "B")
sort(a)
a <- c(NA, NA, NA)
sort(a)
tapply(m.sub$Test_Source[!is.na(m.sub$Test_Source)], is[!is.na(m.sub$Test_Source)], "[", 1)
is <- paste(m.sub$ID, m.sub$Test_Species)
ts <- tapply(m.sub$Test_Source[!is.na(m.sub$Test_Source)], is[!is.na(m.sub$Test_Source)], "[", 1)
match(is, names(ts))
b <- match(is, names(ts))
summary(b)
length(b)
b[!is.na(b)
]
is <- paste(m.sub$ID, m.sub$Test_Species)
ts <- tapply(m.sub$Test_Source[!is.na(m.sub$Test_Source)], is[!is.na(m.sub$Test_Source)], "[", 1)
ts[match(is, names(ts))]
m.sub$Test_Source <- ts[match(is, names(ts))]
m.sub
m.sub[m.sub$ID==15176, ]
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2], must.match=FALSE)
dt1 <- as.numeric(Slaghtdat$Start_Time)
dt2 <- as.numeric(strptime(paste("1899-12-31", Slaghtdat$Hours), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Slaghtdat$Hours <- hrs
k.main <- Slaghtdat[!is.na(Slaghtdat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Test_Number", "pH", "Total_Alkalinity", "Chemical", 
"Formulation", "Folder", "File", "Sheet", "Aerated", "Comment_ID")]
k.sub <- Slaghtdat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID")]
summary(k.sub)
table(is.na(k.sub$Test_Species))
k.sub[!is.na(k.sub$Test_Species) & is.na(concentration_t) | is.na(Number_Tested)
with(k.sub, k.sub[!is.na(Test_Species) & (is.na(concentration_t) | is.na(Number_Tested)), ])
with(k.sub, k.sub[!is.na(Test_Species) & (is.na(concentration_t) | is.na(Number_Tested)), ])
a <- with(k.sub, k.sub[!is.na(Test_Species) & (is.na(concentration_t) | is.na(Number_Tested)), ])
dim(a)
with(k.sub, k.sub[!is.na(Test_Species) & s.na(Number_Tested), ])
with(k.sub, k.sub[!is.na(Test_Species) & is.na(Number_Tested), ])
with(k.sub, k.sub$ID[!is.na(Test_Species) & is.na(Number_Tested)])
showme <- function(df, id) {
print(df[df$ID %in% id, ])
}
b <- with(k.sub, k.sub$ID[!is.na(Test_Species) & is.na(Number_Tested)])
showme(k.main, b)
showme(k.sub, b)
k.main <- Slaghtdat[!is.na(Slaghtdat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Test_Number", "pH", "Total_Alkalinity", "Chemical", 
"Formulation", "Folder", "File", "Sheet", "Aerated", "Comment_ID", "ID")]
k.sub <- Slaghtdat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID")]
showme(k.main, b)
source("C:/JVA/Lamprey/ChemControl/Resistance/McGarry/ReadMcGarry.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Slaghtdat)
r <- names(Robdat)
a <- unique(c(m, k, r))
# added to main
# c("acc..no.", "aerated.", "cond.", "cond..unit", "water.chem..date", "file", "Row", "water")
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comment_ID",
"Comments", "Comment_ID",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested", 
"Number_Tested_Species_1", "Number_Tested", 
"Number_Tested_Species_2", "Number_Tested", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species", 
"Test_Species_1", "Test_Species", 
"Test_Species_2", "Test_Species", 
"source.of.animals", "Test_Source", 
"Test_Species_1_Source", "Test_Source", 
"Test_Species_2_Source", "Test_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit",
"acc..no.", "Acc_No",
"aerated.", "Aerated", 
"cond.", "Conductivity",
"cond..unit", "Conductivity_Unit",
"water.chem..date", "Water_Chem_Date",
"water", "Water_Name"
), ncol=2, byrow=TRUE)
# added to sub
# "specific.comment..regarding.just.the.corresponding.line.of.data."
subnames <- matrix(c(
"check.time", "Hours", 
"conc.", "concentration_t", 
"dead", "Test_Dead", 
"Test_Species_1_Dead", "Test_Dead", 
"Test_Species_2_Dead", "Test_Dead", 
"ill", "Test_Sick",
"Test_Species_1_Sick", "Test_Sick",
"Test_Species_2_Sick", "Test_Sick",
"specific.comment..regarding.just.the.corresponding.line.of.data.", "Comment_Tank"
), ncol=2, byrow=TRUE)
n[is.na(match(n, mainnames[, 2]))]
c[is.na(match(c, subnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
# calculate Duration
mmax <- tapply(McGarrydat$check.time, McGarrydat$ID, max)
indx <- tapply(McGarrydat$check.time, McGarrydat$ID)
McGarrydat$Duration <- mmax[indx]
Slaghtdat$Duration <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
mmax <- tapply(Robdat$check.time, Robdat$ID, max, na.rm=TRUE)
indx <- tapply(Robdat$check.time, Robdat$ID)
maxtime <- mmax[indx]
Robdat$Duration <- (as.numeric(maxtime) - as.numeric(Robdat$start.time))/60/60
head(Slaghtdat)
Slaghtdat[Slaghtdat$Row==8700, ]
Slaghtdat[Slaghtdat$Row %in% 8700:8720, ]
Slaghtdat[Slaghtdat$Row %in% 8700:8720, ]
# C:\JVA\Lamprey\ChemControl\Resistance\Slaght\ReadSlaght.r
library(plyr)
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
myfiles <- "Historical TFM Testing.xlsx"
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$Folder <- "Slaght"
dat$File <- myfiles[i]
dat$Sheet <- mysheets[j]
dat$Row <- 1:dim(dat)[1]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(substring(dat$start.date, 1, 10))
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(substring(dat$start.date, 1, 10))
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
Slaghtdat <- datlist[[1]]
Slaghtdat[Slaghtdat$Row %in% 8700:8720, ]
summary(Slaghtdat)
# C:\JVA\Lamprey\ChemControl\Resistance\Slaght\ReadSlaght.r
library(plyr)
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
myfiles <- "Historical TFM Testing.xlsx"
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$Folder <- "Slaght"
dat$File <- myfiles[i]
dat$Sheet <- mysheets[j]
dat$Row <- 1:dim(dat)[1]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(substring(dat$start.date, 1, 10))
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(substring(dat$start.date, 1, 10))
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
Slaghtdat <- datlist[[1]]
summary(Slaghtdat)
Slaghtdat[is.na(Slaghtdat$check.time), ]
Slaghtdat[is.na(Slaghtdat$check.time), c("Sheet", "Row")]
# C:\JVA\Lamprey\ChemControl\Resistance\Slaght\ReadSlaght.r
library(plyr)
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
myfiles <- "Historical TFM Testing.xlsx"
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$Folder <- "Slaght"
dat$File <- myfiles[i]
dat$Sheet <- mysheets[j]
dat$Row <- 1:dim(dat)[1]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(substring(dat$start.date, 1, 10))
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(substring(dat$start.date, 1, 10))
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
Slaghtdat <- datlist[[1]]
Slaghtdat[is.na(Slaghtdat$check.time), ]
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
# C:\JVA\Lamprey\ChemControl\Resistance\Slaght\ReadSlaght.r
library(plyr)
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
myfiles <- "Historical TFM Testing.xlsx"
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$Folder <- "Slaght"
dat$File <- myfiles[i]
dat$Sheet <- mysheets[j]
dat$Row <- 1:dim(dat)[1]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(substring(dat$start.date, 1, 10))
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(substring(dat$start.date, 1, 10))
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
Slaghtdat <- datlist[[1]]
# the cumulative number of dead was recorded only when there was a new death (same for ill)
# so, a series of numbers like 0, 1, 0, 2, 0 represents new dead 0, 1, 0, 1, 0, and true cumulative dead 0, 1, 1, 2, 2
# to make these numbers conform to the number of dead recorded in other data sheets, they will be converted to "new dead"
convert <- function(cumsortof, firstrow) {
# convert so-called cumulative dead/ill numbers to real new dead/ill numbers
cumdead <- cumsortof
# change all zeroes to missings
cumdead[!is.na(cumdead) & cumdead < 0.5] <- NA
# first, if the first row of so-called cumdead is missing, set the number of new dead to zero
cumdead[!is.na(firstrow) & is.na(cumsortof)] <- 0
# then, fill in the remaining missing values with the previous value
cumdead <- fill(cumdead)
# then calculate the new dead as the difference along the cumdead
cumdeadb4 <- c(NA, cumdead[-length(cumdead)])
newdead <- ifelse(!is.na(firstrow), cumdead, cumdead-cumdeadb4)
newdead
}
Slaghtdat$ill <- convert(Slaghtdat$cumulative..ill, Slaghtdat$species)
Slaghtdat$dead <- convert(Slaghtdat$cumulative..dead, Slaghtdat$species)
Slaghtdat$ID <- cumsum(!is.na(Slaghtdat$start.date))
head(Slaghtdat)
rm(mydir, myfiles, datlist, i, wb, mysheets, sheetlist, j, makedate, dat, convert)
if(FALSE) {
x <- dat$dead
test1 <- is.na(x)
test2 <- is.na(as.numeric(x))
dat[!test1 & test2, ]
# try to figure out errors
a <- lapply(datlist, function(df) unique(c(df$start.date[!is.na(df$start.date)], df$df$end.date[!is.na(df$end.date)])) )
b <- as.Date(unlist(lapply(a, as.character)))
b2 <- unlist(a)
look <- do.call(rbind.fill, datlist[1:26])
# convert to numeric
dat$dead <- as.numeric(dat$dead)
}
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Slaghtdat)
r <- names(Robdat)
a <- unique(c(m, k, r))
# added to main
# c("acc..no.", "aerated.", "cond.", "cond..unit", "water.chem..date", "file", "Row", "water")
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comment_ID",
"Comments", "Comment_ID",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested", 
"Number_Tested_Species_1", "Number_Tested", 
"Number_Tested_Species_2", "Number_Tested", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species", 
"Test_Species_1", "Test_Species", 
"Test_Species_2", "Test_Species", 
"source.of.animals", "Test_Source", 
"Test_Species_1_Source", "Test_Source", 
"Test_Species_2_Source", "Test_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit",
"acc..no.", "Acc_No",
"aerated.", "Aerated", 
"cond.", "Conductivity",
"cond..unit", "Conductivity_Unit",
"water.chem..date", "Water_Chem_Date",
"water", "Water_Name"
), ncol=2, byrow=TRUE)
# added to sub
# "specific.comment..regarding.just.the.corresponding.line.of.data."
subnames <- matrix(c(
"check.time", "Hours", 
"conc.", "concentration_t", 
"dead", "Test_Dead", 
"Test_Species_1_Dead", "Test_Dead", 
"Test_Species_2_Dead", "Test_Dead", 
"ill", "Test_Sick",
"Test_Species_1_Sick", "Test_Sick",
"Test_Species_2_Sick", "Test_Sick",
"specific.comment..regarding.just.the.corresponding.line.of.data.", "Comment_Tank"
), ncol=2, byrow=TRUE)
n[is.na(match(n, mainnames[, 2]))]
c[is.na(match(c, subnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
# calculate Duration
mmax <- tapply(McGarrydat$check.time, McGarrydat$ID, max)
indx <- tapply(McGarrydat$check.time, McGarrydat$ID)
McGarrydat$Duration <- mmax[indx]
Slaghtdat$Duration <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
mmax <- tapply(Robdat$check.time, Robdat$ID, max, na.rm=TRUE)
indx <- tapply(Robdat$check.time, Robdat$ID)
maxtime <- mmax[indx]
Robdat$Duration <- (as.numeric(maxtime) - as.numeric(Robdat$start.time))/60/60
# split up Nowicki data by species
keepmain <- c("ID", "Test_Type", "Lake", "Stream", "Water_Not_Lake_Or_Stream", 
"Location", "Lab", "Start_Date", "Start_Time", "Test_Number", 
"Chemical", "Formulation", "Concentration", "Water_Temp", "Water_Temp_Unit", "pH", 
"Total_Alkalinity", "Comment_ID", "Burrowed", "Duration", "Folder", "File")
keepsub <- c("ID", "Test_Sick", "Test_Dead", 
"concentration_t", "pH_t", "DO_t", "water_temp_t", "alkalinity_t", 
"concentrationB_t", "Species", "Number_Tested", "Test_Source", "Hours")
Main1 <- Nowdat$main
Main1 <- Main1[, !(names(Main1) %in% c("Test_Species_2", "Number_Tested_Species_2", "Test_Species_2_Source"))]
mdt <- strptime(paste(Main1$Start_Date, Main1$Start_Time), "%m/%d/%Y %H:%M")
Sub1 <- Nowdat$checktimes
Sub1 <- Sub1[, !(names(Sub1) %in% c("Test_Species_2_Sick", "Test_Species_2_Dead"))]
sdt <- strptime(paste(Sub1$Check_Date, Sub1$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub1$ID, Main1$ID)
Sub1$Species <- Main1$Test_Species_1[sm]
Sub1$Number_Tested <- Main1$Number_Tested_Species_1[sm]
Sub1$Test_Source <- Main1$Test_Species_1_Source[sm]
Sub1$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main1) <- recode(names(Main1), mainnames[, 1], mainnames[, 2], must.match=FALSE)
Main1 <- Main1[, keepmain]
names(Sub1) <- recode(names(Sub1), subnames[, 1], subnames[, 2], must.match=FALSE)
Sub1 <- Sub1[, keepsub]
Main2 <- Nowdat$main
Main2 <- Main2[, !(names(Main2) %in% c("Test_Species_1", "Number_Tested_Species_1", "Test_Species_1_Source"))]
mdt <- strptime(paste(Main2$Start_Date, Main2$Start_Time), "%m/%d/%Y %H:%M")
Sub2 <- Nowdat$checktimes
Sub2 <- Sub2[, !(names(Sub2) %in% c("Test_Species_1_Sick", "Test_Species_1_Dead"))]
sdt <- strptime(paste(Sub2$Check_Date, Sub2$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub2$ID, Main2$ID)
Sub2$Species <- Main2$Test_Species_2[sm]
Sub2$Number_Tested <- Main2$Number_Tested_Species_2[sm]
Sub2$Test_Source <- Main2$Test_Species_2_Source[sm]
Sub2$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main2) <- recode(names(Main2), mainnames[, 1], mainnames[, 2], must.match=FALSE)
Main2 <- Main2[, keepmain]
names(Sub2) <- recode(names(Sub2), subnames[, 1], subnames[, 2], must.match=FALSE)
Sub2 <- Sub2[, keepsub]
all.equal(Main1, Main2)
Main <- Main1
Sub <- rbind(Sub1, Sub2)
head(Main)
head(Sub)
# split up others into a main and a sub
names(McGarrydat) <- recode(names(McGarrydat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(McGarrydat) <- recode(names(McGarrydat), subnames[, 1], subnames[, 2], must.match=FALSE)
m.main <- McGarrydat[!is.na(McGarrydat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Conductivity", "Conductivity_Unit", "Test_Number", "pH", "Total_Alkalinity", 
"Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID")]
m.sub <- McGarrydat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours", 
"Test_Sick", "Test_Dead", "Comment_Tank", "ID")]
m.sub$concentration_t <- fill(m.sub$concentration_t)
m.sub$Test_Species <- fill(m.sub$Test_Species)
m.sub$Number_Tested  <- fill(m.sub$Number_Tested)
m.sub$Test_Sick[is.na(m.sub$Test_Sick)] <- 0
m.sub$Test_Dead[is.na(m.sub$Test_Dead)] <- 0
is <- paste(m.sub$ID, m.sub$Test_Species)
ts <- tapply(m.sub$Test_Source[!is.na(m.sub$Test_Source)], is[!is.na(m.sub$Test_Source)], "[", 1)
m.sub$Test_Source <- ts[match(is, names(ts))]
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2], must.match=FALSE)
dt1 <- as.numeric(Slaghtdat$Start_Time)
dt2 <- as.numeric(strptime(paste("1899-12-31", Slaghtdat$Hours), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Slaghtdat$Hours <- hrs
k.main <- Slaghtdat[!is.na(Slaghtdat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Test_Number", "pH", "Total_Alkalinity", "Chemical", 
"Formulation", "Folder", "File", "Sheet", "Row", "Aerated", "Comment_ID", "ID")]
k.sub <- Slaghtdat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID")]
showme <- function(df, id) {
print(df[df$ID %in% id, ])
}
b <- with(k.sub, k.sub$ID[!is.na(Test_Species) & is.na(Number_Tested)])
showme(k.main, b)
showme(k.sub, b)
k.main[k.main %in% c(420:440), ]
k.main[k.main$Row %in% c(420:440), ]
k.sub[k.sub$Row %in% 420:440, ]
k.sub <- Slaghtdat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID", "Row")]
k.sub[k.sub$Row %in% 420:440, ]
Slaghtdat[Slaghtdat$ID==45645, ]
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
Slaghtdat$Duration <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2], must.match=FALSE)
dt1 <- as.numeric(Slaghtdat$Start_Time)
dt2 <- as.numeric(strptime(paste("1899-12-31", Slaghtdat$Hours), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Slaghtdat$Hours <- hrs
k.main <- Slaghtdat[!is.na(Slaghtdat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Test_Number", "pH", "Total_Alkalinity", "Chemical", 
"Formulation", "Folder", "File", "Sheet", "Row", "Aerated", "Comment_ID", "ID")]
k.sub <- Slaghtdat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID", "Row")]
showme <- function(df, id) {
print(df[df$ID %in% id, ])
}
b <- with(k.sub, k.sub$ID[!is.na(Test_Species) & is.na(Number_Tested)])
showme(k.main, b)
showme(k.sub, b)
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2], must.match=FALSE)
dt1 <- as.numeric(Slaghtdat$Start_Time)
dt2 <- as.numeric(strptime(paste("1899-12-31", Slaghtdat$Hours), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Slaghtdat$Hours <- hrs
k.main <- Slaghtdat[!is.na(Slaghtdat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Test_Number", "pH", "Total_Alkalinity", "Chemical", 
"Formulation", "Folder", "File", "Sheet", "Row", "Aerated", "Comment_ID", "ID")]
k.sub <- Slaghtdat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID", "Row")]
head(k.main)
head(k.sub)
k.sub$concentration_t <- fill(k.sub$concentration_t)
k.sub$Test_Species <- fill(k.sub$Test_Species)
k.sub$Number_Tested  <- fill(k.sub$Number_Tested)
k.sub$Test_Sick[is.na(k.sub$Test_Sick)] <- 0
k.sub$Test_Dead[is.na(k.sub$Test_Dead)] <- 0
is <- paste(k.sub$ID, k.sub$Test_Species)
ts <- tapply(k.sub$Test_Source[!is.na(k.sub$Test_Source)], is[!is.na(k.sub$Test_Source)], "[", 1)
k.sub$Test_Source <- ts[match(is, names(ts))]
head(k.sub)
summary(k.sub)
dim(k.sub)
dt1
dt2
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
Slaghtdat$Duration <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2], must.match=FALSE)
dt1 <- as.numeric(Slaghtdat$Start_Time)
dt2 <- as.numeric(strptime(paste("1899-12-31", Slaghtdat$Hours), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
hrs
summary(hrs)
Slaghtdat
Slaghtdat$Hours
summary(Slaghtdat)
dt2 <- as.numeric(strptime(paste("1899-12-31", Slaghtdat$Hours), "%Y-%m-%d %H%M"))
dt2
strptime(paste("1899-12-31", Slaghtdat$Hours)
strptime(paste("1899-12-31", Slaghtdat$Hours), "%Y-%m-%d %H%M")
paste("1899-12-31", Slaghtdat$Hours)
format(Slaghtdat$Hours)
?format
Slaghtdat$Hours + 10000
as.character(Slaghtdat$Hours + 10000)
substring(as.character(Slaghtdat$Hours + 10000), 2)
dt2 <- as.numeric(strptime(paste("1899-12-31", substring(as.character(Slaghtdat$Hours + 10000), 2)), "%Y-%m-%d %H%M"))
dt2
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2], must.match=FALSE)
dt1 <- as.numeric(Slaghtdat$Start_Time)
dt2 <- as.numeric(strptime(paste("1899-12-31", substring(as.character(Slaghtdat$Hours + 10000), 2)), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
hrs
dt1
dt2
dt1 <- fill(as.numeric(Slaghtdat$Start_Time))
dt2 <- as.numeric(strptime(paste("1899-12-31", substring(as.character(Slaghtdat$Hours + 10000), 2)), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
hrs
summary(hrs)
Slaghtdat[is.na(hrs), ]
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
Slaghtdat$Duration <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2], must.match=FALSE)
dt1 <- fill(as.numeric(Slaghtdat$Start_Time))
dt2 <- as.numeric(strptime(paste("1899-12-31", substring(as.character(Slaghtdat$Hours + 10000), 2)), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
summary(hrs)
Slaghtdat$Hours <- hrs
k.main <- Slaghtdat[!is.na(Slaghtdat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Test_Number", "pH", "Total_Alkalinity", "Chemical", 
"Formulation", "Folder", "File", "Sheet", "Row", "Aerated", "Comment_ID", "ID")]
k.sub <- Slaghtdat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID", "Row")]
k.sub$concentration_t <- fill(k.sub$concentration_t)
k.sub$Test_Species <- fill(k.sub$Test_Species)
k.sub$Number_Tested  <- fill(k.sub$Number_Tested)
k.sub$Test_Sick[is.na(k.sub$Test_Sick)] <- 0
k.sub$Test_Dead[is.na(k.sub$Test_Dead)] <- 0
is <- paste(k.sub$ID, k.sub$Test_Species)
ts <- tapply(k.sub$Test_Source[!is.na(k.sub$Test_Source)], is[!is.na(k.sub$Test_Source)], "[", 1)
k.sub$Test_Source <- ts[match(is, names(ts))]
head(k.main)
head(k.sub)
names(Robdat) <- recode(names(Robdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Robdat) <- recode(names(Robdat), subnames[, 1], subnames[, 2], must.match=FALSE)
dput(names(Robdat))
names(Robdat) <- recode(names(Robdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Robdat) <- recode(names(Robdat), subnames[, 1], subnames[, 2], must.match=FALSE)
r.main <- Robdat[!is.na(Robdat$Start_Date), c("Test_Type", "Lake", "Stream", "Water_Name", "Location", "Start_Date", 
"Start_Time", "Water_Chem_Date", "Water_Temp", "Water_Temp_Unit", 
"pH", "Total_Alkalinity", "Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
r.sub <- Robdat[, c("concentration_t", "Test_Species", "Number_Tested", 
"Hours", "Test_Sick", "Test_Dead", "Comment_Tank", "Row", "ID")]
head(r.main)
head(r.sub)
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
summary(Robdat)
summary(McGarrydat)
summary(Slaghtdat)
Robsource("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
summary(Robdat$ID)
Robdat$ID
max(Slaghtdat$ID)
Robdat$ID + max(Slaghtdat$ID)
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID + max(Slaghtdat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
mmax <- tapply(Robdat$check.time, Robdat$ID, max, na.rm=TRUE)
indx <- tapply(Robdat$check.time, Robdat$ID)
maxtime <- mmax[indx]
Robdat$Duration <- (as.numeric(maxtime) - as.numeric(Robdat$start.time))/60/60
names(Robdat) <- recode(names(Robdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Robdat) <- recode(names(Robdat), subnames[, 1], subnames[, 2], must.match=FALSE)
r.main <- Robdat[!is.na(Robdat$Start_Date), c("Test_Type", "Lake", "Stream", "Water_Name", "Location", "Start_Date", 
"Start_Time", "Water_Chem_Date", "Water_Temp", "Water_Temp_Unit", 
"pH", "Total_Alkalinity", "Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
r.sub <- Robdat[, c("concentration_t", "Test_Species", "Number_Tested", 
"Hours", "Test_Sick", "Test_Dead", "Comment_Tank", "Row", "ID")]
head(r.main)
head(r.sub)
head(Robdat)
dt1 <- fill(as.numeric(Robdat$Start_Time))
dt2 <- as.numeric(Robdat$Hours)
hrs <- (dt2-dt1)/60/60
hrs
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
summary(hrs)
dt1 <- fill(as.numeric(Robdat$Start_Time))
dt2 <- as.numeric(Robdat$Hours)
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Robdat$Hours <- fill(hrs)
r.main <- Robdat[!is.na(Robdat$Start_Date), c("Test_Type", "Lake", "Stream", "Water_Name", "Location", "Start_Date", 
"Start_Time", "Water_Chem_Date", "Water_Temp", "Water_Temp_Unit", 
"pH", "Total_Alkalinity", "Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
r.sub <- Robdat[, c("concentration_t", "Test_Species", "Number_Tested", 
"Hours", "Test_Sick", "Test_Dead", "Comment_Tank", "Row", "ID")]
summary(Robdat)
Robdat[is.na(concentration_t), ]
Robdat[is.na(Robdat$concentration_t), ]
source("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
mmax <- tapply(Robdat$check.time, Robdat$ID, max, na.rm=TRUE)
indx <- tapply(Robdat$check.time, Robdat$ID)
maxtime <- mmax[indx]
Robdat$Duration <- (as.numeric(maxtime) - as.numeric(Robdat$start.time))/60/60
names(Robdat) <- recode(names(Robdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Robdat) <- recode(names(Robdat), subnames[, 1], subnames[, 2], must.match=FALSE)
dt1 <- fill(as.numeric(Robdat$Start_Time))
dt2 <- as.numeric(Robdat$Hours)
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
hrs
Robdat$Hours <- fill(hrs)
r.main <- Robdat[!is.na(Robdat$Start_Date), c("Test_Type", "Lake", "Stream", "Water_Name", "Location", "Start_Date", 
"Start_Time", "Water_Chem_Date", "Water_Temp", "Water_Temp_Unit", 
"pH", "Total_Alkalinity", "Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
r.sub <- Robdat[, c("concentration_t", "Test_Species", "Number_Tested", 
"Hours", "Test_Sick", "Test_Dead", "Comment_Tank", "Row", "ID")]
head(r.main)
head(r.sub)
summary(r.sub)
r.sub$Test_Species <- fill(r.sub$Test_Species)
r.sub$Number_Tested  <- fill(r.sub$Number_Tested)
r.sub$Test_Sick[is.na(r.sub$Test_Sick)] <- 0
r.sub$Test_Dead[is.na(r.sub$Test_Dead)] <- 0
is <- paste(r.sub$ID, r.sub$Test_Species)
ts <- tapply(r.sub$Test_Source[!is.na(r.sub$Test_Source)], is[!is.na(r.sub$Test_Source)], "[", 1)
r.sub$Test_Source <- ts[match(is, names(ts))]
names(Robdat)
stringin("sourc", names(Robdat))
summary(r.main)
summary(r.sub)
head(r.main)
head(r.sub)
df <- McGarrydat
isc1 <- !is.na(df$Comment_ID)
isc1b4 <- c(NA, isc1[-length(isc1)])
df[isc1 & isc1b4, ]
df[isc1 & isc1b4, c("Folder", "File", "Sheet", "Row")]
df[isc1 & isc1b4, c("Folder", "File", "Sheet", "Row", "Comment_ID")]
sel <- !is.na(df$Comment_ID)
tapply(df$Comment_ID[sel], df$ID[sel], paste, collapse="; ")
sel <- !is.na(df$Comment_ID)
combined <- tapply(df$Comment_ID[sel], df$ID[sel], paste, collapse="; ")
newcom <- rep("", dim(df)[1])
newcom[match(names(combined), df$ID)] <- combined
newcom
combine.comments <- function(df) {
sel <- !is.na(df$Comment_ID)
combined <- tapply(df$Comment_ID[sel], df$ID[sel], paste, collapse="; ")
newcom <- rep("", dim(df)[1])
newcom[match(names(combined), df$ID)] <- combined
newcom
}
combine.comments(McGarrydat)
combine.comments(Slaghtdat)
combine.comments(Robdat)
all.main <- rbind.fill(Main, m.main, k.main, r.main)
all.sub <- rbind.fill(Sub, m.sub, k.sub, r.sub)
summary(all.main)
head(Main)
head(m.main)
sapply(Main, class)
lapply(Main, class)
lapply(lapply(Main, class), "[", 1)
sapply(lapply(Main, class), "[", 1)
a <- merge(
cbind(names=names(Main), nclass=sapply(lapply(Main, class), "[", 1)),
cbind(names=names(m.main), mclass=sapply(lapply(m.main, class), "[", 1)), all=TRUE)
b <- merge(a,
cbind(names=names(k.main), kclass=sapply(lapply(k.main, class), "[", 1)), all=TRUE)
c <- merge(b,
cbind(names=names(r.main), rclass=sapply(lapply(r.main, class), "[", 1)), all=TRUE)
c
# use Nowdat as comparison
lapply(Nowdat, head, 2)
match(Main$Chemical, Nowdat$chemicals$chemical)
Nowdat$chemicals$chemical.desc[match(Main$Chemical, Nowdat$chemicals$chemical)]
Main$Chemical <- Nowdat$chemicals$chemical.desc[match(Main$Chemical, Nowdat$chemicals$chemical)]
head(Main)
Nowdat$formulations$formulation.desc[match(Main$Formulation, Nowdat$formulations$formulation)]
Nowdat$labs$lab.name[match(Main$Lab, Nowdat$labs$lab)]
Nowdat$testtypes$test.type.desc[match(Main$Test_Type, Nowdat$testtypes$test.type)]
Main$Formulation <- Nowdat$formulations$formulation.desc[match(Main$Formulation, Nowdat$formulations$formulation)]
Main$Lab <- Nowdat$labs$lab.name[match(Main$Lab, Nowdat$labs$lab)]
Main$Test_Type <- Nowdat$testtypes$test.type.desc[match(Main$Test_Type, Nowdat$testtypes$test.type)]
unique(r.main$Lake)
recode(r.main$Lake, c("S", "H", "NYO"), c(1, 3, 5))
r.main$Lake <- recode(r.main$Lake, c("S", "H", "NYO"), c(1, 3, 5))
head(r.main)
Main$pH
unique(Main$pH)
unique(m.main$pH)
unique(k.main$pH)
unique(r.main$pH)
head(Main)
as.Date(Main$Start_Date, "%m/%d/%Y")
as.character(m.main$Start_Time)
(m.main$Start_Time)
m.main[, c("Start_Time", "File", "Sheet", "Row")]
unique(Main$Start_Time)
a <- m.main$Start_Time
a1 <- floor(a/100)
a2 <- a - 100*a1
paste(a1, a2, ":")
a <- m.main$Start_Time
a1 <- floor(a/100)
a2 <- a - 100*a1
paste(a1, a2, sep=":")
a1
a2
a <- m.main$Start_Time
a1 <- floor(a/100)
a2 <- a - 100*a1
paste(a1, substring(100+a2, 2), sep=":")
paste(substring(100+a1, 2), substring(100+a2, 2), sep=":")
head(Slaght$Start_Time)
head(Slaghtdat$Start_Time)
(Slaghtdat$Start_Time)
as.character(Slaghtdat$Start_Time)
format(Slaghtdat$Start_Time)
format(Slaghtdat$Start_Time, "%H:%M")
cleanup()
# C:\JVA\Lamprey\ChemControl\Resistance\Analysis\Resist.r
# read in all the raw data
source("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/ReadNowicki.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/McGarry/ReadMcGarry.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
# use Nowdat as comparison
lapply(Nowdat, head, 2)
head(McGarrydat, 2)
head(Slaghtdat, 2)
head(Robdat, 2)
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Slaghtdat)
r <- names(Robdat)
a <- unique(c(m, k, r))
# added to main
# c("acc..no.", "aerated.", "cond.", "cond..unit", "water.chem..date", "file", "Row", "water")
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comment_ID",
"Comments", "Comment_ID",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested", 
"Number_Tested_Species_1", "Number_Tested", 
"Number_Tested_Species_2", "Number_Tested", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species", 
"Test_Species_1", "Test_Species", 
"Test_Species_2", "Test_Species", 
"source.of.animals", "Test_Source", 
"Test_Species_1_Source", "Test_Source", 
"Test_Species_2_Source", "Test_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit",
"acc..no.", "Acc_No",
"aerated.", "Aerated", 
"cond.", "Conductivity",
"cond..unit", "Conductivity_Unit",
"water.chem..date", "Water_Chem_Date",
"water", "Water_Name"
), ncol=2, byrow=TRUE)
# added to sub
# "specific.comment..regarding.just.the.corresponding.line.of.data."
subnames <- matrix(c(
"check.time", "Hours", 
"conc.", "concentration_t", 
"dead", "Test_Dead", 
"Test_Species_1_Dead", "Test_Dead", 
"Test_Species_2_Dead", "Test_Dead", 
"ill", "Test_Sick",
"Test_Species_1_Sick", "Test_Sick",
"Test_Species_2_Sick", "Test_Sick",
"specific.comment..regarding.just.the.corresponding.line.of.data.", "Comment_Tank"
), ncol=2, byrow=TRUE)
n[is.na(match(n, mainnames[, 2]))]
c[is.na(match(c, subnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
look <- function(varname) {
if(varname %in% m) print(unique(McGarrydat[, varname]))
if(varname %in% k) print(unique(Slaghtdat[, varname]))
if(varname %in% r) print(unique(Robdat[, varname]))
invisible()
}
look("discomfort")
# calculate Duration
mmax <- tapply(McGarrydat$check.time, McGarrydat$ID, max)
indx <- tapply(McGarrydat$check.time, McGarrydat$ID)
McGarrydat$Duration <- mmax[indx]
Slaghtdat$Duration <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
mmax <- tapply(Robdat$check.time, Robdat$ID, max, na.rm=TRUE)
indx <- tapply(Robdat$check.time, Robdat$ID)
maxtime <- mmax[indx]
Robdat$Duration <- (as.numeric(maxtime) - as.numeric(Robdat$start.time))/60/60
# split up Nowicki data by species
keepmain <- c("ID", "Test_Type", "Lake", "Stream", "Water_Not_Lake_Or_Stream", 
"Location", "Lab", "Start_Date", "Start_Time", "Test_Number", 
"Chemical", "Formulation", "Concentration", "Water_Temp", "Water_Temp_Unit", "pH", 
"Total_Alkalinity", "Comment_ID", "Burrowed", "Duration", "Folder", "File")
keepsub <- c("ID", "Test_Sick", "Test_Dead", 
"concentration_t", "pH_t", "DO_t", "water_temp_t", "alkalinity_t", 
"concentrationB_t", "Species", "Number_Tested", "Test_Source", "Hours")
Main1 <- Nowdat$main
Main1 <- Main1[, !(names(Main1) %in% c("Test_Species_2", "Number_Tested_Species_2", "Test_Species_2_Source"))]
mdt <- strptime(paste(Main1$Start_Date, Main1$Start_Time), "%m/%d/%Y %H:%M")
Sub1 <- Nowdat$checktimes
Sub1 <- Sub1[, !(names(Sub1) %in% c("Test_Species_2_Sick", "Test_Species_2_Dead"))]
sdt <- strptime(paste(Sub1$Check_Date, Sub1$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub1$ID, Main1$ID)
Sub1$Species <- Main1$Test_Species_1[sm]
Sub1$Number_Tested <- Main1$Number_Tested_Species_1[sm]
Sub1$Test_Source <- Main1$Test_Species_1_Source[sm]
Sub1$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main1) <- recode(names(Main1), mainnames[, 1], mainnames[, 2], must.match=FALSE)
Main1 <- Main1[, keepmain]
names(Sub1) <- recode(names(Sub1), subnames[, 1], subnames[, 2], must.match=FALSE)
Sub1 <- Sub1[, keepsub]
Main2 <- Nowdat$main
Main2 <- Main2[, !(names(Main2) %in% c("Test_Species_1", "Number_Tested_Species_1", "Test_Species_1_Source"))]
mdt <- strptime(paste(Main2$Start_Date, Main2$Start_Time), "%m/%d/%Y %H:%M")
Sub2 <- Nowdat$checktimes
Sub2 <- Sub2[, !(names(Sub2) %in% c("Test_Species_1_Sick", "Test_Species_1_Dead"))]
sdt <- strptime(paste(Sub2$Check_Date, Sub2$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub2$ID, Main2$ID)
Sub2$Species <- Main2$Test_Species_2[sm]
Sub2$Number_Tested <- Main2$Number_Tested_Species_2[sm]
Sub2$Test_Source <- Main2$Test_Species_2_Source[sm]
Sub2$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main2) <- recode(names(Main2), mainnames[, 1], mainnames[, 2], must.match=FALSE)
Main2 <- Main2[, keepmain]
names(Sub2) <- recode(names(Sub2), subnames[, 1], subnames[, 2], must.match=FALSE)
Sub2 <- Sub2[, keepsub]
all.equal(Main1, Main2)
Main <- Main1
Sub <- rbind(Sub1, Sub2)
Main$Chemical <- Nowdat$chemicals$chemical.desc[match(Main$Chemical, Nowdat$chemicals$chemical)]
Main$Formulation <- Nowdat$formulations$formulation.desc[match(Main$Formulation, Nowdat$formulations$formulation)]
Main$Lab <- Nowdat$labs$lab.name[match(Main$Lab, Nowdat$labs$lab)]
Main$Test_Type <- Nowdat$testtypes$test.type.desc[match(Main$Test_Type, Nowdat$testtypes$test.type)]
Main$Start_Date <- as.Date(Main$Start_Date, "%m/%d/%Y")
head(Main)
head(Sub)
# split up others into a main and a sub
combine.comments <- function(df) {
# combine general comments for ID into one field if they are spread across several rows
sel <- !is.na(df$Comment_ID)
combined <- tapply(df$Comment_ID[sel], df$ID[sel], paste, collapse="; ")
newcom <- rep("", dim(df)[1])
newcom[match(names(combined), df$ID)] <- combined
newcom
}
names(McGarrydat) <- recode(names(McGarrydat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(McGarrydat) <- recode(names(McGarrydat), subnames[, 1], subnames[, 2], must.match=FALSE)
McGarrydat$Comment_ID <- combine.comments(McGarrydat)
m.main <- McGarrydat[!is.na(McGarrydat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Conductivity", "Conductivity_Unit", "Test_Number", "pH", "Total_Alkalinity", 
"Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
a <- m.main$Start_Time
a1 <- floor(a/100)
a2 <- a - 100*a1
m.main$Start_Time <- paste(substring(100+a1, 2), substring(100+a2, 2), sep=":")
m.sub <- McGarrydat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours", 
"Test_Sick", "Test_Dead", "Comment_Tank", "ID", "Row")]
m.sub$concentration_t <- fill(m.sub$concentration_t)
m.sub$Test_Species <- fill(m.sub$Test_Species)
m.sub$Number_Tested  <- fill(m.sub$Number_Tested)
m.sub$Test_Sick[is.na(m.sub$Test_Sick)] <- 0
m.sub$Test_Dead[is.na(m.sub$Test_Dead)] <- 0
is <- paste(m.sub$ID, m.sub$Test_Species)
ts <- tapply(m.sub$Test_Source[!is.na(m.sub$Test_Source)], is[!is.na(m.sub$Test_Source)], "[", 1)
m.sub$Test_Source <- ts[match(is, names(ts))]
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2], must.match=FALSE)
Slaghtdat$Comment_ID <- combine.comments(Slaghtdat)
dt1 <- fill(as.numeric(Slaghtdat$Start_Time))
dt2 <- as.numeric(strptime(paste("1899-12-31", substring(as.character(Slaghtdat$Hours + 10000), 2)), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Slaghtdat$Hours <- hrs
k.main <- Slaghtdat[!is.na(Slaghtdat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Test_Number", "pH", "Total_Alkalinity", "Chemical", 
"Formulation", "Folder", "File", "Sheet", "Row", "Aerated", "Comment_ID", "ID", "Duration")]
k.main$Start_Time <- format(k.main$Start_Time, "%H:%M")
k.sub <- Slaghtdat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID", "Row")]
k.sub$concentration_t <- fill(k.sub$concentration_t)
k.sub$Test_Species <- fill(k.sub$Test_Species)
k.sub$Number_Tested  <- fill(k.sub$Number_Tested)
k.sub$Test_Sick[is.na(k.sub$Test_Sick)] <- 0
k.sub$Test_Dead[is.na(k.sub$Test_Dead)] <- 0
is <- paste(k.sub$ID, k.sub$Test_Species)
ts <- tapply(k.sub$Test_Source[!is.na(k.sub$Test_Source)], is[!is.na(k.sub$Test_Source)], "[", 1)
k.sub$Test_Source <- ts[match(is, names(ts))]
names(Robdat) <- recode(names(Robdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Robdat) <- recode(names(Robdat), subnames[, 1], subnames[, 2], must.match=FALSE)
Robdat$Comment_ID <- combine.comments(Robdat)
dt1 <- fill(as.numeric(Robdat$Start_Time))
dt2 <- as.numeric(Robdat$Hours)
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Robdat$Hours <- fill(hrs)
r.main <- Robdat[!is.na(Robdat$Start_Date), c("Test_Type", "Lake", "Stream", "Water_Name", "Location", "Start_Date", 
"Start_Time", "Water_Chem_Date", "Water_Temp", "Water_Temp_Unit", 
"pH", "Total_Alkalinity", "Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
r.main$Lake <- recode(r.main$Lake, c("S", "H", "NYO"), c(1, 3, 5))
r.main$Start_Time <- format(r.main$Start_Time, "%H:%M")
r.sub <- Robdat[, c("concentration_t", "Test_Species", "Number_Tested", 
"Hours", "Test_Sick", "Test_Dead", "Comment_Tank", "Row", "ID")]
r.sub$Test_Species <- fill(r.sub$Test_Species)
r.sub$Number_Tested  <- fill(r.sub$Number_Tested)
r.sub$Test_Sick[is.na(r.sub$Test_Sick)] <- 0
r.sub$Test_Dead[is.na(r.sub$Test_Dead)] <- 0
a <- merge(
cbind(names=names(Main), nclass=sapply(lapply(Main, class), "[", 1)),
cbind(names=names(m.main), mclass=sapply(lapply(m.main, class), "[", 1)), all=TRUE)
b <- merge(a,
cbind(names=names(k.main), kclass=sapply(lapply(k.main, class), "[", 1)), all=TRUE)
c <- merge(b,
cbind(names=names(r.main), rclass=sapply(lapply(r.main, class), "[", 1)), all=TRUE)
c
Main$Start_Date
r.main$Start_Date
c(r.main$Start_Date, Main$Start_Date)
as.Date(r.main$Start_Date)
c(as.Date(r.main$Start_Date), Main$Start_Date)
m.main$Duration
head(m.main)
ls()
cleanup()
# C:\JVA\Lamprey\ChemControl\Resistance\Analysis\Resist.r
# read in all the raw data
source("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/ReadNowicki.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/McGarry/ReadMcGarry.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
# use Nowdat as comparison
lapply(Nowdat, head, 2)
head(McGarrydat, 2)
head(Slaghtdat, 2)
head(Robdat, 2)
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Slaghtdat)
r <- names(Robdat)
a <- unique(c(m, k, r))
# added to main
# c("acc..no.", "aerated.", "cond.", "cond..unit", "water.chem..date", "file", "Row", "water")
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comment_ID",
"Comments", "Comment_ID",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested", 
"Number_Tested_Species_1", "Number_Tested", 
"Number_Tested_Species_2", "Number_Tested", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species", 
"Test_Species_1", "Test_Species", 
"Test_Species_2", "Test_Species", 
"source.of.animals", "Test_Source", 
"Test_Species_1_Source", "Test_Source", 
"Test_Species_2_Source", "Test_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit",
"acc..no.", "Acc_No",
"aerated.", "Aerated", 
"cond.", "Conductivity",
"cond..unit", "Conductivity_Unit",
"water.chem..date", "Water_Chem_Date",
"water", "Water_Name"
), ncol=2, byrow=TRUE)
# added to sub
# "specific.comment..regarding.just.the.corresponding.line.of.data."
subnames <- matrix(c(
"check.time", "Hours", 
"conc.", "concentration_t", 
"dead", "Test_Dead", 
"Test_Species_1_Dead", "Test_Dead", 
"Test_Species_2_Dead", "Test_Dead", 
"ill", "Test_Sick",
"Test_Species_1_Sick", "Test_Sick",
"Test_Species_2_Sick", "Test_Sick",
"specific.comment..regarding.just.the.corresponding.line.of.data.", "Comment_Tank"
), ncol=2, byrow=TRUE)
n[is.na(match(n, mainnames[, 2]))]
c[is.na(match(c, subnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
look <- function(varname) {
if(varname %in% m) print(unique(McGarrydat[, varname]))
if(varname %in% k) print(unique(Slaghtdat[, varname]))
if(varname %in% r) print(unique(Robdat[, varname]))
invisible()
}
look("discomfort")
# calculate Duration
mmax <- tapply(McGarrydat$check.time, McGarrydat$ID, max)
indx <- tapply(McGarrydat$check.time, McGarrydat$ID)
McGarrydat$Duration <- as.numeric(mmax[indx])
Slaghtdat$Duration <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
mmax <- tapply(Robdat$check.time, Robdat$ID, max, na.rm=TRUE)
indx <- tapply(Robdat$check.time, Robdat$ID)
maxtime <- mmax[indx]
Robdat$Duration <- (as.numeric(maxtime) - as.numeric(Robdat$start.time))/60/60
# split up Nowicki data by species
keepmain <- c("ID", "Test_Type", "Lake", "Stream", "Water_Not_Lake_Or_Stream", 
"Location", "Lab", "Start_Date", "Start_Time", "Test_Number", 
"Chemical", "Formulation", "Concentration", "Water_Temp", "Water_Temp_Unit", "pH", 
"Total_Alkalinity", "Comment_ID", "Burrowed", "Duration", "Folder", "File")
keepsub <- c("ID", "Test_Sick", "Test_Dead", 
"concentration_t", "pH_t", "DO_t", "water_temp_t", "alkalinity_t", 
"concentrationB_t", "Species", "Number_Tested", "Test_Source", "Hours")
Main1 <- Nowdat$main
Main1 <- Main1[, !(names(Main1) %in% c("Test_Species_2", "Number_Tested_Species_2", "Test_Species_2_Source"))]
mdt <- strptime(paste(Main1$Start_Date, Main1$Start_Time), "%m/%d/%Y %H:%M")
Sub1 <- Nowdat$checktimes
Sub1 <- Sub1[, !(names(Sub1) %in% c("Test_Species_2_Sick", "Test_Species_2_Dead"))]
sdt <- strptime(paste(Sub1$Check_Date, Sub1$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub1$ID, Main1$ID)
Sub1$Species <- Main1$Test_Species_1[sm]
Sub1$Number_Tested <- Main1$Number_Tested_Species_1[sm]
Sub1$Test_Source <- Main1$Test_Species_1_Source[sm]
Sub1$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main1) <- recode(names(Main1), mainnames[, 1], mainnames[, 2], must.match=FALSE)
Main1 <- Main1[, keepmain]
names(Sub1) <- recode(names(Sub1), subnames[, 1], subnames[, 2], must.match=FALSE)
Sub1 <- Sub1[, keepsub]
Main2 <- Nowdat$main
Main2 <- Main2[, !(names(Main2) %in% c("Test_Species_1", "Number_Tested_Species_1", "Test_Species_1_Source"))]
mdt <- strptime(paste(Main2$Start_Date, Main2$Start_Time), "%m/%d/%Y %H:%M")
Sub2 <- Nowdat$checktimes
Sub2 <- Sub2[, !(names(Sub2) %in% c("Test_Species_1_Sick", "Test_Species_1_Dead"))]
sdt <- strptime(paste(Sub2$Check_Date, Sub2$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub2$ID, Main2$ID)
Sub2$Species <- Main2$Test_Species_2[sm]
Sub2$Number_Tested <- Main2$Number_Tested_Species_2[sm]
Sub2$Test_Source <- Main2$Test_Species_2_Source[sm]
Sub2$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main2) <- recode(names(Main2), mainnames[, 1], mainnames[, 2], must.match=FALSE)
Main2 <- Main2[, keepmain]
names(Sub2) <- recode(names(Sub2), subnames[, 1], subnames[, 2], must.match=FALSE)
Sub2 <- Sub2[, keepsub]
all.equal(Main1, Main2)
Main <- Main1
Sub <- rbind(Sub1, Sub2)
Main$Chemical <- Nowdat$chemicals$chemical.desc[match(Main$Chemical, Nowdat$chemicals$chemical)]
Main$Formulation <- Nowdat$formulations$formulation.desc[match(Main$Formulation, Nowdat$formulations$formulation)]
Main$Lab <- Nowdat$labs$lab.name[match(Main$Lab, Nowdat$labs$lab)]
Main$Test_Type <- Nowdat$testtypes$test.type.desc[match(Main$Test_Type, Nowdat$testtypes$test.type)]
Main$Start_Date <- as.Date(Main$Start_Date, "%m/%d/%Y")
head(Main)
head(Sub)
# split up others into a main and a sub
combine.comments <- function(df) {
# combine general comments for ID into one field if they are spread across several rows
sel <- !is.na(df$Comment_ID)
combined <- tapply(df$Comment_ID[sel], df$ID[sel], paste, collapse="; ")
newcom <- rep("", dim(df)[1])
newcom[match(names(combined), df$ID)] <- combined
newcom
}
names(McGarrydat) <- recode(names(McGarrydat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(McGarrydat) <- recode(names(McGarrydat), subnames[, 1], subnames[, 2], must.match=FALSE)
McGarrydat$Comment_ID <- combine.comments(McGarrydat)
m.main <- McGarrydat[!is.na(McGarrydat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Conductivity", "Conductivity_Unit", "Test_Number", "pH", "Total_Alkalinity", 
"Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
a <- m.main$Start_Time
a1 <- floor(a/100)
a2 <- a - 100*a1
m.main$Start_Date <- as.Date(m.main$Start_Date)
m.main$Start_Time <- paste(substring(100+a1, 2), substring(100+a2, 2), sep=":")
m.sub <- McGarrydat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours", 
"Test_Sick", "Test_Dead", "Comment_Tank", "ID", "Row")]
m.sub$concentration_t <- fill(m.sub$concentration_t)
m.sub$Test_Species <- fill(m.sub$Test_Species)
m.sub$Number_Tested  <- fill(m.sub$Number_Tested)
m.sub$Test_Sick[is.na(m.sub$Test_Sick)] <- 0
m.sub$Test_Dead[is.na(m.sub$Test_Dead)] <- 0
is <- paste(m.sub$ID, m.sub$Test_Species)
ts <- tapply(m.sub$Test_Source[!is.na(m.sub$Test_Source)], is[!is.na(m.sub$Test_Source)], "[", 1)
m.sub$Test_Source <- ts[match(is, names(ts))]
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2], must.match=FALSE)
Slaghtdat$Comment_ID <- combine.comments(Slaghtdat)
dt1 <- fill(as.numeric(Slaghtdat$Start_Time))
dt2 <- as.numeric(strptime(paste("1899-12-31", substring(as.character(Slaghtdat$Hours + 10000), 2)), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Slaghtdat$Hours <- hrs
k.main <- Slaghtdat[!is.na(Slaghtdat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Test_Number", "pH", "Total_Alkalinity", "Chemical", 
"Formulation", "Folder", "File", "Sheet", "Row", "Aerated", "Comment_ID", "ID", "Duration")]
k.main$Start_Date <- as.Date(k.main$Start_Date)
k.main$Start_Time <- format(k.main$Start_Time, "%H:%M")
k.sub <- Slaghtdat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID", "Row")]
k.sub$concentration_t <- fill(k.sub$concentration_t)
k.sub$Test_Species <- fill(k.sub$Test_Species)
k.sub$Number_Tested  <- fill(k.sub$Number_Tested)
k.sub$Test_Sick[is.na(k.sub$Test_Sick)] <- 0
k.sub$Test_Dead[is.na(k.sub$Test_Dead)] <- 0
is <- paste(k.sub$ID, k.sub$Test_Species)
ts <- tapply(k.sub$Test_Source[!is.na(k.sub$Test_Source)], is[!is.na(k.sub$Test_Source)], "[", 1)
k.sub$Test_Source <- ts[match(is, names(ts))]
names(Robdat) <- recode(names(Robdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Robdat) <- recode(names(Robdat), subnames[, 1], subnames[, 2], must.match=FALSE)
Robdat$Comment_ID <- combine.comments(Robdat)
dt1 <- fill(as.numeric(Robdat$Start_Time))
dt2 <- as.numeric(Robdat$Hours)
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Robdat$Hours <- fill(hrs)
r.main <- Robdat[!is.na(Robdat$Start_Date), c("Test_Type", "Lake", "Stream", "Water_Name", "Location", "Start_Date", 
"Start_Time", "Water_Chem_Date", "Water_Temp", "Water_Temp_Unit", 
"pH", "Total_Alkalinity", "Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
r.main$Lake <- recode(r.main$Lake, c("S", "H", "NYO"), c(1, 3, 5))
r.main$Start_Date <- as.Date(r.main$Start_Date)
r.main$Start_Time <- format(r.main$Start_Time, "%H:%M")
r.sub <- Robdat[, c("concentration_t", "Test_Species", "Number_Tested", 
"Hours", "Test_Sick", "Test_Dead", "Comment_Tank", "Row", "ID")]
r.sub$Test_Species <- fill(r.sub$Test_Species)
r.sub$Number_Tested  <- fill(r.sub$Number_Tested)
r.sub$Test_Sick[is.na(r.sub$Test_Sick)] <- 0
r.sub$Test_Dead[is.na(r.sub$Test_Dead)] <- 0
a <- merge(
cbind(names=names(Main), nclass=sapply(lapply(Main, class), "[", 1)),
cbind(names=names(m.main), mclass=sapply(lapply(m.main, class), "[", 1)), all=TRUE)
b <- merge(a,
cbind(names=names(k.main), kclass=sapply(lapply(k.main, class), "[", 1)), all=TRUE)
c <- merge(b,
cbind(names=names(r.main), rclass=sapply(lapply(r.main, class), "[", 1)), all=TRUE)
c
  r.main$Water_Chem_Date <- as.Date(r.main$Water_Chem_Date)
a <- merge(
cbind(names=names(Main), nclass=sapply(lapply(Main, class), "[", 1)),
cbind(names=names(m.main), mclass=sapply(lapply(m.main, class), "[", 1)), all=TRUE)
b <- merge(a,
cbind(names=names(k.main), kclass=sapply(lapply(k.main, class), "[", 1)), all=TRUE)
c <- merge(b,
cbind(names=names(r.main), rclass=sapply(lapply(r.main, class), "[", 1)), all=TRUE)
c
  all.main <- rbind.fill(Main, m.main, k.main, r.main)
a <- merge(
cbind(names=names(Sub), nclass=sapply(lapply(Sub, class), "[", 1)),
cbind(names=names(m.sub), mclass=sapply(lapply(m.sub, class), "[", 1)), all=TRUE)
b <- merge(a,
cbind(names=names(k.sub), kclass=sapply(lapply(k.sub, class), "[", 1)), all=TRUE)
c <- merge(b,
cbind(names=names(r.sub), rclass=sapply(lapply(r.sub, class), "[", 1)), all=TRUE)
c
k.sub$Test_Source
summary(k.sub$Test_Source)
summary(Slaghtdat$Test_Source)
m.sub$Test_Source
summary(m.sub$Test_Source)
McGarrydat$Test_Source
summary(McGarrydat$Test_Source)
cleanup()
# C:\JVA\Lamprey\ChemControl\Resistance\Analysis\Resist.r
# read in all the raw data
source("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/ReadNowicki.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/McGarry/ReadMcGarry.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
# use Nowdat as comparison
lapply(Nowdat, head, 2)
head(McGarrydat, 2)
head(Slaghtdat, 2)
head(Robdat, 2)
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Slaghtdat)
r <- names(Robdat)
a <- unique(c(m, k, r))
# added to main
# c("acc..no.", "aerated.", "cond.", "cond..unit", "water.chem..date", "file", "Row", "water")
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comment_ID",
"Comments", "Comment_ID",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested", 
"Number_Tested_Species_1", "Number_Tested", 
"Number_Tested_Species_2", "Number_Tested", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species", 
"Test_Species_1", "Test_Species", 
"Test_Species_2", "Test_Species", 
"source.of.animals", "Test_Source", 
"Test_Species_1_Source", "Test_Source", 
"Test_Species_2_Source", "Test_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit",
"acc..no.", "Acc_No",
"aerated.", "Aerated", 
"cond.", "Conductivity",
"cond..unit", "Conductivity_Unit",
"water.chem..date", "Water_Chem_Date",
"water", "Water_Name"
), ncol=2, byrow=TRUE)
# added to sub
# "specific.comment..regarding.just.the.corresponding.line.of.data."
subnames <- matrix(c(
"check.time", "Hours", 
"conc.", "concentration_t", 
"dead", "Test_Dead", 
"Test_Species_1_Dead", "Test_Dead", 
"Test_Species_2_Dead", "Test_Dead", 
"ill", "Test_Sick",
"Test_Species_1_Sick", "Test_Sick",
"Test_Species_2_Sick", "Test_Sick",
"specific.comment..regarding.just.the.corresponding.line.of.data.", "Comment_Tank"
), ncol=2, byrow=TRUE)
n[is.na(match(n, mainnames[, 2]))]
c[is.na(match(c, subnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
look <- function(varname) {
if(varname %in% m) print(unique(McGarrydat[, varname]))
if(varname %in% k) print(unique(Slaghtdat[, varname]))
if(varname %in% r) print(unique(Robdat[, varname]))
invisible()
}
look("discomfort")
# calculate Duration
mmax <- tapply(McGarrydat$check.time, McGarrydat$ID, max)
indx <- tapply(McGarrydat$check.time, McGarrydat$ID)
McGarrydat$Duration <- as.numeric(mmax[indx])
Slaghtdat$Duration <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
mmax <- tapply(Robdat$check.time, Robdat$ID, max, na.rm=TRUE)
indx <- tapply(Robdat$check.time, Robdat$ID)
maxtime <- mmax[indx]
Robdat$Duration <- (as.numeric(maxtime) - as.numeric(Robdat$start.time))/60/60
# split up Nowicki data by species
keepmain <- c("ID", "Test_Type", "Lake", "Stream", "Water_Not_Lake_Or_Stream", 
"Location", "Lab", "Start_Date", "Start_Time", "Test_Number", 
"Chemical", "Formulation", "Concentration", "Water_Temp", "Water_Temp_Unit", "pH", 
"Total_Alkalinity", "Comment_ID", "Burrowed", "Duration", "Folder", "File")
keepsub <- c("ID", "Test_Sick", "Test_Dead", 
"concentration_t", "pH_t", "DO_t", "water_temp_t", "alkalinity_t", 
"concentrationB_t", "Species", "Number_Tested", "Test_Source", "Hours")
Main1 <- Nowdat$main
Main1 <- Main1[, !(names(Main1) %in% c("Test_Species_2", "Number_Tested_Species_2", "Test_Species_2_Source"))]
mdt <- strptime(paste(Main1$Start_Date, Main1$Start_Time), "%m/%d/%Y %H:%M")
Sub1 <- Nowdat$checktimes
Sub1 <- Sub1[, !(names(Sub1) %in% c("Test_Species_2_Sick", "Test_Species_2_Dead"))]
sdt <- strptime(paste(Sub1$Check_Date, Sub1$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub1$ID, Main1$ID)
Sub1$Species <- Main1$Test_Species_1[sm]
Sub1$Number_Tested <- Main1$Number_Tested_Species_1[sm]
Sub1$Test_Source <- Main1$Test_Species_1_Source[sm]
Sub1$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main1) <- recode(names(Main1), mainnames[, 1], mainnames[, 2], must.match=FALSE)
Main1 <- Main1[, keepmain]
names(Sub1) <- recode(names(Sub1), subnames[, 1], subnames[, 2], must.match=FALSE)
Sub1 <- Sub1[, keepsub]
Main2 <- Nowdat$main
Main2 <- Main2[, !(names(Main2) %in% c("Test_Species_1", "Number_Tested_Species_1", "Test_Species_1_Source"))]
mdt <- strptime(paste(Main2$Start_Date, Main2$Start_Time), "%m/%d/%Y %H:%M")
Sub2 <- Nowdat$checktimes
Sub2 <- Sub2[, !(names(Sub2) %in% c("Test_Species_1_Sick", "Test_Species_1_Dead"))]
sdt <- strptime(paste(Sub2$Check_Date, Sub2$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub2$ID, Main2$ID)
Sub2$Species <- Main2$Test_Species_2[sm]
Sub2$Number_Tested <- Main2$Number_Tested_Species_2[sm]
Sub2$Test_Source <- Main2$Test_Species_2_Source[sm]
Sub2$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main2) <- recode(names(Main2), mainnames[, 1], mainnames[, 2], must.match=FALSE)
Main2 <- Main2[, keepmain]
names(Sub2) <- recode(names(Sub2), subnames[, 1], subnames[, 2], must.match=FALSE)
Sub2 <- Sub2[, keepsub]
all.equal(Main1, Main2)
Main <- Main1
Sub <- rbind(Sub1, Sub2)
Main$Chemical <- Nowdat$chemicals$chemical.desc[match(Main$Chemical, Nowdat$chemicals$chemical)]
Main$Formulation <- Nowdat$formulations$formulation.desc[match(Main$Formulation, Nowdat$formulations$formulation)]
Main$Lab <- Nowdat$labs$lab.name[match(Main$Lab, Nowdat$labs$lab)]
Main$Test_Type <- Nowdat$testtypes$test.type.desc[match(Main$Test_Type, Nowdat$testtypes$test.type)]
Main$Start_Date <- as.Date(Main$Start_Date, "%m/%d/%Y")
head(Main)
head(Sub)
# split up others into a main and a sub
combine.comments <- function(df) {
# combine general comments for ID into one field if they are spread across several rows
sel <- !is.na(df$Comment_ID)
combined <- tapply(df$Comment_ID[sel], df$ID[sel], paste, collapse="; ")
newcom <- rep("", dim(df)[1])
newcom[match(names(combined), df$ID)] <- combined
newcom
}
names(McGarrydat) <- recode(names(McGarrydat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(McGarrydat) <- recode(names(McGarrydat), subnames[, 1], subnames[, 2], must.match=FALSE)
McGarrydat$Comment_ID <- combine.comments(McGarrydat)
m.main <- McGarrydat[!is.na(McGarrydat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Conductivity", "Conductivity_Unit", "Test_Number", "pH", "Total_Alkalinity", 
"Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
a <- m.main$Start_Time
a1 <- floor(a/100)
a2 <- a - 100*a1
m.main$Start_Date <- as.Date(m.main$Start_Date)
m.main$Start_Time <- paste(substring(100+a1, 2), substring(100+a2, 2), sep=":")
m.sub <- McGarrydat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours", 
"Test_Sick", "Test_Dead", "Comment_Tank", "ID", "Row")]
m.sub$concentration_t <- fill(m.sub$concentration_t)
m.sub$Test_Species <- fill(m.sub$Test_Species)
m.sub$Number_Tested  <- fill(m.sub$Number_Tested)
m.sub$Test_Sick[is.na(m.sub$Test_Sick)] <- 0
m.sub$Test_Dead[is.na(m.sub$Test_Dead)] <- 0
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2], must.match=FALSE)
Slaghtdat$Comment_ID <- combine.comments(Slaghtdat)
dt1 <- fill(as.numeric(Slaghtdat$Start_Time))
dt2 <- as.numeric(strptime(paste("1899-12-31", substring(as.character(Slaghtdat$Hours + 10000), 2)), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Slaghtdat$Hours <- hrs
k.main <- Slaghtdat[!is.na(Slaghtdat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Test_Number", "pH", "Total_Alkalinity", "Chemical", 
"Formulation", "Folder", "File", "Sheet", "Row", "Aerated", "Comment_ID", "ID", "Duration")]
k.main$Start_Date <- as.Date(k.main$Start_Date)
k.main$Start_Time <- format(k.main$Start_Time, "%H:%M")
k.sub <- Slaghtdat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID", "Row")]
k.sub$concentration_t <- fill(k.sub$concentration_t)
k.sub$Test_Species <- fill(k.sub$Test_Species)
k.sub$Number_Tested  <- fill(k.sub$Number_Tested)
k.sub$Test_Sick[is.na(k.sub$Test_Sick)] <- 0
k.sub$Test_Dead[is.na(k.sub$Test_Dead)] <- 0
names(Robdat) <- recode(names(Robdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Robdat) <- recode(names(Robdat), subnames[, 1], subnames[, 2], must.match=FALSE)
Robdat$Comment_ID <- combine.comments(Robdat)
dt1 <- fill(as.numeric(Robdat$Start_Time))
dt2 <- as.numeric(Robdat$Hours)
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Robdat$Hours <- fill(hrs)
r.main <- Robdat[!is.na(Robdat$Start_Date), c("Test_Type", "Lake", "Stream", "Water_Name", "Location", "Start_Date", 
"Start_Time", "Water_Chem_Date", "Water_Temp", "Water_Temp_Unit", 
"pH", "Total_Alkalinity", "Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
r.main$Lake <- recode(r.main$Lake, c("S", "H", "NYO"), c(1, 3, 5))
r.main$Start_Date <- as.Date(r.main$Start_Date)
r.main$Start_Time <- format(r.main$Start_Time, "%H:%M")
r.main$Water_Chem_Date <- as.Date(r.main$Water_Chem_Date)
r.sub <- Robdat[, c("concentration_t", "Test_Species", "Number_Tested", 
"Hours", "Test_Sick", "Test_Dead", "Comment_Tank", "Row", "ID")]
r.sub$Test_Species <- fill(r.sub$Test_Species)
r.sub$Number_Tested  <- fill(r.sub$Number_Tested)
r.sub$Test_Sick[is.na(r.sub$Test_Sick)] <- 0
r.sub$Test_Dead[is.na(r.sub$Test_Dead)] <- 0
a <- merge(
cbind(names=names(Main), nclass=sapply(lapply(Main, class), "[", 1)),
cbind(names=names(m.main), mclass=sapply(lapply(m.main, class), "[", 1)), all=TRUE)
b <- merge(a,
cbind(names=names(k.main), kclass=sapply(lapply(k.main, class), "[", 1)), all=TRUE)
c <- merge(b,
cbind(names=names(r.main), rclass=sapply(lapply(r.main, class), "[", 1)), all=TRUE)
c
a <- merge(
cbind(names=names(Sub), nclass=sapply(lapply(Sub, class), "[", 1)),
cbind(names=names(m.sub), mclass=sapply(lapply(m.sub, class), "[", 1)), all=TRUE)
b <- merge(a,
cbind(names=names(k.sub), kclass=sapply(lapply(k.sub, class), "[", 1)), all=TRUE)
c <- merge(b,
cbind(names=names(r.sub), rclass=sapply(lapply(r.sub, class), "[", 1)), all=TRUE)
c
all.main <- rbind.fill(Main, m.main, k.main, r.main)
all.sub <- rbind.fill(Sub, m.sub, k.sub, r.sub)
cleanup()
Date <- as.Date(paste0(c(rep("2014-", 5), rep("2015-", 6)), 
c("11-01", "11-26", "12-12", "12-19", "12-27", "01-06", "01-13", "01-22", "01-27", "02-03", "02-06")))
Reg14 <- c(36, 92, 124, 157, 209, 287, 303, 339, 345, 365, 389)
Reg13 <- c(NA, NA, 89, 125, 165, 218, 236, 266, 279, 301, 330)
Date2 <- as.Date(paste0(c(rep("2014-", 2), rep("2015-", 0)), 
c("12-04", "12-29")))
Reg15 <- c(154, 221)
L <- length(Date)
pd <- pretty(Date, 4)
windows(h=5, w=5)
par(mar=c(4, 4, 2, 2.5), yaxs="i", las=1)
plot(Date, Reg14, type="n", axes=FALSE, las=1, ylim=c(0, 1.1*max(Reg15, Reg14, Reg13, na.rm=TRUE)), 
ylab="Total Count",main="CSP Registration")
axis(1, at=pd, labels=c("Nov 1", "Dec 1", "Jan 1", "Feb 1"))
axis(2)
box()
lines(Date, Reg13, lwd=1, pch=16, type="o", col="gray")
mtext(" CSP\n 2013", side=4, at=Reg13[L], col="lightgray", adj=0)
lines(Date, Reg14, lwd=2, pch=16, type="o", col="gray")
mtext(" CSP\n 2014", side=4, at=Reg14[L], col="darkgray", adj=0)
lines(Date2, Reg15, lwd=3, pch=16, type="o")
mtext(" CSP\n 2015", side=4, at=Reg15[length(Date2)], font=2, adj=0)
q()
ls()
recode
# C:\JVA\Lamprey\ChemControl\Resistance\Analysis\ReadRawData.r
# read in all the raw data
source("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/ReadNowicki.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/McGarry/ReadMcGarry.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
# use Nowdat as comparison
# lapply(Nowdat, head, 2)
# head(McGarrydat, 2)
# head(Slaghtdat, 2)
# head(Robdat, 2)
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Slaghtdat)
r <- names(Robdat)
a <- unique(c(m, k, r))
# added to main
# c("acc..no.", "aerated.", "cond.", "cond..unit", "water.chem..date", "file", "Row", "water")
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comment_ID",
"Comments", "Comment_ID",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested", 
"Number_Tested_Species_1", "Number_Tested", 
"Number_Tested_Species_2", "Number_Tested", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species", 
"Test_Species_1", "Test_Species", 
"Test_Species_2", "Test_Species", 
"source.of.animals", "Test_Source", 
"Test_Species_1_Source", "Test_Source", 
"Test_Species_2_Source", "Test_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit",
"acc..no.", "Acc_No",
"aerated.", "Aerated", 
"cond.", "Conductivity",
"cond..unit", "Conductivity_Unit",
"water.chem..date", "Water_Chem_Date",
"water", "Water_Name"
), ncol=2, byrow=TRUE)
# added to sub
# "specific.comment..regarding.just.the.corresponding.line.of.data."
subnames <- matrix(c(
"check.time", "Hours", 
"conc.", "concentration_t", 
"dead", "Test_Dead", 
"Test_Species_1_Dead", "Test_Dead", 
"Test_Species_2_Dead", "Test_Dead", 
"ill", "Test_Sick",
"Test_Species_1_Sick", "Test_Sick",
"Test_Species_2_Sick", "Test_Sick",
"specific.comment..regarding.just.the.corresponding.line.of.data.", "Comment_Tank"
), ncol=2, byrow=TRUE)
n[is.na(match(n, mainnames[, 2]))]
c[is.na(match(c, subnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
look <- function(varname) {
if(varname %in% m) print(unique(McGarrydat[, varname]))
if(varname %in% k) print(unique(Slaghtdat[, varname]))
if(varname %in% r) print(unique(Robdat[, varname]))
invisible()
}
look("discomfort")
rm(n, c, m, k, r, a, look)
# calculate Duration
mmax <- tapply(McGarrydat$check.time, McGarrydat$ID, max)
indx <- tapply(McGarrydat$check.time, McGarrydat$ID)
McGarrydat$Duration <- as.numeric(mmax[indx])
Slaghtdat$Duration <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
mmax <- tapply(Robdat$check.time, Robdat$ID, max, na.rm=TRUE)
indx <- tapply(Robdat$check.time, Robdat$ID)
maxtime <- mmax[indx]
Robdat$Duration <- (as.numeric(maxtime) - as.numeric(Robdat$start.time))/60/60
rm(mmax, indx, maxtime)
# split up Nowicki data by species
keepmain <- c("ID", "Test_Type", "Lake", "Stream", "Water_Not_Lake_Or_Stream", 
"Location", "Lab", "Start_Date", "Start_Time", "Test_Number", 
"Chemical", "Formulation", "Concentration", "Water_Temp", "Water_Temp_Unit", "pH", 
"Total_Alkalinity", "Comment_ID", "Burrowed", "Duration", "Folder", "File")
keepsub <- c("ID", "Test_Sick", "Test_Dead", 
"concentration_t", "pH_t", "DO_t", "water_temp_t", "alkalinity_t", 
"concentrationB_t", "Species", "Number_Tested", "Test_Source", "Hours")
Main1 <- Nowdat$main
Main1 <- Main1[, !(names(Main1) %in% c("Test_Species_2", "Number_Tested_Species_2", "Test_Species_2_Source"))]
mdt <- strptime(paste(Main1$Start_Date, Main1$Start_Time), "%m/%d/%Y %H:%M")
Sub1 <- Nowdat$checktimes
Sub1 <- Sub1[, !(names(Sub1) %in% c("Test_Species_2_Sick", "Test_Species_2_Dead"))]
sdt <- strptime(paste(Sub1$Check_Date, Sub1$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub1$ID, Main1$ID)
Sub1$Species <- Main1$Test_Species_1[sm]
Sub1$Number_Tested <- Main1$Number_Tested_Species_1[sm]
Sub1$Test_Source <- Main1$Test_Species_1_Source[sm]
Sub1$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main1) <- recode(names(Main1), mainnames[, 1], mainnames[, 2])
Main1 <- Main1[, keepmain]
names(Sub1) <- recode(names(Sub1), subnames[, 1], subnames[, 2])
Sub1 <- Sub1[, keepsub]
Main2 <- Nowdat$main
Main2 <- Main2[, !(names(Main2) %in% c("Test_Species_1", "Number_Tested_Species_1", "Test_Species_1_Source"))]
mdt <- strptime(paste(Main2$Start_Date, Main2$Start_Time), "%m/%d/%Y %H:%M")
Sub2 <- Nowdat$checktimes
Sub2 <- Sub2[, !(names(Sub2) %in% c("Test_Species_1_Sick", "Test_Species_1_Dead"))]
sdt <- strptime(paste(Sub2$Check_Date, Sub2$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub2$ID, Main2$ID)
Sub2$Species <- Main2$Test_Species_2[sm]
Sub2$Number_Tested <- Main2$Number_Tested_Species_2[sm]
Sub2$Test_Source <- Main2$Test_Species_2_Source[sm]
Sub2$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main2) <- recode(names(Main2), mainnames[, 1], mainnames[, 2])
Main2 <- Main2[, keepmain]
names(Sub2) <- recode(names(Sub2), subnames[, 1], subnames[, 2])
Sub2 <- Sub2[, keepsub]
all.equal(Main1, Main2)
Main <- Main1
Sub <- rbind(Sub1, Sub2)
Main$Chemical <- Nowdat$chemicals$chemical.desc[match(Main$Chemical, Nowdat$chemicals$chemical)]
Main$Formulation <- Nowdat$formulations$formulation.desc[match(Main$Formulation, Nowdat$formulations$formulation)]
Main$Lab <- Nowdat$labs$lab.name[match(Main$Lab, Nowdat$labs$lab)]
Main$Test_Type <- Nowdat$testtypes$test.type.desc[match(Main$Test_Type, Nowdat$testtypes$test.type)]
Main$Start_Date <- as.Date(Main$Start_Date, "%m/%d/%Y")
head(Main)
head(Sub)
rm(keepmain, keepsub, Main1, mdt, Sub1, sdt, sm, Main2, Sub2)
# split up others into a main and a sub
# eliminate   c("alk..unit", "conc..unit", "container", "cumulative..dead", "cumulative..ill", "discomfort", "end.date", "end.time")
combine.comments <- function(df) {
# combine general comments for ID into one field if they are spread across several rows
sel <- !is.na(df$Comment_ID)
combined <- tapply(df$Comment_ID[sel], df$ID[sel], paste, collapse="; ")
newcom <- rep("", dim(df)[1])
newcom[match(names(combined), df$ID)] <- combined
newcom
}
names(McGarrydat) <- recode(names(McGarrydat), mainnames[, 1], mainnames[, 2])
names(McGarrydat) <- recode(names(McGarrydat), subnames[, 1], subnames[, 2])
McGarrydat$Comment_ID <- combine.comments(McGarrydat)
m.main <- McGarrydat[!is.na(McGarrydat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Conductivity", "Conductivity_Unit", "Test_Number", "pH", "Total_Alkalinity", 
"Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
a <- m.main$Start_Time
a1 <- floor(a/100)
a2 <- a - 100*a1
m.main$Start_Date <- as.Date(m.main$Start_Date)
m.main$Start_Time <- paste(substring(100+a1, 2), substring(100+a2, 2), sep=":")
m.sub <- McGarrydat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours", 
"Test_Sick", "Test_Dead", "Comment_Tank", "ID", "Row")]
m.sub$concentration_t <- fill(m.sub$concentration_t)
m.sub$Test_Species <- fill(m.sub$Test_Species)
m.sub$Number_Tested  <- fill(m.sub$Number_Tested)
m.sub$Test_Sick[is.na(m.sub$Test_Sick)] <- 0
m.sub$Test_Dead[is.na(m.sub$Test_Dead)] <- 0
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2])
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2])
Slaghtdat$Comment_ID <- combine.comments(Slaghtdat)
dt1 <- fill(as.numeric(Slaghtdat$Start_Time))
dt2 <- as.numeric(strptime(paste("1899-12-31", substring(as.character(Slaghtdat$Hours + 10000), 2)), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Slaghtdat$Hours <- hrs
k.main <- Slaghtdat[!is.na(Slaghtdat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Test_Number", "pH", "Total_Alkalinity", "Chemical", 
"Formulation", "Folder", "File", "Sheet", "Row", "Aerated", "Comment_ID", "ID", "Duration")]
k.main$Start_Date <- as.Date(k.main$Start_Date)
k.main$Start_Time <- format(k.main$Start_Time, "%H:%M")
k.sub <- Slaghtdat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID", "Row")]
k.sub$concentration_t <- fill(k.sub$concentration_t)
k.sub$Test_Species <- fill(k.sub$Test_Species)
k.sub$Number_Tested  <- fill(k.sub$Number_Tested)
k.sub$Test_Sick[is.na(k.sub$Test_Sick)] <- 0
k.sub$Test_Dead[is.na(k.sub$Test_Dead)] <- 0
names(Robdat) <- recode(names(Robdat), mainnames[, 1], mainnames[, 2])
names(Robdat) <- recode(names(Robdat), subnames[, 1], subnames[, 2])
Robdat$Comment_ID <- combine.comments(Robdat)
dt1 <- fill(as.numeric(Robdat$Start_Time))
dt2 <- as.numeric(Robdat$Hours)
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Robdat$Hours <- fill(hrs)
r.main <- Robdat[!is.na(Robdat$Start_Date), c("Test_Type", "Lake", "Stream", "Water_Name", "Location", "Start_Date", 
"Start_Time", "Water_Chem_Date", "Water_Temp", "Water_Temp_Unit", 
"pH", "Total_Alkalinity", "Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
r.main$Lake <- recode(r.main$Lake, c("S", "H", "NYO"), c(1, 3, 5))
r.main$Start_Date <- as.Date(r.main$Start_Date)
r.main$Start_Time <- format(r.main$Start_Time, "%H:%M")
r.main$Water_Chem_Date <- as.Date(r.main$Water_Chem_Date)
r.sub <- Robdat[, c("concentration_t", "Test_Species", "Number_Tested", 
"Hours", "Test_Sick", "Test_Dead", "Comment_Tank", "Row", "ID")]
r.sub$Test_Species <- fill(r.sub$Test_Species)
r.sub$Number_Tested  <- fill(r.sub$Number_Tested)
r.sub$Test_Sick[is.na(r.sub$Test_Sick)] <- 0
r.sub$Test_Dead[is.na(r.sub$Test_Dead)] <- 0
rm(combine.comments, a, a1, a2, dt1, dt2, hrs, mainnames, subnames)
showme <- function(df, id) {
print(df[df$ID %in% id, ])
}
b <- with(k.sub, k.sub$ID[!is.na(Test_Species) & is.na(Number_Tested)])
showme(k.main, b)
showme(k.sub, b)
rm(showme)
a <- merge(
cbind(names=names(Main), nclass=sapply(lapply(Main, class), "[", 1)),
cbind(names=names(m.main), mclass=sapply(lapply(m.main, class), "[", 1)), all=TRUE)
b <- merge(a,
cbind(names=names(k.main), kclass=sapply(lapply(k.main, class), "[", 1)), all=TRUE)
c <- merge(b,
cbind(names=names(r.main), rclass=sapply(lapply(r.main, class), "[", 1)), all=TRUE)
c
a <- merge(
cbind(names=names(Sub), nclass=sapply(lapply(Sub, class), "[", 1)),
cbind(names=names(m.sub), mclass=sapply(lapply(m.sub, class), "[", 1)), all=TRUE)
b <- merge(a,
cbind(names=names(k.sub), kclass=sapply(lapply(k.sub, class), "[", 1)), all=TRUE)
c <- merge(b,
cbind(names=names(r.sub), rclass=sapply(lapply(r.sub, class), "[", 1)), all=TRUE)
c
rm(a, b, c)
all.main <- rbind.fill(Main, m.main, k.main, r.main)
all.sub <- rbind.fill(Sub, m.sub, k.sub, r.sub)
# fix Aerated
unique(all.main$Aerated)
all.main$Aerated <- recode(all.main$Aerated, c("aerated", "aeraated", "Aerated"), c("Yes", "Yes", "Yes"))
nota1 <- grep("no(n|t)( |-)aer", all.main$Comment_ID, ignore.case=TRUE)
nota2 <- grep("no aer", all.main$Comment_ID, ignore.case=TRUE)
nota3 <- grep("non- aer", all.main$Comment_ID, ignore.case=TRUE)
nota4 <- grep("unaer", all.main$Comment_ID, ignore.case=TRUE)
nota <- unique(c(nota1, nota2, nota3, nota4))
all.main$Aerated[nota] <- "No"
parta1 <- grep("no overnight aeration", all.main$Comment_ID, ignore.case=TRUE)
parta2 <- grep("power", all.main$Comment_ID, ignore.case=TRUE)
parta3 <- grep("Air was off", all.main$Comment_ID, ignore.case=TRUE)
parta4 <- grep("airstone left out", all.main$Comment_ID, ignore.case=TRUE)
parta <- unique(c(parta1, parta2, parta3, parta4))
all.main$Aerated[parta] <- "Partial"
assa <- grep("Assumed to have aeration", all.main$Comment_ID, ignore.case=TRUE)
all.main$Aerated[assa] <- "Assumed"
alla <- grep("aer", all.main$Comment_ID, ignore.case=TRUE)
yesa <- alla[!(alla %in% c(nota, parta, assa))]
all.main$Aerated[parta] <- "Yes"
unique(all.main$Aerated)
# fix Conductivity_Unit
unique(all.main$Conductivity_Unit)
recode(all.main$Conductivity_Unit, c("at 20C", "at 25C", "at 20c", "At 20C"), c("@20C", "@25C", "@20C", "@20C"))
unique(all.main$Conductivity_Unit)
# fix Conductivity_Unit
unique(all.main$Conductivity_Unit)
all.main$Conductivity_Unit <- recode(all.main$Conductivity_Unit, c("at 20C", "at 25C", "at 20c", "At 20C"), c("@20C", "@25C", "@20C", "@20C"))
unique(all.main$Conductivity_Unit)
plotdf(all.main)
# fix Water_Name
unique(all.main$Water_Name)
# fix Water_Name
unique(all.main$Water_Name)
all.main$Water_Name[!is.na(all.main$Water_Name) & all.main$Water_Name=="lake Huron"] <- "Lake Huron"
unique(all.main$Water_Name)
# fix Duration
look <- cut(all.main$Duration, c(-1e9, 1, 24, 1e9), labels=FALSE)
unique(look)
all.main$Duration[!is.na(look) & look > 2.5]
unique(all.main$Duration[!is.na(look) & look > 2.5])
sort(unique(all.main$Duration[!is.na(look) & look > 2.5]))
# fix Duration
look <- cut(all.main$Duration, c(-1e9, 1, 35, 1e9), labels=FALSE)
all.main$Duration[!is.na(look) & look > 2.5]
sort(unique(all.main$Duration[!is.na(look) & look > 2.5]))
all.main[!is.na(look) & look > 2.5, ]
all.main[!is.na(look) & look > 2.5, ]
all.main[!is.na(look) & look > 2.5, c("Folder", "File", "Sheet", "Row", "Duration")]
all.main$Duration[!is.na(all.main$Duration) & all.main$Duration==224]
all.main$File[!is.na(look) & look > 2.5]
table(all.main$File[!is.na(look) & look > 2.5])
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
look <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
look
summary(look)
Slaghtdat[!is.na(look) & look > 50, ]
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
look <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
summary(look)
Slaghtdat[!is.na(look) & look > 50, ]
# read in all the raw data
source("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/ReadNowicki.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/McGarry/ReadMcGarry.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
# use Nowdat as comparison
# lapply(Nowdat, head, 2)
# head(McGarrydat, 2)
# head(Slaghtdat, 2)
# head(Robdat, 2)
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Slaghtdat)
r <- names(Robdat)
a <- unique(c(m, k, r))
# added to main
# c("acc..no.", "aerated.", "cond.", "cond..unit", "water.chem..date", "file", "Row", "water")
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comment_ID",
"Comments", "Comment_ID",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested", 
"Number_Tested_Species_1", "Number_Tested", 
"Number_Tested_Species_2", "Number_Tested", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species", 
"Test_Species_1", "Test_Species", 
"Test_Species_2", "Test_Species", 
"source.of.animals", "Test_Source", 
"Test_Species_1_Source", "Test_Source", 
"Test_Species_2_Source", "Test_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit",
"acc..no.", "Acc_No",
"aerated.", "Aerated", 
"cond.", "Conductivity",
"cond..unit", "Conductivity_Unit",
"water.chem..date", "Water_Chem_Date",
"water", "Water_Name"
), ncol=2, byrow=TRUE)
# added to sub
# "specific.comment..regarding.just.the.corresponding.line.of.data."
subnames <- matrix(c(
"check.time", "Hours", 
"conc.", "concentration_t", 
"dead", "Test_Dead", 
"Test_Species_1_Dead", "Test_Dead", 
"Test_Species_2_Dead", "Test_Dead", 
"ill", "Test_Sick",
"Test_Species_1_Sick", "Test_Sick",
"Test_Species_2_Sick", "Test_Sick",
"specific.comment..regarding.just.the.corresponding.line.of.data.", "Comment_Tank"
), ncol=2, byrow=TRUE)
n[is.na(match(n, mainnames[, 2]))]
c[is.na(match(c, subnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
look <- function(varname) {
if(varname %in% m) print(unique(McGarrydat[, varname]))
if(varname %in% k) print(unique(Slaghtdat[, varname]))
if(varname %in% r) print(unique(Robdat[, varname]))
invisible()
}
look("discomfort")
rm(n, c, m, k, r, a, look)
# calculate Duration
mmax <- tapply(McGarrydat$check.time, McGarrydat$ID, max)
indx <- tapply(McGarrydat$check.time, McGarrydat$ID)
McGarrydat$Duration <- as.numeric(mmax[indx])
look <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
Slaghtdat[!is.na(look) & look > 50, ]
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
look <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
Slaghtdat[!is.na(look) & look > 50, ]
Slaghtdat$Duration <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
mmax <- tapply(Robdat$check.time, Robdat$ID, max, na.rm=TRUE)
indx <- tapply(Robdat$check.time, Robdat$ID)
maxtime <- mmax[indx]
Robdat$Duration <- (as.numeric(maxtime) - as.numeric(Robdat$start.time))/60/60
rm(mmax, indx, maxtime)
# split up Nowicki data by species
keepmain <- c("ID", "Test_Type", "Lake", "Stream", "Water_Not_Lake_Or_Stream", 
"Location", "Lab", "Start_Date", "Start_Time", "Test_Number", 
"Chemical", "Formulation", "Concentration", "Water_Temp", "Water_Temp_Unit", "pH", 
"Total_Alkalinity", "Comment_ID", "Burrowed", "Duration", "Folder", "File")
keepsub <- c("ID", "Test_Sick", "Test_Dead", 
"concentration_t", "pH_t", "DO_t", "water_temp_t", "alkalinity_t", 
"concentrationB_t", "Species", "Number_Tested", "Test_Source", "Hours")
Main1 <- Nowdat$main
Main1 <- Main1[, !(names(Main1) %in% c("Test_Species_2", "Number_Tested_Species_2", "Test_Species_2_Source"))]
mdt <- strptime(paste(Main1$Start_Date, Main1$Start_Time), "%m/%d/%Y %H:%M")
Sub1 <- Nowdat$checktimes
Sub1 <- Sub1[, !(names(Sub1) %in% c("Test_Species_2_Sick", "Test_Species_2_Dead"))]
sdt <- strptime(paste(Sub1$Check_Date, Sub1$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub1$ID, Main1$ID)
Sub1$Species <- Main1$Test_Species_1[sm]
Sub1$Number_Tested <- Main1$Number_Tested_Species_1[sm]
Sub1$Test_Source <- Main1$Test_Species_1_Source[sm]
Sub1$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main1) <- recode(names(Main1), mainnames[, 1], mainnames[, 2])
Main1 <- Main1[, keepmain]
names(Sub1) <- recode(names(Sub1), subnames[, 1], subnames[, 2])
Sub1 <- Sub1[, keepsub]
Main2 <- Nowdat$main
Main2 <- Main2[, !(names(Main2) %in% c("Test_Species_1", "Number_Tested_Species_1", "Test_Species_1_Source"))]
mdt <- strptime(paste(Main2$Start_Date, Main2$Start_Time), "%m/%d/%Y %H:%M")
Sub2 <- Nowdat$checktimes
Sub2 <- Sub2[, !(names(Sub2) %in% c("Test_Species_1_Sick", "Test_Species_1_Dead"))]
sdt <- strptime(paste(Sub2$Check_Date, Sub2$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub2$ID, Main2$ID)
Sub2$Species <- Main2$Test_Species_2[sm]
Sub2$Number_Tested <- Main2$Number_Tested_Species_2[sm]
Sub2$Test_Source <- Main2$Test_Species_2_Source[sm]
Sub2$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main2) <- recode(names(Main2), mainnames[, 1], mainnames[, 2])
Main2 <- Main2[, keepmain]
names(Sub2) <- recode(names(Sub2), subnames[, 1], subnames[, 2])
Sub2 <- Sub2[, keepsub]
all.equal(Main1, Main2)
Main <- Main1
Sub <- rbind(Sub1, Sub2)
Main$Chemical <- Nowdat$chemicals$chemical.desc[match(Main$Chemical, Nowdat$chemicals$chemical)]
Main$Formulation <- Nowdat$formulations$formulation.desc[match(Main$Formulation, Nowdat$formulations$formulation)]
Main$Lab <- Nowdat$labs$lab.name[match(Main$Lab, Nowdat$labs$lab)]
Main$Test_Type <- Nowdat$testtypes$test.type.desc[match(Main$Test_Type, Nowdat$testtypes$test.type)]
Main$Start_Date <- as.Date(Main$Start_Date, "%m/%d/%Y")
head(Main)
head(Sub)
rm(keepmain, keepsub, Main1, mdt, Sub1, sdt, sm, Main2, Sub2)
# split up others into a main and a sub
# eliminate   c("alk..unit", "conc..unit", "container", "cumulative..dead", "cumulative..ill", "discomfort", "end.date", "end.time")
combine.comments <- function(df) {
# combine general comments for ID into one field if they are spread across several rows
sel <- !is.na(df$Comment_ID)
combined <- tapply(df$Comment_ID[sel], df$ID[sel], paste, collapse="; ")
newcom <- rep("", dim(df)[1])
newcom[match(names(combined), df$ID)] <- combined
newcom
}
names(McGarrydat) <- recode(names(McGarrydat), mainnames[, 1], mainnames[, 2])
names(McGarrydat) <- recode(names(McGarrydat), subnames[, 1], subnames[, 2])
McGarrydat$Comment_ID <- combine.comments(McGarrydat)
m.main <- McGarrydat[!is.na(McGarrydat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Conductivity", "Conductivity_Unit", "Test_Number", "pH", "Total_Alkalinity", 
"Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
a <- m.main$Start_Time
a1 <- floor(a/100)
a2 <- a - 100*a1
m.main$Start_Date <- as.Date(m.main$Start_Date)
m.main$Start_Time <- paste(substring(100+a1, 2), substring(100+a2, 2), sep=":")
m.sub <- McGarrydat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours", 
"Test_Sick", "Test_Dead", "Comment_Tank", "ID", "Row")]
m.sub$concentration_t <- fill(m.sub$concentration_t)
m.sub$Test_Species <- fill(m.sub$Test_Species)
m.sub$Number_Tested  <- fill(m.sub$Number_Tested)
m.sub$Test_Sick[is.na(m.sub$Test_Sick)] <- 0
m.sub$Test_Dead[is.na(m.sub$Test_Dead)] <- 0
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2])
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2])
Slaghtdat$Comment_ID <- combine.comments(Slaghtdat)
dt1 <- fill(as.numeric(Slaghtdat$Start_Time))
dt2 <- as.numeric(strptime(paste("1899-12-31", substring(as.character(Slaghtdat$Hours + 10000), 2)), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Slaghtdat$Hours <- hrs
k.main <- Slaghtdat[!is.na(Slaghtdat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Test_Number", "pH", "Total_Alkalinity", "Chemical", 
"Formulation", "Folder", "File", "Sheet", "Row", "Aerated", "Comment_ID", "ID", "Duration")]
k.main$Start_Date <- as.Date(k.main$Start_Date)
k.main$Start_Time <- format(k.main$Start_Time, "%H:%M")
k.sub <- Slaghtdat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID", "Row")]
k.sub$concentration_t <- fill(k.sub$concentration_t)
k.sub$Test_Species <- fill(k.sub$Test_Species)
k.sub$Number_Tested  <- fill(k.sub$Number_Tested)
k.sub$Test_Sick[is.na(k.sub$Test_Sick)] <- 0
k.sub$Test_Dead[is.na(k.sub$Test_Dead)] <- 0
names(Robdat) <- recode(names(Robdat), mainnames[, 1], mainnames[, 2])
names(Robdat) <- recode(names(Robdat), subnames[, 1], subnames[, 2])
Robdat$Comment_ID <- combine.comments(Robdat)
dt1 <- fill(as.numeric(Robdat$Start_Time))
dt2 <- as.numeric(Robdat$Hours)
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Robdat$Hours <- fill(hrs)
r.main <- Robdat[!is.na(Robdat$Start_Date), c("Test_Type", "Lake", "Stream", "Water_Name", "Location", "Start_Date", 
"Start_Time", "Water_Chem_Date", "Water_Temp", "Water_Temp_Unit", 
"pH", "Total_Alkalinity", "Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
r.main$Lake <- recode(r.main$Lake, c("S", "H", "NYO"), c(1, 3, 5))
r.main$Start_Date <- as.Date(r.main$Start_Date)
r.main$Start_Time <- format(r.main$Start_Time, "%H:%M")
r.main$Water_Chem_Date <- as.Date(r.main$Water_Chem_Date)
r.sub <- Robdat[, c("concentration_t", "Test_Species", "Number_Tested", 
"Hours", "Test_Sick", "Test_Dead", "Comment_Tank", "Row", "ID")]
r.sub$Test_Species <- fill(r.sub$Test_Species)
r.sub$Number_Tested  <- fill(r.sub$Number_Tested)
r.sub$Test_Sick[is.na(r.sub$Test_Sick)] <- 0
r.sub$Test_Dead[is.na(r.sub$Test_Dead)] <- 0
rm(combine.comments, a, a1, a2, dt1, dt2, hrs, mainnames, subnames)
showme <- function(df, id) {
print(df[df$ID %in% id, ])
}
b <- with(k.sub, k.sub$ID[!is.na(Test_Species) & is.na(Number_Tested)])
showme(k.main, b)
showme(k.sub, b)
rm(showme)
a <- merge(
cbind(names=names(Main), nclass=sapply(lapply(Main, class), "[", 1)),
cbind(names=names(m.main), mclass=sapply(lapply(m.main, class), "[", 1)), all=TRUE)
b <- merge(a,
cbind(names=names(k.main), kclass=sapply(lapply(k.main, class), "[", 1)), all=TRUE)
c <- merge(b,
cbind(names=names(r.main), rclass=sapply(lapply(r.main, class), "[", 1)), all=TRUE)
c
a <- merge(
cbind(names=names(Sub), nclass=sapply(lapply(Sub, class), "[", 1)),
cbind(names=names(m.sub), mclass=sapply(lapply(m.sub, class), "[", 1)), all=TRUE)
b <- merge(a,
cbind(names=names(k.sub), kclass=sapply(lapply(k.sub, class), "[", 1)), all=TRUE)
c <- merge(b,
cbind(names=names(r.sub), rclass=sapply(lapply(r.sub, class), "[", 1)), all=TRUE)
c
rm(a, b, c)
all.main <- rbind.fill(Main, m.main, k.main, r.main)
all.sub <- rbind.fill(Sub, m.sub, k.sub, r.sub)
# fix Aerated
unique(all.main$Aerated)
all.main$Aerated <- recode(all.main$Aerated, c("aerated", "aeraated", "Aerated"), c("Yes", "Yes", "Yes"))
nota1 <- grep("no(n|t)( |-)aer", all.main$Comment_ID, ignore.case=TRUE)
nota2 <- grep("no aer", all.main$Comment_ID, ignore.case=TRUE)
nota3 <- grep("non- aer", all.main$Comment_ID, ignore.case=TRUE)
nota4 <- grep("unaer", all.main$Comment_ID, ignore.case=TRUE)
nota <- unique(c(nota1, nota2, nota3, nota4))
all.main$Aerated[nota] <- "No"
parta1 <- grep("no overnight aeration", all.main$Comment_ID, ignore.case=TRUE)
parta2 <- grep("power", all.main$Comment_ID, ignore.case=TRUE)
parta3 <- grep("Air was off", all.main$Comment_ID, ignore.case=TRUE)
parta4 <- grep("airstone left out", all.main$Comment_ID, ignore.case=TRUE)
parta <- unique(c(parta1, parta2, parta3, parta4))
all.main$Aerated[parta] <- "Partial"
assa <- grep("Assumed to have aeration", all.main$Comment_ID, ignore.case=TRUE)
all.main$Aerated[assa] <- "Assumed"
alla <- grep("aer", all.main$Comment_ID, ignore.case=TRUE)
yesa <- alla[!(alla %in% c(nota, parta, assa))]
all.main$Aerated[parta] <- "Yes"
unique(all.main$Aerated)
# fix Conductivity_Unit
unique(all.main$Conductivity_Unit)
all.main$Conductivity_Unit <- recode(all.main$Conductivity_Unit, c("at 20C", "at 25C", "at 20c", "At 20C"), c("@20C", "@25C", "@20C", "@20C"))
unique(all.main$Conductivity_Unit)
# fix Water_Name
unique(all.main$Water_Name)
all.main$Water_Name[!is.na(all.main$Water_Name) & all.main$Water_Name=="lake Huron"] <- "Lake Huron"
unique(all.main$Water_Name)
# fix Duration
look <- cut(all.main$Duration, c(-1e9, 1, 35, 1e9), labels=FALSE)
all.main$Duration[!is.na(look) & look > 2.5]
# error in Nowicki Duration
all.main$Duration[!is.na(all.main$Duration) & all.main$Duration==224] <- 24
look <- cut(all.main$Duration, c(-1e9, 1, 35, 1e9), labels=FALSE)
all.main$Duration[!is.na(look) & look > 2.5]
plotdf(all.main)
unique(all.main$Folder[is.na(all.main$Burrowed)])
table(all.main$Folder, all.main$Burrowed)
unique(all.main$Folder[!is.na(all.main$Burrowed)])
eq
?na.locf
library(zoo)
?na.locf
table(all.main$Folder, all.main$Burrowed)
all.main[!is.na(all.main$Burrowed) & all.main$Burrowed==2, ]
all.main[all.main$ID %in% 10850:10880, ]
all.main[all.main$ID %in% 10880:10900, ]
table(all.main$Water_Temp < 40, all.main$Water_Temp_Unit)
mytable(all.main$Water_Temp < 40, all.main$Water_Temp_Unit)
mytable <- function(...) table(..., useNA="ifany")
mytable(all.main$Water_Temp < 40, all.main$Water_Temp_Unit)
?table
#' Cross Tabulation and Table Creation
#'
#' Build a contingency table of the counts at each combination of factor levels, incorporating missing values by default.
#' @param ... Arguments provided to \code{\link{table}}.
#' @return An array of integer values of class "table".
#' @export
#' @examples 
#' mytable(c(1, 1, 1, 2, NA, 3, 4, 1, 10, 3))
mytable <- function(...) table(..., useNA="ifany")
mytable(c(1, 1, 1, 2, NA, 3, 4, 1, 10, 3))
?cheat
mytable <- function(...) table(..., useNA="ifany")
mytable(all.main$Water_Temp > 40, all.main$Water_Temp_Unit)
attach(all.main)
unique(Water_Temp_Unit)
unique(Water_Temp_Unit)
unit <- recode(Water_Temp_Unit, c("", "C", "F", NA), ("", "C", "F", ""))
unique(unit)
temp <- cut(Water_Temp, c(-50, 40, 100), labels=FALSE)
unique(temp)
unique(Water_Temp_Unit)
unit <- recode(Water_Temp_Unit, c("", "C", "F", NA), c("", "C", "F", ""))
unique(unit)
temp <- cut(Water_Temp, c(-50, 40, 100), labels=FALSE)
unique(temp)
unique(Water_Temp_Unit)
unit <- recode(Water_Temp_Unit, c("", "C", "F", NA), c("", "C", "F", ""))
unique(unit)
temp <- cut(Water_Temp, c(-50, 40, 100), labels=FALSE)
temp[is.na(temp)] <- 0
unique(temp)
okay <- (temp==0 & unit="") | (temp==1 & unit=="C") | (temp==2 & unit=="F")
okay <- (temp==0 & unit=="") | (temp==1 & unit=="C") | (temp==2 & unit=="F")
mytable(okay)
all.main[!okay, ]
all.main[!okay, ]
all.main[!okay & Folder=="Nowicki", ]
all.main[!okay & Folder=="Nowicki", c("ID", "Water_Temp", "Water_Temp_Unit")]
all.main[!okay & Folder!="Nowicki", ]
all.main[Folder=="Slaght" & Row %in% 110:160, ]
mytable(all.main$Water_Temp > 40, all.main$Water_Temp_Unit, Folder)
unique(temp)
recode(temp, 0:2, c("", "C", "F"))
mytable(recode(temp, 0:2, c("", "C", "F")))
unit2 <- recode(temp, 0:2, c("", "C", "F"))
unit2 <- recode(temp, 0:2, c("", "C", "F"))
mytable(Water_Temp > 40, unit2)
locator()
all.main[Concentration>100, ]
all.main[!is.na(Concentration) & Concentration>100, ]
ID[!is.na(Concentration) & Concentration>100]
look <- ID[!is.na(Concentration) & Concentration>100]
# fix Concentration
look <- ID[!is.na(Concentration) & Concentration>100]
all.sub[all.sub$ID %in% look, ]
all.sub[all.sub$ID %in% look, 1:4]
all.main[ID %in% look, ]
unique(Formulation)
mytable(Formulation)
dput(sort(unique(Formulation)))
look <- recode(Formulation, c("Hoeschst 37.6%", "Maumee 30", "Maumee 30% "), c("Hoechst 37.6%", "Maumee 30%", "Maumee 30%"))
table(look)
# fix Chemical
mytable(Chemical)
mytable(Chemical)
dput(unique(Chemical))
dfclip()
a <- dfclip()
dput(a)
fixit <- data.frame(
before = c("TFM+Bayuscide", "TFM+Bayluscide", "TFM + Bayer (.5%)-Mqt", "TFM + 0.5%Bayluscide", "TFM+0.5% Bayluscide", 
"TFM + Bayer (.8%)-Mqt", "TFM+0.8% Baylusicde", "TFM + Bayer (1%)-Mqt", "TFM + Bayer (1%)", "TFM+1.0% Bayluscide", "TFM + 1% Bayluscide", 
"TFM + 1.0% Bayluscide", "TFM + 1% Niclosamide", "TFM + 1.5% Niclosamide", "TFM + Bayer (2%)", "TFM + Bayer (2%)-HB", "TFM + Bayer (2%)-Mqt"), 
after = c("TFM + Bayluscide", "TFM + Bayluscide", "TFM + 0.5% Bayluscide (Mqt)", "TFM + 0.5% Bayluscide", "TFM + 0.5% Bayluscide", "TFM + 0.8% Bayluscide (Mqt)", 
"TFM + 0.8% Bayluscide", "TFM + 1.0% Bayluscide (Mqt)", "TFM + 1.0% Bayluscide", "TFM + 1.0% Bayluscide", "TFM + 1.0% Bayluscide", "TFM + 1.0% Bayluscide", 
"TFM + 1.0% Bayluscide", "TFM + 1.5% Bayluscide", "TFM + 2.0% Bayluscide", "TFM + 2.0% Bayluscide (HB)", "TFM + 2.0% Bayluscide (Mqt)")
)
all.equalt(a, fixit)
all.equal(a, fixit)
mytable(recode(Chemical, fixit$before, fixit$after))
unique(Lab)
dput(unique(Lab))
unique(recode(Lab, c("Mobile Lab 2", "Moblie Lab 2", "Hammond bay", "Hmmond Bay"), c("Mobile Lab. No. 2", "Mobile Lab. No. 2", "Hammond Bay", "Hammond Bay")))
# fix Test_Type
unique(Test_Type)
sort(unique(Test_Type))
dput(sort(unique(Test_Type)))
Test_Type=="Static Aerated"
mytable(Test_Type=="Static Aerated")
all.main$Aerated[Test_Type=="Static Aerated"] <- "Yes"
a <- recode(Test_Type, c("Flow", "Flow through", "Flow Through", "static", "Static Aerated"), 
c("Flow Thru", "Flow Thru", "Flow Thru", "Static", "Static"))
unique(a)
mytable(a)
plotdf()
plotdf
.SavedPlots <- NULL
.SavedPlots <- NULL
plotdf(all.main)
graphics.off()
cleanup()
search()
detach()
# C:\JVA\Lamprey\ChemControl\Resistance\Analysis\ReadRawData.r
# read in all the raw data
source("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/ReadNowicki.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/McGarry/ReadMcGarry.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
# use Nowdat as comparison
# lapply(Nowdat, head, 2)
# head(McGarrydat, 2)
# head(Slaghtdat, 2)
# head(Robdat, 2)
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Slaghtdat)
r <- names(Robdat)
a <- unique(c(m, k, r))
# added to main
# c("acc..no.", "aerated.", "cond.", "cond..unit", "water.chem..date", "file", "Row", "water")
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comment_ID",
"Comments", "Comment_ID",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested", 
"Number_Tested_Species_1", "Number_Tested", 
"Number_Tested_Species_2", "Number_Tested", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species", 
"Test_Species_1", "Test_Species", 
"Test_Species_2", "Test_Species", 
"source.of.animals", "Test_Source", 
"Test_Species_1_Source", "Test_Source", 
"Test_Species_2_Source", "Test_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit",
"acc..no.", "Acc_No",
"aerated.", "Aerated", 
"cond.", "Conductivity",
"cond..unit", "Conductivity_Unit",
"water.chem..date", "Water_Chem_Date",
"water", "Water_Name"
), ncol=2, byrow=TRUE)
# added to sub
# "specific.comment..regarding.just.the.corresponding.line.of.data."
subnames <- matrix(c(
"check.time", "Hours", 
"conc.", "concentration_t", 
"dead", "Test_Dead", 
"Test_Species_1_Dead", "Test_Dead", 
"Test_Species_2_Dead", "Test_Dead", 
"ill", "Test_Sick",
"Test_Species_1_Sick", "Test_Sick",
"Test_Species_2_Sick", "Test_Sick",
"specific.comment..regarding.just.the.corresponding.line.of.data.", "Comment_Tank"
), ncol=2, byrow=TRUE)
n[is.na(match(n, mainnames[, 2]))]
c[is.na(match(c, subnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
look <- function(varname) {
if(varname %in% m) print(unique(McGarrydat[, varname]))
if(varname %in% k) print(unique(Slaghtdat[, varname]))
if(varname %in% r) print(unique(Robdat[, varname]))
invisible()
}
look("discomfort")
rm(n, c, m, k, r, a, look)
# calculate Duration
mmax <- tapply(McGarrydat$check.time, McGarrydat$ID, max)
indx <- tapply(McGarrydat$check.time, McGarrydat$ID)
McGarrydat$Duration <- as.numeric(mmax[indx])
Slaghtdat$Duration <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
mmax <- tapply(Robdat$check.time, Robdat$ID, max, na.rm=TRUE)
indx <- tapply(Robdat$check.time, Robdat$ID)
maxtime <- mmax[indx]
Robdat$Duration <- (as.numeric(maxtime) - as.numeric(Robdat$start.time))/60/60
rm(mmax, indx, maxtime)
# split up Nowicki data by species
keepmain <- c("ID", "Test_Type", "Lake", "Stream", "Water_Not_Lake_Or_Stream", 
"Location", "Lab", "Start_Date", "Start_Time", "Test_Number", 
"Chemical", "Formulation", "Concentration", "Water_Temp", "Water_Temp_Unit", "pH", 
"Total_Alkalinity", "Comment_ID", "Burrowed", "Duration", "Folder", "File")
keepsub <- c("ID", "Test_Sick", "Test_Dead", 
"concentration_t", "pH_t", "DO_t", "water_temp_t", "alkalinity_t", 
"concentrationB_t", "Species", "Number_Tested", "Test_Source", "Hours")
Main1 <- Nowdat$main
Main1 <- Main1[, !(names(Main1) %in% c("Test_Species_2", "Number_Tested_Species_2", "Test_Species_2_Source"))]
mdt <- strptime(paste(Main1$Start_Date, Main1$Start_Time), "%m/%d/%Y %H:%M")
Sub1 <- Nowdat$checktimes
Sub1 <- Sub1[, !(names(Sub1) %in% c("Test_Species_2_Sick", "Test_Species_2_Dead"))]
sdt <- strptime(paste(Sub1$Check_Date, Sub1$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub1$ID, Main1$ID)
Sub1$Species <- Main1$Test_Species_1[sm]
Sub1$Number_Tested <- Main1$Number_Tested_Species_1[sm]
Sub1$Test_Source <- Main1$Test_Species_1_Source[sm]
Sub1$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main1) <- recode(names(Main1), mainnames[, 1], mainnames[, 2])
Main1 <- Main1[, keepmain]
names(Sub1) <- recode(names(Sub1), subnames[, 1], subnames[, 2])
Sub1 <- Sub1[, keepsub]
Main2 <- Nowdat$main
Main2 <- Main2[, !(names(Main2) %in% c("Test_Species_1", "Number_Tested_Species_1", "Test_Species_1_Source"))]
mdt <- strptime(paste(Main2$Start_Date, Main2$Start_Time), "%m/%d/%Y %H:%M")
Sub2 <- Nowdat$checktimes
Sub2 <- Sub2[, !(names(Sub2) %in% c("Test_Species_1_Sick", "Test_Species_1_Dead"))]
sdt <- strptime(paste(Sub2$Check_Date, Sub2$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub2$ID, Main2$ID)
Sub2$Species <- Main2$Test_Species_2[sm]
Sub2$Number_Tested <- Main2$Number_Tested_Species_2[sm]
Sub2$Test_Source <- Main2$Test_Species_2_Source[sm]
Sub2$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main2) <- recode(names(Main2), mainnames[, 1], mainnames[, 2])
Main2 <- Main2[, keepmain]
names(Sub2) <- recode(names(Sub2), subnames[, 1], subnames[, 2])
Sub2 <- Sub2[, keepsub]
all.equal(Main1, Main2)
Main <- Main1
Sub <- rbind(Sub1, Sub2)
Main$Chemical <- Nowdat$chemicals$chemical.desc[match(Main$Chemical, Nowdat$chemicals$chemical)]
Main$Formulation <- Nowdat$formulations$formulation.desc[match(Main$Formulation, Nowdat$formulations$formulation)]
Main$Lab <- Nowdat$labs$lab.name[match(Main$Lab, Nowdat$labs$lab)]
Main$Test_Type <- Nowdat$testtypes$test.type.desc[match(Main$Test_Type, Nowdat$testtypes$test.type)]
Main$Start_Date <- as.Date(Main$Start_Date, "%m/%d/%Y")
head(Main)
head(Sub)
rm(keepmain, keepsub, Main1, mdt, Sub1, sdt, sm, Main2, Sub2)
# split up others into a main and a sub
# eliminate   c("alk..unit", "conc..unit", "container", "cumulative..dead", "cumulative..ill", "discomfort", "end.date", "end.time")
combine.comments <- function(df) {
# combine general comments for ID into one field if they are spread across several rows
sel <- !is.na(df$Comment_ID)
combined <- tapply(df$Comment_ID[sel], df$ID[sel], paste, collapse="; ")
newcom <- rep("", dim(df)[1])
newcom[match(names(combined), df$ID)] <- combined
newcom
}
names(McGarrydat) <- recode(names(McGarrydat), mainnames[, 1], mainnames[, 2])
names(McGarrydat) <- recode(names(McGarrydat), subnames[, 1], subnames[, 2])
McGarrydat$Comment_ID <- combine.comments(McGarrydat)
m.main <- McGarrydat[!is.na(McGarrydat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Conductivity", "Conductivity_Unit", "Test_Number", "pH", "Total_Alkalinity", 
"Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
a <- m.main$Start_Time
a1 <- floor(a/100)
a2 <- a - 100*a1
m.main$Start_Date <- as.Date(m.main$Start_Date)
m.main$Start_Time <- paste(substring(100+a1, 2), substring(100+a2, 2), sep=":")
m.sub <- McGarrydat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours", 
"Test_Sick", "Test_Dead", "Comment_Tank", "ID", "Row")]
m.sub$concentration_t <- fill(m.sub$concentration_t)
m.sub$Test_Species <- fill(m.sub$Test_Species)
m.sub$Number_Tested  <- fill(m.sub$Number_Tested)
m.sub$Test_Sick[is.na(m.sub$Test_Sick)] <- 0
m.sub$Test_Dead[is.na(m.sub$Test_Dead)] <- 0
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2])
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2])
Slaghtdat$Comment_ID <- combine.comments(Slaghtdat)
dt1 <- fill(as.numeric(Slaghtdat$Start_Time))
dt2 <- as.numeric(strptime(paste("1899-12-31", substring(as.character(Slaghtdat$Hours + 10000), 2)), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Slaghtdat$Hours <- hrs
k.main <- Slaghtdat[!is.na(Slaghtdat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Test_Number", "pH", "Total_Alkalinity", "Chemical", 
"Formulation", "Folder", "File", "Sheet", "Row", "Aerated", "Comment_ID", "ID", "Duration")]
k.main$Start_Date <- as.Date(k.main$Start_Date)
k.main$Start_Time <- format(k.main$Start_Time, "%H:%M")
k.sub <- Slaghtdat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID", "Row")]
k.sub$concentration_t <- fill(k.sub$concentration_t)
k.sub$Test_Species <- fill(k.sub$Test_Species)
k.sub$Number_Tested  <- fill(k.sub$Number_Tested)
k.sub$Test_Sick[is.na(k.sub$Test_Sick)] <- 0
k.sub$Test_Dead[is.na(k.sub$Test_Dead)] <- 0
names(Robdat) <- recode(names(Robdat), mainnames[, 1], mainnames[, 2])
names(Robdat) <- recode(names(Robdat), subnames[, 1], subnames[, 2])
Robdat$Comment_ID <- combine.comments(Robdat)
dt1 <- fill(as.numeric(Robdat$Start_Time))
dt2 <- as.numeric(Robdat$Hours)
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Robdat$Hours <- fill(hrs)
r.main <- Robdat[!is.na(Robdat$Start_Date), c("Test_Type", "Lake", "Stream", "Water_Name", "Location", "Start_Date", 
"Start_Time", "Water_Chem_Date", "Water_Temp", "Water_Temp_Unit", 
"pH", "Total_Alkalinity", "Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
r.main$Lake <- recode(r.main$Lake, c("S", "H", "NYO"), c(1, 3, 5))
r.main$Start_Date <- as.Date(r.main$Start_Date)
r.main$Start_Time <- format(r.main$Start_Time, "%H:%M")
r.main$Water_Chem_Date <- as.Date(r.main$Water_Chem_Date)
r.sub <- Robdat[, c("concentration_t", "Test_Species", "Number_Tested", 
"Hours", "Test_Sick", "Test_Dead", "Comment_Tank", "Row", "ID")]
r.sub$Test_Species <- fill(r.sub$Test_Species)
r.sub$Number_Tested  <- fill(r.sub$Number_Tested)
r.sub$Test_Sick[is.na(r.sub$Test_Sick)] <- 0
r.sub$Test_Dead[is.na(r.sub$Test_Dead)] <- 0
rm(combine.comments, a, a1, a2, dt1, dt2, hrs, mainnames, subnames)
showme <- function(df, id) {
print(df[df$ID %in% id, ])
}
b <- with(k.sub, k.sub$ID[!is.na(Test_Species) & is.na(Number_Tested)])
showme(k.main, b)
showme(k.sub, b)
rm(showme)
a <- merge(
cbind(names=names(Main), nclass=sapply(lapply(Main, class), "[", 1)),
cbind(names=names(m.main), mclass=sapply(lapply(m.main, class), "[", 1)), all=TRUE)
b <- merge(a,
cbind(names=names(k.main), kclass=sapply(lapply(k.main, class), "[", 1)), all=TRUE)
c <- merge(b,
cbind(names=names(r.main), rclass=sapply(lapply(r.main, class), "[", 1)), all=TRUE)
c
a <- merge(
cbind(names=names(Sub), nclass=sapply(lapply(Sub, class), "[", 1)),
cbind(names=names(m.sub), mclass=sapply(lapply(m.sub, class), "[", 1)), all=TRUE)
b <- merge(a,
cbind(names=names(k.sub), kclass=sapply(lapply(k.sub, class), "[", 1)), all=TRUE)
c <- merge(b,
cbind(names=names(r.sub), rclass=sapply(lapply(r.sub, class), "[", 1)), all=TRUE)
c
rm(a, b, c)
all.main <- rbind.fill(Main, m.main, k.main, r.main)
all.sub <- rbind.fill(Sub, m.sub, k.sub, r.sub)
####################
# need to revisit all NOWICKI comments and change them from general to specific as needed
####################
attach(all.main)
# fix Aerated
unique(Aerated)
all.main$Aerated <- recode(Aerated, c("aerated", "aeraated", "Aerated"), c("Yes", "Yes", "Yes"))
nota1 <- grep("no(n|t)( |-)aer", Comment_ID, ignore.case=TRUE)
nota2 <- grep("no aer", Comment_ID, ignore.case=TRUE)
nota3 <- grep("non- aer", Comment_ID, ignore.case=TRUE)
nota4 <- grep("unaer", Comment_ID, ignore.case=TRUE)
nota <- unique(c(nota1, nota2, nota3, nota4))
all.main$Aerated[nota] <- "No"
parta1 <- grep("no overnight aeration", Comment_ID, ignore.case=TRUE)
parta2 <- grep("power", Comment_ID, ignore.case=TRUE)
parta3 <- grep("Air was off", Comment_ID, ignore.case=TRUE)
parta4 <- grep("airstone left out", Comment_ID, ignore.case=TRUE)
parta <- unique(c(parta1, parta2, parta3, parta4))
all.main$Aerated[parta] <- "Partial"
assa <- grep("Assumed to have aeration", Comment_ID, ignore.case=TRUE)
all.main$Aerated[assa] <- "Assumed"
alla <- grep("aer", Comment_ID, ignore.case=TRUE)
yesa <- alla[!(alla %in% c(nota, parta, assa))]
all.main$Aerated[yesa] <- "Yes"
all.main$Aerated[Test_Type=="Static Aerated"] <- "Yes"
unique(all.main$Aerated)
# fix Conductivity_Unit
unique(Conductivity_Unit)
all.main$Conductivity_Unit <- recode(Conductivity_Unit, c("at 20C", "at 25C", "at 20c", "At 20C"), c("@20C", "@25C", "@20C", "@20C"))
unique(all.main$Conductivity_Unit)
# fix Water_Name
unique(Water_Name)
all.main$Water_Name[!is.na(Water_Name) & Water_Name=="lake Huron"] <- "Lake Huron"
unique(all.main$Water_Name)
# fix Duration
look <- cut(Duration, c(-1e9, 1, 35, 1e9), labels=FALSE)
Duration[!is.na(look) & look > 2.5]
# error in Nowicki Duration
all.main$Duration[!is.na(Duration) & Duration==224] <- 24
look <- cut(Duration, c(-1e9, 1, 35, 1e9), labels=FALSE)
Duration[!is.na(look) & look > 2.5]
# fix Burrowed
table(Folder, Burrowed)
all.main[!is.na(Burrowed) & Burrowed==2, ]
# ask Nowicki about ID=10881 with Burrowed=2
# fix Water_Temp_Unit
mytable(Water_Temp > 40, Water_Temp_Unit)
                  # C     F  <NA>
  # FALSE     7  1677     0     0
  # TRUE      0     2  1890     6
  # <NA>  13311     2     0     4
unique(Water_Temp_Unit)
unit <- recode(Water_Temp_Unit, c("", "C", "F", NA), c("", "C", "F", ""))
unique(unit)
temp <- cut(Water_Temp, c(-50, 40, 100), labels=FALSE)
temp[is.na(temp)] <- 0
unique(temp)
okay <- (temp==0 & unit=="") | (temp==1 & unit=="C") | (temp==2 & unit=="F")
# let Shawn know ...
all.main[!okay & Folder=="Nowicki", c("ID", "Water_Temp", "Water_Temp_Unit")]
         # ID Water_Temp Water_Temp_Unit
# 8057   8070        5.0                
# 12555 12577         NA               C
# 12785 12810         NA               C
# 12808 12834       15.0                
# 13463 13494       21.0                
# 13525 13556        6.0                
# 13691 13723       13.0                
# 13735 13767       17.0                
# 13852 13885       45.0               C
# 14230 14264       48.0               C
# 14500 14535       17.4                
# change all units according to water temperature
all.main$Water_Temp_Unit <- recode(temp, 0:2, c("", "C", "F"))
# fix Concentration
# ask ... what is the meaning of concentration in the main table???
look <- ID[!is.na(Concentration) & Concentration>100]
all.sub[all.sub$ID %in% look, ]
all.main[ID %in% look, ]
# fix Formulation
mytable(Formulation)
all.main$Formulation <- recode(Formulation, c("Hoeschst 37.6%", "Maumee 30", "Maumee 30% "), c("Hoechst 37.6%", "Maumee 30%", "Maumee 30%"))
mytable(all.main$Formulation)
# fix Chemical
mytable(Chemical)
fixit <- data.frame(
before = c("TFM+Bayuscide", "TFM+Bayluscide", "TFM + Bayer (.5%)-Mqt", "TFM + 0.5%Bayluscide", "TFM+0.5% Bayluscide", 
"TFM + Bayer (.8%)-Mqt", "TFM+0.8% Baylusicde", "TFM + Bayer (1%)-Mqt", "TFM + Bayer (1%)", "TFM+1.0% Bayluscide", "TFM + 1% Bayluscide", 
"TFM + 1.0% Bayluscide", "TFM + 1% Niclosamide", "TFM + 1.5% Niclosamide", "TFM + Bayer (2%)", "TFM + Bayer (2%)-HB", "TFM + Bayer (2%)-Mqt"), 
after = c("TFM + Bayluscide", "TFM + Bayluscide", "TFM + 0.5% Bayluscide (Mqt)", "TFM + 0.5% Bayluscide", "TFM + 0.5% Bayluscide", "TFM + 0.8% Bayluscide (Mqt)", 
"TFM + 0.8% Bayluscide", "TFM + 1.0% Bayluscide (Mqt)", "TFM + 1.0% Bayluscide", "TFM + 1.0% Bayluscide", "TFM + 1.0% Bayluscide", "TFM + 1.0% Bayluscide", 
"TFM + 1.0% Bayluscide", "TFM + 1.5% Bayluscide", "TFM + 2.0% Bayluscide", "TFM + 2.0% Bayluscide (HB)", "TFM + 2.0% Bayluscide (Mqt)")
)
all.main$Chemical <- recode(Chemical, fixit$before, fixit$after)
mytable(all.main$Chemical)
# fix Lab
unique(all.main$Lab)
all.main$Lab <- recode(Lab, c("Mobile Lab 2", "Moblie Lab 2", "Hammond bay", "Hmmond Bay"), 
c("Mobile Lab. No. 2", "Mobile Lab. No. 2", "Hammond Bay", "Hammond Bay"))
unique(Lab)
# fix Test_Type
unique(Test_Type)
all.main$Test_Type <- recode(Test_Type, c("Flow", "Flow through", "Flow Through", "static", "Static Aerated"), 
c("Flow Thru", "Flow Thru", "Flow Thru", "Static", "Static"))
unique(all.main$Test_Type)
detach(all.main)
plotdf(all.main)
attach(all.main)
all.main[Conductivity>400, ]
all.main[!is.na(Conductivity) & Conductivity>400, ]
.SavedPlots <- NULL
cleanup()
q()
dat <- read.csv("C:/JVA/Consult/Kraus/Gill net walleye/GLIMMIX_alldata_commonmeshes (1).txt", sep="",
header=FALSE, col.names=c("year", "type", "mesh", "we", "holes", "catch", "secchi", "site", "serial"))
# site is a "block" effect representing the "pair" ... both location and year information
# mesh is a covariate
# type is a factor
dat <- dat[order(dat$year, dat$site, dat$type, dat$mesh), ]
attach(dat)
obs <- interaction(year, site, type, mesh)
dat[obs %in% obs[duplicated(obs)], ]
search()
detach()
dat <- read.csv("C:/JVA/Consult/Kraus/Gill net walleye/GLIMMIX_alldata_commonmeshes (1).txt", sep="",
header=FALSE, col.names=c("year", "type", "mesh", "we", "holes", "catch", "secchi", "site", "serial"))
# site is a "block" effect representing the "pair" ... both location and year information
# mesh is a covariate
# type is a factor
# for now, subset site<30, sites greater than 29 were fished by OMNR, and their data were structured differently
dat <- dat[order(dat$year, dat$site, dat$type, dat$mesh), ]
attach(dat)
obs <- interaction(year, site, type, mesh)
dat[obs %in% obs[duplicated(obs)], ]
detach(dat)
sub <- dat[dat$site < 29.5, ]
dim(dat)
dim(sub)
attach(sub)
obs <- interaction(year, site, type, mesh)
sub[obs %in% obs[duplicated(obs)], ]
head(sub)
mytable(obs)
mytable(paste(site, year), paste(type, mesh))
mytable(paste(site, year), paste(type, mesh))
mytable(paste(format(site), year), paste(type, format(mesh)))
mytable(paste(format(site), year), mesh, type)
mytable(paste(format(site), year), paste(type, format(mesh)))
mytable(paste0(format(site), "(", year, ")"), paste0(type, "(", format(mesh), ")"))
mytable(paste(format(site), year, sep="-"), paste(type, format(mesh), sep="-"))
mytable(paste(format(site), year, sep="-"), paste(type, format(10*mesh), sep="-"))
sy <- paste(format(site), year, sep="-")
tm <- paste(type, format(10*mesh), sep="-")
# design
mytable(sy, tm)
# covariate
tapply(secchi, list(sy, tm), mean)
# response
tapply(we, list(sy, tm), mean)
lapply(sub, class)
search()
detach()
dat <- read.csv("C:/JVA/Consult/Kraus/Gill net walleye/GLIMMIX_alldata_commonmeshes (1).txt", sep="",
header=FALSE, col.names=c("year", "type", "mesh", "we", "holes", "catch", "secchi", "site", "serial"))
dat$sitef <- as.factor(dat$site)
dat$typef <- as.factor(dat$type)
# site is a "block" effect representing the "pair" ... both location and year information
# mesh is a covariate
# type is a factor
# for now, subset site<30, sites greater than 29 were fished by OMNR, and their data were structured differently
dat <- dat[order(dat$year, dat$site, dat$type, dat$mesh), ]
attach(dat)
obs <- interaction(year, site, type, mesh)
dat[obs %in% obs[duplicated(obs)], ]
detach(dat)
sub <- dat[dat$site < 29.5, ]
attach(sub)
obs <- interaction(year, site, type, mesh)
sub[obs %in% obs[duplicated(obs)], ]
sy <- paste(format(site), year, sep="-")
tm <- paste(type, format(10*mesh), sep="-")
# design
mytable(sy, tm)
# covariate
tapply(secchi, list(sy, tm), mean)
# response
tapply(we, list(sy, tm), mean)
fit <- glm(we ~ sitef + poly(mesh, 2) + typef + sitef:typef + poly(mesh, 2):typef)
summary(fit)
fit <- aov(we ~ sitef + poly(mesh, 2) + typef + sitef:typef + poly(mesh, 2):typef)
summary(fit)
fit <- aov(we ~ sitef*poly(mesh, 2)*poly(secchi, 2)*typef)
summary(fit)
?aov
?formula
fit <- glm(we ~ sitef*poly(mesh, 2)*poly(secchi, 2)*typef)
summary(fit)
fit <- aov(we ~ (sitef + poly(mesh, 2) + poly(secchi, 2) + typef)^2)
summary(fit)
fit <- glm(we ~ (sitef + poly(mesh, 2) + poly(secchi, 2) + typef)^2)
summary(fit)
fit <- aov(we ~ (sitef + poly(mesh, 2) + secchi + typef)^2)
summary(fit)
summary(sub)
fit <- aov(we ~ (sitef + poly(mesh, 2) + typef)^3)
summary(fit)
step(fit)
fit2 <- step(fit)
summary(fit2)
summary(fit)
boxcox(fit)
fit <- aov(we ~ (sitef + poly(mesh, 2) + typef)^3)
fit2 <- step(fit, trace=FALSE)
fit <- aov(we+1 ~ (sitef + poly(mesh, 2) + typef)^3)
fit2 <- step(fit, trace=FALSE)
boxcox(fit2)
locator()
locator()
sort(we)
log(we+1)
sort(log(we+1))
fit <- aov(log(we+1)+1 ~ (sitef + poly(mesh, 2) + typef)^3)
fit2 <- step(fit, trace=FALSE)
boxcox(fit2)
fit <- aov(we^0.25 + 1 ~ (sitef + poly(mesh, 2) + typef)^3)
fit2 <- step(fit, trace=FALSE)
boxcox(fit2)
fit <- aov(log(we+1) + 1 ~ (sitef + poly(mesh, 2) + typef)^3)
fit2 <- step(fit, trace=FALSE)
windows()
boxcox()
fit <- aov(sqrt(we) + 1 ~ (sitef + poly(mesh, 2) + typef)^3)
fit2 <- step(fit, trace=FALSE)
windows()
boxcox()
fit <- aov(log(we+1) + 1 ~ (sitef + poly(mesh, 2) + typef)^3)
fit2 <- step(fit, trace=FALSE)
windows()
boxcox(fit2)
fit <- aov(sqrt(we) + 1 ~ (sitef + poly(mesh, 2) + typef)^3)
fit2 <- step(fit, trace=FALSE)
windows()
boxcox(fit2)
fit <- aov(sqrt(we) ~ (sitef + poly(mesh, 2) + typef)^3)
fit2 <- step(fit, trace=FALSE)
summary(fit2)
length(unique(site))
# first fit a model using site as the informative variable (incorporating abundance and clarity)
fit <- aov(sqrt(we) ~ (sitef + poly(mesh, 2) + typef)^3)
fit2 <- step(fit, trace=FALSE)
sus <- sort(unique(site))
windows(h=9, w=6.5)
par(mfrow=c(3, 10), mar=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="")
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
points(mesh, we, subset=sel2, pch=j, col=j)
lines(mesh, fit2$fitted^2, subset=sel2, col=j)
}
}
sus <- sort(unique(site))
windows(h=9, w=6.5)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="")
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
points(mesh, we, subset=sel2, pch=j, col=j)
lines(mesh, fit2$fitted^2, subset=sel2, col=j)
}
}
sus <- sort(unique(site))
windows(h=9, w=6.5)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="")
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
points(mesh[sel2], we[sel2], pch=j, col=j)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j)
}
}
sus <- sort(unique(site))
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="")
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
points(mesh[sel2], we[sel2], pch=j, col=j)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j)
}
}
sus <- sort(unique(site))
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE)
if(i %in% 1:10) axis(1, outer=TRUE)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
points(mesh[sel2], we[sel2], pch=j, col=j)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j)
}
}
sus <- sort(unique(site))
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=1:10)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
points(mesh[sel2], we[sel2], pch=j, col=j)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j)
}
}
sus <- sort(unique(site))
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=1:10)
box()
mtext(sus[i], side=3, line=-2)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
points(mesh[sel2], we[sel2], pch=j, col=j)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j)
}
}
head(sub)
sus <- sort(unique(site))
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=1:10)
box()
mtext(sus[i], side=3, line=-2)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[i], col=j+1)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j+1)
}
}
sus <- sort(unique(site))
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=1:10)
box()
mtext(sus[i], side=3, line=-2)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j+1)
}
}
tapply(we, type, median)
tapply(we, site, median)
medsite <- tapply(we, site, median)
meansite <- tapply(we, site, mean)
sus <- sort(unique(site))[order(medsite, meansite)]
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=1:10)
box()
mtext(sus[i], side=3, line=-2)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j+1)
}
}
mtext("Mesh", side=1, outer=TRUE)
mtext("Walleye catch", side=2, outer=TRUE)
sus <- sort(unique(site))[order(medsite, meansite)]
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=1:10)
box()
mtext(sus[i], side=3, line=-1.5, cex=0.8)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j+1)
}
}
mtext("Mesh", side=1, outer=TRUE, line=3)
mtext("Walleye catch", side=2, outer=TRUE, line=3)
sus <- sort(unique(site))[order(medsite, meansite)]
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=1:10)
box()
mtext(sus[i], side=3, line=-1.5, cex=0.8)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j+1)
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
sus <- sort(unique(site))[order(medsite, meansite)]
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=1:10)
box()
mtext(sus[i], side=3, line=-1.5, cex=0.8, adj=0.99)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j+1)
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
sus <- sort(unique(site))[order(medsite, meansite)]
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=1:10)
box()
mtext(sus[i], side=3, line=-1.5, cex=0.8, adj=0.96)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j+1)
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
sus <- sort(unique(site))[order(medsite, meansite)]
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=1:10)
box()
mtext(format(sus[i]), side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j+1)
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
sus <- sort(unique(site))[order(medsite, meansite)]
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=1:10)
box()
mtext(format(sus)[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j+1)
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
sus <- sort(unique(site))[order(-medsite, -meansite)]
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=1:10)
box()
mtext(format(sus)[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j+1)
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
c(2:4, "")
sus <- sort(unique(site))[order(-medsite, -meansite)]
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=2:5, lables=c(2:4, ""))
box()
mtext(format(sus)[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j+1)
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
sus <- sort(unique(site))[order(-medsite, -meansite)]
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=2:5, labels=c(2:4, ""))
box()
mtext(format(sus)[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j+1)
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
table(mesh)
sort(table(mesh))
head(sub)
dat$other <- dat$catch - dat$we
search()
detach()
dat <- dat[order(dat$year, dat$site, dat$type, dat$mesh), ]
attach(dat)
obs <- interaction(year, site, type, mesh)
dat[obs %in% obs[duplicated(obs)], ]
detach(dat)
sub <- dat[dat$site < 29.5, ]
attach(sub)
obs <- interaction(year, site, type, mesh)
sub[obs %in% obs[duplicated(obs)], ]
head(sub)
summary(sub)
sub[other< 0.5, ]
sub[other< -0.5, ]
search()
detach()
dat <- read.csv("C:/JVA/Consult/Kraus/Gill net walleye/GLIMMIX_alldata_commonmeshes (1).txt", sep="",
header=FALSE, col.names=c("year", "type", "mesh", "we", "holes", "catch", "secchi", "site", "serial"))
dat$sitef <- as.factor(dat$site)
dat$typef <- as.factor(dat$type)
dat$other <- dat$catch - dat$we
# need to check on an error here ... one case with catch=7 and we=8
dat[dat$other < -0.5, ]
    # year type mesh we holes catch secchi site serial sitef typef other
# 535 2012    3  3.5  8  3933     7      1   23    834    23     3    -1
# site is a "block" effect representing the "pair" ... both location and year information
# mesh is a covariate
# type is a factor
# for now, subset site<30, sites greater than 29 were fished by OMNR, and their data were structured differently
dat <- dat[order(dat$year, dat$site, dat$type, dat$mesh), ]
attach(dat)
obs <- interaction(year, site, type, mesh)
dat[obs %in% obs[duplicated(obs)], ]
detach(dat)
sub <- dat[dat$site < 29.5 & dat$other > -0.5, ]
attach(sub)
obs <- interaction(year, site, type, mesh)
sub[obs %in% obs[duplicated(obs)], ]
head(sub)
summary(sub)
# now, can the site to site variability be adequately explained by abundance of other species and clarity?
fit <- aov(sqrt(we) ~ (sqrt(other) + secchi + poly(mesh, 2) + typef)^3)
summary(fit)
fit <- aov(sqrt(we) ~ (sqrt(other) + secchi + poly(mesh, 2) + typef)^4)
summary(fit)
fit2 <- step(fit, trace=FALSE)
summary(fit2)
# first fit a model using site as the informative variable (incorporating abundance and clarity)
fit <- aov(sqrt(we) ~ (sitef + poly(mesh, 2) + typef)^3)
fit2 <- step(fit, trace=FALSE)
summary(fit2)
# first fit a model using site as the informative variable (incorporating abundance and clarity)
fit <- aov(sqrt(we) ~ (sitef + poly(mesh, 2) + typef)^2)
fit2 <- step(fit, trace=FALSE)
summary(fit2)
# now, can the site to site variability be adequately explained by abundance of other species and clarity?
fit <- aov(sqrt(we) ~ (sqrt(other) + secchi + poly(mesh, 2) + typef)^2)
fit2 <- step(fit, trace=FALSE)
summary(fit)
summary(fit2)
AICc(fit, fit2)
AICc(list(fit, fit2))
# first fit a model using site as the informative variable (incorporating abundance and clarity)
fit <- aov(sqrt(we) ~ (sitef + poly(mesh, 2) + typef)^2)
fit2 <- step(fit, trace=FALSE)
# now, can the site to site variability be adequately explained by abundance of other species and clarity?
fit3 <- aov(sqrt(we) ~ (sqrt(other) + secchi + poly(mesh, 2) + typef)^2)
fit4 <- step(fit3, trace=FALSE)
AICc(fit2, fit4)
AICc(list(fit2, fit4))
names(fit2)
names(summary(fit2))
broom
library(broom)
?broom
glance(fit2)
as.glm
?as.glm
??as.glm
# first fit a model using site as the informative variable (incorporating abundance and clarity)
fit <- aov(sqrt(we) ~ (sitef + poly(mesh, 2) + typef)^2)
fit2 <- step(fit, trace=FALSE)
summary(fit2)
fit <- lm(sqrt(we) ~ (sitef + poly(mesh, 2) + typef)^2)
fit2 <- step(fit, trace=FALSE)
summary(fit2)
glance(fit2)
# now, can the site to site variability be adequately explained by abundance of other species and clarity?
fit3 <- aov(sqrt(we) ~ (sqrt(other) + secchi + poly(mesh, 2) + typef)^2)
fit4 <- step(fit3, trace=FALSE)
summary(fit4)
fit3 <- lm(sqrt(we) ~ (sqrt(other) + secchi + poly(mesh, 2) + typef)^2)
fit4 <- step(fit3, trace=FALSE)
glance(fit4)
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=2:5, labels=c(2:4, ""))
box()
mtext(format(sus)[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], fit4$fitted[sel2]^2, col=j+1)
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
q()
?subset
?"["
df <- data.frame(x=c(1, 2, NA, 4, 20), y=c(5, NA, 6, 30, 4))
df
df[df$x>5 | df$y > 8, ]
df[subset(df$x>5) | subset(df$y > 8), ]
subset(df, x>5)
subset(df, x>5 | y >8)
subset
subset.default
subset.data.frame
mysub <- function(x, subset) {
# modified version of subset.data.frame
e <- substitute(subset)
r <- eval(e, x, parent.frame())
r & !is.na(r)
}
df[mysub(x > 8 | y > 8), ]
df[mysub(df, x > 8 | y > 8), ]
mysub(df, x > 8 | y > 8)
df
x <- df
subset <- x > 8 | y > 8
e <- substitute(subset)
e
class(e)
eval(e, x, parent.frame())
mysub <- function(x, subset) {
# modified version of subset.data.frame
e <- substitute(subset)
r <- eval(e, x, parent.frame())
r & !is.na(r)
}
df <- data.frame(x=c(1, 2, NA, 4, 20), y=c(5, NA, 6, 30, 4))
mysub(df, x > 8 | y > 8)
df[mysub(df, x > 8 | y > 8), ]
subset(df, x > 8 | y > 8)
z <- c(1, 2, NA, 4, 20)
subset(z, z > 8)
subdex <- function(x, subset) {
# index of selected subset
# modified version of subset.data.frame
r <- if(missing(subset)) {
rep_len(TRUE, nrow(x))
} else {
e <- substitute(subset)
r <- eval(e, x, parent.frame())
if (!is.logical(r)) stop("'subset' must be logical")
r & !is.na(r)
}
}
df <- data.frame(x=c(1, 2, NA, 4, 20), y=c(5, NA, 6, 30, 4))
subdex(df, x > 8 | y > 8)
df[subdex(df, x > 8 | y > 8), ]
# compare to subset
subset(df, x > 8 | y > 8)
subdex(z, z > 8)
subset(z, z > 8)
?subset.default
subset.default
dim(z)
subdex <- function(x, subset) {
# index of selected subset
# modified version of subset.data.frame
r <- if(missing(subset)) {
rep_len(TRUE, nrow(x))
} else {
if(is.null(dim(x))) {
subset & !is.na(subset)
} else {
e <- substitute(subset)
r <- eval(e, x, parent.frame())
if (!is.logical(r)) stop("'subset' must be logical")
r & !is.na(r)
}
}
r
}
subdex(z, z > 8)
subdex <- function(x, subset) {
# index of selected subset
# modified version of subset.data.frame
r <- if(missing(subset)) {
rep_len(TRUE, nrow(x))
} else {
if(is.null(dim(x))) {
subset & !is.na(subset)
} else {
e <- substitute(subset)
r <- eval(e, x, parent.frame())
if (!is.logical(r)) stop("'subset' must be logical")
r & !is.na(r)
}
}
r
}
df <- data.frame(x=c(1, 2, NA, 4, 20), y=c(5, NA, 6, 30, 4))
subdex(df, x > 8 | y > 8)
df[subdex(df, x > 8 | y > 8), ]
# compare to subset
subset(df, x > 8 | y > 8)
z <- c(1, 2, NA, 4, 20)
subdex(z, z > 8)
z[subdex(z, z > 8)]
# compare to subset
subset(z, z > 8)
m <- as.matrix(df)
m
m <- as.matrix(df)
subdex(m, x > 8 | y > 8)
m[subdex(m, x > 8 | y > 8), ]
# compare to subset
subset(m, x > 8 | y > 8)
subset.matrix
rep_len
?rep_len
subdex <- function(x, subset) {
# index of selected subset
# modified version of subset.data.frame
r <- if(missing(subset)) {
rep_len(TRUE, nrow(x))
} else {
if(is.null(dim(x))) {
subset & !is.na(subset)
} else {
e <- substitute(subset)
r <- eval(e, x, parent.frame())
if (!is.logical(r)) stop("'subset' must be logical")
r & !is.na(r)
}
}
r
}
df <- data.frame(x=c(1, 2, NA, 4, 20), y=c(5, NA, 6, 30, 4))
subdex(df, x > 8 | y > 8)
df[subdex(df, x > 8 | y > 8), ]
# compare to subset
subset(df, x > 8 | y > 8)
z <- c(1, 2, NA, 4, 20)
subdex(z, z > 8)
z[subdex(z, z > 8)]
# compare to subset
subset(z, z > 8)
class(m)
subdex <- function(x, subset) {
# index of selected subset
# modified version of subset.data.frame
r <- if(missing(subset)) {
rep_len(TRUE, nrow(x))
} else {
if(is.null(dim(x))) {
subset & !is.na(subset)
} else {
if(class(x)=="matrix") x <- as.data.frame(x)
e <- substitute(subset)
r <- eval(e, x, parent.frame())
if (!is.logical(r)) stop("'subset' must be logical")
r & !is.na(r)
}
}
r
}
m <- as.matrix(df)
subdex(m, x > 8 | y > 8)
m[subdex(m, x > 8 | y > 8), ]
class(m[subdex(m, x > 8 | y > 8), ])
subset(m, m[, "x"] > 8 | m[, "y"] > 8)
subset(m, x > 8 | y > 8)
#' Subset Index
#'
#' Return the index of vectors, matrices or data frames which meet conditions.
#' @param x Vector, matrix, or data frame to be subsetted.
#' @param subset Logical expression indicating elements or rows to keep; missing values are taken as FALSE.
#' @return Logical vector of indices, the same length as \code{x} (if \code{x} is a vector) or the rows of \code{x} (if \code{x} is a matrix or data frame).
#' @export
#' @seealso \code{\link{subset}}, from which the function was derived.
#' @examples 
#' df <- data.frame(x=c(1, 2, NA, 4, 20), y=c(5, NA, 6, 30, 4))
#' subdex(df, x > 8 | y > 8)
#' df[subdex(df, x > 8 | y > 8), ]
#' # compare to subset
#' subset(df, x > 8 | y > 8)
#' 
#' m <- as.matrix(df)
#' subdex(m, x > 8 | y > 8)
#' m[subdex(m, x > 8 | y > 8), ]
#' # compare to subset
#' subset(m, m[, "x"] > 8 | m[, "y"] > 8)
#' 
#' z <- c(1, 2, NA, 4, 20)
#' subdex(z, z > 8)
#' z[subdex(z, z > 8)]
#' # compare to subset
#' subset(z, z > 8)
subdex <- function(x, subset) {
# index of selected subset
# modified version of subset.data.frame
r <- if(missing(subset)) {
rep_len(TRUE, nrow(x))
} else {
if(is.null(dim(x))) {
subset & !is.na(subset)
} else {
if(class(x)=="matrix") x <- as.data.frame(x)
e <- substitute(subset)
r <- eval(e, x, parent.frame())
if (!is.logical(r)) stop("'subset' must be logical")
r & !is.na(r)
}
}
r
}
df <- data.frame(x=c(1, 2, NA, 4, 20), y=c(5, NA, 6, 30, 4))
subdex(df, x > 8 | y > 8)
df[subdex(df, x > 8 | y > 8), ]
# compare to subset
subset(df, x > 8 | y > 8)
m <- as.matrix(df)
subdex(m, x > 8 | y > 8)
m[subdex(m, x > 8 | y > 8), ]
# compare to subset
subset(m, m[, "x"] > 8 | m[, "y"] > 8)
z <- c(1, 2, NA, 4, 20)
subdex(z, z > 8)
z[subdex(z, z > 8)]
# compare to subset
subset(z, z > 8)
subset(m, y > 8)
?cheat
pkgup("jvamisc")
q()
