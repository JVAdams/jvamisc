df$sensor <- substring(sensor.loc, 1, 7)
df$location <- casefold(substring(sensor.loc, 8, 9))
rm(prefix, sensor.loc)
# number of characters used in date/time variable
dtlen <- nchar(df$datetime)
# print out any records with missing date/time information
df[dtlen==0, ]
# create new date/time variable, with corrected times in the format "2011-07-14 16:15:00"
# it looks like records with date/time length ranging from 13 to 16 are all formatted "7/14/2011 16:15"
# and those with date/time length 20 are all formatted "07/14/11 04:15:00 PM"
dt <- rep("", length(dtlen))
dt[dtlen > 12 & dtlen < 17] <- as.character(strptime(df$datetime[dtlen > 12 & dtlen < 17], "%m/%d/%Y %H:%M"))
dt[dtlen > 19] <- as.character(strptime(df$datetime[dtlen > 19], "%m/%d/%y %I:%M:%S %p"))
date.time <- strsplit(dt, " ")
just.date <- sapply(date.time, "[", 1)
just.time <- strsplit(sapply(date.time, "[", 2), ":")
hh <- sapply(just.time, "[", 1)
mm <- sapply(just.time, "[", 2)
mm <- ifelse(mm < 29.5, 15, 45)
### Ralph, you need this line of code which was in SensorData3.r
### It creates a new variable "dtime" which has the corrected time (__:15 or __:45)
df$dtime <- strptime(paste(just.date, " ", hh, ":", mm, sep=""), "%Y-%m-%d %H:%M")
rm(dt, date.time, just.date, just.time, hh, mm)
# no elimination file, all data considered "good"
df.good <- df
# read in sunrise/sunset data
fiddler <- read.csv(usethesefiles["fiddler"], as.is=TRUE, header=FALSE, skip=2, col.names=c("date", "rise", "set", "light.hrs"))
# fiddler$date looks like this:"7/10/2010"
# fiddler$rise and set look like this:"20:24"
fiddler$sunrise <- strptime(paste(fiddler$date, fiddler$rise), "%m/%d/%Y %H:%M")
fiddler$sunset <- strptime(paste(fiddler$date, fiddler$set), "%m/%d/%Y %H:%M")
fiddler$just.date <- substring(as.character(fiddler$sunrise), 1, 10)
# merge the data with the sunrise/sunset data
df.good$just.date <- substring(as.character(df.good$dtime), 1, 10)
df.long <- merge(df.good, fiddler, all.x=TRUE)
df.long$daylight <- ifelse(df.long$dtime >= df.long$sunrise & df.long$dtime < df.long$sunset, 1, 0)
df.long$xdtime <- paste("x", df.long$dtime)
rm(fiddler, df.good)
# save graphs of uncorrected data to an rtf file
# explore the data
sus <- sort(unique(df.long$site))
sul <- sort(unique(df.long$location))
fig <- function() exploreplot(df.long, "Uncorrected")
j <- 1
fig()
rm(sul, sus)
ls()
rm(C, P, W)
ls()
### note that I am only keeping a character version of the date/time, "xdtime", so that Excel won't mess it up ###
df.long <- df.long[order(df.long$site, df.long$location, df.long$dtime), c("xdtime", "daylight", "site", "sensor", "location", "intensity", "temp")]
# rearrange the long data into a wide format
df2 <- melt(df.long, id.vars=c("site", "location", "xdtime", "sensor", "daylight"), measure.vars=c("intensity", "temp"))
df2$slv <- paste(df2$site, substring(df2$location, 1, 2), df2$sensor, substring(df2$variable, 1, 2), sep="_")
df.wide <- as.data.frame(tapply(df2$value, list(paste(df2$xdtime, df2$daylight, sep="_"), df2$slv), mean))
xdtime.lt <- strsplit(dimnames(df.wide)[[1]], "_")
xdtime <- sapply(xdtime.lt, "[", 1)
daylight <- sapply(xdtime.lt, "[", 2)
df.wide <- cbind(xdtime, daylight, df.wide)
row.names(df.wide) <- seq(dim(df.wide)[1])
rm(xdtime.lt, xdtime, daylight)
# rearrange the long data into a "semi-long" format
df2$locvar <- paste(substring(df2$location, 1, 2), substring(df2$variable, 1, 2), sep="_")
df.semi <- as.data.frame(tapply(df2$value, list(paste(df2$xdtime, df2$daylight, df2$site, sep="_"), df2$locvar), mean))
xdtime.lt.site <- strsplit(dimnames(df.semi)[[1]], "_")
df.semi$xdtime <- sapply(xdtime.lt.site, "[", 1)
df.semi$daylight <- sapply(xdtime.lt.site, "[", 2)
df.semi$site <- sapply(xdtime.lt.site, "[", 3)
columns <- sort(names(df.semi)[!(names(df.semi) %in% c("xdtime", "daylight", "site"))])
df.semi <- df.semi[order(df.semi$site, df.semi$xdtime), c("xdtime", "daylight", "site", columns)]
row.names(df.semi) <- seq(dim(df.semi)[1])
rm(df2, xdtime.lt.site)
# look at the first few rows of each dataframe
table(df.long$site, df.long$location)
head(df.long)
head(df.semi)
df.wide[1:6, 1:min(10, dim(df.wide)[2])]
dim(df.long)
head(df.long)
cleanup()
search()
graphics.off()
# JVA C:\JVA\Consult\Grundel\Karner Heat\Patterson\2014-11-03 Sensor script.r
# TAP "D:\Tammy\ClimateKBBProject\FieldData\HOBOdata2012\WorkingFolder\cvsfiles"Marchv2.r Sensor Data Processing
# 4) could you create additional wide files that are cut into shorter time blocks? 
# 1 year or 6 months or 4 months? This is because excel will not open the entire data set of 2+ years. 
# Excel 2010 limit 1,048,576 rows, 16,384 columns
# This allows for almost 40 records per hour for three years solid in the rows.
date()
tammyfiles <- c(
csvfiles   = "D:\\Tammy\\ClimateKBBProject\\FieldData\\HOBOdata2012\\WorkingFolder\\cvsfilessubset\\",
fiddler    = "D:\\Tammy\\ClimateKBBProject\\FieldData\\HOBOdata2012\\WorkingFolder\\results\\Fiddler2010.csv",
resultsdir = "D:\\Tammy\\ClimateKBBProject\\FieldData\\HOBOdata2012\\WorkingFolder\\results")
ralphfiles <- c(
csvfiles   = "D:\\1 SPSS\\SPSSDATA\\Kbb Climate Change\\Hobo Pendant Sensor Data\\R Scripts of Hobo Reading\\Trial\\",
fiddler    = "D:\\1 SPSS\\SPSSDATA\\Kbb Climate Change\\Hobo Pendant Sensor Data\\R Scripts of Hobo Reading\\TrialElim\\Fiddler2010.csv",
resultsdir = "D:\\1 SPSS\\SPSSDATA\\Kbb Climate Change\\Hobo Pendant Sensor Data\\R Scripts of Hobo Reading\\result")
jeanfiles <- c(
csvfiles   = "C:\\JVA\\Consult\\Grundel\\Karner Heat\\Patterson\\csvfiles2014-11-03\\",
fiddler    = "C:\\JVA\\Consult\\Grundel\\Karner Heat\\Patterson\\results\\Fiddler2010.csv",
resultsdir = "C:\\JVA\\Consult\\Grundel\\Karner Heat\\Patterson\\results")
# no longer need to comment out all the file names
# just indicate which set of file names you want to use here
usethesefiles <- jeanfiles
library(reshape)
library(car)
library(rtf)
### define several functions
startrtf <- function(file=NULL, dir=getwd(), width=8.5, height=11, omi=c(1, 1, 1, 1), quiet=FALSE) {
# create a new RTF file readable by Word
if(is.null(file)) file <- paste0("RGeneratedDocument", Sys.Date())
dirfiledoc <- if(length(grep(".doc", file))>0) paste(dir, file, sep="/") else paste(dir, paste0(file, ".doc"), sep="/")
if(!quiet) cat(paste0("New RTF document created, ", dirfiledoc, "\n"))
RTF(dirfiledoc, width=width, height=height, omi=omi)
}
figu <- function(..., FIG=fig, rtf=doc, w=NULL, h=NULL, rf=300) {
wf <- if(is.null(w)) 6.5 else w
hf <- if(is.null(h)) 8 else h
addNewLine(this=rtf)
addPlot(this=rtf, plot.fun=FIG, width=wf, height=hf, res=rf)
}
endrtf <- function(rtf=doc, details=FALSE, ...) {
if(details==TRUE) {
addPageBreak(rtf, ...)
addSessionInfo(rtf)
}
done(rtf)
}
combine.csv <- function(mydir) {
# combine all csv files in a given directory into a single data frame
# file names
filenames <- list.files(mydir)[grep(".csv", list.files(mydir))]
nfiles <- length(filenames)
# create an empty list where all the files will be stored
files.list <- vector(mode="list", length=nfiles)
for(i in 1:nfiles) {
# read the data into a temporary file
temp <- read.csv(paste(mydir, filenames[i], sep=""), as.is=TRUE, skip=1)[, 1:4]
names(temp) <- c("no", "datetime", "temp", "intensity")
# get rid of records with all missing values
temp <- temp[!apply(is.na(temp[, c(1, 3:4)]), 1, all), ]
# add a new column identifying the source file
temp$source <- filenames[i]
# put the data into the list
files.list[[i]] <- temp
}
# combined each of the files from the list into one single file
do.call(rbind, files.list)
}
capwords <- function(s, strict = FALSE) {
    cap <- function(s) paste(toupper(substring(s,1,1)),
                  {s <- substring(s,2); if(strict) tolower(s) else s},
                             sep = "", collapse = " " )
    sapply(strsplit(s, split = " "), cap, USE.NAMES = !is.null(names(s)))
}
exploreplot <- function(df, title1) {
par(mfcol=c(2, length(sul)), mar=c(3, 3.5, 1, 0), oma=c(2, 2, 4, 1))
for(i in seq(along=sul)) {
sel <- df$location==sul[i] & df$site==sus[j] & !is.na(df$dtime)
sel1 <- sel & !is.na(df$intensity)
sel2 <- sel & !is.na(df$temp)
if(sum(sel1)>0) {
plot(df$dtime[sel1], df$intensity[sel1], xlab="", ylab="", las=1)
} else {
plot(1, 1, type="n", xlab="", ylab="", axes=FALSE)
}
mtext(capwords(sul[i]), side=3, line=1)
if(i==1) mtext("Intensity  (lum/ft²)", side=2, line=3.5)
if(sum(sel2)>0) {
plot(df$dtime[sel2], df$temp[sel2], xlab="", ylab="", las=1)
} else {
plot(1, 1, type="n", xlab="", ylab="", axes=FALSE)
}
if(i==1) mtext("Temperature (°F)", side=2, line=3.5)
}
mtext("Date time", side=1, outer=TRUE)
mtext(paste(sus[j], title1, sep="  -  "), side=3, font=2, outer=TRUE, line=2)
invisible()
}
# create a data frame that contains all csv files in directory
df <- combine.csv(usethesefiles["csvfiles"])
rm(combine.csv)
# define site and location from source file names, use lowercase letters only
prefix <- sapply(strsplit(df$source, "\\."), "[", 1)
df$site <- casefold(sapply(strsplit(prefix, "_"), "[", 1))
sensor.loc <- casefold(sapply(strsplit(prefix, "_"), "[", 2))
df$sensor <- substring(sensor.loc, 1, 7)
df$location <- casefold(substring(sensor.loc, 8, 9))
rm(prefix, sensor.loc)
# number of characters used in date/time variable
dtlen <- nchar(df$datetime)
# print out any records with missing date/time information
df[dtlen==0, ]
# create new date/time variable, with corrected times in the format "2011-07-14 16:15:00"
# it looks like records with date/time length ranging from 13 to 16 are all formatted "7/14/2011 16:15"
# and those with date/time length 20 are all formatted "07/14/11 04:15:00 PM"
dt <- rep("", length(dtlen))
dt[dtlen > 12 & dtlen < 17] <- as.character(strptime(df$datetime[dtlen > 12 & dtlen < 17], "%m/%d/%Y %H:%M"))
dt[dtlen > 19] <- as.character(strptime(df$datetime[dtlen > 19], "%m/%d/%y %I:%M:%S %p"))
date.time <- strsplit(dt, " ")
just.date <- sapply(date.time, "[", 1)
just.time <- strsplit(sapply(date.time, "[", 2), ":")
hh <- sapply(just.time, "[", 1)
mm <- sapply(just.time, "[", 2)
mm <- ifelse(mm < 29.5, 15, 45)
### Ralph, you need this line of code which was in SensorData3.r
### It creates a new variable "dtime" which has the corrected time (__:15 or __:45)
df$dtime <- strptime(paste(just.date, " ", hh, ":", mm, sep=""), "%Y-%m-%d %H:%M")
rm(dt, date.time, just.date, just.time, hh, mm)
# no elimination file, all data considered "good"
df.good <- df
# read in sunrise/sunset data
fiddler <- read.csv(usethesefiles["fiddler"], as.is=TRUE, header=FALSE, skip=2, col.names=c("date", "rise", "set", "light.hrs"))
# fiddler$date looks like this:"7/10/2010"
# fiddler$rise and set look like this:"20:24"
fiddler$sunrise <- strptime(paste(fiddler$date, fiddler$rise), "%m/%d/%Y %H:%M")
fiddler$sunset <- strptime(paste(fiddler$date, fiddler$set), "%m/%d/%Y %H:%M")
fiddler$just.date <- substring(as.character(fiddler$sunrise), 1, 10)
# merge the data with the sunrise/sunset data
df.good$just.date <- substring(as.character(df.good$dtime), 1, 10)
df.long <- merge(df.good, fiddler, all.x=TRUE)
df.long$daylight <- ifelse(df.long$dtime >= df.long$sunrise & df.long$dtime < df.long$sunset, 1, 0)
df.long$xdtime <- paste("x", df.long$dtime)
rm(fiddler, df.good)
# save graphs of uncorrected data to an rtf file
# explore the data
sus <- sort(unique(df.long$site))
sul <- sort(unique(df.long$location))
with(df.long, table(df.long$dtime, site))
a <- with(df.long, table(dtime, site))
sub <- df.long[1:100, ]
table(sub$dtime, sub$site)
class(sub)
sub$dtime
sub$site
table(sub$site)
table(sub$dtime)
sub <- df.long[1:100, ]
table(sub$xdtime, sub$site)
head(df.long)
sub <- df.long[1:100, ]
table(sub$xdtime, paste(sub$site, sub$location))
sub <- df.long[1:100, ]
table(sub$xdtime, paste(sub$site, sub$location))
tapply(sub$sensor, paste(sub$site, sub$location, sub$xdtime), function(x) length(unique(x)))
aggregate(sensor ~ site + location + xdtime, function(x) length(unique(x)), data=sub)
sensorcount <- aggregate(sensor ~ site + location + xdtime, function(x) length(unique(x)), data=sub)
sensorcount[sensorcount$sensor > 1, ]
sensorcount <- aggregate(sensor ~ site + location + xdtime, function(x) length(unique(x)), data=df.long)
sensorcount[sensorcount$sensor > 1, ]
head(df.long)
head(df.long)
head(sensorcount)
names(sensorcount)
dput(names(sensorcount))
dput(names(df.long))
# check to see if there are any sensor overlaps at a given  site, location, and time
sensorcount <- aggregate(sensor ~ site + location + xdtime, function(x) length(unique(x)), data=df.long)
# if there are any records with mulitple sensors at a given site, location, and time the csv files or the df.long file should be 
sel <- sensorcount$sensor > 1
if(sum(sel)>0) {
multsens <- merge(sensorcount[sel, c("site", "location", "xdtime"], 
df.long[, c("source", "site", "location", "datetime", "xdtime", "sensor", "temp", "intensity")], all.x=TRUE)
warning("Records with multiple sensors at a given site, location, and time.")
orint(multsens)
}
sel
sum(sel)
sum(sel)>0
sel <- sensorcount$sensor > 1
if(sum(sel)>0) {
multsens <- merge(sensorcount[sel, c("site", "location", "xdtime")], 
df.long[, c("source", "site", "location", "datetime", "xdtime", "sensor", "temp", "intensity")], all.x=TRUE)
warning("Records with multiple sensors at a given site, location, and time.")
print(multsens)
}
dim(sensorcount)
sel <- c(3, 20, 50, 500)
if(sum(sel)>0) {
multsens <- merge(sensorcount[sel, c("site", "location", "xdtime")], 
df.long[, c("source", "site", "location", "datetime", "xdtime", "sensor", "temp", "intensity")], all.x=TRUE)
warning("Records with multiple sensors at a given site, location, and time.")
print(multsens)
}
print(multsens[, c("source", "site", "location", "datetime", "xdtime", "sensor", "temp", "intensity")])
print(multsens[, c("source", "site", "location", "xdtime", "datetime", "sensor", "temp", "intensity")])
# save graphs of uncorrected data to an rtf file
# explore the data
sus <- sort(unique(df.long$site))
sul <- sort(unique(df.long$location))
doc <- startrtf("Uncorrected", dir=usethesefiles["resultsdir"], width=11, height=8.5, omi=c(0.5, 0.5, 0.5, 0.5))
fig <- function() exploreplot(df.long, "Uncorrected")
for(j in seq(along=sus)) {
figu("", h=7, w=10)
}
endrtf()
rm(sul, sus)
### note that I am only keeping a character version of the date/time, "xdtime", so that Excel won't mess it up ###
df.long <- df.long[order(df.long$site, df.long$location, df.long$dtime), c("xdtime", "daylight", "site", "sensor", "location", "intensity", "temp")]
# rearrange the long data into a wide format
df2 <- melt(df.long, id.vars=c("site", "location", "xdtime", "sensor", "daylight"), measure.vars=c("intensity", "temp"))
df2$slv <- paste(df2$site, substring(df2$location, 1, 2), df2$sensor, substring(df2$variable, 1, 2), sep="_")
df.wide <- as.data.frame(tapply(df2$value, list(paste(df2$xdtime, df2$daylight, sep="_"), df2$slv), mean))
xdtime.lt <- strsplit(dimnames(df.wide)[[1]], "_")
xdtime <- sapply(xdtime.lt, "[", 1)
daylight <- sapply(xdtime.lt, "[", 2)
df.wide <- cbind(xdtime, daylight, df.wide)
row.names(df.wide) <- seq(dim(df.wide)[1])
head(df.wide)
# rearrange the long data into a wide format
df2 <- melt(df.long, id.vars=c("site", "location", "xdtime", "daylight"), measure.vars=c("intensity", "temp"))
df2$slv <- paste(df2$site, substring(df2$location, 1, 2), substring(df2$variable, 1, 2), sep="_")
df.wide <- as.data.frame(tapply(df2$value, list(paste(df2$xdtime, df2$daylight, sep="_"), df2$slv), mean))
xdtime.lt <- strsplit(dimnames(df.wide)[[1]], "_")
xdtime <- sapply(xdtime.lt, "[", 1)
daylight <- sapply(xdtime.lt, "[", 2)
df.wide <- cbind(xdtime, daylight, df.wide)
row.names(df.wide) <- seq(dim(df.wide)[1])
head(df.wide)
dim(df.wide)
# rearrange the long data into a "semi-long" format
df2$locvar <- paste(substring(df2$location, 1, 2), substring(df2$variable, 1, 2), sep="_")
df.semi <- as.data.frame(tapply(df2$value, list(paste(df2$xdtime, df2$daylight, df2$site, sep="_"), df2$locvar), mean))
xdtime.lt.site <- strsplit(dimnames(df.semi)[[1]], "_")
df.semi$xdtime <- sapply(xdtime.lt.site, "[", 1)
df.semi$daylight <- sapply(xdtime.lt.site, "[", 2)
df.semi$site <- sapply(xdtime.lt.site, "[", 3)
columns <- sort(names(df.semi)[!(names(df.semi) %in% c("xdtime", "daylight", "site"))])
df.semi <- df.semi[order(df.semi$site, df.semi$xdtime), c("xdtime", "daylight", "site", columns)]
row.names(df.semi) <- seq(dim(df.semi)[1])
rm(df2, xdtime.lt.site)
# look at the first few rows of each dataframe
table(df.long$site, df.long$location)
head(df.long)
head(df.semi)
df.wide[1:6, 1:min(10, dim(df.wide)[2])]
# write the data to three new csv files
write.csv(df.long, paste(usethesefiles["resultsdir"], "SensorsLong.csv", sep="\\"), row.names=FALSE)
write.csv(df.semi, paste(usethesefiles["resultsdir"], "SensorsSemi.csv", sep="\\"), row.names=FALSE)
write.csv(df.wide, paste(usethesefiles["resultsdir"], "SensorsWide.csv", sep="\\"), row.names=FALSE)
dim(df.wide)
head(df)
summary(df)
# JVA C:\JVA\Consult\Grundel\Karner Heat\Patterson\2014-11-03 Sensor script.r
# TAP "D:\Tammy\ClimateKBBProject\FieldData\HOBOdata2012\WorkingFolder\cvsfiles"Marchv2.r Sensor Data Processing
# 4) could you create additional wide files that are cut into shorter time blocks? 
# 1 year or 6 months or 4 months? This is because excel will not open the entire data set of 2+ years. 
# Excel 2010 limit 1,048,576 rows, 16,384 columns
# This allows for almost 40 records per hour for three years solid in the rows.
date()
tammyfiles <- c(
csvfiles   = "D:\\Tammy\\ClimateKBBProject\\FieldData\\HOBOdata2012\\WorkingFolder\\cvsfilessubset\\",
fiddler    = "D:\\Tammy\\ClimateKBBProject\\FieldData\\HOBOdata2012\\WorkingFolder\\results\\Fiddler2010.csv",
resultsdir = "D:\\Tammy\\ClimateKBBProject\\FieldData\\HOBOdata2012\\WorkingFolder\\results")
ralphfiles <- c(
csvfiles   = "D:\\1 SPSS\\SPSSDATA\\Kbb Climate Change\\Hobo Pendant Sensor Data\\R Scripts of Hobo Reading\\Trial\\",
fiddler    = "D:\\1 SPSS\\SPSSDATA\\Kbb Climate Change\\Hobo Pendant Sensor Data\\R Scripts of Hobo Reading\\TrialElim\\Fiddler2010.csv",
resultsdir = "D:\\1 SPSS\\SPSSDATA\\Kbb Climate Change\\Hobo Pendant Sensor Data\\R Scripts of Hobo Reading\\result")
jeanfiles <- c(
csvfiles   = "C:\\JVA\\Consult\\Grundel\\Karner Heat\\Patterson\\csvfiles2014-11-03\\",
fiddler    = "C:\\JVA\\Consult\\Grundel\\Karner Heat\\Patterson\\results\\Fiddler2010.csv",
resultsdir = "C:\\JVA\\Consult\\Grundel\\Karner Heat\\Patterson\\results")
# no longer need to comment out all the file names
# just indicate which set of file names you want to use here
usethesefiles <- jeanfiles
library(reshape)
library(car)
library(rtf)
### define several functions
startrtf <- function(file=NULL, dir=getwd(), width=8.5, height=11, omi=c(1, 1, 1, 1), quiet=FALSE) {
# create a new RTF file readable by Word
if(is.null(file)) file <- paste0("RGeneratedDocument", Sys.Date())
dirfiledoc <- if(length(grep(".doc", file))>0) paste(dir, file, sep="/") else paste(dir, paste0(file, ".doc"), sep="/")
if(!quiet) cat(paste0("New RTF document created, ", dirfiledoc, "\n"))
RTF(dirfiledoc, width=width, height=height, omi=omi)
}
figu <- function(..., FIG=fig, rtf=doc, w=NULL, h=NULL, rf=300) {
wf <- if(is.null(w)) 6.5 else w
hf <- if(is.null(h)) 8 else h
addNewLine(this=rtf)
addPlot(this=rtf, plot.fun=FIG, width=wf, height=hf, res=rf)
}
endrtf <- function(rtf=doc, details=FALSE, ...) {
if(details==TRUE) {
addPageBreak(rtf, ...)
addSessionInfo(rtf)
}
done(rtf)
}
combine.csv <- function(mydir) {
# combine all csv files in a given directory into a single data frame
# file names
filenames <- list.files(mydir)[grep(".csv", list.files(mydir))]
nfiles <- length(filenames)
# create an empty list where all the files will be stored
files.list <- vector(mode="list", length=nfiles)
for(i in 1:nfiles) {
# read the data into a temporary file
temp <- read.csv(paste(mydir, filenames[i], sep=""), as.is=TRUE, skip=1)[, 1:4]
names(temp) <- c("no", "datetime", "temp", "intensity")
# get rid of records with all missing values
temp <- temp[!apply(is.na(temp[, c(1, 3:4)]), 1, all), ]
# add a new column identifying the source file
temp$source <- filenames[i]
# put the data into the list
files.list[[i]] <- temp
}
# combined each of the files from the list into one single file
do.call(rbind, files.list)
}
capwords <- function(s, strict = FALSE) {
    cap <- function(s) paste(toupper(substring(s,1,1)),
                  {s <- substring(s,2); if(strict) tolower(s) else s},
                             sep = "", collapse = " " )
    sapply(strsplit(s, split = " "), cap, USE.NAMES = !is.null(names(s)))
}
exploreplot <- function(df, title1) {
par(mfcol=c(2, length(sul)), mar=c(3, 3.5, 1, 0), oma=c(2, 2, 4, 1))
for(i in seq(along=sul)) {
sel <- df$location==sul[i] & df$site==sus[j] & !is.na(df$dtime)
sel1 <- sel & !is.na(df$intensity)
sel2 <- sel & !is.na(df$temp)
if(sum(sel1)>0) {
plot(df$dtime[sel1], df$intensity[sel1], xlab="", ylab="", las=1)
} else {
plot(1, 1, type="n", xlab="", ylab="", axes=FALSE)
}
mtext(capwords(sul[i]), side=3, line=1)
if(i==1) mtext("Intensity  (lum/ft²)", side=2, line=3.5)
if(sum(sel2)>0) {
plot(df$dtime[sel2], df$temp[sel2], xlab="", ylab="", las=1)
} else {
plot(1, 1, type="n", xlab="", ylab="", axes=FALSE)
}
if(i==1) mtext("Temperature (°F)", side=2, line=3.5)
}
mtext("Date time", side=1, outer=TRUE)
mtext(paste(sus[j], title1, sep="  -  "), side=3, font=2, outer=TRUE, line=2)
invisible()
}
# create a data frame that contains all csv files in directory
df <- combine.csv(usethesefiles["csvfiles"])
rm(combine.csv)
# define site and location from source file names, use lowercase letters only
prefix <- sapply(strsplit(df$source, "\\."), "[", 1)
df$site <- casefold(sapply(strsplit(prefix, "_"), "[", 1))
sensor.loc <- casefold(sapply(strsplit(prefix, "_"), "[", 2))
df$sensor <- substring(sensor.loc, 1, 7)
df$location <- casefold(substring(sensor.loc, 8, 9))
rm(prefix, sensor.loc)
# number of characters used in date/time variable
dtlen <- nchar(df$datetime)
# print out any records with missing date/time information
df[dtlen==0, ]
# create new date/time variable, with corrected times in the format "2011-07-14 16:15:00"
# it looks like records with date/time length ranging from 13 to 16 are all formatted "7/14/2011 16:15"
# and those with date/time length 20 are all formatted "07/14/11 04:15:00 PM"
dt <- rep("", length(dtlen))
dt[dtlen > 12 & dtlen < 17] <- as.character(strptime(df$datetime[dtlen > 12 & dtlen < 17], "%m/%d/%Y %H:%M"))
dt[dtlen > 19] <- as.character(strptime(df$datetime[dtlen > 19], "%m/%d/%y %I:%M:%S %p"))
date.time <- strsplit(dt, " ")
just.date <- sapply(date.time, "[", 1)
just.time <- strsplit(sapply(date.time, "[", 2), ":")
hh <- sapply(just.time, "[", 1)
mm <- sapply(just.time, "[", 2)
dummy <- rep(1, length(mm))
recordsperhr <- aggregate(dummy ~ site + location + sensor + hh, sum, data=df)
dim(recordsperhr)
recordsperhr
head(df)
recordsperday <- aggregate(dummy ~ site + location + sensor + just.date, sum, data=df)
recordsperday
table(recordsperday$dummy)
head(df)
head(df.good)
head(df.long)
head(recordsperday)
# read in sunrise/sunset data
fiddler <- read.csv(usethesefiles["fiddler"], as.is=TRUE, header=FALSE, skip=2, col.names=c("date", "rise", "set", "light.hrs"))
# fiddler$date looks like this:"7/10/2010"
# fiddler$rise and set look like this:"20:24"
fiddler$sunrise <- strptime(paste(fiddler$date, fiddler$rise), "%m/%d/%Y %H:%M")
fiddler$sunset <- strptime(paste(fiddler$date, fiddler$set), "%m/%d/%Y %H:%M")
fiddler$just.date <- substring(as.character(fiddler$sunrise), 1, 10)
head(fiddler)
q()
cleanup()
ls()
pkgin("LW1949")
q()
pkgin("LW1949")
q()
pkgin("LW1949")
q()
pkgin("LW1949")
q()
pkgin("LW1949")
search()
detach()
search()
utils:::menuInstallLocal()
cleanup()
q()
pkgin("LW1949")
cleanup()
q()
# bring in the data
library(XLConnect)
wb <- loadWorkbook("C:/JVA/Consult/Bunnell/Shunt/dreissenid densities by ponar.xlsx")
dat <- readWorksheet(wb, sheet=get.sheets(wb)[1], startRow=1)
get.sheets(wb)
?sheet
??sheet
getSheets(wb)
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
head(dat)
summary(dat)
plotdf(dat)
class(dat$date)
plot(dat$date)
plot(sort(dat$date))
library(lubridate)
m <- month(dat$date)
plot(sort(dat$date), type="n")
text(sort(dat$date), m)
plot(sort(dat$date), sort(dat$date), type="n")
text(sort(dat$date), sort(dat$date), m)
table(m)
plot(dat$date, m)
dat[m==5, ]
dat$seas <- cut(m, c(3, 6, 8, 10), labels=c("spr", "sum", "fal")
)
head(dat)
?cut
dat$seas <- cut(m, c(3, 6, 8, 10), labels=c("spr", "sum", "fal"), ordered_result=TRUE)
?varcomp
#' Startup
#'
#' One function with all the commands I typically want run at the start of an R session.
#' @param maxp Integer scalar, maximum number of lines printed, default 500.
#' @param ndecInteger scalar, maximum width of fixed notation before switching to scientific notation, default 10. 
#' @param contCharacter scalar, prompt used for lines which continue past first command line, default \code{"... "}.
#' @param pkgsCharacter vector, packages to be loaded, default
#'\code{c("rJava", "XLConnect", "maps", "mapproj", "RColorBrewer", "mgcv", "jvamisc")}.
#' @param mirrorCharacter scalar, CRAN mirror, default \code{"http://streaming.stat.iastate.edu/CRAN/"}.
#' @param helptCharacter scalar, type of help, default "html".
#' @param facLogical scalar, use factors rather than character strings, default FALSE.
#' @param noplotsLogical scalar, remove "saved" plots, e.g., from past runs of \code{\link[jvamisc]{dfplot}}, default TRUE.
#' @param showLogical scalar, list objects in current environment, default TRUE.
#' @export
#' @seealso\code{\link{options}}, \code{\link{help}}.
#' @examplesjvaFirst()
jvaFirst <- function(
maxp=500, ndec=10, cont="... ",
pkgs = c("rJava", "XLConnect", "maps", "mapproj", "RColorBrewer", "mgcv", "MASS", "jvamisc"),
mirror="http://streaming.stat.iastate.edu/CRAN/", 
helpt="html", fac=FALSE, noplots=TRUE, show=TRUE) {
# don't print more than maxp rows
options(max.print=maxp)
# prefer long decimals rather than scientific notation
options(scipen=ndec)
# make it more obvious when line of code is continued on the next line
# from Tony Fischetti, http://www.onthelambda.com/2014/09/17/fun-with-rprofile-and-customizing-r-startup/
options(continue=cont)
# attach packages
sshhh <- function(a.package) suppressWarnings(suppressPackageStartupMessages(library(a.package, character.only=TRUE)))
sapply(pkgs, sshhh)
# set CRAN mirror
repo <- getOption("repos")
repo["CRAN"] <- mirror
options(repos=repo)
# prefer compiled HTML help
options(help_type=helpt)
# prefer characters rather than factors
options(stringsAsFactors=fac)
# get rid of any "saved" plots, e.g., from past runs of dfplot()
if(noplots) .SavedPlots <- NULL
# my personal functions
if(show) {
already <- ls(".GlobalEnv")
print(already)
}
}
.First
.First <- jvaFirst
.First()
q()
pkgin("artiFISHal")
q()
cleanup()
q()
pkgin("jvamisc")
cleanup()
q()
pkgin("jvamisc")
pkgman("jvamisc")
q()
# C:\JVA\Consult\Przybyla-Kelly\Rinsing\Rinse.r
library(XLConnect)
# read in the data
wb <- loadWorkbook("C:/JVA/Consult/Przybyla-Kelly/Rinsing/Sequential rinsing.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
dat
plotdf(dat)
head(dat)
attach(dat)
table(Sample, Rinse, Spiked_1)
dim(table(Sample, Rinse, Spiked_1))
dim(table(paste(Spiked_1, Sample), Rinse)
)
table(paste(Spiked_1, Sample), Rinse)
table(paste(Spiked_1, Sample, "-"), Rinse)
table(paste(Spiked_1, Sample, sep="-"), Rinse)
head(dat)
tapply(Log_EC, list(paste(Spiked_1, Sample, sep="-"), Rinse), mean)
tapply(!is.na(Log_EC), list(paste(Spiked_1, Sample, sep="-"), Rinse), sum)
ax2 <- prettylog(exp(Log_EC))
ax2
prettylog
ax2 <- prettylog(exp(Log_EC))
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, Log_EC, ylab="E. Coli concentration  (log scale)", axis=FALSE)
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, Log_EC, ylab="E. Coli concentration  (log scale)", axes=FALSE)
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
sug <- sort(unique(Spiked_1))
sus <- sort(unique(Sample))
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. Coli concentration  (log scale)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=j+1, col=i, type="b", lwd=2)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
sus
sug <- sort(unique(Spiked_1))
sus <- sort(unique(Sample))
suspch <- c(0:3, 1:3)
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. Coli concentration  (log scale)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=suspch[j], col=i+1, type="b", lwd=2)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
sug <- sort(unique(Spiked_1))
sus <- sort(unique(Sample))
suspch <- as.character(c(0:3, 1:3))
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. Coli concentration  (log scale)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=suspch[j], col=i+1, type="b", lwd=2)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
search()
ls(4)
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. Coli concentration  (log scale)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
blindcolz
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. Coli concentration  (log scale)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", c("Shoreline wrack", "Spiked sample"), pch=suspch[j], col=blindcolz[i+1], lwd=2, lty=i)
legend("topright", c("Shoreline wrack", "Spiked sample"), col=blindcolz[1:2], lwd=2, lty=1:2)
q()
# C:\JVA\Consult\Przybyla-Kelly\Rinsing\Rinse.r
library(XLConnect)
# read in the data
wb <- loadWorkbook("C:/JVA/Consult/Przybyla-Kelly/Rinsing/Sequential rinsing.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
attach(dat)
tapply(!is.na(Log_EC), list(paste(Spiked_1, Sample, sep="-"), Rinse), sum)
tapply(Log_EC, list(paste(Spiked_1, Sample, sep="-"), Rinse), mean)
ax2 <- prettylog(exp(Log_EC))
sug <- sort(unique(Spiked_1))
sus <- sort(unique(Sample))
suspch <- as.character(c(0:3, 1:3))
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. Coli concentration  (log scale)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", c("Shoreline wrack", "Spiked sample"), col=blindcolz[2:3], lwd=2, lty=1:2)
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. Coli concentration  (log scale)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
ax2
ax2 <- prettylog(exp(Log_EC), 1:10, 10)
ax2
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. Coli concentration  (log scale)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
ax2 <- prettylog(exp(Log_EC), c(1, 2, 5), 10)
ax2
sug <- sort(unique(Spiked_1))
sus <- sort(unique(Sample))
suspch <- as.character(c(0:3, 1:3))
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. Coli concentration  (log scale)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
ax2 <- prettylog(exp(Log_EC), c(1, 2, 5))
sug <- sort(unique(Spiked_1))
sus <- sort(unique(Sample))
suspch <- as.character(c(0:3, 1:3))
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. Coli concentration  (log scale)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
head(dat)
search()
detach()
dat <- dat[order(dat$Spiked_1, dat$Sample, dat$Rinse), ]
dat
dat1 <- dat[dat$Rinse==1, ]
dat1
dat1 <- dat[dat$Rinse==1, ]
dat1$Log_EC1 <- dat1$Log_EC
merge(dat, dat1[, c("Spiked_1", "Sample", "Rinse", "Log_EC1")])
merge(dat, dat1[, c("Spiked_1", "Sample", "Rinse", "Log_EC1")], all.x=TRUE)
dat
dat1[, c("Spiked_1", "Sample", "Rinse", "Log_EC1")]
merge(dat, dat1[, c("Spiked_1", "Sample", "Log_EC1")], all.x=TRUE)
library(XLConnect)
# read in the data
wb <- loadWorkbook("C:/JVA/Consult/Przybyla-Kelly/Rinsing/Sequential rinsing.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
dat1 <- dat[dat$Rinse==1, ]
dat1$Log_EC1 <- dat1$Log_EC
dat <- merge(dat, dat1[, c("Spiked_1", "Sample", "Log_EC1")], all.x=TRUE)
dat$Log_ECDiff <- dat$Log_EC - dat$Log_EC1
head(dat)
dat
search()
attach(dat)
tapply(!is.na(Log_EC), list(paste(Spiked_1, Sample, sep="-"), Rinse), sum)
tapply(Log_EC, list(paste(Spiked_1, Sample, sep="-"), Rinse), mean)
ax2 <- prettylog(exp(Log_EC), c(1, 2, 5))
sug <- sort(unique(Spiked_1))
sus <- sort(unique(Sample))
suspch <- as.character(c(0:3, 1:3))
windows()
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. Coli concentration  (log scale)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
windows()
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, Log_ECDiff, type="n", xlab="Rinses  (number)", ylab="Change in E. Coli concentration  (log scale)")
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_ECDiff[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
library(XLConnect)
# read in the data
wb <- loadWorkbook("C:/JVA/Consult/Przybyla-Kelly/Rinsing/Sequential rinsing.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
dat1 <- dat[dat$Rinse==1, ]
dat1$Log_EC1 <- dat1$Log_EC
dat <- merge(dat, dat1[, c("Spiked_1", "Sample", "Log_EC1")], all.x=TRUE)
dat$EC <- exp(dat$Log_EC)
dat$Log_ECDiff <- dat$Log_EC - dat$Log_EC1
dat$ECProp <- dat$EC/exp(dat$Log_EC1)
dat
log(dat$ECProp)
library(XLConnect)
# read in the data
wb <- loadWorkbook("C:/JVA/Consult/Przybyla-Kelly/Rinsing/Sequential rinsing.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
dat1 <- dat[dat$Rinse==1, ]
dat1$Log_EC1 <- dat1$Log_EC
dat <- merge(dat, dat1[, c("Spiked_1", "Sample", "Log_EC1")], all.x=TRUE)
dat$EC <- exp(dat$Log_EC)
dat$Log_ECDiff <- dat$Log_EC - dat$Log_EC1
dat$ECProp <- dat$EC/exp(dat$Log_EC1)
attach(dat)
tapply(!is.na(Log_EC), list(paste(Spiked_1, Sample, sep="-"), Rinse), sum)
tapply(Log_EC, list(paste(Spiked_1, Sample, sep="-"), Rinse), mean)
sug <- sort(unique(Spiked_1))
sus <- sort(unique(Sample))
suspch <- as.character(c(0:3, 1:3))
ax2 <- prettylog(EC, c(1, 2, 5))
windows()
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. Coli concentration  (log scale)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
search()
detach(3)
ax2 <- prettylog(ECProp, c(1, 2, 5))
windows()
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, log(ECProp), type="n", xlab="Rinses  (number)", ylab="E. Coli concentration  (proportion on log scale)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], log(ECProp)[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
windows()
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, ECProp, type="n", xlab="Rinses  (number)", ylab="E. Coli concentration  (proportion on log scale)")
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], ECProp[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
tapply(!is.na(Log_EC), list(paste(Spiked_1, Sample, sep="-"), Rinse), sum)
tapply(Log_EC, list(paste(Spiked_1, Sample, sep="-"), Rinse), mean)
sug <- sort(unique(Spiked_1))
sus <- sort(unique(Sample))
suspch <- as.character(c(0:3, 1:3))
ax2 <- prettylog(EC, c(1, 2, 5))
windows()
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. Coli  (concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
ax2 <- prettylog(ECProp, c(1, 2, 5))
windows()
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, log(ECProp), type="n", xlab="Rinses  (number)", ylab="E. Coli (proportional change in concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], log(ECProp)[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, log(ECProp), type="n", xlab="Rinses  (number)", ylab="E. Coli (proportional change from initial concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], log(ECProp)[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
search()
ls(4)
startrtf
?startrtf
date
date()
?date
Sys.Date
Sys.Date()
graphics.off()
cleanup()
search()
detach()
# C:\JVA\Consult\Przybyla-Kelly\Rinsing\Rinse.r
library(XLConnect)
dstartrtf
## Not run: 
doc <- startrtf(file=paste0(Sys.Date(), "Rinsing"), dir="C:/JVA/Consult/Przybyla-Kelly/Rinsing")
heading("Visualize Sequential Rinsing Data from Kasia Przybyla-Kelly")
heading(paste0(Sys.Date(), " - Jean V. Adams"), 2)
para("First paragraph.")
tab <- head(cars)
tabl("First few rows of cars data.", row.names=FALSE)
heading("Heading 2", 2)
para("Second paragraph.")
fig <- function() {
plot(cars)
lo <- loess(cars$dist ~ cars$speed)
lines(lo$x, lo$fitted)
}
figu("Speed vs. distance from the cars data.")
# read in the data
wb <- loadWorkbook("C:/JVA/Consult/Przybyla-Kelly/Rinsing/Sequential rinsing.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
dat1 <- dat[dat$Rinse==1, ]
dat1$Log_EC1 <- dat1$Log_EC
dat <- merge(dat, dat1[, c("Spiked_1", "Sample", "Log_EC1")], all.x=TRUE)
dat$EC <- exp(dat$Log_EC)
dat$Log_ECDiff <- dat$Log_EC - dat$Log_EC1
dat$ECProp <- dat$EC/exp(dat$Log_EC1)
para("I am assuming that the E. coli data included in the spreadsheet ** Sequential rinsing.xlsx ** are natural log transformed,",
" not log10 transformed.")
para("E. Coli concentrations were taken from a single spiked sample and four field field samples (shoreline wrack).",
"  The spiked sample was created from the shoreline wrack of LV beach, homogenized, split into 3 replicates"
" (LV1, LV2, LV3) and each replicate was spiked with same E. coli concentration.",
"  Spiked samples were rinsed 7 times, and E. coli after each rinse was measured.",
"  The field samples included LS1, PL1, PL2, PL3.  All were analysed for E. coli concentrations.",  
"  Each was rinsed multiple times in order to get subsequent E. coli concentrations in a series of sequential rinsing.",  
"  Each sample had a different initial E. coli concentration, and each had different amount of rinses (4-8).", 
attach(dat)
tapply(!is.na(Log_EC), list(paste(Spiked_1, Sample, sep="-"), Rinse), sum)
tapply(Log_EC, list(paste(Spiked_1, Sample, sep="-"), Rinse), mean)
sug <- sort(unique(Spiked_1))
sus <- sort(unique(Sample))
suspch <- as.character(c(0:3, 1:3))
ax2 <- prettylog(EC, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. Coli  (concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("E. Coli concentrations versus number of rinses from a single spiked sample(LV1, LV2, LV3, plot characters 1-3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
ax2 <- prettylog(ECProp, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, log(ECProp), type="n", xlab="Rinses  (number)", ylab="E. Coli (proportional change from initial concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], log(ECProp)[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("Proportional change in E. Coli concentrations from the first rinse versus number of rinses",
" from a single spiked sample(LV1, LV2, LV3, plot characters 1-3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
endrtf()
detach(dat)
# C:\JVA\Consult\Przybyla-Kelly\Rinsing\Rinse.r
library(XLConnect)
doc <- startrtf(file=paste0(Sys.Date(), "Rinsing"), dir="C:/JVA/Consult/Przybyla-Kelly/Rinsing")
heading("Visualize Sequential Rinsing Data from Kasia Przybyla-Kelly")
heading(paste0(Sys.Date(), " - Jean V. Adams"), 2)
# read in the data
wb <- loadWorkbook("C:/JVA/Consult/Przybyla-Kelly/Rinsing/Sequential rinsing.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
dat1 <- dat[dat$Rinse==1, ]
dat1$Log_EC1 <- dat1$Log_EC
dat <- merge(dat, dat1[, c("Spiked_1", "Sample", "Log_EC1")], all.x=TRUE)
dat$EC <- exp(dat$Log_EC)
dat$Log_ECDiff <- dat$Log_EC - dat$Log_EC1
dat$ECProp <- dat$EC/exp(dat$Log_EC1)
para("I am assuming that the E. coli data included in the spreadsheet ** Sequential rinsing.xlsx ** are natural log transformed,",
" not log10 transformed.")
para("E. Coli concentrations were taken from a single spiked sample and four field field samples (shoreline wrack).",
"  The spiked sample was created from the shoreline wrack of LV beach, homogenized, split into 3 replicates"
" (LV1, LV2, LV3) and each replicate was spiked with same E. coli concentration.",
"  Spiked samples were rinsed 7 times, and E. coli after each rinse was measured.",
"  The field samples included LS1, PL1, PL2, PL3.  All were analysed for E. coli concentrations.",  
"  Each was rinsed multiple times in order to get subsequent E. coli concentrations in a series of sequential rinsing.",  
"  Each sample had a different initial E. coli concentration, and each had different amount of rinses (4-8).", 
attach(dat)
tapply(!is.na(Log_EC), list(paste(Spiked_1, Sample, sep="-"), Rinse), sum)
tapply(Log_EC, list(paste(Spiked_1, Sample, sep="-"), Rinse), mean)
sug <- sort(unique(Spiked_1))
sus <- sort(unique(Sample))
suspch <- as.character(c(0:3, 1:3))
ax2 <- prettylog(EC, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. Coli  (concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("E. Coli concentrations versus number of rinses from a single spiked sample(LV1, LV2, LV3, plot characters 1-3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
ax2 <- prettylog(ECProp, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, log(ECProp), type="n", xlab="Rinses  (number)", ylab="E. Coli (proportional change from initial concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], log(ECProp)[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("Proportional change in E. Coli concentrations from the first rinse versus number of rinses",
" from a single spiked sample(LV1, LV2, LV3, plot characters 1-3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
endrtf()
detach(dat)
# C:\JVA\Consult\Przybyla-Kelly\Rinsing\Rinse.r
library(XLConnect)
doc <- startrtf(file=paste0(Sys.Date(), "Rinsing"), dir="C:/JVA/Consult/Przybyla-Kelly/Rinsing")
heading("Visualize Sequential Rinsing Data from Kasia Przybyla-Kelly")
heading(paste0(Sys.Date(), " - Jean V. Adams"), 2)
# read in the data
wb <- loadWorkbook("C:/JVA/Consult/Przybyla-Kelly/Rinsing/Sequential rinsing.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
dat1 <- dat[dat$Rinse==1, ]
dat1$Log_EC1 <- dat1$Log_EC
dat <- merge(dat, dat1[, c("Spiked_1", "Sample", "Log_EC1")], all.x=TRUE)
dat$EC <- exp(dat$Log_EC)
dat$Log_ECDiff <- dat$Log_EC - dat$Log_EC1
dat$ECProp <- dat$EC/exp(dat$Log_EC1)
para("I am assuming that the E. coli data included in the spreadsheet ** Sequential rinsing.xlsx ** are natural log transformed,",
" not log10 transformed.")
para("E. Coli concentrations were taken from a single spiked sample and four field field samples (shoreline wrack).",
"  The spiked sample was created from the shoreline wrack of LV beach, homogenized, split into 3 replicates"
" (LV1, LV2, LV3) and each replicate was spiked with same E. coli concentration.",
"  Spiked samples were rinsed 7 times, and E. coli after each rinse was measured.",
"  The field samples included LS1, PL1, PL2, PL3.  All were analysed for E. coli concentrations.",  
"  Each was rinsed multiple times in order to get subsequent E. coli concentrations in a series of sequential rinsing.",  
"  Each sample had a different initial E. coli concentration, and each had different amount of rinses (4-8).", 
attach(dat)
tapply(!is.na(Log_EC), list(paste(Spiked_1, Sample, sep="-"), Rinse), sum)
tapply(Log_EC, list(paste(Spiked_1, Sample, sep="-"), Rinse), mean)
sug <- sort(unique(Spiked_1))
sus <- sort(unique(Sample))
suspch <- as.character(c(0:3, 1:3))
ax2 <- prettylog(EC, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. Coli  (concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("E. Coli concentrations versus number of rinses from a single spiked sample(LV1, LV2, LV3, plot characters 1-3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
ax2 <- prettylog(ECProp, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, log(ECProp), type="n", xlab="Rinses  (number)", ylab="E. Coli (proportional change from initial concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], log(ECProp)[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("Proportional change in E. Coli concentrations from the first rinse versus number of rinses",
" from a single spiked sample(LV1, LV2, LV3, plot characters 1-3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
endrtf()
detach(dat)
# C:\JVA\Consult\Przybyla-Kelly\Rinsing\Rinse.r
library(XLConnect)
doc <- startrtf(file=paste0(Sys.Date(), "Rinsing"), dir="C:/JVA/Consult/Przybyla-Kelly/Rinsing")
heading("Visualize Sequential Rinsing Data from Kasia Przybyla-Kelly")
heading(paste0(Sys.Date(), " - Jean V. Adams"), 2)
# read in the data
wb <- loadWorkbook("C:/JVA/Consult/Przybyla-Kelly/Rinsing/Sequential rinsing.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
dat1 <- dat[dat$Rinse==1, ]
dat1$Log_EC1 <- dat1$Log_EC
dat <- merge(dat, dat1[, c("Spiked_1", "Sample", "Log_EC1")], all.x=TRUE)
dat$EC <- exp(dat$Log_EC)
dat$Log_ECDiff <- dat$Log_EC - dat$Log_EC1
dat$ECProp <- dat$EC/exp(dat$Log_EC1)
para("I am assuming that the E. coli data included in the spreadsheet ** Sequential rinsing.xlsx ** are natural log transformed,",
" not log10 transformed.")
para("E. Coli concentrations were taken from a single spiked sample and four field field samples (shoreline wrack).",
"  The spiked sample was created from the shoreline wrack of LV beach, homogenized, split into 3 replicates",
" (LV1, LV2, LV3) and each replicate was spiked with same E. coli concentration.",
"  Spiked samples were rinsed 7 times, and E. coli after each rinse was measured.",
"  The field samples included LS1, PL1, PL2, PL3.  All were analysed for E. coli concentrations.",  
"  Each was rinsed multiple times in order to get subsequent E. coli concentrations in a series of sequential rinsing.",  
"  Each sample had a different initial E. coli concentration, and each had different amount of rinses (4-8).", 
attach(dat)
tapply(!is.na(Log_EC), list(paste(Spiked_1, Sample, sep="-"), Rinse), sum)
tapply(Log_EC, list(paste(Spiked_1, Sample, sep="-"), Rinse), mean)
sug <- sort(unique(Spiked_1))
sus <- sort(unique(Sample))
suspch <- as.character(c(0:3, 1:3))
ax2 <- prettylog(EC, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. Coli  (concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("E. Coli concentrations versus number of rinses from a single spiked sample(LV1, LV2, LV3, plot characters 1-3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
ax2 <- prettylog(ECProp, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, log(ECProp), type="n", xlab="Rinses  (number)", ylab="E. Coli (proportional change from initial concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], log(ECProp)[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("Proportional change in E. Coli concentrations from the first rinse versus number of rinses",
" from a single spiked sample(LV1, LV2, LV3, plot characters 1-3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
endrtf()
detach(dat)
# C:\JVA\Consult\Przybyla-Kelly\Rinsing\Rinse.r
library(XLConnect)
doc <- startrtf(file=paste0(Sys.Date(), "Rinsing"), dir="C:/JVA/Consult/Przybyla-Kelly/Rinsing")
heading("Visualize Sequential Rinsing Data from Kasia Przybyla-Kelly")
heading(paste0(Sys.Date(), " - Jean V. Adams"), 2)
# read in the data
wb <- loadWorkbook("C:/JVA/Consult/Przybyla-Kelly/Rinsing/Sequential rinsing.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
dat1 <- dat[dat$Rinse==1, ]
dat1$Log_EC1 <- dat1$Log_EC
dat <- merge(dat, dat1[, c("Spiked_1", "Sample", "Log_EC1")], all.x=TRUE)
dat$EC <- exp(dat$Log_EC)
dat$Log_ECDiff <- dat$Log_EC - dat$Log_EC1
dat$ECProp <- dat$EC/exp(dat$Log_EC1)
para("I am assuming that the E. coli data included in the spreadsheet ** Sequential rinsing.xlsx ** are natural log transformed,",
" not log10 transformed.")
para("E. Coli concentrations were taken from a single spiked sample and four field field samples (shoreline wrack).",
"  The spiked sample was created from the shoreline wrack of LV beach, homogenized, split into 3 replicates",
" (LV1, LV2, LV3) and each replicate was spiked with same E. coli concentration.",
"  Spiked samples were rinsed 7 times, and E. coli after each rinse was measured.",
"  The field samples included LS1, PL1, PL2, PL3.  All were analysed for E. coli concentrations.",  
"  Each was rinsed multiple times in order to get subsequent E. coli concentrations in a series of sequential rinsing.",  
"  Each sample had a different initial E. coli concentration, and each had different amount of rinses (4-8).")
attach(dat)
tapply(!is.na(Log_EC), list(paste(Spiked_1, Sample, sep="-"), Rinse), sum)
tapply(Log_EC, list(paste(Spiked_1, Sample, sep="-"), Rinse), mean)
sug <- sort(unique(Spiked_1))
sus <- sort(unique(Sample))
suspch <- as.character(c(0:3, 1:3))
ax2 <- prettylog(EC, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. Coli  (concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("E. Coli concentrations versus number of rinses from a single spiked sample(LV1, LV2, LV3, plot characters 1-3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
ax2 <- prettylog(ECProp, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, log(ECProp), type="n", xlab="Rinses  (number)", ylab="E. Coli (proportional change from initial concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], log(ECProp)[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("Proportional change in E. Coli concentrations from the first rinse versus number of rinses",
" from a single spiked sample(LV1, LV2, LV3, plot characters 1-3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
endrtf()
detach(dat)
# C:\JVA\Consult\Przybyla-Kelly\Rinsing\Rinse.r
library(XLConnect)
doc <- startrtf(file=paste0(Sys.Date(), "Rinsing"), dir="C:/JVA/Consult/Przybyla-Kelly/Rinsing")
heading("Visualize Sequential Rinsing Data from Kasia Przybyla-Kelly")
heading(paste0(Sys.Date(), " - Jean V. Adams"), 2)
# read in the data
wb <- loadWorkbook("C:/JVA/Consult/Przybyla-Kelly/Rinsing/Sequential rinsing.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
dat1 <- dat[dat$Rinse==1, ]
dat1$Log_EC1 <- dat1$Log_EC
dat <- merge(dat, dat1[, c("Spiked_1", "Sample", "Log_EC1")], all.x=TRUE)
dat$EC <- exp(dat$Log_EC)
dat$Log_ECDiff <- dat$Log_EC - dat$Log_EC1
dat$ECProp <- dat$EC/exp(dat$Log_EC1)
para("I am assuming that the E. coli data included in the spreadsheet ** Sequential rinsing.xlsx ** are natural log transformed,",
" not log10 transformed.")
para("E. Coli concentrations were taken from a single spiked sample and four field field samples (shoreline wrack).",
"  The spiked sample was created from the shoreline wrack of LV beach, homogenized, split into 3 replicates",
" (LV1, LV2, LV3) and each replicate was spiked with same E. coli concentration.",
"  Spiked samples were rinsed 7 times, and E. coli after each rinse was measured.",
"  The field samples included LS1, PL1, PL2, PL3.  All were analysed for E. coli concentrations.",  
"  Each was rinsed multiple times in order to get subsequent E. coli concentrations in a series of sequential rinsing.",  
"  Each sample had a different initial E. coli concentration, and each had different amount of rinses (4-8).")
tab <- tapply(Log_EC, list(paste(Spiked_1, Sample, sep="-"), Rinse), mean)
tabl("E. Coli concentrations (natural log transformed) after 1 to 8 rinses from a single spiked sample(LV1, LV2, LV3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3).")
attach(dat)
tapply(!is.na(Log_EC), list(paste(Spiked_1, Sample, sep="-"), Rinse), sum)
tapply(Log_EC, list(paste(Spiked_1, Sample, sep="-"), Rinse), mean)
sug <- sort(unique(Spiked_1))
sus <- sort(unique(Sample))
suspch <- as.character(c(0:3, 1:3))
ax2 <- prettylog(EC, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. Coli  (concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("E. Coli concentrations versus number of rinses from a single spiked sample(LV1, LV2, LV3, plot characters 1-3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
ax2 <- prettylog(ECProp, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, log(ECProp), type="n", xlab="Rinses  (number)", ylab="E. Coli (proportional change from initial concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], log(ECProp)[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("Proportional change in E. Coli concentrations from the first rinse versus number of rinses",
" from a single spiked sample(LV1, LV2, LV3, plot characters 1-3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
endrtf()
detach(dat)
tab
tapply(Log_EC, list(paste(Spiked_1, Sample, sep="-"), Rinse), mean)
library(XLConnect)
doc <- startrtf(file=paste0(Sys.Date(), "Rinsing"), dir="C:/JVA/Consult/Przybyla-Kelly/Rinsing")
heading("Visualize Sequential Rinsing Data from Kasia Przybyla-Kelly")
heading(paste0(Sys.Date(), " - Jean V. Adams"), 2)
# read in the data
wb <- loadWorkbook("C:/JVA/Consult/Przybyla-Kelly/Rinsing/Sequential rinsing.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
dat1 <- dat[dat$Rinse==1, ]
dat1$Log_EC1 <- dat1$Log_EC
dat <- merge(dat, dat1[, c("Spiked_1", "Sample", "Log_EC1")], all.x=TRUE)
dat$EC <- exp(dat$Log_EC)
dat$Log_ECDiff <- dat$Log_EC - dat$Log_EC1
dat$ECProp <- dat$EC/exp(dat$Log_EC1)
para("I am assuming that the E. coli data included in the spreadsheet ** Sequential rinsing.xlsx ** are natural log transformed,",
" not log10 transformed.")
para("E. Coli concentrations were taken from a single spiked sample and four field field samples (shoreline wrack).",
"  The spiked sample was created from the shoreline wrack of LV beach, homogenized, split into 3 replicates",
" (LV1, LV2, LV3) and each replicate was spiked with same E. coli concentration.",
"  Spiked samples were rinsed 7 times, and E. coli after each rinse was measured.",
"  The field samples included LS1, PL1, PL2, PL3.  All were analysed for E. coli concentrations.",  
"  Each was rinsed multiple times in order to get subsequent E. coli concentrations in a series of sequential rinsing.",  
"  Each sample had a different initial E. coli concentration, and each had different amount of rinses (4-8).")
tab <- tapply(Log_EC, list(paste(Spiked_1, Sample, sep="-"), Rinse), mean)
attach(dat)
tab <- tapply(Log_EC, list(paste(Spiked_1, Sample, sep="-"), Rinse), mean)
tab
search()
detach()
# C:\JVA\Consult\Przybyla-Kelly\Rinsing\Rinse.r
library(XLConnect)
doc <- startrtf(file=paste0(Sys.Date(), "Rinsing"), dir="C:/JVA/Consult/Przybyla-Kelly/Rinsing")
heading("Visualize Sequential Rinsing Data from Kasia Przybyla-Kelly")
heading(paste0(Sys.Date(), " - Jean V. Adams"), 2)
# read in the data
wb <- loadWorkbook("C:/JVA/Consult/Przybyla-Kelly/Rinsing/Sequential rinsing.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
dat1 <- dat[dat$Rinse==1, ]
dat1$Log_EC1 <- dat1$Log_EC
dat <- merge(dat, dat1[, c("Spiked_1", "Sample", "Log_EC1")], all.x=TRUE)
dat$EC <- exp(dat$Log_EC)
dat$Log_ECDiff <- dat$Log_EC - dat$Log_EC1
dat$ECProp <- dat$EC/exp(dat$Log_EC1)
para("I am assuming that the E. coli data included in the spreadsheet ** Sequential rinsing.xlsx ** are natural log transformed,",
" not log10 transformed.")
para("E. Coli concentrations were taken from a single spiked sample and four field field samples (shoreline wrack).",
"  The spiked sample was created from the shoreline wrack of LV beach, homogenized, split into 3 replicates",
" (LV1, LV2, LV3) and each replicate was spiked with same E. coli concentration.",
"  Spiked samples were rinsed 7 times, and E. coli after each rinse was measured.",
"  The field samples included LS1, PL1, PL2, PL3.  All were analysed for E. coli concentrations.",  
"  Each was rinsed multiple times in order to get subsequent E. coli concentrations in a series of sequential rinsing.",  
"  Each sample had a different initial E. coli concentration, and each had different amount of rinses (4-8).")
attach(dat)
tab <- tapply(Log_EC, list(paste(Spiked_1, Sample, sep="-"), Rinse), mean)
tabl("E. Coli concentrations (natural log transformed) after 1 to 8 rinses from a single spiked sample(LV1, LV2, LV3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3).")
attach(dat)
tapply(!is.na(Log_EC), list(paste(Spiked_1, Sample, sep="-"), Rinse), sum)
tapply(Log_EC, list(paste(Spiked_1, Sample, sep="-"), Rinse), mean)
sug <- sort(unique(Spiked_1))
sus <- sort(unique(Sample))
suspch <- as.character(c(0:3, 1:3))
ax2 <- prettylog(EC, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. Coli  (concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("E. Coli concentrations versus number of rinses from a single spiked sample(LV1, LV2, LV3, plot characters 1-3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
ax2 <- prettylog(ECProp, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, log(ECProp), type="n", xlab="Rinses  (number)", ylab="E. Coli (proportional change from initial concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], log(ECProp)[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("Proportional change in E. Coli concentrations from the first rinse versus number of rinses",
" from a single spiked sample(LV1, LV2, LV3, plot characters 1-3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
endrtf()
detach(dat)
# C:\JVA\Consult\Przybyla-Kelly\Rinsing\Rinse.r
library(XLConnect)
doc <- startrtf(file=paste0(Sys.Date(), "Rinsing"), dir="C:/JVA/Consult/Przybyla-Kelly/Rinsing")
heading("Visualize Sequential Rinsing Data from Kasia Przybyla-Kelly")
heading(paste0(Sys.Date(), " - Jean V. Adams"), 2)
# read in the data
wb <- loadWorkbook("C:/JVA/Consult/Przybyla-Kelly/Rinsing/Sequential rinsing.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
dat1 <- dat[dat$Rinse==1, ]
dat1$Log_EC1 <- dat1$Log_EC
dat <- merge(dat, dat1[, c("Spiked_1", "Sample", "Log_EC1")], all.x=TRUE)
dat$EC <- exp(dat$Log_EC)
dat$Log_ECDiff <- dat$Log_EC - dat$Log_EC1
dat$ECProp <- dat$EC/exp(dat$Log_EC1)
para("I am assuming that the E. coli data included in the spreadsheet ** Sequential rinsing.xlsx ** are natural log transformed,",
" not log10 transformed.")
para("E. Coli concentrations were taken from a single spiked sample and four field field samples (shoreline wrack).",
"  The spiked sample was created from the shoreline wrack of LV beach, homogenized, split into 3 replicates",
" (LV1, LV2, LV3) and each replicate was spiked with same E. coli concentration.",
"  Spiked samples were rinsed 7 times, and E. coli after each rinse was measured.",
"  The field samples included LS1, PL1, PL2, PL3.  All were analysed for E. coli concentrations.",  
"  Each was rinsed multiple times in order to get subsequent E. coli concentrations in a series of sequential rinsing.",  
"  Each sample had a different initial E. coli concentration, and each had different amount of rinses (4-8).")
attach(dat)
tab <- tapply(Log_EC, list(paste(Spiked_1, Sample, sep="-"), Rinse), mean)
tabl("E. Coli concentrations (natural log transformed) after 1 to 8 rinses from a single spiked sample(LV1, LV2, LV3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3).")
attach(dat)
tapply(!is.na(Log_EC), list(paste(Spiked_1, Sample, sep="-"), Rinse), sum)
tapply(Log_EC, list(paste(Spiked_1, Sample, sep="-"), Rinse), mean)
sug <- sort(unique(Spiked_1))
sus <- sort(unique(Sample))
suspch <- as.character(c(0:3, 1:3))
ax2 <- prettylog(EC, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. Coli  (concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("E. Coli concentrations versus number of rinses from a single spiked sample(LV1, LV2, LV3, plot characters 1-3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
ax2 <- prettylog(ECProp, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(Rinse, log(ECProp), type="n", xlab="Rinses  (number)", ylab="E. Coli (proportional change from initial concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], log(ECProp)[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("Proportional change in E. Coli concentrations from the first rinse versus number of rinses",
" from a single spiked sample(LV1, LV2, LV3, plot characters 1-3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
endrtf()
detach(dat)
# C:\JVA\Consult\Przybyla-Kelly\Rinsing\Rinse.r
library(XLConnect)
doc <- startrtf(file=paste0(Sys.Date(), "Rinsing"), dir="C:/JVA/Consult/Przybyla-Kelly/Rinsing")
heading("Visualize Sequential Rinsing Data from Kasia Przybyla-Kelly")
heading(paste0(Sys.Date(), " - Jean V. Adams"), 2)
# read in the data
wb <- loadWorkbook("C:/JVA/Consult/Przybyla-Kelly/Rinsing/Sequential rinsing.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
dat1 <- dat[dat$Rinse==1, ]
dat1$Log_EC1 <- dat1$Log_EC
dat <- merge(dat, dat1[, c("Spiked_1", "Sample", "Log_EC1")], all.x=TRUE)
dat$EC <- exp(dat$Log_EC)
dat$Log_ECDiff <- dat$Log_EC - dat$Log_EC1
dat$ECProp <- dat$EC/exp(dat$Log_EC1)
para("I am assuming that the E. coli data included in the spreadsheet ** Sequential rinsing.xlsx ** are natural log transformed,",
" not log10 transformed.")
para("E. coli concentrations were taken from a single spiked sample and four field field samples (shoreline wrack).",
"  The spiked sample was created from the shoreline wrack of LV beach, homogenized, split into 3 replicates",
" (LV1, LV2, LV3) and each replicate was spiked with same E. coli concentration.",
"  Spiked samples were rinsed 7 times, and E. coli after each rinse was measured.",
"  The field samples included LS1, PL1, PL2, PL3.  All were analysed for E. coli concentrations.",  
"  Each was rinsed multiple times in order to get subsequent E. coli concentrations in a series of sequential rinsing.",  
"  Each sample had a different initial E. coli concentration, and each had different amount of rinses (4-8).")
attach(dat)
tab <- tapply(Log_EC, list(paste(Spiked_1, Sample, sep="-"), Rinse), mean)
tabl("E. coli concentrations (natural log transformed) after 1 to 8 rinses from a single spiked sample(LV1, LV2, LV3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3).  Rinses are in columns, samples are in rows.")
attach(dat)
tapply(!is.na(Log_EC), list(paste(Spiked_1, Sample, sep="-"), Rinse), sum)
tapply(Log_EC, list(paste(Spiked_1, Sample, sep="-"), Rinse), mean)
sug <- sort(unique(Spiked_1))
sus <- sort(unique(Sample))
suspch <- as.character(c(0:3, 1:3))
ax2 <- prettylog(EC, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.5)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. coli  (concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("E. coli concentrations versus number of rinses from a single spiked sample(LV1, LV2, LV3, plot characters 1-3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
ax2 <- prettylog(ECProp, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.5)
plot(Rinse, log(ECProp), type="n", xlab="Rinses  (number)", ylab="E. coli (proportional change from initial concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], log(ECProp)[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("Proportional change in E. coli concentrations from the first rinse versus number of rinses",
" from a single spiked sample(LV1, LV2, LV3, plot characters 1-3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
endrtf()
detach(dat)
search()
detach()
detach()
# C:\JVA\Consult\Przybyla-Kelly\Rinsing\Rinse.r
library(XLConnect)
doc <- startrtf(file=paste0(Sys.Date(), "Rinsing"), dir="C:/JVA/Consult/Przybyla-Kelly/Rinsing")
heading("Visualize Sequential Rinsing Data from Kasia Przybyla-Kelly")
heading(paste0(Sys.Date(), " - Jean V. Adams"), 2)
# read in the data
wb <- loadWorkbook("C:/JVA/Consult/Przybyla-Kelly/Rinsing/Sequential rinsing.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
dat1 <- dat[dat$Rinse==1, ]
dat1$Log_EC1 <- dat1$Log_EC
dat <- merge(dat, dat1[, c("Spiked_1", "Sample", "Log_EC1")], all.x=TRUE)
dat$EC <- exp(dat$Log_EC)
dat$Log_ECDiff <- dat$Log_EC - dat$Log_EC1
dat$ECProp <- dat$EC/exp(dat$Log_EC1)
para("I am assuming that the E. coli data included in the spreadsheet ** Sequential rinsing.xlsx ** are natural log transformed,",
" not log10 transformed.")
para("E. coli concentrations were taken from a single spiked sample and four field field samples (shoreline wrack).",
"  The spiked sample was created from the shoreline wrack of LV beach, homogenized, split into 3 replicates",
" (LV1, LV2, LV3) and each replicate was spiked with same E. coli concentration.",
"  Spiked samples were rinsed 7 times, and E. coli after each rinse was measured.",
"  The field samples included LS1, PL1, PL2, PL3.  All were analysed for E. coli concentrations.",  
"  Each was rinsed multiple times in order to get subsequent E. coli concentrations in a series of sequential rinsing.",  
"  Each sample had a different initial E. coli concentration, and each had different amount of rinses (4-8).")
attach(dat)
tab <- tapply(Log_EC, list(paste(Spiked_1, Sample, sep="-"), Rinse), mean)
tabl("E. coli concentrations (natural log transformed) after 1 to 8 rinses from a single spiked sample(LV1, LV2, LV3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3).  Rinses are in columns, samples are in rows.")
sug <- sort(unique(Spiked_1))
sus <- sort(unique(Sample))
suspch <- as.character(c(0:3, 1:3))
ax2 <- prettylog(EC, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.5)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. coli  (concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("E. coli concentrations versus number of rinses from a single spiked sample(LV1, LV2, LV3, plot characters 1-3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
ax2 <- prettylog(ECProp, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.5)
plot(Rinse, log(ECProp), type="n", xlab="Rinses  (number)", ylab="E. coli (proportional change from initial concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], log(ECProp)[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("Proportional change in E. coli concentrations from the first rinse versus number of rinses",
" from a single spiked sample(LV1, LV2, LV3, plot characters 1-3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
endrtf()
detach(dat)
search()
detach()
# C:\JVA\Consult\Przybyla-Kelly\Rinsing\Rinse.r
library(XLConnect)
doc <- startrtf(file=paste0(Sys.Date(), "Rinsing"), dir="C:/JVA/Consult/Przybyla-Kelly/Rinsing")
heading("Visualize Sequential Rinsing Data from Kasia Przybyla-Kelly")
heading(paste0(Sys.Date(), " - Jean V. Adams"), 2)
# read in the data
wb <- loadWorkbook("C:/JVA/Consult/Przybyla-Kelly/Rinsing/Sequential rinsing.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
dat1 <- dat[dat$Rinse==1, ]
dat1$Log_EC1 <- dat1$Log_EC
dat <- merge(dat, dat1[, c("Spiked_1", "Sample", "Log_EC1")], all.x=TRUE)
dat$EC <- exp(dat$Log_EC)
dat$Log_ECDiff <- dat$Log_EC - dat$Log_EC1
dat$ECProp <- dat$EC/exp(dat$Log_EC1)
para("I am assuming that the E. coli data included in the spreadsheet ** Sequential rinsing.xlsx ** are natural log transformed,",
" not log10 transformed.")
para("E. coli concentrations were taken from a single spiked sample and four field field samples (shoreline wrack).",
"  The spiked sample was created from the shoreline wrack of LV beach, homogenized, split into 3 replicates",
" (LV1, LV2, LV3) and each replicate was spiked with same E. coli concentration.",
"  Spiked samples were rinsed 7 times, and E. coli after each rinse was measured.",
"  The field samples included LS1, PL1, PL2, PL3.  All were analysed for E. coli concentrations.",  
"  Each was rinsed multiple times in order to get subsequent E. coli concentrations in a series of sequential rinsing.",  
"  Each sample had a different initial E. coli concentration, and each had different amount of rinses (4-8).")
attach(dat)
tab <- tapply(Log_EC, list(paste(Spiked_1, Sample, sep="-"), Rinse), mean)
tabl("E. coli concentrations (natural log transformed) after 1 to 8 rinses from a single spiked sample(LV1, LV2, LV3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3).  Rinses are in columns, samples are in rows.")
sug <- sort(unique(Spiked_1))
sus <- sort(unique(Sample))
suspch <- as.character(c(0:3, 1:3))
ax2 <- prettylog(EC, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.5)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. coli  (concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("E. coli concentrations versus number of rinses from a single spiked sample(LV1, LV2, LV3, plot characters 1-3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
ax2 <- prettylog(ECProp, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.5)
plot(Rinse, log(ECProp), type="n", xlab="Rinses  (number)", ylab="E. coli (proportional change from initial concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], log(ECProp)[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("Proportional change in E. coli concentrations from the first rinse versus number of rinses",
" from a single spiked sample(LV1, LV2, LV3, plot characters 1-3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
endrtf()
detach(dat)
tab
format(tab)
?format.default
format(tab, na.encode="-")
# C:\JVA\Consult\Przybyla-Kelly\Rinsing\Rinse.r
library(XLConnect)
doc <- startrtf(file=paste0(Sys.Date(), "Rinsing"), dir="C:/JVA/Consult/Przybyla-Kelly/Rinsing")
heading("Visualize Sequential Rinsing Data from Kasia Przybyla-Kelly")
heading(paste0(Sys.Date(), " - Jean V. Adams"), 2)
# read in the data
wb <- loadWorkbook("C:/JVA/Consult/Przybyla-Kelly/Rinsing/Sequential rinsing.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
dat1 <- dat[dat$Rinse==1, ]
dat1$Log_EC1 <- dat1$Log_EC
dat <- merge(dat, dat1[, c("Spiked_1", "Sample", "Log_EC1")], all.x=TRUE)
dat$EC <- exp(dat$Log_EC)
dat$Log_ECDiff <- dat$Log_EC - dat$Log_EC1
dat$ECProp <- dat$EC/exp(dat$Log_EC1)
para("I am assuming that the E. coli data included in the spreadsheet ** Sequential rinsing.xlsx ** are natural log transformed,",
" not log10 transformed.")
para("E. coli concentrations were taken from a single spiked sample and four field field samples (shoreline wrack).",
"  The spiked sample was created from the shoreline wrack of LV beach, homogenized, split into 3 replicates",
" (LV1, LV2, LV3) and each replicate was spiked with same E. coli concentration.",
"  Spiked samples were rinsed 7 times, and E. coli after each rinse was measured.",
"  The field samples included LS1, PL1, PL2, PL3.  All were analysed for E. coli concentrations.",  
"  Each was rinsed multiple times in order to get subsequent E. coli concentrations in a series of sequential rinsing.",  
"  Each sample had a different initial E. coli concentration, and each had different amount of rinses (4-8).")
attach(dat)
tab <- format(tapply(Log_EC, list(paste(Spiked_1, Sample, sep="-"), Rinse), mean))
tabl("E. coli concentrations (natural log transformed) after 1 to 8 rinses from a single spiked sample(LV1, LV2, LV3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3).  Rinses are in columns, samples are in rows.")
sug <- sort(unique(Spiked_1))
sus <- sort(unique(Sample))
suspch <- as.character(c(0:3, 1:3))
ax2 <- prettylog(EC, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.5)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. coli  (concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("E. coli concentrations versus number of rinses from a single spiked sample(LV1, LV2, LV3, plot characters 1-3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
ax2 <- prettylog(ECProp, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.5)
plot(Rinse, log(ECProp), type="n", xlab="Rinses  (number)", ylab="E. coli (proportional change from initial concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], log(ECProp)[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("Proportional change in E. coli concentrations from the first rinse versus number of rinses",
" from a single spiked sample(LV1, LV2, LV3, plot characters 1-3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
endrtf()
detach(dat)
# C:\JVA\Consult\Przybyla-Kelly\Rinsing\Rinse.r
library(XLConnect)
doc <- startrtf(file=paste0(Sys.Date(), "Rinsing"), dir="C:/JVA/Consult/Przybyla-Kelly/Rinsing")
heading("Visualize Sequential Rinsing Data from Kasia Przybyla-Kelly")
heading(paste0(Sys.Date(), " - Jean V. Adams"), 2)
# read in the data
wb <- loadWorkbook("C:/JVA/Consult/Przybyla-Kelly/Rinsing/Sequential rinsing.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
dat1 <- dat[dat$Rinse==1, ]
dat1$Log_EC1 <- dat1$Log_EC
dat <- merge(dat, dat1[, c("Spiked_1", "Sample", "Log_EC1")], all.x=TRUE)
dat$EC <- exp(dat$Log_EC)
dat$Log_ECDiff <- dat$Log_EC - dat$Log_EC1
dat$ECProp <- dat$EC/exp(dat$Log_EC1)
para("I am assuming that the E. coli data included in the spreadsheet ** Sequential rinsing.xlsx ** are natural log transformed,",
" not log10 transformed.")
para("E. coli concentrations were taken from a single spiked sample and four field field samples (shoreline wrack).",
"  The spiked sample was created from the shoreline wrack of LV beach, homogenized, split into 3 replicates",
" (LV1, LV2, LV3) and each replicate was spiked with same E. coli concentration.",
"  Spiked samples were rinsed 7 times, and E. coli after each rinse was measured.",
"  The field samples included LS1, PL1, PL2, PL3.  All were analysed for E. coli concentrations.",  
"  Each was rinsed multiple times in order to get subsequent E. coli concentrations in a series of sequential rinsing.",  
"  Each sample had a different initial E. coli concentration, and each had different amount of rinses (4-8).")
attach(dat)
tab <- format(tapply(Log_EC, list(paste(Spiked_1, Sample, sep="-"), Rinse), mean))
tabl("E. coli concentrations (natural log transformed) after 1 to 8 rinses from a single spiked sample(LV1, LV2, LV3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3).  Rinses are in columns, samples are in rows.")
sug <- sort(unique(Spiked_1))
sus <- sort(unique(Sample))
suspch <- as.character(c(0:3, 1:3))
ax2 <- prettylog(EC, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.5)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. coli  (concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("E. coli concentrations versus number of rinses from a single spiked sample(LV1, LV2, LV3, plot characters 1-3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
ax2 <- prettylog(ECProp, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.5)
plot(Rinse, log(ECProp), type="n", xlab="Rinses  (number)", ylab="E. coli (proportional change from initial concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], log(ECProp)[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("Proportional change in E. coli concentrations from the first rinse versus number of rinses",
" from a single spiked sample(LV1, LV2, LV3, plot characters 1-3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
endrtf()
detach(dat)
# C:\JVA\Consult\Przybyla-Kelly\Rinsing\Rinse.r
library(XLConnect)
doc <- startrtf(file=paste0(Sys.Date(), "Rinsing"), dir="C:/JVA/Consult/Przybyla-Kelly/Rinsing")
heading("Visualize Sequential Rinsing Data from Kasia Przybyla-Kelly")
heading(paste0(Sys.Date(), " - Jean V. Adams"), 2)
# read in the data
wb <- loadWorkbook("C:/JVA/Consult/Przybyla-Kelly/Rinsing/Sequential rinsing.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
dat1 <- dat[dat$Rinse==1, ]
dat1$Log_EC1 <- dat1$Log_EC
dat <- merge(dat, dat1[, c("Spiked_1", "Sample", "Log_EC1")], all.x=TRUE)
dat$EC <- exp(dat$Log_EC)
dat$Log_ECDiff <- dat$Log_EC - dat$Log_EC1
dat$ECProp <- dat$EC/exp(dat$Log_EC1)
para("I am assuming that the E. coli data included in the spreadsheet ** Sequential rinsing.xlsx ** are natural log transformed,",
" not log10 transformed.")
para("E. coli concentrations were taken from a single spiked sample and four field field samples (shoreline wrack).",
"  The spiked sample was created from the shoreline wrack of LV beach, homogenized, split into 3 replicates",
" (LV1, LV2, LV3) and each replicate was spiked with same E. coli concentration.",
"  Spiked samples were rinsed 7 times, and E. coli after each rinse was measured.",
"  The field samples included LS1, PL1, PL2, PL3.  All were analysed for E. coli concentrations.",  
"  Each was rinsed multiple times in order to get subsequent E. coli concentrations in a series of sequential rinsing.",  
"  Each sample had a different initial E. coli concentration, and each had different amount of rinses (4-8).")
attach(dat)
tab <- format(tapply(Log_EC, list(paste(Spiked_1, Sample, sep="-"), Rinse), mean))
tabl("E. coli concentrations (natural log transformed) after 1 to 8 rinses from a single spiked sample(LV1, LV2, LV3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3).  Rinses are in columns, samples are in rows.")
sug <- sort(unique(Spiked_1))
sus <- sort(unique(Sample))
suspch <- as.character(c(0:3, 1:3))
ax2 <- prettylog(EC, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.5)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. coli  (concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("E. coli concentrations versus number of rinses from a single spiked sample (LV1, LV2, LV3, plot characters 1-3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
ax2 <- prettylog(ECProp, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.5)
plot(Rinse, log(ECProp), type="n", xlab="Rinses  (number)", ylab="E. coli (proportional change from initial concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], log(ECProp)[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("Proportional change in E. coli concentrations from the first rinse versus number of rinses",
" from a single spiked sample (LV1, LV2, LV3, plot characters 1-3)",
" and four field field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
endrtf()
detach(dat)
cleanup()
q()
pkgin("artiFISHal")
?SimFish
cleanup()
q()
dfclip()
df <- dfclip()
df
dput(df)
delta <- df$row.names[-1] - df$row.names[-length(df$row.names)]
delta
first(delta)
first(delta) & delta==1
cumsum(first(delta) & delta==1)
cumsum(last(delta) & delta==1)
fdelta[delta==1]
fdelta <- first(delta)
fdelta[delta==1]
cumsum(fdelta[delta==1])
cleanup()
q()
main=structure(list(ID = c(1L, 1L, 1L, 1L, 2L, 2L, 3L, 4L, 4L, 4L), 
Diff = c(10L, 10L, 11L, 11L, 11L, 12L, 12L, 12L, 13L, 23L
), players = structure(c(1L, 2L, 2L, 1L, 1L, 3L, 4L, 3L, 
4L, 4L), .Label = c("A", "B", "C", "D"), class = "factor"), 
win = c(0L, 0L, 0L, 1L, 0L, 0L, 1L, 0L, 0L, 0L)), .Names = c("ID", 
"Diff", "players", "win"), class = "data.frame", row.names = c(NA, 
-10L))
names1=structure(list(A = c(TRUE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, 
FALSE, FALSE, FALSE), B = c(FALSE, TRUE, TRUE, FALSE, FALSE, 
FALSE, FALSE, FALSE, FALSE, FALSE), C = c(FALSE, FALSE, FALSE, 
FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE), D = c(FALSE, 
FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE)), .Names = c("A", 
"B", "C", "D"), class = "data.frame", row.names = c(NA, -10L))
mat=structure(list(A = c(TRUE, NA, NA, NA, TRUE, NA, FALSE, FALSE, 
NA, NA), B = c(FALSE, NA, NA, NA, FALSE, NA, FALSE, FALSE, NA, 
NA), C = c(FALSE, NA, NA, NA, FALSE, NA, FALSE, TRUE, NA, NA), 
D = c(FALSE, NA, NA, NA, FALSE, NA, TRUE, FALSE, NA, NA)), .Names = c("A", 
"B", "C", "D"), class = "data.frame", row.names = c(NA, -10L))
p<-c(1,5,7,8)
c<-p
colnames(mat)<-names(names1)
mat[c,]<-names1[c,]
n_media<-4
r<-rep(0.5,n_media)
q<-which(is.na(mat[,1]))
main
names1
mat
ls()
cleanup()
main=structure(list(ID = c(1L, 1L, 1L, 1L, 2L, 2L, 3L, 4L, 4L, 4L), 
Diff = c(10L, 10L, 11L, 11L, 11L, 12L, 12L, 12L, 13L, 23L
), players = structure(c(1L, 2L, 2L, 1L, 1L, 3L, 4L, 3L, 
4L, 4L), .Label = c("A", "B", "C", "D"), class = "factor"), 
win = c(0L, 0L, 0L, 1L, 0L, 0L, 1L, 0L, 0L, 0L)), .Names = c("ID", 
"Diff", "players", "win"), class = "data.frame", row.names = c(NA, 
-10L))
names1=structure(list(A = c(TRUE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE, 
FALSE, FALSE, FALSE), B = c(FALSE, TRUE, TRUE, FALSE, FALSE, 
FALSE, FALSE, FALSE, FALSE, FALSE), C = c(FALSE, FALSE, FALSE, 
FALSE, FALSE, TRUE, FALSE, TRUE, FALSE, FALSE), D = c(FALSE, 
FALSE, FALSE, FALSE, FALSE, FALSE, TRUE, FALSE, TRUE, TRUE)), .Names = c("A", 
"B", "C", "D"), class = "data.frame", row.names = c(NA, -10L))
mat=structure(list(A = c(TRUE, NA, NA, NA, TRUE, NA, FALSE, FALSE, 
NA, NA), B = c(FALSE, NA, NA, NA, FALSE, NA, FALSE, FALSE, NA, 
NA), C = c(FALSE, NA, NA, NA, FALSE, NA, FALSE, TRUE, NA, NA), 
D = c(FALSE, NA, NA, NA, FALSE, NA, TRUE, FALSE, NA, NA)), .Names = c("A", 
"B", "C", "D"), class = "data.frame", row.names = c(NA, -10L))
p<-c(1,5,7,8)
colnames(mat)<-names(names1)
mat[p,]<-names1[p,]
r<-rep(0.5,4)
q<-which(is.na(mat[,1]))
main
names1
mat
p
r
q
repeat
{
    p<-p+1
    p<-intersect(q,p)
    l<-main[p,"Diff"]-main[p-1,"Diff"]
    k <- t(outer(r, l, "^"))
    mat[p,]<-mat[p-1,]*k+names1[p,]
    q<-which(is.na(mat[,1]))
    if(length(q)==0)break
}
ls()
l
k
mat
q()
cleanup()
df <- dfclip()
df
cumsum(rev(table(table(cumsum(c(TRUE,diff(df$row.names)!=1))))))
diff(df$row.names)
diff(df$row.names)!=1
(cumsum(c(TRUE,diff(df$row.names)!=1)))
table(cumsum(c(TRUE,diff(df$row.names)!=1)))
table(table(cumsum(c(TRUE,diff(df$row.names)!=1))))
rev(table(table(cumsum(c(TRUE,diff(df$row.names)!=1)))))
cumsum(rev(table(table(cumsum(c(TRUE,diff(df$row.names)!=1))))))
cumsum(c(TRUE,diff(df$row.names)!=1))
dim(df)
cumsum(c(TRUE,diff(df$row.names)!=1)) & diff(df$row
delta <- c(TRUE,diff(df$row.names)!=1)
cumsum(delta)[delta==1]
delta <- c(TRUE,diff(df$row.names)!=1)
cumsum(delta)[delta==1]
cumsum(delta)
delta
cumsum(delta[delta==1])
delta[delta==1]
delta
delta <- c(NA, diff(df$row.names))
delat
delta
delta <- c(0, diff(df$row.names))
cumsum(delta==1)
delta
cumsum(delta!=1)
cbind(delta, cumsum(delta!=1))
delta <- c(0, diff(df$row.names))
tally <- cumsum(delta!=1)
tally[delta==1]
table(tally[delta==1])
table(table(tally[delta==1]))
df$row.names
cbind(df$row.names, delta, tally)
table(tally[delta==1])
table(tally[delta==1])+1
table(table(tally[delta==1])+1)
tmp <- table(rle(cumsum(c(1L, diff(df$row.names)) != 1L))$lengths)
cumsum(rev(tmp))
dput(df)
cleanup()
df <- structure(list(
row.names = c(51L, 52L, 64L, 65L, 66L, 77L, 78L, 84L, 85L, 117L), 
Tx = c(33.9, 33, 32.8, 32.7, 34.9, 33.6, 34.6, 32.9, 35.1, 32), 
Hx = c(43.48, 41.03, 37.74, 44.53, 42.43, 38.74, 45.46, 41.67, 43.15, 37.11), 
Tn = c(24.9, 22.5, 23.3, 22.3, 23.5, 21.8, 27.1, 24.1, 25, 20)), 
.Names = c("row.names", "Tx", "Hx", "Tn"), class = "data.frame", 
row.names = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10"))
delta <- c(0, diff(df$row.names))
tally <- cumsum(delta!=1)
table(table(tally[delta==1])+1)
table(table(tally[delta==1])+1)
count[names(count) %in% c(2, 3)]
count <- table(table(tally[delta==1])+1)
count[names(count) %in% c(2, 3)]
twoplus <- sum(count[names(count) %in% c(2, 3)])
df <- structure(list(
row.names = c(51L, 52L, 64L, 65L, 66L, 77L, 78L, 84L, 85L, 117L), 
Tx = c(33.9, 33, 32.8, 32.7, 34.9, 33.6, 34.6, 32.9, 35.1, 32), 
Hx = c(43.48, 41.03, 37.74, 44.53, 42.43, 38.74, 45.46, 41.67, 43.15, 37.11), 
Tn = c(24.9, 22.5, 23.3, 22.3, 23.5, 21.8, 27.1, 24.1, 25, 20)), 
.Names = c("row.names", "Tx", "Hx", "Tn"), class = "data.frame", 
row.names = c("1", "2", "3", "4", "5", "6", "7", "8", "9", "10"))
delta <- c(0, diff(df$row.names))
tally <- cumsum(delta!=1)
count <- table(table(tally[delta==1])+1)
twoplus <- sum(count[names(count) > 1.999])
threeplus <- sum(count[names(count) > 2.999])
twoplus
threeplus
cleanup()
q()
dat <- read.csv("C:/JVA/Lamprey/ChemControl/Toxicity/Nomo1Digi.csv")
dat
head(dat)
dat <- read.csv("C:/JVA/Lamprey/ChemControl/Toxicity/Nomo1Digi.csv")
A <- c(0.02, 0.03, 0.04, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 1, 2, 3, 4, 5, 10, 20, 30, 50)
ya <- dat$y1[dat$group==1]
plot(ya, A)
length(ya)
length(A)
plot(ya)
plot(rep(1, length(ya)), ya)
ya
A
plot(rep(1, length(ya)), ya, log="y")
signif(ya, 1)
ya
A
signif(ya, 1)
length(ya)
length(A)
dfclip()
dat <- read.csv("C:/JVA/Lamprey/ChemControl/Toxicity/Nomo1Digi.csv")
A <- c(0.02, 0.03, 0.04, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 1, 2, 3, 4, 5, 10, 20, 30, 50)
ya <- dat$y1[dat$group==1]
plot(ya, A)
plot(log(ya), A)
A <- c(0.02, 0.03, 0.04, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 1, 2, 3, 4, 5, 10, 20, 30, 50)
ya <- log(dat$y1[dat$group==1])
plot(ya, A)
plot(A, ya)
plot(A, ya)
lines(A, log(A))
lines(A, log10(A))
lines(A, sqrt(A))
plot(log(A), ya)
abline(lsfit(log(A), ya))
fit <- lm(log(A) ~ ya)
summary(fit)
logit
logit2prob
search()
ls(3)
??logit
library(boot)
?logit
A
logit(A/100)
plot(logit(A/100), ya)
??probit
B <- c(0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 1, 2, 3, 4, 5, 10, 20, 30, 40, 50)
yb <- log(dat$y1[dat$group==2])
length(B)
length(yb)
B <- c(0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 1, 2, 3, 4, 5, 10, 20, 30, 40, 50)
yb <- log(dat$y1[dat$group==2])
plot(log(B), yb)
abline(lsfit(log(B), yb))
summary(lm(log(B) ~ yb))
C <- c(0.001, 0.002, 0.003, 0.004, 0.005, 
0.01, 0.02, 0.03, 0.04, 0.05, 
0.1, 0.2, 0.3, 0.4, 0.5, 1, 2)
yc <- log(dat$y1[dat$group==3])
plot(log(C), yc)
abline(lsfit(log(C), yc))
summary(lm(log(C) ~ yc))
=2*.346
2*.346
.692 + .27
3.56+.91
2*.91/.96
exp(4.47)
1/exp(4.47)
# C:\JVA\Lamprey\ChemControl\Toxicity\Nomo1.r
dat <- read.csv("C:/JVA/Lamprey/ChemControl/Toxicity/Nomo1Digi.csv")
A <- c(0.02, 0.03, 0.04, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 1, 2, 3, 4, 5, 10, 20, 30, 50)
ya <- log(dat$y1[dat$group==1])
plot(log(A), ya)
abline(lsfit(log(A), ya))
summary(lm(log(A) ~ ya))
B <- c(0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 1, 2, 3, 4, 5, 10, 20, 30, 40, 50)
yb <- log(dat$y1[dat$group==2])
plot(log(B), yb)
abline(lsfit(log(B), yb))
summary(lm(log(B) ~ yb))
C <- c(0.001, 0.002, 0.003, 0.004, 0.005, 
0.01, 0.02, 0.03, 0.04, 0.05, 
0.1, 0.2, 0.3, 0.4, 0.5, 1, 2)
yc <- log(dat$y1[dat$group==3])
plot(log(C), yc)
abline(lsfit(log(C), yc))
summary(lm(log(C) ~ yc))
0.9095632 + 2 * 0.0006336
0.9112315 - 2 * 0.0006751
0.9112315 + 0.9095632
(0.9112315 + 0.9095632)
(0.9112315 + 0.9095632)/2
log(B)/(0.91*yb)
CI(log(B)/(0.91*yb))
CI(log(C)/(0.91*yc))
length(A)
length(B)
length(C)
sel <- c(1, length(A))
summary(lm(log(A[sel]) ~ ya[sel]))
sel <- c(1, length(B))
summary(lm(log(B[sel]) ~ yb[sel]))
sel <- c(1, length(C))
summary(lm(log(C[sel]) ~ yc[sel]))
2*.346/.91
.27/.96
76+28
CI(log(B)-(0.91*yb))
CI(log(C)-(0.91*yc))
CI(log(A)-(0.91*ya))
CI(log(B)-(0.91*yb))
CI(log(C)-(0.91*yc))
CI(log(A)-(0.91*ya))
CI(log(B)-(0.91*yb))
CI(log(C)-(0.91*yc))
log(100) - 2*0.3461 - 3.5573
newya <- (log(A) + 0.35567)/0.91
newyb <- (log(B) - 0.3461)/0.91
newyc <- (log(C) + 3.5573)/0.91
windows()
plot(1, 1, type="n", xlim=c(0.5, 3.5), ylim=range(newya, newyb, newyc))
points(rep(1, length(newya)), newya)
text(rep(1, length(newya)), newya, A, pos=2)
points(rep(2, length(newyb)), newyb)
text(rep(2, length(newyb)), newyb, B, pos=2)
points(rep(3, length(newyc)), newyc)
text(rep(3, length(newyc)), newyc, C, pos=2)
plot(1, 1, type="n", xlim=c(0.5, 3.5), ylim=range(newya, newyb, newyc))
points(rep(1, length(newya)), newya)
text(rep(1, length(newya)), newya, A, pos=4)
points(rep(2, length(newyb)), newyb)
text(rep(2, length(newyb)), newyb, B, pos=4)
points(rep(3, length(newyc)), newyc)
text(rep(3, length(newyc)), newyc, C, pos=4)
plot(1, 1, type="n", xlim=c(0.5, 3.5), ylim=range(newya, newyb, newyc))
points(rep(0.9, length(ya)), ya, col="red", pch=3)
points(rep(1, length(newya)), newya)
text(rep(1, length(newya)), newya, A, pos=4)
points(rep(1.9, length(yb)), yb, col="red", pch=3)
points(rep(2, length(newyb)), newyb)
text(rep(2, length(newyb)), newyb, B, pos=4)
points(rep(2.9, length(yc)), yc, col="red", pch=3)
points(rep(3, length(newyc)), newyc)
text(rep(3, length(newyc)), newyc, C, pos=4)
plot(1, 1, type="n", xlim=c(0.5, 3.5), ylim=range(newya, newyb, newyc))
points(rep(0.9, length(ya)), ya, col="red")
points(rep(1, length(newya)), newya, pch=3, type="l")
text(rep(1, length(newya)), newya, A, pos=4)
points(rep(1.9, length(yb)), yb, col="red")
points(rep(2, length(newyb)), newyb, pch=3, type="l")
text(rep(2, length(newyb)), newyb, B, pos=4)
points(rep(2.9, length(yc)), yc, col="red")
points(rep(3, length(newyc)), newyc, pch=3, type="l")
text(rep(3, length(newyc)), newyc, C, pos=4)
plot(1, 1, type="n", xlim=c(0.5, 3.5), ylim=range(newya, newyb, newyc))
points(rep(1, length(ya)), ya, col="red")
points(rep(1, length(newya)), newya, pch=3, type="o")
text(rep(1, length(newya)), newya, A, pos=4)
points(rep(2, length(yb)), yb, col="red")
points(rep(2, length(newyb)), newyb, pch=3, type="o")
text(rep(2, length(newyb)), newyb, B, pos=4)
points(rep(3, length(yc)), yc, col="red")
points(rep(3, length(newyc)), newyc, pch=3, type="o")
text(rep(3, length(newyc)), newyc, C, pos=4)
showmarks()
??show.marks
??show
showmarks <- function() {
cat("for more color info see\nhttp://research.stowers-institute.org/efg/R/Color/Chart/index.htm\n")
windows(h=9)
par(mar=rep(1, 4))
n <- c(6, 25, 8, 30, 30)
plot(c(1, 10), -c(1, 15), type="n", xlab="", ylab="", axes=F)
for(i in 1:n[1]) lines(c(1, 10), -rep(i, 2), lty=i, cex=3, lwd=3)
x <- rep(1:10, 3)
y <- rep(7:9, rep(10, 3))
for(i in 1:n[2]) points(x[i], -y[i], pch=i, cex=3)
x <- rep(1:10, 3)
y <- rep(10:11, rep(10, 2))
for(i in 1:n[3]) points(x[i], -y[i], pch=15, cex=5, col=i)
y <- rep(11:13, rep(10, 3))
cols <- rainbow(30)
for(i in 1:n[4]) points(x[i], -y[i], pch=15, cex=5, col=cols[i])
y <- rep(14:15, rep(10, 2))
for(i in 1:n[5]) text(x[i], -y[i], "Font", font=i)
}
showmarks()
search()
ls(4)
blindcolz
showmarks <- function() {
cat("For more color info see\nhttp://research.stowers-institute.org/efg/R/Color/Chart/index.htm\n")
par(mar=rep(1, 4))
n <- c(6, 25, 8, 30, 30)
plot(c(1, 10), -c(1, 15), type="n", xlab="", ylab="", axes=F)
for(i in 1:n[1]) lines(c(1, 10), -rep(i, 2), lty=i, cex=3, lwd=3)
x <- rep(1:10, 3)
y <- rep(7:9, rep(10, 3))
for(i in 1:n[2]) points(x[i], -y[i], pch=i, cex=3)
x <- rep(1:10, 3)
y <- rep(10:11, rep(10, 2))
for(i in 1:n[3]) points(x[i], -y[i], pch=15, cex=5, col=i)
y <- rep(11:13, rep(10, 3))
cols <- rainbow(30)
cols <- blindcolz
for(i in 1:n[4]) points(x[i], -y[i], pch=15, cex=5, col=cols[i])
y <- rep(14:15, rep(10, 2))
for(i in 1:n[5]) text(x[i], -y[i], "Font", font=i)
}
showmarks()
for(i in 1:n[4]) points(x[i], -y[i], pch=15, cex=5, col=cols[i], bg="yellow")
n <- c(6, 25, 8, 30, 30)
for(i in 1:n[4]) points(x[i], -y[i], pch=15, cex=5, col=cols[i], bg="yellow")
x <- rep(1:10, 3)
for(i in 1:n[4]) points(x[i], -y[i], pch=15, cex=5, col=cols[i], bg="yellow")
y <- rep(11:13, rep(10, 3))
for(i in 1:n[4]) points(x[i], -y[i], pch=15, cex=5, col=cols[i], bg="yellow")
cols <- blindcolz
for(i in 1:n[4]) points(x[i], -y[i], pch=15, cex=5, col=cols[i], bg="yellow")
?points
for(i in 1:n[4]) points(x[i], -y[i], pch=22, cex=5, col=cols[i], bg="yellow")
for(i in 1:n[4]) points(x[i], -y[i], pch=22, cex=5, bg=cols[i], col="yellow")
for(i in 1:n[4]) points(x[i], -y[i], pch=22, cex=5, bg=cols[i])
for(i in 1:n[4]) points(x[i], -y[i], pch=22, cex=5, bg=cols[i], lwd=2)
#' Show Marks
#'
#' Show marks used in graphing, including line types, plotting symbols, default colors, color blind friendly colors (`blindcolz`), and fonts.
#' @export
#' @examples 
#' showmarks()
showmarks <- function() {
cat("For more color info see\nhttp://research.stowers-institute.org/efg/R/Color/Chart/index.htm\n")
par(mar=rep(1, 4))
n <- c(6, 25, 8, 30, 30)
plot(c(1, 10), -c(1, 15), type="n", xlab="", ylab="", axes=F)
for(i in 1:n[1]) lines(c(1, 10), -rep(i, 2), lty=i, cex=3, lwd=3)
x <- rep(1:10, 3)
y <- rep(7:9, rep(10, 3))
for(i in 1:n[2]) points(x[i], -y[i], pch=i, cex=3)
x <- rep(1:10, 3)
y <- rep(10:11, rep(10, 2))
for(i in 1:n[3]) points(x[i], -y[i], pch=22, cex=5, bg=i)
y <- rep(11:13, rep(10, 3))
cols <- blindcolz
for(i in 1:n[4]) points(x[i], -y[i], pch=22, cex=5, bg=cols[i])
y <- rep(14:15, rep(10, 2))
for(i in 1:n[5]) text(x[i], -y[i], "Font", font=i)
}
showmarks()
windows()
showmarks()
showmarks <- function() {
cat("For more color info see\nhttp://research.stowers-institute.org/efg/R/Color/Chart/index.htm\n")
par(mar=rep(1, 4))
n <- c(6, 25, 8, length(blindcolz), 30)
plot(c(1, 10), -c(1, 15), type="n", xlab="", ylab="", axes=F)
for(i in 1:n[1]) lines(c(1, 10), -rep(i, 2), lty=i, cex=3, lwd=3)
x <- rep(1:10, 3)
y <- rep(7:9, rep(10, 3))
for(i in 1:n[2]) points(x[i], -y[i], pch=i, cex=3)
x <- rep(1:10, 3)
y <- rep(10:11, rep(10, 2))
for(i in 1:n[3]) points(x[i], -y[i], pch=22, cex=5, bg=i)
y <- rep(11:13, rep(10, 3))
cols <- blindcolz
for(i in 1:n[4]) points(x[i], -y[i], pch=22, cex=5, bg=cols[i])
y <- rep(14:15, rep(10, 2))
for(i in 1:n[5]) text(x[i], -y[i], "Font", font=i)
}
showmarks()
showmarks <- function() {
cat("For more color info see\nhttp://research.stowers-institute.org/efg/R/Color/Chart/index.htm\n")
par(mar=rep(1, 4))
n <- c(6, 25, 10, length(blindcolz), 30)
plot(c(1, 10), -c(1, 15), type="n", xlab="", ylab="", axes=F)
for(i in 1:n[1]) lines(c(1, 10), -rep(i, 2), lty=i, cex=3, lwd=3)
x <- rep(1:10, 3)
y <- rep(7:9, rep(10, 3))
for(i in 1:n[2]) points(x[i], -y[i], pch=i, cex=3)
x <- rep(1:10, 3)
y <- rep(10:11, rep(10, 2))
for(i in 1:n[3]) points(x[i], -y[i], pch=22, cex=5, bg=i)
y <- rep(11:13, rep(10, 3))
cols <- blindcolz
for(i in 1:n[4]) points(x[i], -y[i], pch=22, cex=5, bg=cols[i])
y <- rep(14:15, rep(10, 2))
for(i in 1:n[5]) text(x[i], -y[i], "Font", font=i)
}
showmarks()
n[2]/10
ceiling(n/10)
cat("For more color info see\nhttp://research.stowers-institute.org/efg/R/Color/Chart/index.htm\n")
par(mar=rep(1, 4))
# number of marks in each group
n <- c(6, 25, 8, length(blindcolz), 30)
# number of rows for the marks in each group
rowsn <- ceiling(n/10)
rowsn[1] <- n[1]
rowsn
seq(rowsn)
lapply(rowsn, seq)
unlist(lapply(rowsn, seq))
cumsum(unlist(lapply(rowsn, seq)))
rep(1:length(rowsn), rowsn)
groupn <- rep(1:length(rowsn), rowsn)
groupn
length(groupn)
match(1, groupn)
match(groupn, 1)
groupn==1
rowsn
rowz <- 1:length(groupn)
rowz
rowz
rowz[groupn==1]
groupn
rowz[groupn==2]
rowsn
#' Show Marks
#'
#' Show marks used in graphing, including line types, plotting symbols, default colors, color blind friendly colors (`blindcolz`), and fonts.
#' @export
#' @examples 
#' showmarks()
showmarks <- function() {
cat("For more color info see\nhttp://research.stowers-institute.org/efg/R/Color/Chart/index.htm\n")
par(mar=rep(1, 4))
# number of marks in each group
n <- c(6, 25, 8, length(blindcolz), 30)
# number of rows for the marks in each group
rowsn <- ceiling(n/10)
rowsn[1] <- n[1]
groupn <- rep(1:length(rowsn), rowsn)
rowz <- 1:length(groupn)
plot(c(1, 10), -rowz, type="n", xlab="", ylab="", axes=F)
for(i in rowz[groupn==1]) lines(c(1, 10), -rep(i, 2), lty=i, cex=3, lwd=3)
x <- rep(1:10, 3)
y <- rep(rowz[groupn==2], rep(10, rowsn[2]))
for(i in rowz[groupn==2]) points(x[i], -y[i], pch=i, cex=3)
y <- rep(rowz[groupn==3], rep(10, rowsn[3]))
for(i in rowz[groupn==3]) points(x[i], -y[i], pch=22, cex=5, bg=i)
y <- rep(rowz[groupn==4], rep(10, rowsn[4]))
for(i in rowz[groupn==4]) points(x[i], -y[i], pch=22, cex=5, bg=blindcolz[i])
y <- rep(rowz[groupn==5], rep(10, rowsn[5]))
for(i in rowz[groupn==5]) text(x[i], -y[i], "Font", font=i)
}
cat("For more color info see\nhttp://research.stowers-institute.org/efg/R/Color/Chart/index.htm\n")
par(mar=rep(1, 4))
# number of marks in each group
n <- c(6, 25, 8, length(blindcolz), 30)
# number of rows for the marks in each group
rowsn <- ceiling(n/10)
rowsn[1] <- n[1]
groupn <- rep(1:length(rowsn), rowsn)
rowz <- 1:length(groupn)
plot(c(1, 10), -rowz, type="n", xlab="", ylab="", axes=F)
for(i in rowz[groupn==1]) lines(c(1, 10), -rep(i, 2), lty=i, cex=3, lwd=3)
x <- rep(1:10, 3)
y <- rep(rowz[groupn==2], rep(10, rowsn[2]))
for(i in rowz[groupn==2]) points(x[i], -y[i], pch=i, cex=3)
y <- rep(rowz[groupn==3], rep(10, rowsn[3]))
for(i in rowz[groupn==3]) points(x[i], -y[i], pch=22, cex=5, bg=i)
y <- rep(rowz[groupn==4], rep(10, rowsn[4]))
for(i in rowz[groupn==4]) points(x[i], -y[i], pch=22, cex=5, bg=blindcolz[i])
y <- rep(rowz[groupn==5], rep(10, rowsn[5]))
for(i in rowz[groupn==5]) text(x[i], -y[i], "Font", font=i)
rowz
range(rowz)
cat("For more color info see\nhttp://research.stowers-institute.org/efg/R/Color/Chart/index.htm\n")
par(mar=rep(1, 4))
# number of marks in each group
n <- c(6, 25, 8, length(blindcolz), 30)
# number of rows for the marks in each group
rowsn <- ceiling(n/10)
rowsn[1] <- n[1]
groupn <- rep(1:length(rowsn), rowsn)
rowz <- 1:length(groupn)
plot(c(1, 10), -range(rowz), type="n", xlab="", ylab="", axes=F)
for(i in rowz[groupn==1]) lines(c(1, 10), -rep(i, 2), lty=i, cex=3, lwd=3)
x <- rep(1:10, 3)
y <- rep(rowz[groupn==2], rep(10, rowsn[2]))
for(i in rowz[groupn==2]) points(x[i], -y[i], pch=i, cex=3)
y <- rep(rowz[groupn==3], rep(10, rowsn[3]))
for(i in rowz[groupn==3]) points(x[i], -y[i], pch=22, cex=5, bg=i)
y <- rep(rowz[groupn==4], rep(10, rowsn[4]))
for(i in rowz[groupn==4]) points(x[i], -y[i], pch=22, cex=5, bg=blindcolz[i])
y <- rep(rowz[groupn==5], rep(10, rowsn[5]))
for(i in rowz[groupn==5]) text(x[i], -y[i], "Font", font=i)
rep(rowz[groupn==5], rep(10, rowsn[5]))
rep(14:15, rep(10, 2))
x <- rep(1:10, 3)
y <- rep(rowz[groupn==2], rep(10, rowsn[2]))
for(i in seq(y)) points(x[i], -y[i], pch=i,  cex=3)
cat("For more color info see\nhttp://research.stowers-institute.org/efg/R/Color/Chart/index.htm\n")
par(mar=rep(1, 4))
# number of marks in each group
n <- c(6, 25, 8, length(blindcolz), 30)
# number of rows for the marks in each group
rowsn <- ceiling(n/10)
rowsn[1] <- n[1]
groupn <- rep(1:length(rowsn), rowsn)
rowz <- 1:length(groupn)
plot(c(1, 10), -range(rowz), type="n", xlab="", ylab="", axes=F)
for(i in rowz[groupn==1]) lines(c(1, 10), -rep(i, 2), lty=i, cex=3, lwd=3)
x <- rep(1:10, 3)
y <- rep(rowz[groupn==2], rep(10, rowsn[2]))
for(i in seq(y)) points(x[i], -y[i], pch=i,  cex=3)
y <- rep(rowz[groupn==3], rep(10, rowsn[3]))
for(i in seq(y)) points(x[i], -y[i], pch=22, cex=5, bg=i)
y <- rep(rowz[groupn==4], rep(10, rowsn[4]))
for(i in seq(y)) points(x[i], -y[i], pch=22, cex=5, bg=blindcolz[i])
y <- rep(rowz[groupn==5], rep(10, rowsn[5]))
for(i in seq(y))   text(x[i], -y[i], "Font", font=i)
x <- rep(1:10, 3)
y <- rep(rowz[groupn==2], rep(10, rowsn[2]))
for(i in seq(y)) points(x[i], -y[i], pch=i,  cex=3)
x
y
rowzn
rowz
rowsn
y
seq(y)
rowz[groupn==1]\
rowz[groupn==1]
cat("For more color info see\nhttp://research.stowers-institute.org/efg/R/Color/Chart/index.htm\n")
par(mar=rep(1, 4))
# number of marks in each group
n <- c(6, 25, 8, length(blindcolz), 30)
# number of rows for the marks in each group
rowsn <- ceiling(n/10)
rowsn[1] <- n[1]
groupn <- rep(1:length(rowsn), rowsn)
rowz <- 1:length(groupn)
plot(c(1, 10), -range(rowz), type="n", xlab="", ylab="", axes=F)
for(i in 1:n[1]) lines(c(1, 10), -rep(i, 2), lty=i, cex=3, lwd=3)
x <- rep(1:10, max(rowsn[-1]))
y <- rep(rowz[groupn==2], rep(10, rowsn[2]))
for(i in 1:n[2]) points(x[i], -y[i], pch=i,  cex=3)
y <- rep(rowz[groupn==3], rep(10, rowsn[3]))
for(i in 1:n[3]) points(x[i], -y[i], pch=22, cex=5, bg=i)
y <- rep(rowz[groupn==4], rep(10, rowsn[4]))
for(i in 1:n[4]) points(x[i], -y[i], pch=22, cex=5, bg=blindcolz[i])
y <- rep(rowz[groupn==5], rep(10, rowsn[5]))
for(i in 1:n[5])   text(x[i], -y[i], "Font", font=i)
cat("For more color info see\nhttp://research.stowers-institute.org/efg/R/Color/Chart/index.htm\n")
par(mar=rep(1, 4))
# number of marks in each group
n <- c(6, 25, 8, length(blindcolz), 20)
# number of rows for the marks in each group
rowsn <- ceiling(n/10)
rowsn[1] <- n[1]
groupn <- rep(1:length(rowsn), rowsn)
rowz <- 1:length(groupn)
plot(c(1, 10), -range(rowz), type="n", xlab="", ylab="", axes=F)
for(i in 1:n[1]) lines(c(1, 10), -rep(i, 2), lty=i, cex=3, lwd=3)
x <- rep(1:10, max(rowsn[-1]))
y <- rep(rowz[groupn==2], rep(10, rowsn[2]))
for(i in 1:n[2]) points(x[i], -y[i], pch=i,  cex=3)
y <- rep(rowz[groupn==3], rep(10, rowsn[3]))
for(i in 1:n[3]) points(x[i], -y[i], pch=22, cex=5, bg=i)
y <- rep(rowz[groupn==4], rep(10, rowsn[4]))
for(i in 1:n[4]) points(x[i], -y[i], pch=22, cex=5, bg=blindcolz[i])
y <- rep(rowz[groupn==5], rep(10, rowsn[5]))
for(i in 1:n[5])   text(x[i], -y[i], "Font", font=i)
windows()
plot(1, 1, type="n", xlim=c(0.5, 3.5), ylim=range(newya, newyb, newyc))
text(rep(0.9, length(ya)), ya, ">", col="red")
points(rep(1, length(ya)), ya, col="red")
points(rep(1, length(newya)), newya, pch=3, type="o")
text(rep(1, length(newya)), newya, A, pos=4)
#points(rep(2, length(yb)), yb, col="red")
points(rep(2, length(newyb)), newyb, pch=3, type="o")
text(rep(2, length(newyb)), newyb, B, pos=4)
#points(rep(3, length(yc)), yc, col="red")
points(rep(3, length(newyc)), newyc, pch=3, type="o")
text(rep(3, length(newyc)), newyc, C, pos=4)
plot(1, 1, type="n", xlim=c(0.5, 3.5), ylim=range(newya, newyb, newyc))
text(rep(0.9, length(ya)), ya, ">", col="red")
text(rep(0.9, length(ya)), newya, A, pos=2, col="red")
points(rep(1, length(ya)), ya, col="red")
points(rep(1, length(newya)), newya, pch=3, type="o")
text(rep(1, length(newya)), newya, A, pos=4)
#points(rep(2, length(yb)), yb, col="red")
points(rep(2, length(newyb)), newyb, pch=3, type="o")
text(rep(2, length(newyb)), newyb, B, pos=4)
#points(rep(3, length(yc)), yc, col="red")
points(rep(3, length(newyc)), newyc, pch=3, type="o")
text(rep(3, length(newyc)), newyc, C, pos=4)
plot(1, 1, type="n", xlim=c(0.5, 3.5), ylim=range(newya, newyb, newyc))
text(rep(0.9, length(ya)), ya, ">", col="red")
text(rep(0.9, length(ya)), ya, A, pos=2, col="red")
#points(rep(1, length(ya)), ya, col="red")
points(rep(1, length(newya)), newya, pch=3, type="o")
text(rep(1, length(newya)), newya, A, pos=4)
#points(rep(2, length(yb)), yb, col="red")
points(rep(2, length(newyb)), newyb, pch=3, type="o")
text(rep(2, length(newyb)), newyb, B, pos=4)
#points(rep(3, length(yc)), yc, col="red")
points(rep(3, length(newyc)), newyc, pch=3, type="o")
text(rep(3, length(newyc)), newyc, C, pos=4)
plot(1, 1, type="n", xlim=c(0.5, 3.5), ylim=range(newya, newyb, newyc))
text(rep(0.9, length(ya)), ya, ">", col="red")
text(rep(0.9, length(ya)), ya, A, pos=2, col="red", cex=0.8)
#points(rep(1, length(ya)), ya, col="red")
points(rep(1, length(newya)), newya, pch=3, type="o")
text(rep(1, length(newya)), newya, A, pos=4)
#points(rep(2, length(yb)), yb, col="red")
points(rep(2, length(newyb)), newyb, pch=3, type="o")
text(rep(2, length(newyb)), newyb, B, pos=4)
#points(rep(3, length(yc)), yc, col="red")
points(rep(3, length(newyc)), newyc, pch=3, type="o")
text(rep(3, length(newyc)), newyc, C, pos=4)
newya-ya
windows()
hist(newya-ya)
hist(newya-ya, nclass=20)
sel <- abs(newya - ya) > 0.2
sel <- abs(newya - ya) > 0.2
windows()
plot(1, 1, type="n", xlim=c(0.5, 3.5), ylim=range(newya, newyb, newyc))
text(rep(0.9, length(ya[sel])), ya[sel], ">", col="red")
text(rep(0.9, length(ya[sel])), ya[sel], A[sel], pos=2, col="red", cex=0.8)
#points(rep(1, length(ya)), ya, col="red")
points(rep(1, length(newya)), newya, pch=3, type="o")
text(rep(1, length(newya)), newya, A, pos=4)
#points(rep(2, length(yb)), yb, col="red")
points(rep(2, length(newyb)), newyb, pch=3, type="o")
text(rep(2, length(newyb)), newyb, B, pos=4)
#points(rep(3, length(yc)), yc, col="red")
points(rep(3, length(newyc)), newyc, pch=3, type="o")
text(rep(3, length(newyc)), newyc, C, pos=4)
cut <- 0.2
sel <- abs(newya - ya) > cut
windows()
plot(1, 1, type="n", xlim=c(0.5, 3.5), ylim=range(newya, newyb, newyc))
text(rep(0.9, length(ya[sel])), ya[sel], ">", col="red")
text(rep(0.9, length(ya[sel])), ya[sel], A[sel], pos=2, col="red", cex=0.8)
#points(rep(1, length(ya)), ya, col="red")
points(rep(1, length(newya)), newya, pch=3, type="o")
text(rep(1, length(newya)), newya, A, pos=4)
#points(rep(2, length(yb)), yb, col="red")
points(rep(2, length(newyb)), newyb, pch=3, type="o")
text(rep(2, length(newyb)), newyb, B, pos=4)
#points(rep(3, length(yc)), yc, col="red")
points(rep(3, length(newyc)), newyc, pch=3, type="o")
text(rep(3, length(newyc)), newyc, C, pos=4)
cut <- 0.1
sel <- abs(newya - ya) > cut
windows()
plot(1, 1, type="n", xlim=c(0.5, 3.5), ylim=range(newya, newyb, newyc))
text(rep(0.9, length(ya[sel])), ya[sel], ">", col="red")
text(rep(0.9, length(ya[sel])), ya[sel], A[sel], pos=2, col="red", cex=0.8)
#points(rep(1, length(ya)), ya, col="red")
points(rep(1, length(newya)), newya, pch=3, type="o")
text(rep(1, length(newya)), newya, A, pos=4)
#points(rep(2, length(yb)), yb, col="red")
points(rep(2, length(newyb)), newyb, pch=3, type="o")
text(rep(2, length(newyb)), newyb, B, pos=4)
#points(rep(3, length(yc)), yc, col="red")
points(rep(3, length(newyc)), newyc, pch=3, type="o")
text(rep(3, length(newyc)), newyc, C, pos=4)
plot(1, 1, type="n", xlim=c(0.5, 3.5), ylim=range(newya, newyb, newyc), xlab="", ylab="", axes=FALSE)
text(rep(0.9, length(ya[sel])), ya[sel], ">", col="red")
text(rep(0.9, length(ya[sel])), ya[sel], A[sel], pos=2, col="red", cex=0.8)
#points(rep(1, length(ya)), ya, col="red")
points(rep(1, length(newya)), newya, pch=3, type="o")
text(rep(1, length(newya)), newya, A, pos=4)
#points(rep(2, length(yb)), yb, col="red")
points(rep(2, length(newyb)), newyb, pch=3, type="o")
text(rep(2, length(newyb)), newyb, B, pos=4)
#points(rep(3, length(yc)), yc, col="red")
points(rep(3, length(newyc)), newyc, pch=3, type="o")
text(rep(3, length(newyc)), newyc, C, pos=4)
q()
pkgin("jvamisc")
pkgman("jvamisc")
q()
cleanup()
q()
?outer
df <- structure(list(TARGET = structure(c(1L, 2L, 5L, 4L, 21L, 6L, 
7L, 24L, 12L, 26L, 13L, 8L, 27L, 24L, 27L, 17L, 36L, 41L, 39L, 
44L, 26L, 49L, 45L, 44L, 48L), .Dim = c(5L, 5L)), IF_0 = c(2.216690273371, 
6.38184859965061, 2.46437227402487, 1.61455246113423, 2.08881112723862
), IF_1 = c(7.45843397919977, 6.63040464317274, 5.99303722392935, 
5.50739965013064, 5.9745854066624), IF_2 = c(3.12093203071656, 
3.93102342267879, 3.54607023816164, 3.2090325394672, 3.76429956885641
), IF_3 = c(3.62497128541669, 4.3746012073503, 4.7526881733349, 
3.50011368174976, 3.30949060586235), IF_4 = c(5.85510543403595, 
4.89942753393789, 4.66950780902826, 5.45944588201063, 5.29017015957353
), IF_5 = c(1.27846175897923, 0.24916698876784, 2.59437446016831, 
2.91042444575604, 2.67140151374047)), .Names = c("TARGET", "IF_0", 
"IF_1", "IF_2", "IF_3", "IF_4", "IF_5"), row.names = c(3L, 195L, 
48L, 312L, 713L), class = "data.frame")
mat <- structure(c(1L, 2L, 3L, 4L, 5L, 20L, 22L, 35L, 37L, 38L, 2L, 
12L, 16L, 35L, 46L, 1L, 2L, 3L, 17L, 27L, 7L, 27L, 32L, 33L, 
49L), .Dim = c(5L, 5L))
dim(df)
dim(mat)
df
mat
df
mat
df <- data.frame(X1959=sample(20), X2013=sample(20))
df
boxplot(df)
boxplot(df[, c("X1959", "X2013")])
cleanup()
q()
pkgin("jvamisc")
pkgman("jvamisc")
cleanup()
# C:\JVA\GLFC\People\Hinderer\TempDO v5.r
library(reshape)
library(plyr)
dir <- "C:/JVA/GLFC/People/Hinderer"
# sort(list.files(path=dir, pattern=".xl", ignore.case=TRUE))
files1 <- c("DEQ_1990s_Temp-DO.xlsx", "DEQ_2000s_Temp-DO.xlsx", 
"EC_2008_Temp-DO.xls",
"EPA-STORET_legacy_SCR_DO-temp (2).xlsx", "EPA-STORET_1998-2007_DO-temp.xlsx", "EPA-STORET_1998-2012_DO-temp-Secchi_BEST.xlsx")
files2 <- c("USGS-GLSC_2012-13_temp_Secchi_zoops.xls", "USGS-GLSC_2013_Secchi.xlsx",
"OMNR_1986-87_1994_2004_SCR_temp-secchi.xlsx", 
"DNR_Algonac-plant_1963-2003_temp.xls", "DNR_1997-2013_temp-secchi.xls", "DNR_2002-2012_temp-secchi.xlsx",
"EPA-GLNPO_1996-2006_Secchi.xls",
"NOAA_2008-2013_Secchi.xlsx",
"OME_Index-stations_1967-1993_DO.xls", "OME_Index-stations_2004_2007_2010_Secchi.xls")
files <- c(files1, files2)
set.seed(540)
doc <- startrtf(file="TempDOv5.doc", dir=dir)
heading("DO, Temperature, and Secchi data")
heading("Sent by Julie Hinderer, 13 Jun, 15 Jul, 29 Jul, and 11 Aug 2014", 2)
heading("Jean V. Adams - 3 Sep 2014", 2)
do.range <- c(0, 200)
t.range <- c(-50, 100)
s.range <- c(0, 40)
tab <- prettytable(data.frame(files))
tabl("Input data files.", row.names=FALSE)
##############################################
# DEQ temp and DO data
wb <- loadWorkbook(paste(dir, files[1], sep="/"))
d90.1 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
loc90 <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
d90.3 <- readWorksheet(wb, sheet=getSheets(wb)[3], startRow=1)
names(d90.1) <- c("permit", "name", "huc", "date", "param", "descr", "min", "mean", "max", "disc")
d90.1$param <- recode(d90.1$param, c("00010", "00011"), c("tempc", "domgl"), FALSE)
d90.1 <- d90.1[d90.1$param=="tempc" | d90.1$param=="domgl", ]
d90.1$date <- as.Date(substring(d90.1$date, 1, 10), origin = "1989-12-31")
d90.1$min <- as.numeric(d90.1$min)
d90.1$mean <- as.numeric(d90.1$mean)
d90.1$max <- as.numeric(d90.1$max)
d90.1 <- d90.1[, c("permit", "name", "huc", "date", "param", "min", "mean", "max")]
long <- melt(d90.1, id.vars=c("permit", "name", "huc", "date", "param"), meas.vars=c("min", "mean", "max"))
d90.1b <- cast(long, permit + name + huc + date ~ param + variable, fun.aggregate=mean)
names(loc90) <- c("permit", "name", "lat", "long")
loc90$lat <- as.numeric(loc90$lat)
loc90$long <- as.numeric(loc90$long)
# duplicated permit numbers with different lat/longs
tab <- prettytable(loc90[loc90$permit %in% unique(loc90$permit[duplicated(loc90$permit)]), ])
tabl(paste0("Duplicated permit numbers with different locations from ", files[1], "."), row.names=FALSE)
# use mean locations for now
l90 <- aggregate(loc90[, c("lat", "long")], data.frame(permit=loc90$permit), mean)
d90.1c <- merge(d90.1b, l90, all.x=TRUE)
wb <- loadWorkbook(paste(dir, files[2], sep="/"))
d00.1 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
loc00 <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
d00.1 <- d00.1[, c("Permit.No.", "Designated.Name", "HUC", "Reporting.Period", "Conc..1", "Conc..2", "conc..Minimum")]
names(d00.1) <- c("permit", "name", "huc", "date", "tempf_maxmonavg", "tempf_max", "domgl_min")
d00.1$huc <- as.character(d00.1$huc)
d00.1$date <- as.Date(d00.1$date, origin="1989-12-31")
d00.1$domgl_min <- as.numeric(d00.1$domgl_min)
d00.1$tempc_maxmonavg <- (as.numeric(d00.1$tempf_maxmonavg) - 32) * 5/9
d00.1$tempc_max <- (as.numeric(d00.1$tempf_max) - 32) * 5/9
d00.1 <- d00.1[, c("permit", "name", "huc", "date", "domgl_min", "tempc_maxmonavg", "tempc_max")]
# duplicated permit numbers with different lat/longs
names(loc00) <- c("permit", "name", "lat", "long")
tab <- prettytable(loc00[loc00$permit %in% unique(loc00$permit[duplicated(loc00$permit)]), ])
tabl(paste0("Duplicated permit numbers with different locations from ", files[2], "."), row.names=FALSE)
# use means for now
l00 <- aggregate(loc00[, c("lat", "long")], data.frame(permit=loc00$permit), mean)
d00.1b <- merge(d00.1, l00, all.x=TRUE)
# missing lat/long info
missing <- unique(d00.1b$permit[is.na(d00.1b$lat)])
para("Permit number ", missing, " had no lat/long information in file ", files[2], ".")
# use lat/long info from 1990s data for now
d00.1b[d00.1b$permit==missing, c("lat", "long")] <- l90[l90$permit==missing, c("lat", "long")]
deq <- rbind.fill(d90.1c, d00.1b)
deq <- deq[, !apply(is.na(deq), 2, all)]
# look at DEQ data
pick <- sample(1:dim(deq)[1], 10)
tab <- prettytable(deq[pick, ])
tabl(paste0("DEQ temperature and DO data from the 1990s and 2000s, simplified and combined, 10 randomly selected rows from the full ", dim(deq)[1], "."), 
newpage="land", row.names=FALSE)
pick <- inrange(deq$domgl_min, do.range, FALSE) |
inrange(deq$domgl_min, do.range, FALSE) |
inrange(deq$domgl_mean, do.range, FALSE) |
inrange(deq$domgl_max, do.range, FALSE) |
inrange(deq$tempc_mean, t.range, FALSE) |
inrange(deq$tempc_max, t.range, FALSE) |
inrange(deq$tempc_maxmonavg, t.range, FALSE)
tab <- prettytable(deq[pick, ])
if(dim(tab)[1] > 0) tabl(paste0("Extreme values in DEQ temperature and DO data."), newpage="land", row.names=FALSE)
deq$year <- as.numeric(substring(deq$date, 1, 4))
##############################################
# EC data
wb <- loadWorkbook(paste(dir, files[3], sep="/"))
ec <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=4)
names(ec) <- c("site", "date", "lat", "long", "depthm", "surftempc", "surfcond", "surfdopct", "surfdo", "surfpH", "botdepthm", "botdopct", "botdo")
ec <- cbind(ec[, 1:2], data.frame(lapply(ec[, -(1:2)], as.numeric)))
# look at EC data
pick <- sample(1:dim(ec)[1], 10)
tab <- prettytable(ec[pick, ])
tabl(paste0("EC temperature and DO data, 10 randomly selected rows from the full ", dim(ec)[1], "."), newpage="land", row.names=FALSE)
pick <- inrange(ec$surfdopct, do.range, FALSE) |
inrange(ec$surfdo, do.range, FALSE) |
inrange(ec$botdopct, do.range, FALSE) |
inrange(ec$botdo, do.range, FALSE) |
inrange(ec$surftempc, t.range, FALSE)
tab <- prettytable(ec[pick, ])
if(dim(tab)[1] > 0) tabl(paste0("Extreme values in EC temperature and DO data."), newpage="land", row.names=FALSE)
ec$year <- as.numeric(substring(ec$date, 1, 4))
##############################################
# EPA data
newnames <- c("id", "lat", "long", "date", "param", "value", "units", "code", "comments")
wb <- loadWorkbook(paste(dir, files[4], sep="/"))
epa1 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(epa1) <- c("Agency", "Station", "Station.Name", "Latitude", "Longitude", "Agency.Name", "State.Name", "County.Name", "Result.Value", 
"R", "HUC", "Param", "Start.Date", "Start.Time", "End.Date", "End.Time", "Sample.Depth", "UMK", "Replicate.Number", "CS", 
"Composite.Grab.number", "CM", "Primary.Activity.Category", "Secondary.Activity.Category")
ischar <- sapply(sapply(epa1, class), "[", 1)=="character"
epa1[, ischar] <- apply(epa1[, ischar], 2, trimspace)
epa1$Parameter <- recode(epa1$Param, c("00010", "00300", "00078"), c("Temperature, water", "Dissolved oxygen (DO)", "Secchi"))
epa1$Units <- recode(epa1$Param, c("00010", "00300", "00078"), c("deg C", "mg/L", "m"))
epa1$junk1 <- rep("", dim(epa1)[1])
epa1$junk2 <- rep("", dim(epa1)[1])
epa1 <- epa1[, c("Station", "Latitude", "Longitude", "Start.Date", "Parameter", "Result.Value", "Units", "junk1", "junk2")]
names(epa1) <- newnames
wb <- loadWorkbook(paste(dir, files[5], sep="/"))
epa2 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
epa2$row <- paste0("j", 1:dim(epa2)[1])
epa2$junk <- rep("", dim(epa2)[1])
epa2 <- epa2[, c("row", "Station.Latitude", "Station.Longitude", "Activity.Start", "Characteristic.Name", "Result.Value.as.Text", 
"Units", "junk", "Lab.Remark")]
names(epa2) <- newnames
epa2$comments <- as.character(epa2$comments)
wb <- loadWorkbook(paste(dir, files[6], sep="/"))
epa3 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(epa3) <- newnames
epa4 <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
names(epa4) <- newnames
epa5 <- readWorksheet(wb, sheet=getSheets(wb)[3], startRow=1)
epa1234 <- rbind(epa1, epa2, epa3, epa4)
ischar <- sapply(sapply(epa1234, class), "[", 1)=="character"
epa1234[, ischar] <- apply(epa1234[, ischar], 2, trimspace)
table(paste(epa1234$param, epa1234$units, sep="-"))
epa1234$tempc <- ifelse(epa1234$param %in% c("Temperature, water", "Temperature of Water"), epa1234$value, NA)
epa1234$domglf <- ifelse(epa1234$param=="Dissolved Oxygen (Field)", epa1234$value, NA)
epa1234$domgll <- ifelse(epa1234$param=="Dissolved Oxygen (Lab)", epa1234$value, NA)
epa1234$domglu <- ifelse(epa1234$param=="Dissolved oxygen (DO)", epa1234$value, NA)
epa1234$secchim <- NA
epa1234$secchim[epa1234$param=="Secchi"] <- epa1234$value[epa1234$param=="Secchi"]
epa1234$secchim[epa1234$param=="Secchi - Field"] <- epa1234$value[epa1234$param=="Secchi - Field"]*0.3048
epa1234 <- epa1234[, c("id", "lat", "long", "date", "code", "tempc", "domglf", "domgll", "domglu", "secchim")]
# what is code = H or HT . only occurs for DO mg/L lab
epa1234[epa1234$code %in% c("H", "HT"), ]
epa <- aggregate(epa1234[, c("tempc", "domglf", "domgll", "domglu", "secchim")], epa1234[, c("id", "lat", "long", "date")], mean, na.rm=TRUE)
# look at EPA data
pick <- sample(1:dim(epa)[1], 10)
tab <- prettytable(epa[pick, ])
tabl(paste0("EPA temperature and DO data, 10 randomly selected rows from the full ", dim(epa)[1], "."), newpage="land", row.names=FALSE)
pick <- inrange(epa$domglf, do.range, FALSE) |
inrange(epa$domgll, do.range, FALSE) |
inrange(epa$domglu, do.range, FALSE) |
inrange(epa$tempc, t.range, FALSE) |
inrange(epa$secchim, s.range, FALSE)
tab <- prettytable(epa[pick, ])
if(dim(tab)[1] > 0) tabl(paste0("Extreme values in EPA temperature and DO data."), newpage="land", row.names=FALSE)
epa$year <- as.numeric(substring(epa$date, 1, 4))
##############################################
# USGS data
newnames <- c("id", "lat", "long", "date", "depthm", "tempc", "secchim")
wb <- loadWorkbook(paste(dir, files[7], sep="/"))
usgs1 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
usgs1$id <- 1000*usgs1$Vessel + usgs1$Serial
usgs1 <- usgs1[, c("id", "Lat", "Long", "Date", "Station_depth..m.", "Water_temp..C.", "Secchi..m.")]
names(usgs1) <- newnames
usgs1$id <- as.character(usgs1$id)
wb <- loadWorkbook(paste(dir, files[8], sep="/"))
usgs2a <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
usgs2b <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
usgs2 <- merge(usgs2a, usgs2b, by.x="site.station.name", by.y="Station.name")
usgs2$depthm <- NA
usgs2$tempc <- NA
usgs2 <- usgs2[, c("site.station.name", "North.decimal.degree", "East.decimal.degree", "date", "depthm", "tempc", "Secchi.depth..m..average")]
names(usgs2) <- newnames
usgs <- rbind(usgs1, usgs2)
usgs$secchim <- as.numeric(usgs$secchim)
##############################################
# OMNR data
newnames <- c("id", "lat", "long", "date", "tempc", "secchim")
wb <- loadWorkbook(paste(dir, files[9], sep="/"))
omnr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
omnr$newDate <- as.Date("1986-09-17")
omnr$newDate[omnr$Date!="Sept 10-25, 1986"] <- as.Date(substring(omnr$Date[omnr$Date!="Sept 10-25, 1986"], 1, 10))
omnr <- omnr[, c("Stn", "Latitude", "Longitude", "newDate", "Temperature_C", "secchi_m")]
names(omnr) <- newnames
omnr$long <- as.numeric(omnr$long)
omnr$tempc <- as.numeric(omnr$tempc)
##############################################
# DNR data
newnames <- c("id", "lat", "long", "date", "tempc", "turbntu")
# turbidity of second worksheet disagrees with turbidity of first worksheet for Jan-Mar 1999
wb <- loadWorkbook(paste(dir, files[10], sep="/"))
dnr1a <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
dnr1b <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
dnr1 <- dnr1a
names(dnr1) <- c("date", "tempc", "turbntu")
dnr1$lat <- 42.62147
dnr1$long <- -82.52699
dnr1$id <- "Algonac"
dnr1 <- dnr1[, newnames]
# warning is okay (NULL values)
wb <- loadWorkbook(paste(dir, files[11], sep="/"))
dnr2 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
dnr2$lat <- dnr2$Latdeg + dnr2$Latmin/60
dnr2$long <- -(dnr2$Longdeg + dnr2$Longmin/60)
dnr2 <- dnr2[, c("Idnum", "lat", "long", "Setdate", "Settemp_C", "Set_secchi_m")]
names(dnr2) <- newnames
wb <- loadWorkbook(paste(dir, files[12], sep="/"))
dnr3 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
dnr3$lat <- dnr3$Latdeg + dnr3$Latmin/60
dnr3$long <- -(dnr3$Longdeg + dnr3$Longmin/60)
dnr3 <- dnr3[, c("Idnum", "lat", "long", "Setdate", "Settemp_C", "Set_secchi_m")]
names(dnr3) <- newnames
dnr <- rbind(dnr1, dnr2, dnr3)
##############################################
# GLNPO data
newnames <- c("id", "lat", "long", "date", "tempc", "turbntu")
wb <- loadWorkbook(paste(dir, files[13], sep="/"))
glnpo <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
glnpo <- glnpo[, c("STATION", 
# ?????????????????????????
##############################################
# NOAA data
newnames <- c("id", "lat", "long", "date", "depthm", "secchim", "turbntu")
# what is "TSS..mg.L." in NOAA data ????
wb <- loadWorkbook(paste(dir, files[14], sep="/"))
noaa <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
noaa <- noaa[, c("Station", "Lattitude", "Longitude", "Date", "Station.Depth..m.", "Secchi..m.", "Turbidity..NTU.")]
names(noaa) <- newnames
sel <- noaa$lat > 42 & noaa$id=="WE8"
noaa$lat[sel] <- noaa$lat[sel] - trunc(noaa$lat[sel]) + 41
##############################################
# OME data
newnames <- c("id", "lat", "long", "date", "depthm", "secchim")
# no lat/long data
wb <- loadWorkbook(paste(dir, files[15], sep="/"))
ome1 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
wb <- loadWorkbook(paste(dir, files[16], sep="/"))
ome2a <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
ome2b <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
ome2c <- readWorksheet(wb, sheet=getSheets(wb)[3], startRow=1)
names(ome2c)[names(ome2c)=="REFERENCE_PT_DIST"] <- "LIMS_METHODREF"
ome2 <- rbind(ome2a, ome2b, ome2c)
ome2 <- ome2[, c("STATION_NO", "LATITUDE", "LONGITUDE", "COLLECT_DATE", "WATER_DEPTH", "SECCHI_DEPTH_m")]
names(ome2) <- newnames
ome <- ome2
### visualizations
colz <- c(do="orange", dp="brown", t="cyan", s="red")
maptime <- function(df, varz, title, mxlim=range(deq$long, ec$long, epa$long, na.rm=TRUE), 
mylim=range(deq$lat, ec$lat, epa$lat, na.rm=TRUE), sxlim=range(deq$year, ec$year, epa$year, na.rm=TRUE), co="black") {
par(mfrow=c(1, 2), mar=c(1, 0.1, 1, 0.1))
map(xlim=mxlim, ylim=mylim, type="n", mar=c(1, 0.1, 1, 0.1))
lines(map5, col="lightgray")
sel <- !apply(is.na(df[, varz, drop=FALSE]), 1, all)
points(df$long[sel], df$lat[sel], lwd=2)
pusr <- par("usr")
par(yaxs="i")
plot(df$year, df$lat, xlim=sxlim, ylim=pusr[3:4], axes=FALSE, xlab="", ylab="", col=co)
axis(1)
mtext(title, side=3, outer=TRUE, line=-1)
}
fig <- function() maptime(deq, c("domgl_mean"), "DO data", co=colz["do"])
figu("Availability of dissolved oxygen data in the Huron Erie corridor from Michigan DEQ.", 
"  Scatterplot on right shows available time series for each corresponding latitude.", newpage="land")
fig <- function() maptime(ec, c("surfdo", "botdo"), "DO data", co=colz["do"])
figu("Availability of dissolved oxygen data in the Huron Erie corridor from Environment Canada.", 
"  Scatterplot on right shows available time series for each corresponding latitude.", newpage="land")
fig <- function() maptime(epa, c("domglf", "domgll", "domglu"), "DO data", co=colz["do"])
figu("Availability of dissolved oxygen data in the Huron Erie corridor from EPA.", 
"  Scatterplot on right shows available time series for each corresponding latitude.", newpage="land")
fig <- function() maptime(deq, c("tempc_mean"), "Temperature data", co=colz["t"])
figu("Availability of temperature data in the Huron Erie corridor from Michigan DEQ.", 
"  Scatterplot on right shows available time series for each corresponding latitude.", newpage="land")
fig <- function() maptime(ec, "surftempc", "Temperature data", co=colz["t"])
figu("Availability of temperature data in the Huron Erie corridor from Environment Canada.", 
"  Scatterplot on right shows available time series for each corresponding latitude.", newpage="land")
fig <- function() maptime(epa, "tempc", "Temperature data", co=colz["t"])
figu("Availability of temperature data in the Huron Erie corridor from EPA.", 
"  Scatterplot on right shows available time series for each corresponding latitude.", newpage="land")
fig <- function() maptime(epa, "secchim", "Secchi data", co=colz["s"])
figu("Availability of Secchi disk depth data in the Huron Erie corridor from EPA.", 
"  Scatterplot on right shows available time series for each corresponding latitude.", newpage="land")
myhist <- function(df, var, xr, xby, ...) {
y <- df[, var]
y <- y[inrange(y, xr)]
hist(y, main=paste(casefold(substitute(df), TRUE), var), 
breaks=seq(xby*floor(xr[1]/xby), xby*ceiling(xr[2]/xby), xby), xlim=xr, ...)
}
alldo <- c(deq$domgl_min, deq$domgl_mean, deq$domgl_max, ec$surfdo, ec$botdo, epa$domglf, epa$domgll, epa$domglu)
dor2 <- range(alldo[inrange(alldo, do.range)])
alldp <- c(ec$surfdopct, ec$botdopct)
dor3 <- range(alldp[inrange(alldp, c(0, 100))])
allt <- c(deq$tempc_mean, deq$tempc_max, deq$tempc_maxmonavg, ec$surftempc, epa$tempc)
tr2 <- range(allt[inrange(allt, t.range)])
alls <- epa$secchim
sr2 <- range(alls[inrange(alls, s.range)])
fig <- function() {
par(mfcol=c(8, 2), mar=c(2, 2, 2, 1))
myhist(deq, "domgl_min", dor2, 10, col=colz["do"])
myhist(deq, "domgl_mean", dor2, 10, col=colz["do"])
myhist(deq, "domgl_max", dor2, 10, col=colz["do"])
myhist(ec, "surfdo", dor2, 10, col=colz["do"])
myhist(ec, "botdo", dor2, 10, col=colz["do"])
myhist(epa, "domglf", dor2, 10, col=colz["do"])
myhist(epa, "domgll", dor2, 10, col=colz["do"])
myhist(epa, "domglu", dor2, 10, col=colz["do"])
myhist(ec, "surfdopct", dor3, 1, col=colz["dp"])
myhist(ec, "botdopct", dor3, 1, col=colz["dp"])
myhist(deq, "tempc_mean", tr2, 5, col=colz["t"])
myhist(deq, "tempc_max", tr2, 5, col=colz["t"])
myhist(deq, "tempc_maxmonavg", tr2, 5, col=colz["t"])
myhist(ec, "surftempc", tr2, 5, col=colz["t"])
myhist(epa, "tempc", tr2, 5, col=colz["t"])
myhist(epa, "secchim", sr2, 5, col=colz["s"])
}
figu("Distribution of DO, temperature, and Secchi data observed in the Huron Erie corridor by Michigan DEQ and EC data (extreme values excluded).", newpage="port")
endrtf()
# rm(wb, d90.1, d90.3, d90.1b, d90.1c, long, d00.1, d00.1b)
##############################################
# GLNPO data
newnames <- c("id", "lat", "long", "date", "tempc", "turbntu")
wb <- loadWorkbook(paste(dir, files[13], sep="/"))
glnpo <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
head(glnpo)
head(glnpo[, -(1:10)])
names(head(glnpo[, -(1:10)]))
names(head(glnpo[, -(1:10)]))
head(glnpo[, 1:10])
head(glnpo[, 1:10])
##############################################
# GLNPO data
newnames <- c("id", "station", "depthm", "date", "domgl.seabird", "domgl.winkler", "tempc.seabird", "tempc.water", "turbntu")
wb <- loadWorkbook(paste(dir, files[13], sep="/"))
glnpo <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
glnpo$id <- glnpo$SAMPLE_ID
glnpo$station <- glnpo$STATION
glnpo$depthm <- glnpo$SMPL_DEPTH
glnpo$date <- glnpo$SAMPLING_DATE
glnpo$domgl.seabird <- glnpo$VALUE.12
glnpo$domgl.winkler <- glnpo$VALUE.22
glnpo$tempc.seabird <- glnpo$VALUE.13
glnpo$tempc.water <- glnpo$VALUE.21
glnpo$turbntu <- glnpo$VALUE.20
head(glnpo[, newnames])
glnpo1 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
glnpo2 <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
glnpo1$id <- glnpo1$SAMPLE_ID
glnpo1$station <- glnpo1$STATION
glnpo1$depthm <- glnpo1$SMPL_DEPTH
glnpo1$date <- glnpo1$SAMPLING_DATE
glnpo1$domgl.seabird <- glnpo1$VALUE.12
glnpo1$domgl.winkler <- glnpo1$VALUE.22
glnpo1$tempc.seabird <- glnpo1$VALUE.13
glnpo1$tempc.water <- glnpo1$VALUE.21
glnpo1$turbntu <- glnpo1$VALUE.20
head(glnpo1[, newnames])
head(glnpo2)
newnames <- c("id", "station", "lat", "long", "date", "secchim", "secchim.dup")
glnpo2$id <- glnpo2$SAMPLE_ID
glnpo2$station <- glnpo2$STATION
glnpo2$lat <- glnpo2$LATITUDE
glnpo2$long <- glnpo2$LONGITUDE
glnpo2$date <- glnpo2$MEAS_DATE
glnpo2$secchim <- glnpo2$VALUE
glnpo2$secchim.dup <- glnpo2$VALUE.1
head(glnpo2[, newnames])
sel <- with(glnpo1, !is.na(domgl.seabird) | !is.na(domgl.winkler) | !is.na(tempc.seabird) | !is.na(tempc.water) | !is.na(turbntu))
table(sel)
glnpo1[!sel, ]
sel <- with(glnpo1, !is.na(domgl.seabird) | !is.na(domgl.winkler) | !is.na(tempc.seabird) | !is.na(tempc.water) | !is.na(turbntu))
glnpo1b <- glnpo1[sel, newnames]
head(glnpo1b)
##############################################
# GLNPO data
newnames <- c("id", "station", "depthm", "date", "domgl.seabird", "domgl.winkler", "tempc.seabird", "tempc.water", "turbntu")
wb <- loadWorkbook(paste(dir, files[13], sep="/"))
glnpo1 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
glnpo2 <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
glnpo1$id <- glnpo1$SAMPLE_ID
glnpo1$station <- glnpo1$STATION
glnpo1$depthm <- glnpo1$SMPL_DEPTH
glnpo1$date <- glnpo1$SAMPLING_DATE
glnpo1$domgl.seabird <- glnpo1$VALUE.12
glnpo1$domgl.winkler <- glnpo1$VALUE.22
glnpo1$tempc.seabird <- glnpo1$VALUE.13
glnpo1$tempc.water <- glnpo1$VALUE.21
glnpo1$turbntu <- glnpo1$VALUE.20
sel <- with(glnpo1, !is.na(domgl.seabird) | !is.na(domgl.winkler) | !is.na(tempc.seabird) | !is.na(tempc.water) | !is.na(turbntu))
glnpo1b <- glnpo1[sel, newnames]
head(glnpo1b)
summary(glnpo1b)
table(glnpo1b$tempc.water)
##############################################
# GLNPO data
newnames <- c("id", "station", "depthm", "date", "domgl.seabird", "domgl.winkler", "tempc.seabird", "tempc.water", "turbntu")
wb <- loadWorkbook(paste(dir, files[13], sep="/"))
glnpo1 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
glnpo2 <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
glnpo1$id <- glnpo1$SAMPLE_ID
glnpo1$station <- glnpo1$STATION
glnpo1$depthm <- as.numeric(glnpo1$SMPL_DEPTH)
glnpo1$date <- glnpo1$SAMPLING_DATE
glnpo1$domgl.seabird <- as.numeric(glnpo1$VALUE.12)
glnpo1$domgl.winkler <- as.numeric(glnpo1$VALUE.22)
glnpo1$tempc.seabird <- as.numeric(glnpo1$VALUE.13)
glnpo1$tempc.water <- as.numeric(glnpo1$VALUE.21)
glnpo1$turbntu <- as.numeric(glnpo1$VALUE.20)
sel <- with(glnpo1, !is.na(domgl.seabird) | !is.na(domgl.winkler) | !is.na(tempc.seabird) | !is.na(tempc.water) | !is.na(turbntu))
glnpo1b <- glnpo1[sel, newnames]
head(glnpo1b)
table(sel)
glnpo2$id <- glnpo2$SAMPLE_ID
glnpo2$station <- glnpo2$STATION
glnpo2$lat <- as.numeric(glnpo2$LATITUDE)
glnpo2$long <- as.numeric(glnpo2$LONGITUDE)
glnpo2$date <- glnpo2$MEAS_DATE
glnpo2$secchim <- as.numeric(glnpo2$VALUE)
glnpo2$secchim.dup <- as.numeric(glnpo2$VALUE.1)
head(glnpo2[, newnames])
glnpo1c <- merge(glnpo1b, glnpo2[, c("station", "lat", "long")], all.x=TRUE)
names(glnpo2)
newnames
newnames <- c("id", "station", "lat", "long", "date", "secchim", "secchim.dup")
newnames
head(glnpo2[, newnames])
glnpo1c <- merge(glnpo1b, glnpo2[, c("station", "lat", "long")], all.x=TRUE)
head(glnpo1c)
summary(glnpo1c)
glnpo1c[is.na(glnpo1c$lat), ]
glnpo1c$station[is.na(glnpo1c$lat)]
table(glnpo1c$station[is.na(glnpo1c$lat)])
sort(table(glnpo1c$station[is.na(glnpo1c$lat)]))
sort(table(glnpo2$station))
sort(unique(glnpo2$station))
sort(unique(glnpo1c$station[is.na(glnpo1c$lat)]))
>setBan
?setNames
?rbind.fill
glnpo3 <- rbind.fill(glnpo1c, glnpo2)
head(glnpo3)
##############################################
# GLNPO data
newnames <- c("id", "station", "depthm", "date", "domgl.seabird", "domgl.winkler", "tempc.seabird", "tempc.water", "turbntu")
wb <- loadWorkbook(paste(dir, files[13], sep="/"))
glnpo1 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
glnpo2 <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
glnpo1$id <- glnpo1$SAMPLE_ID
glnpo1$station <- glnpo1$STATION
glnpo1$depthm <- as.numeric(glnpo1$SMPL_DEPTH)
glnpo1$date <- glnpo1$SAMPLING_DATE
glnpo1$domgl.seabird <- as.numeric(glnpo1$VALUE.12)
glnpo1$domgl.winkler <- as.numeric(glnpo1$VALUE.22)
glnpo1$tempc.seabird <- as.numeric(glnpo1$VALUE.13)
glnpo1$tempc.water <- as.numeric(glnpo1$VALUE.21)
glnpo1$turbntu <- as.numeric(glnpo1$VALUE.20)
sel <- with(glnpo1, !is.na(domgl.seabird) | !is.na(domgl.winkler) | !is.na(tempc.seabird) | !is.na(tempc.water) | !is.na(turbntu))
glnpo1b <- glnpo1[sel, newnames]
head(glnpo1b)
newnames <- c("id", "station", "lat", "long", "date", "secchim", "secchim.dup")
glnpo2$id <- glnpo2$SAMPLE_ID
glnpo2$station <- glnpo2$STATION
glnpo2$lat <- as.numeric(glnpo2$LATITUDE)
glnpo2$long <- as.numeric(glnpo2$LONGITUDE)
glnpo2$date <- glnpo2$MEAS_DATE
glnpo2$secchim <- as.numeric(glnpo2$VALUE)
glnpo2$secchim.dup <- as.numeric(glnpo2$VALUE.1)
head(glnpo2[, newnames])
glnpo1c <- merge(glnpo1b, glnpo2[, c("station", "lat", "long")], all.x=TRUE)
glnpo3 <- rbind.fill(glnpo1c, glnpo2[, newnames])
head(glnpo3)
sel <- with(glnpo2, !is.na(secchim) | !is.na(secchim.dup))
table(sel)
glnpo3 <- rbind.fill(glnpo1c, glnpo2[sel, newnames])
head(glnpo3)
glnpo <- rbind.fill(glnpo1c, glnpo2[sel, newnames])
deq[1:2, ]
ec[1:2, ]
epa[1:2, ]
usgs[1:2, ]
omnr[1:2, ]
dnr[1:2, ]
glnpo[1:2, ]
noaa[1:2, ]
ome[1:2, ]
jvanames(names(deq))
names(deq) <- jvanames(names(deq))
##############################################
# NOAA data
newnames <- c("id", "lat", "long", "date", "depthm", "secchim", "turbntu")
# what is "TSS..mg.L." in NOAA data ????
wb <- loadWorkbook(paste(dir, files[14], sep="/"))
noaa <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
noaa <- noaa[, c("Station", "Lattitude", "Longitude", "Date", "Station.Depth..m.", "Secchi..m.", "Turbidity..NTU.")]
names(noaa) <- newnames
sel <- noaa$lat > 42 & noaa$id=="WE8"
noaa$lat[sel] <- noaa$lat[sel] - trunc(noaa$lat[sel]) + 41
head(noaa)
noaa[400:430, ]
cleanup()
search()
# C:\JVA\GLFC\People\Hinderer\TempDO v5.r
library(reshape)
library(plyr)
dir <- "C:/JVA/GLFC/People/Hinderer"
# sort(list.files(path=dir, pattern=".xl", ignore.case=TRUE))
files1 <- c("DEQ_1990s_Temp-DO.xlsx", "DEQ_2000s_Temp-DO.xlsx", 
"EC_2008_Temp-DO.xls",
"EPA-STORET_legacy_SCR_DO-temp (2).xlsx", "EPA-STORET_1998-2007_DO-temp.xlsx", "EPA-STORET_1998-2012_DO-temp-Secchi_BEST.xlsx")
files2 <- c("USGS-GLSC_2012-13_temp_Secchi_zoops.xls", "USGS-GLSC_2013_Secchi.xlsx",
"OMNR_1986-87_1994_2004_SCR_temp-secchi.xlsx", 
"DNR_Algonac-plant_1963-2003_temp.xls", "DNR_1997-2013_temp-secchi.xls", "DNR_2002-2012_temp-secchi.xlsx",
"EPA-GLNPO_1996-2006_Secchi.xls",
"NOAA_2008-2013_Secchi jvamod.xlsx",
"OME_Index-stations_1967-1993_DO.xls", "OME_Index-stations_2004_2007_2010_Secchi.xls")
files <- c(files1, files2)
set.seed(540)
doc <- startrtf(file="TempDOv5.doc", dir=dir)
heading("DO, Temperature, and Secchi data")
heading("Sent by Julie Hinderer, 13 Jun, 15 Jul, 29 Jul, and 11 Aug 2014", 2)
heading("Jean V. Adams - 3 Sep 2014", 2)
do.range <- c(0, 200)
t.range <- c(-50, 100)
s.range <- c(0, 40)
tab <- prettytable(data.frame(files))
tabl("Input data files.", row.names=FALSE)
##############################################
# DEQ temp and DO data
wb <- loadWorkbook(paste(dir, files[1], sep="/"))
d90.1 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
loc90 <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
d90.3 <- readWorksheet(wb, sheet=getSheets(wb)[3], startRow=1)
names(d90.1) <- c("permit", "name", "huc", "date", "param", "descr", "min", "mean", "max", "disc")
d90.1$param <- recode(d90.1$param, c("00010", "00011"), c("tempc", "domgl"), FALSE)
d90.1 <- d90.1[d90.1$param=="tempc" | d90.1$param=="domgl", ]
d90.1$date <- as.Date(substring(d90.1$date, 1, 10), origin = "1989-12-31")
d90.1$min <- as.numeric(d90.1$min)
d90.1$mean <- as.numeric(d90.1$mean)
d90.1$max <- as.numeric(d90.1$max)
d90.1 <- d90.1[, c("permit", "name", "huc", "date", "param", "min", "mean", "max")]
long <- melt(d90.1, id.vars=c("permit", "name", "huc", "date", "param"), meas.vars=c("min", "mean", "max"))
d90.1b <- cast(long, permit + name + huc + date ~ param + variable, fun.aggregate=mean)
names(loc90) <- c("permit", "name", "lat", "long")
loc90$lat <- as.numeric(loc90$lat)
loc90$long <- as.numeric(loc90$long)
# duplicated permit numbers with different lat/longs
tab <- prettytable(loc90[loc90$permit %in% unique(loc90$permit[duplicated(loc90$permit)]), ])
tabl(paste0("Duplicated permit numbers with different locations from ", files[1], "."), row.names=FALSE)
# use mean locations for now
l90 <- aggregate(loc90[, c("lat", "long")], data.frame(permit=loc90$permit), mean)
d90.1c <- merge(d90.1b, l90, all.x=TRUE)
wb <- loadWorkbook(paste(dir, files[2], sep="/"))
d00.1 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
loc00 <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
d00.1 <- d00.1[, c("Permit.No.", "Designated.Name", "HUC", "Reporting.Period", "Conc..1", "Conc..2", "conc..Minimum")]
names(d00.1) <- c("permit", "name", "huc", "date", "tempf_maxmonavg", "tempf_max", "domgl_min")
d00.1$huc <- as.character(d00.1$huc)
d00.1$date <- as.Date(d00.1$date, origin="1989-12-31")
d00.1$domgl_min <- as.numeric(d00.1$domgl_min)
d00.1$tempc_maxmonavg <- (as.numeric(d00.1$tempf_maxmonavg) - 32) * 5/9
d00.1$tempc_max <- (as.numeric(d00.1$tempf_max) - 32) * 5/9
d00.1 <- d00.1[, c("permit", "name", "huc", "date", "domgl_min", "tempc_maxmonavg", "tempc_max")]
# duplicated permit numbers with different lat/longs
names(loc00) <- c("permit", "name", "lat", "long")
tab <- prettytable(loc00[loc00$permit %in% unique(loc00$permit[duplicated(loc00$permit)]), ])
tabl(paste0("Duplicated permit numbers with different locations from ", files[2], "."), row.names=FALSE)
# use means for now
l00 <- aggregate(loc00[, c("lat", "long")], data.frame(permit=loc00$permit), mean)
d00.1b <- merge(d00.1, l00, all.x=TRUE)
# missing lat/long info
missing <- unique(d00.1b$permit[is.na(d00.1b$lat)])
para("Permit number ", missing, " had no lat/long information in file ", files[2], ".")
# use lat/long info from 1990s data for now
d00.1b[d00.1b$permit==missing, c("lat", "long")] <- l90[l90$permit==missing, c("lat", "long")]
deq <- rbind.fill(d90.1c, d00.1b)
deq <- deq[, !apply(is.na(deq), 2, all)]
# look at DEQ data
pick <- sample(1:dim(deq)[1], 10)
tab <- prettytable(deq[pick, ])
tabl(paste0("DEQ temperature and DO data from the 1990s and 2000s, simplified and combined, 10 randomly selected rows from the full ", dim(deq)[1], "."), 
newpage="land", row.names=FALSE)
pick <- inrange(deq$domgl_min, do.range) | inrange(deq$domgl_min, do.range))
# | inrange(deq$domgl_mean, do.range) |
# inrange(deq$domgl_max, do.range) |
# inrange(deq$tempc_mean, t.range) |
# inrange(deq$tempc_max, t.range) |
# inrange(deq$tempc_maxmonavg, t.range)
tab <- prettytable(deq[pick, ])
if(dim(tab)[1] > 0) {
tab <- tab[1:min(dim(tab)[1], 10), ]
tabl(paste0("Extreme values in DEQ temperature and DO data.  If there are more than 10, only the first 10 are shown."), 
newpage="land", row.names=FALSE)
}
deq$year <- as.numeric(substring(deq$date, 1, 4))
names(deq) <- jvanames(names(deq))
##############################################
# EC data
wb <- loadWorkbook(paste(dir, files[3], sep="/"))
ec <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=4)
names(ec) <- c("site", "date", "lat", "long", "depthm", "surftempc", "surfcond", "surfdopct", "surfdo", "surfpH", "botdepthm", "botdopct", "botdo")
ec <- cbind(ec[, 1:2], data.frame(lapply(ec[, -(1:2)], as.numeric)))
# look at EC data
pick <- sample(1:dim(ec)[1], 10)
tab <- prettytable(ec[pick, ])
tabl(paste0("EC temperature and DO data, 10 randomly selected rows from the full ", dim(ec)[1], "."), newpage="land", row.names=FALSE)
pick <- inrange(ec$surfdopct, do.range) |
inrange(ec$surfdo, do.range) |
inrange(ec$botdopct, do.range) |
inrange(ec$botdo, do.range) |
inrange(ec$surftempc, t.range)
tab <- prettytable(ec[pick, ])
if(dim(tab)[1] > 0) {
tab <- tab[1:min(dim(tab)[1], 10), ]
tabl(paste0("Extreme values in EC temperature and DO data.  If there are more than 10, only the first 10 are shown."), 
newpage="land", row.names=FALSE)
}
ec$year <- as.numeric(substring(ec$date, 1, 4))
##############################################
# EPA data
newnames <- c("id", "lat", "long", "date", "param", "value", "units", "code", "comments")
wb <- loadWorkbook(paste(dir, files[4], sep="/"))
epa1 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(epa1) <- c("Agency", "Station", "Station.Name", "Latitude", "Longitude", "Agency.Name", "State.Name", "County.Name", "Result.Value", 
"R", "HUC", "Param", "Start.Date", "Start.Time", "End.Date", "End.Time", "Sample.Depth", "UMK", "Replicate.Number", "CS", 
"Composite.Grab.number", "CM", "Primary.Activity.Category", "Secondary.Activity.Category")
ischar <- sapply(sapply(epa1, class), "[", 1)=="character"
epa1[, ischar] <- apply(epa1[, ischar], 2, trimspace)
epa1$Parameter <- recode(epa1$Param, c("00010", "00300", "00078"), c("Temperature, water", "Dissolved oxygen (DO)", "Secchi"))
epa1$Units <- recode(epa1$Param, c("00010", "00300", "00078"), c("deg C", "mg/L", "m"))
epa1$junk1 <- rep("", dim(epa1)[1])
epa1$junk2 <- rep("", dim(epa1)[1])
epa1 <- epa1[, c("Station", "Latitude", "Longitude", "Start.Date", "Parameter", "Result.Value", "Units", "junk1", "junk2")]
names(epa1) <- newnames
wb <- loadWorkbook(paste(dir, files[5], sep="/"))
epa2 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
epa2$row <- paste0("j", 1:dim(epa2)[1])
epa2$junk <- rep("", dim(epa2)[1])
epa2 <- epa2[, c("row", "Station.Latitude", "Station.Longitude", "Activity.Start", "Characteristic.Name", "Result.Value.as.Text", 
"Units", "junk", "Lab.Remark")]
names(epa2) <- newnames
epa2$comments <- as.character(epa2$comments)
wb <- loadWorkbook(paste(dir, files[6], sep="/"))
epa3 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(epa3) <- newnames
epa4 <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
names(epa4) <- newnames
epa5 <- readWorksheet(wb, sheet=getSheets(wb)[3], startRow=1)
epa1234 <- rbind(epa1, epa2, epa3, epa4)
ischar <- sapply(sapply(epa1234, class), "[", 1)=="character"
epa1234[, ischar] <- apply(epa1234[, ischar], 2, trimspace)
table(paste(epa1234$param, epa1234$units, sep="-"))
epa1234$tempc <- ifelse(epa1234$param %in% c("Temperature, water", "Temperature of Water"), epa1234$value, NA)
epa1234$domglf <- ifelse(epa1234$param=="Dissolved Oxygen (Field)", epa1234$value, NA)
epa1234$domgll <- ifelse(epa1234$param=="Dissolved Oxygen (Lab)", epa1234$value, NA)
epa1234$domglu <- ifelse(epa1234$param=="Dissolved oxygen (DO)", epa1234$value, NA)
epa1234$secchim <- NA
epa1234$secchim[epa1234$param=="Secchi"] <- epa1234$value[epa1234$param=="Secchi"]
epa1234$secchim[epa1234$param=="Secchi - Field"] <- epa1234$value[epa1234$param=="Secchi - Field"]*0.3048
epa1234 <- epa1234[, c("id", "lat", "long", "date", "code", "tempc", "domglf", "domgll", "domglu", "secchim")]
# what is code = H or HT . only occurs for DO mg/L lab
epa1234[epa1234$code %in% c("H", "HT"), ]
epa <- aggregate(epa1234[, c("tempc", "domglf", "domgll", "domglu", "secchim")], epa1234[, c("id", "lat", "long", "date")], mean, na.rm=TRUE)
# look at EPA data
pick <- sample(1:dim(epa)[1], 10)
tab <- prettytable(epa[pick, ])
tabl(paste0("EPA temperature and DO data, 10 randomly selected rows from the full ", dim(epa)[1], "."), newpage="land", row.names=FALSE)
pick <- inrange(epa$domglf, do.range) |
inrange(epa$domgll, do.range) |
inrange(epa$domglu, do.range) |
inrange(epa$tempc, t.range) |
inrange(epa$secchim, s.range)
tab <- prettytable(epa[pick, ])
if(dim(tab)[1] > 0) {
tab <- tab[1:min(dim(tab)[1], 10), ]
tabl(paste0("Extreme values in EPA temperature and DO data.  If there are more than 10, only the first 10 are shown."), 
newpage="land", row.names=FALSE)
}
epa$year <- as.numeric(substring(epa$date, 1, 4))
##############################################
# USGS data
newnames <- c("id", "lat", "long", "date", "depthm", "tempc", "secchim")
wb <- loadWorkbook(paste(dir, files[7], sep="/"))
usgs1 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
usgs1$id <- 1000*usgs1$Vessel + usgs1$Serial
usgs1 <- usgs1[, c("id", "Lat", "Long", "Date", "Station_depth..m.", "Water_temp..C.", "Secchi..m.")]
names(usgs1) <- newnames
usgs1$id <- as.character(usgs1$id)
wb <- loadWorkbook(paste(dir, files[8], sep="/"))
usgs2a <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
usgs2b <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
usgs2 <- merge(usgs2a, usgs2b, by.x="site.station.name", by.y="Station.name")
usgs2$depthm <- NA
usgs2$tempc <- NA
usgs2 <- usgs2[, c("site.station.name", "North.decimal.degree", "East.decimal.degree", "date", "depthm", "tempc", "Secchi.depth..m..average")]
names(usgs2) <- newnames
usgs <- rbind(usgs1, usgs2)
usgs$secchim <- as.numeric(usgs$secchim)
##############################################
# OMNR data
newnames <- c("id", "lat", "long", "date", "tempc", "secchim")
wb <- loadWorkbook(paste(dir, files[9], sep="/"))
omnr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
omnr$newDate <- as.Date("1986-09-17")
omnr$newDate[omnr$Date!="Sept 10-25, 1986"] <- as.Date(substring(omnr$Date[omnr$Date!="Sept 10-25, 1986"], 1, 10))
omnr <- omnr[, c("Stn", "Latitude", "Longitude", "newDate", "Temperature_C", "secchi_m")]
names(omnr) <- newnames
omnr$long <- as.numeric(omnr$long)
omnr$tempc <- as.numeric(omnr$tempc)
##############################################
# DNR data
newnames <- c("id", "lat", "long", "date", "tempc", "turbntu")
# turbidity of second worksheet disagrees with turbidity of first worksheet for Jan-Mar 1999
wb <- loadWorkbook(paste(dir, files[10], sep="/"))
dnr1a <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
dnr1b <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
dnr1 <- dnr1a
names(dnr1) <- c("date", "tempc", "turbntu")
dnr1$lat <- 42.62147
dnr1$long <- -82.52699
dnr1$id <- "Algonac"
dnr1 <- dnr1[, newnames]
# warning is okay (NULL values)
wb <- loadWorkbook(paste(dir, files[11], sep="/"))
dnr2 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
dnr2$lat <- dnr2$Latdeg + dnr2$Latmin/60
dnr2$long <- -(dnr2$Longdeg + dnr2$Longmin/60)
dnr2 <- dnr2[, c("Idnum", "lat", "long", "Setdate", "Settemp_C", "Set_secchi_m")]
names(dnr2) <- newnames
wb <- loadWorkbook(paste(dir, files[12], sep="/"))
dnr3 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
dnr3$lat <- dnr3$Latdeg + dnr3$Latmin/60
dnr3$long <- -(dnr3$Longdeg + dnr3$Longmin/60)
dnr3 <- dnr3[, c("Idnum", "lat", "long", "Setdate", "Settemp_C", "Set_secchi_m")]
names(dnr3) <- newnames
dnr <- rbind(dnr1, dnr2, dnr3)
##############################################
# GLNPO data
newnames <- c("id", "station", "depthm", "date", "domgl.seabird", "domgl.winkler", "tempc.seabird", "tempc.water", "turbntu")
wb <- loadWorkbook(paste(dir, files[13], sep="/"))
glnpo1 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
glnpo2 <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
glnpo1$id <- glnpo1$SAMPLE_ID
glnpo1$station <- glnpo1$STATION
glnpo1$depthm <- as.numeric(glnpo1$SMPL_DEPTH)
glnpo1$date <- glnpo1$SAMPLING_DATE
glnpo1$domgl.seabird <- as.numeric(glnpo1$VALUE.12)
glnpo1$domgl.winkler <- as.numeric(glnpo1$VALUE.22)
glnpo1$tempc.seabird <- as.numeric(glnpo1$VALUE.13)
glnpo1$tempc.water <- as.numeric(glnpo1$VALUE.21)
glnpo1$turbntu <- as.numeric(glnpo1$VALUE.20)
sel <- with(glnpo1, !is.na(domgl.seabird) | !is.na(domgl.winkler) | !is.na(tempc.seabird) | !is.na(tempc.water) | !is.na(turbntu))
glnpo1b <- glnpo1[sel, newnames]
head(glnpo1b)
newnames <- c("id", "station", "lat", "long", "date", "secchim", "secchim.dup")
glnpo2$id <- glnpo2$SAMPLE_ID
glnpo2$station <- glnpo2$STATION
glnpo2$lat <- as.numeric(glnpo2$LATITUDE)
glnpo2$long <- as.numeric(glnpo2$LONGITUDE)
glnpo2$date <- glnpo2$MEAS_DATE
glnpo2$secchim <- as.numeric(glnpo2$VALUE)
glnpo2$secchim.dup <- as.numeric(glnpo2$VALUE.1)
head(glnpo2[, newnames])
glnpo1c <- merge(glnpo1b, glnpo2[, c("station", "lat", "long")], all.x=TRUE)
sel <- with(glnpo2, !is.na(secchim) | !is.na(secchim.dup))
glnpo <- rbind.fill(glnpo1c, glnpo2[sel, newnames])
##############################################
# NOAA data
newnames <- c("id", "lat", "long", "date", "depthm", "secchim", "turbntu")
# what is "TSS..mg.L." in NOAA data ????
wb <- loadWorkbook(paste(dir, files[14], sep="/"))
noaa <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
noaa <- noaa[, c("Station", "Lattitude", "Longitude", "Date", "Station.Depth..m.", "Secchi..m.", "Turbidity..NTU.")]
names(noaa) <- newnames
sel <- noaa$lat > 42 & noaa$id=="WE8"
noaa$lat[sel] <- noaa$lat[sel] - trunc(noaa$lat[sel]) + 41
##############################################
# OME data
newnames <- c("id", "lat", "long", "date", "depthm", "secchim")
# no lat/long data
wb <- loadWorkbook(paste(dir, files[15], sep="/"))
ome1 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
wb <- loadWorkbook(paste(dir, files[16], sep="/"))
ome2a <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
ome2b <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
ome2c <- readWorksheet(wb, sheet=getSheets(wb)[3], startRow=1)
names(ome2c)[names(ome2c)=="REFERENCE_PT_DIST"] <- "LIMS_METHODREF"
ome2 <- rbind(ome2a, ome2b, ome2c)
ome2 <- ome2[, c("STATION_NO", "LATITUDE", "LONGITUDE", "COLLECT_DATE", "WATER_DEPTH", "SECCHI_DEPTH_m")]
names(ome2) <- newnames
ome <- ome2
deq[1:2, ]
ec[1:2, ]
epa[1:2, ]
usgs[1:2, ]
omnr[1:2, ]
dnr[1:2, ]
glnpo[1:2, ]
noaa[1:2, ]
ome[1:2, ]
deq[1:2, ]
ec[1:2, ]
epa[1:2, ]
usgs[1:2, ]
omnr[1:2, ]
dnr[1:2, ]
glnpo[1:2, ]
noaa[1:2, ]
ome[1:2, ]
search()
ls(4)
plot(map5)
locator()
locator()
usgs$year <- as.numeric(substring(usgs$date, 1, 4))
omnr$year <- as.numeric(substring(omnr$date, 1, 4))
dnr$year <- as.numeric(substring(dnr$date, 1, 4))
glnpo$year <- as.numeric(substring(glnpo$date, 1, 4))
noaa$year <- as.numeric(substring(noaa$date, 1, 4))
ome$year <- as.numeric(substring(ome$date, 1, 4))
deq[1:2, ]
ec[1:2, ]
epa[1:2, ]
usgs[1:2, ]
omnr[1:2, ]
dnr[1:2, ]
glnpo[1:2, ]
noaa[1:2, ]
ome[1:2, ]
latr <- c(41.26, 43.28)
longr <- c(-83.75, -81.54)
yearr <- range(deq$year, ec$year, epa$year, usgs$year, omnr$year, dnr$year, glnpo$year, noaa$year, ome$year, na.rm=TRUE)
yearr
cleanup()
# C:\JVA\GLFC\People\Hinderer\TempDO v5.r
library(reshape)
library(plyr)
dir <- "C:/JVA/GLFC/People/Hinderer"
# sort(list.files(path=dir, pattern=".xl", ignore.case=TRUE))
files1 <- c("DEQ_1990s_Temp-DO.xlsx", "DEQ_2000s_Temp-DO.xlsx", 
"EC_2008_Temp-DO.xls",
"EPA-STORET_legacy_SCR_DO-temp (2).xlsx", "EPA-STORET_1998-2007_DO-temp.xlsx", "EPA-STORET_1998-2012_DO-temp-Secchi_BEST.xlsx")
files2 <- c("USGS-GLSC_2012-13_temp_Secchi_zoops.xls", "USGS-GLSC_2013_Secchi.xlsx",
"OMNR_1986-87_1994_2004_SCR_temp-secchi.xlsx", 
"DNR_Algonac-plant_1963-2003_temp.xls", "DNR_1997-2013_temp-secchi.xls", "DNR_2002-2012_temp-secchi.xlsx",
"EPA-GLNPO_1996-2006_Secchi.xls",
"NOAA_2008-2013_Secchi jvamod.xlsx",
"OME_Index-stations_1967-1993_DO.xls", "OME_Index-stations_2004_2007_2010_Secchi.xls")
files <- c(files1, files2)
set.seed(540)
doc <- startrtf(file="TempDOv5.doc", dir=dir)
heading("DO, Temperature, and Secchi data")
heading("Sent by Julie Hinderer, 13 Jun, 15 Jul, 29 Jul, and 11 Aug 2014", 2)
heading("Jean V. Adams - 3 Sep 2014", 2)
do.range <- c(0, 200)
t.range <- c(-50, 100)
s.range <- c(0, 40)
tab <- prettytable(data.frame(files))
tabl("Input data files.", row.names=FALSE)
##############################################
# DEQ temp and DO data
wb <- loadWorkbook(paste(dir, files[1], sep="/"))
d90.1 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
loc90 <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
d90.3 <- readWorksheet(wb, sheet=getSheets(wb)[3], startRow=1)
names(d90.1) <- c("permit", "name", "huc", "date", "param", "descr", "min", "mean", "max", "disc")
d90.1$param <- recode(d90.1$param, c("00010", "00011"), c("tempc", "domgl"), FALSE)
d90.1 <- d90.1[d90.1$param=="tempc" | d90.1$param=="domgl", ]
d90.1$date <- as.Date(substring(d90.1$date, 1, 10), origin = "1989-12-31")
d90.1$min <- as.numeric(d90.1$min)
d90.1$mean <- as.numeric(d90.1$mean)
d90.1$max <- as.numeric(d90.1$max)
d90.1 <- d90.1[, c("permit", "name", "huc", "date", "param", "min", "mean", "max")]
long <- melt(d90.1, id.vars=c("permit", "name", "huc", "date", "param"), meas.vars=c("min", "mean", "max"))
d90.1b <- cast(long, permit + name + huc + date ~ param + variable, fun.aggregate=mean)
names(loc90) <- c("permit", "name", "lat", "long")
loc90$lat <- as.numeric(loc90$lat)
loc90$long <- as.numeric(loc90$long)
# duplicated permit numbers with different lat/longs
tab <- prettytable(loc90[loc90$permit %in% unique(loc90$permit[duplicated(loc90$permit)]), ])
tabl(paste0("Duplicated permit numbers with different locations from ", files[1], "."), row.names=FALSE)
# use mean locations for now
l90 <- aggregate(loc90[, c("lat", "long")], data.frame(permit=loc90$permit), mean)
d90.1c <- merge(d90.1b, l90, all.x=TRUE)
wb <- loadWorkbook(paste(dir, files[2], sep="/"))
d00.1 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
loc00 <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
d00.1 <- d00.1[, c("Permit.No.", "Designated.Name", "HUC", "Reporting.Period", "Conc..1", "Conc..2", "conc..Minimum")]
names(d00.1) <- c("permit", "name", "huc", "date", "tempf_maxmonavg", "tempf_max", "domgl_min")
d00.1$huc <- as.character(d00.1$huc)
d00.1$date <- as.Date(d00.1$date, origin="1989-12-31")
d00.1$domgl_min <- as.numeric(d00.1$domgl_min)
d00.1$tempc_maxmonavg <- (as.numeric(d00.1$tempf_maxmonavg) - 32) * 5/9
d00.1$tempc_max <- (as.numeric(d00.1$tempf_max) - 32) * 5/9
d00.1 <- d00.1[, c("permit", "name", "huc", "date", "domgl_min", "tempc_maxmonavg", "tempc_max")]
# duplicated permit numbers with different lat/longs
names(loc00) <- c("permit", "name", "lat", "long")
tab <- prettytable(loc00[loc00$permit %in% unique(loc00$permit[duplicated(loc00$permit)]), ])
tabl(paste0("Duplicated permit numbers with different locations from ", files[2], "."), row.names=FALSE)
# use means for now
l00 <- aggregate(loc00[, c("lat", "long")], data.frame(permit=loc00$permit), mean)
d00.1b <- merge(d00.1, l00, all.x=TRUE)
# missing lat/long info
missing <- unique(d00.1b$permit[is.na(d00.1b$lat)])
para("Permit number ", missing, " had no lat/long information in file ", files[2], ".")
# use lat/long info from 1990s data for now
d00.1b[d00.1b$permit==missing, c("lat", "long")] <- l90[l90$permit==missing, c("lat", "long")]
deq <- rbind.fill(d90.1c, d00.1b)
deq <- deq[, !apply(is.na(deq), 2, all)]
# look at DEQ data
pick <- sample(1:dim(deq)[1], 10)
tab <- prettytable(deq[pick, ])
tabl(paste0("DEQ temperature and DO data from the 1990s and 2000s, simplified and combined, 10 randomly selected rows from the full ", dim(deq)[1], "."), 
newpage="land", row.names=FALSE)
pick <- inrange(deq$domgl_min, do.range) | inrange(deq$domgl_min, do.range))
# | inrange(deq$domgl_mean, do.range) |
# inrange(deq$domgl_max, do.range) |
# inrange(deq$tempc_mean, t.range) |
# inrange(deq$tempc_max, t.range) |
# inrange(deq$tempc_maxmonavg, t.range)
tab <- prettytable(deq[pick, ])
if(dim(tab)[1] > 0) {
tab <- tab[1:min(dim(tab)[1], 10), ]
tabl(paste0("Extreme values in DEQ temperature and DO data.  If there are more than 10, only the first 10 are shown."), 
newpage="land", row.names=FALSE)
}
deq$year <- as.numeric(substring(deq$date, 1, 4))
names(deq) <- jvanames(names(deq))
##############################################
# EC data
wb <- loadWorkbook(paste(dir, files[3], sep="/"))
ec <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=4)
names(ec) <- c("site", "date", "lat", "long", "depthm", "surftempc", "surfcond", "surfdopct", "surfdo", "surfpH", "botdepthm", "botdopct", "botdo")
ec <- cbind(ec[, 1:2], data.frame(lapply(ec[, -(1:2)], as.numeric)))
# look at EC data
pick <- sample(1:dim(ec)[1], 10)
tab <- prettytable(ec[pick, ])
tabl(paste0("EC temperature and DO data, 10 randomly selected rows from the full ", dim(ec)[1], "."), newpage="land", row.names=FALSE)
pick <- inrange(ec$surfdopct, do.range) |
inrange(ec$surfdo, do.range) |
inrange(ec$botdopct, do.range) |
inrange(ec$botdo, do.range) |
inrange(ec$surftempc, t.range)
tab <- prettytable(ec[pick, ])
if(dim(tab)[1] > 0) {
tab <- tab[1:min(dim(tab)[1], 10), ]
tabl(paste0("Extreme values in EC temperature and DO data.  If there are more than 10, only the first 10 are shown."), 
newpage="land", row.names=FALSE)
}
ec$year <- as.numeric(substring(ec$date, 1, 4))
##############################################
# EPA data
newnames <- c("id", "lat", "long", "date", "param", "value", "units", "code", "comments")
wb <- loadWorkbook(paste(dir, files[4], sep="/"))
epa1 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(epa1) <- c("Agency", "Station", "Station.Name", "Latitude", "Longitude", "Agency.Name", "State.Name", "County.Name", "Result.Value", 
"R", "HUC", "Param", "Start.Date", "Start.Time", "End.Date", "End.Time", "Sample.Depth", "UMK", "Replicate.Number", "CS", 
"Composite.Grab.number", "CM", "Primary.Activity.Category", "Secondary.Activity.Category")
ischar <- sapply(sapply(epa1, class), "[", 1)=="character"
epa1[, ischar] <- apply(epa1[, ischar], 2, trimspace)
epa1$Parameter <- recode(epa1$Param, c("00010", "00300", "00078"), c("Temperature, water", "Dissolved oxygen (DO)", "Secchi"))
epa1$Units <- recode(epa1$Param, c("00010", "00300", "00078"), c("deg C", "mg/L", "m"))
epa1$junk1 <- rep("", dim(epa1)[1])
epa1$junk2 <- rep("", dim(epa1)[1])
epa1 <- epa1[, c("Station", "Latitude", "Longitude", "Start.Date", "Parameter", "Result.Value", "Units", "junk1", "junk2")]
names(epa1) <- newnames
wb <- loadWorkbook(paste(dir, files[5], sep="/"))
epa2 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
epa2$row <- paste0("j", 1:dim(epa2)[1])
epa2$junk <- rep("", dim(epa2)[1])
epa2 <- epa2[, c("row", "Station.Latitude", "Station.Longitude", "Activity.Start", "Characteristic.Name", "Result.Value.as.Text", 
"Units", "junk", "Lab.Remark")]
names(epa2) <- newnames
epa2$comments <- as.character(epa2$comments)
wb <- loadWorkbook(paste(dir, files[6], sep="/"))
epa3 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(epa3) <- newnames
epa4 <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
names(epa4) <- newnames
epa5 <- readWorksheet(wb, sheet=getSheets(wb)[3], startRow=1)
epa1234 <- rbind(epa1, epa2, epa3, epa4)
ischar <- sapply(sapply(epa1234, class), "[", 1)=="character"
epa1234[, ischar] <- apply(epa1234[, ischar], 2, trimspace)
table(paste(epa1234$param, epa1234$units, sep="-"))
epa1234$tempc <- ifelse(epa1234$param %in% c("Temperature, water", "Temperature of Water"), epa1234$value, NA)
epa1234$domglf <- ifelse(epa1234$param=="Dissolved Oxygen (Field)", epa1234$value, NA)
epa1234$domgll <- ifelse(epa1234$param=="Dissolved Oxygen (Lab)", epa1234$value, NA)
epa1234$domglu <- ifelse(epa1234$param=="Dissolved oxygen (DO)", epa1234$value, NA)
epa1234$secchim <- NA
epa1234$secchim[epa1234$param=="Secchi"] <- epa1234$value[epa1234$param=="Secchi"]
epa1234$secchim[epa1234$param=="Secchi - Field"] <- epa1234$value[epa1234$param=="Secchi - Field"]*0.3048
epa1234 <- epa1234[, c("id", "lat", "long", "date", "code", "tempc", "domglf", "domgll", "domglu", "secchim")]
# what is code = H or HT . only occurs for DO mg/L lab
epa1234[epa1234$code %in% c("H", "HT"), ]
epa <- aggregate(epa1234[, c("tempc", "domglf", "domgll", "domglu", "secchim")], epa1234[, c("id", "lat", "long", "date")], mean, na.rm=TRUE)
# look at EPA data
pick <- sample(1:dim(epa)[1], 10)
tab <- prettytable(epa[pick, ])
tabl(paste0("EPA temperature and DO data, 10 randomly selected rows from the full ", dim(epa)[1], "."), newpage="land", row.names=FALSE)
pick <- inrange(epa$domglf, do.range) |
inrange(epa$domgll, do.range) |
inrange(epa$domglu, do.range) |
inrange(epa$tempc, t.range) |
inrange(epa$secchim, s.range)
tab <- prettytable(epa[pick, ])
if(dim(tab)[1] > 0) {
tab <- tab[1:min(dim(tab)[1], 10), ]
tabl(paste0("Extreme values in EPA temperature and DO data.  If there are more than 10, only the first 10 are shown."), 
newpage="land", row.names=FALSE)
}
epa$year <- as.numeric(substring(epa$date, 1, 4))
##############################################
# USGS data
newnames <- c("id", "lat", "long", "date", "depthm", "tempc", "secchim")
wb <- loadWorkbook(paste(dir, files[7], sep="/"))
usgs1 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
usgs1$id <- 1000*usgs1$Vessel + usgs1$Serial
usgs1 <- usgs1[, c("id", "Lat", "Long", "Date", "Station_depth..m.", "Water_temp..C.", "Secchi..m.")]
names(usgs1) <- newnames
usgs1$id <- as.character(usgs1$id)
wb <- loadWorkbook(paste(dir, files[8], sep="/"))
usgs2a <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
usgs2b <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
usgs2 <- merge(usgs2a, usgs2b, by.x="site.station.name", by.y="Station.name")
usgs2$depthm <- NA
usgs2$tempc <- NA
usgs2 <- usgs2[, c("site.station.name", "North.decimal.degree", "East.decimal.degree", "date", "depthm", "tempc", "Secchi.depth..m..average")]
names(usgs2) <- newnames
usgs <- rbind(usgs1, usgs2)
usgs$secchim <- as.numeric(usgs$secchim)
usgs$year <- as.numeric(substring(usgs$date, 1, 4))
##############################################
# OMNR data
newnames <- c("id", "lat", "long", "date", "tempc", "secchim")
wb <- loadWorkbook(paste(dir, files[9], sep="/"))
omnr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
omnr$newDate <- as.Date("1986-09-17")
omnr$newDate[omnr$Date!="Sept 10-25, 1986"] <- as.Date(substring(omnr$Date[omnr$Date!="Sept 10-25, 1986"], 1, 10))
omnr <- omnr[, c("Stn", "Latitude", "Longitude", "newDate", "Temperature_C", "secchi_m")]
names(omnr) <- newnames
omnr$long <- as.numeric(omnr$long)
omnr$tempc <- as.numeric(omnr$tempc)
omnr$year <- as.numeric(substring(omnr$date, 1, 4))
##############################################
# DNR data
newnames <- c("id", "lat", "long", "date", "tempc", "turbntu")
# turbidity of second worksheet disagrees with turbidity of first worksheet for Jan-Mar 1999
wb <- loadWorkbook(paste(dir, files[10], sep="/"))
dnr1a <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
dnr1b <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
dnr1 <- dnr1a
names(dnr1) <- c("date", "tempc", "turbntu")
dnr1$lat <- 42.62147
dnr1$long <- -82.52699
dnr1$id <- "Algonac"
dnr1 <- dnr1[, newnames]
# warning is okay (NULL values)
wb <- loadWorkbook(paste(dir, files[11], sep="/"))
dnr2 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
dnr2$lat <- dnr2$Latdeg + dnr2$Latmin/60
dnr2$long <- -(dnr2$Longdeg + dnr2$Longmin/60)
dnr2 <- dnr2[, c("Idnum", "lat", "long", "Setdate", "Settemp_C", "Set_secchi_m")]
names(dnr2) <- newnames
wb <- loadWorkbook(paste(dir, files[12], sep="/"))
dnr3 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
dnr3$lat <- dnr3$Latdeg + dnr3$Latmin/60
dnr3$long <- -(dnr3$Longdeg + dnr3$Longmin/60)
dnr3 <- dnr3[, c("Idnum", "lat", "long", "Setdate", "Settemp_C", "Set_secchi_m")]
names(dnr3) <- newnames
dnr <- rbind(dnr1, dnr2, dnr3)
dnr$year <- as.numeric(substring(dnr$date, 1, 4))
##############################################
# GLNPO data
newnames <- c("id", "station", "depthm", "date", "domgl.seabird", "domgl.winkler", "tempc.seabird", "tempc.water", "turbntu")
wb <- loadWorkbook(paste(dir, files[13], sep="/"))
glnpo1 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
glnpo2 <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
glnpo1$id <- glnpo1$SAMPLE_ID
glnpo1$station <- glnpo1$STATION
glnpo1$depthm <- as.numeric(glnpo1$SMPL_DEPTH)
glnpo1$date <- glnpo1$SAMPLING_DATE
glnpo1$domgl.seabird <- as.numeric(glnpo1$VALUE.12)
glnpo1$domgl.winkler <- as.numeric(glnpo1$VALUE.22)
glnpo1$tempc.seabird <- as.numeric(glnpo1$VALUE.13)
glnpo1$tempc.water <- as.numeric(glnpo1$VALUE.21)
glnpo1$turbntu <- as.numeric(glnpo1$VALUE.20)
sel <- with(glnpo1, !is.na(domgl.seabird) | !is.na(domgl.winkler) | !is.na(tempc.seabird) | !is.na(tempc.water) | !is.na(turbntu))
glnpo1b <- glnpo1[sel, newnames]
head(glnpo1b)
newnames <- c("id", "station", "lat", "long", "date", "secchim", "secchim.dup")
glnpo2$id <- glnpo2$SAMPLE_ID
glnpo2$station <- glnpo2$STATION
glnpo2$lat <- as.numeric(glnpo2$LATITUDE)
glnpo2$long <- as.numeric(glnpo2$LONGITUDE)
glnpo2$date <- glnpo2$MEAS_DATE
glnpo2$secchim <- as.numeric(glnpo2$VALUE)
glnpo2$secchim.dup <- as.numeric(glnpo2$VALUE.1)
head(glnpo2[, newnames])
glnpo1c <- merge(glnpo1b, glnpo2[, c("station", "lat", "long")], all.x=TRUE)
sel <- with(glnpo2, !is.na(secchim) | !is.na(secchim.dup))
glnpo <- rbind.fill(glnpo1c, glnpo2[sel, newnames])
glnpo$year <- as.numeric(substring(glnpo$date, 1, 4))
##############################################
# NOAA data
newnames <- c("id", "lat", "long", "date", "depthm", "secchim", "turbntu")
# what is "TSS..mg.L." in NOAA data ????
wb <- loadWorkbook(paste(dir, files[14], sep="/"))
noaa <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
noaa <- noaa[, c("Station", "Lattitude", "Longitude", "Date", "Station.Depth..m.", "Secchi..m.", "Turbidity..NTU.")]
names(noaa) <- newnames
sel <- noaa$lat > 42 & noaa$id=="WE8"
noaa$lat[sel] <- noaa$lat[sel] - trunc(noaa$lat[sel]) + 41
noaa$year <- as.numeric(substring(noaa$date, 1, 4))
##############################################
# OME data
newnames <- c("id", "lat", "long", "date", "depthm", "secchim")
# no lat/long data
wb <- loadWorkbook(paste(dir, files[15], sep="/"))
ome1 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
wb <- loadWorkbook(paste(dir, files[16], sep="/"))
ome2a <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
ome2b <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
ome2c <- readWorksheet(wb, sheet=getSheets(wb)[3], startRow=1)
names(ome2c)[names(ome2c)=="REFERENCE_PT_DIST"] <- "LIMS_METHODREF"
ome2 <- rbind(ome2a, ome2b, ome2c)
ome2 <- ome2[, c("STATION_NO", "LATITUDE", "LONGITUDE", "COLLECT_DATE", "WATER_DEPTH", "SECCHI_DEPTH_m")]
names(ome2) <- newnames
ome <- ome2
ome$year <- as.numeric(substring(ome$date, 1, 4))
deq[1:2, ]
ec[1:2, ]
epa[1:2, ]
usgs[1:2, ]
omnr[1:2, ]
dnr[1:2, ]
glnpo[1:2, ]
noaa[1:2, ]
ome[1:2, ]
cleanup()
search()
# C:\JVA\GLFC\People\Hinderer\TempDO v5.r
library(reshape)
library(plyr)
dir <- "C:/JVA/GLFC/People/Hinderer"
# sort(list.files(path=dir, pattern=".xl", ignore.case=TRUE))
files1 <- c("DEQ_1990s_Temp-DO.xlsx", "DEQ_2000s_Temp-DO.xlsx", 
"EC_2008_Temp-DO.xls",
"EPA-STORET_legacy_SCR_DO-temp (2).xlsx", "EPA-STORET_1998-2007_DO-temp.xlsx", "EPA-STORET_1998-2012_DO-temp-Secchi_BEST.xlsx")
files2 <- c("USGS-GLSC_2012-13_temp_Secchi_zoops.xls", "USGS-GLSC_2013_Secchi.xlsx",
"OMNR_1986-87_1994_2004_SCR_temp-secchi.xlsx", 
"DNR_Algonac-plant_1963-2003_temp.xls", "DNR_1997-2013_temp-secchi.xls", "DNR_2002-2012_temp-secchi.xlsx",
"EPA-GLNPO_1996-2006_Secchi.xls",
"NOAA_2008-2013_Secchi jvamod.xlsx",
"OME_Index-stations_1967-1993_DO.xls", "OME_Index-stations_2004_2007_2010_Secchi.xls")
files <- c(files1, files2)
set.seed(540)
doc <- startrtf(file="TempDOv5.doc", dir=dir)
heading("DO, Temperature, and Secchi data")
heading("Sent by Julie Hinderer, 13 Jun, 15 Jul, 29 Jul, and 11 Aug 2014", 2)
heading("Jean V. Adams - 3 Sep 2014", 2)
do.range <- c(0, 200)
t.range <- c(-50, 100)
s.range <- c(0, 40)
tab <- prettytable(data.frame(files))
tabl("Input data files.", row.names=FALSE)
##############################################
# DEQ temp and DO data
wb <- loadWorkbook(paste(dir, files[1], sep="/"))
d90.1 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
loc90 <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
d90.3 <- readWorksheet(wb, sheet=getSheets(wb)[3], startRow=1)
names(d90.1) <- c("permit", "name", "huc", "date", "param", "descr", "min", "mean", "max", "disc")
d90.1$param <- recode(d90.1$param, c("00010", "00011"), c("tempc", "domgl"), FALSE)
d90.1 <- d90.1[d90.1$param=="tempc" | d90.1$param=="domgl", ]
d90.1$date <- as.Date(substring(d90.1$date, 1, 10), origin = "1989-12-31")
d90.1$min <- as.numeric(d90.1$min)
d90.1$mean <- as.numeric(d90.1$mean)
d90.1$max <- as.numeric(d90.1$max)
d90.1 <- d90.1[, c("permit", "name", "huc", "date", "param", "min", "mean", "max")]
long <- melt(d90.1, id.vars=c("permit", "name", "huc", "date", "param"), meas.vars=c("min", "mean", "max"))
d90.1b <- cast(long, permit + name + huc + date ~ param + variable, fun.aggregate=mean)
names(loc90) <- c("permit", "name", "lat", "long")
loc90$lat <- as.numeric(loc90$lat)
loc90$long <- as.numeric(loc90$long)
# duplicated permit numbers with different lat/longs
tab <- prettytable(loc90[loc90$permit %in% unique(loc90$permit[duplicated(loc90$permit)]), ])
tabl(paste0("Duplicated permit numbers with different locations from ", files[1], "."), row.names=FALSE)
# use mean locations for now
l90 <- aggregate(loc90[, c("lat", "long")], data.frame(permit=loc90$permit), mean)
d90.1c <- merge(d90.1b, l90, all.x=TRUE)
wb <- loadWorkbook(paste(dir, files[2], sep="/"))
d00.1 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
loc00 <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
d00.1 <- d00.1[, c("Permit.No.", "Designated.Name", "HUC", "Reporting.Period", "Conc..1", "Conc..2", "conc..Minimum")]
names(d00.1) <- c("permit", "name", "huc", "date", "tempf_maxmonavg", "tempf_max", "domgl_min")
d00.1$huc <- as.character(d00.1$huc)
d00.1$date <- as.Date(d00.1$date, origin="1989-12-31")
d00.1$domgl_min <- as.numeric(d00.1$domgl_min)
d00.1$tempc_maxmonavg <- (as.numeric(d00.1$tempf_maxmonavg) - 32) * 5/9
d00.1$tempc_max <- (as.numeric(d00.1$tempf_max) - 32) * 5/9
d00.1 <- d00.1[, c("permit", "name", "huc", "date", "domgl_min", "tempc_maxmonavg", "tempc_max")]
# duplicated permit numbers with different lat/longs
names(loc00) <- c("permit", "name", "lat", "long")
tab <- prettytable(loc00[loc00$permit %in% unique(loc00$permit[duplicated(loc00$permit)]), ])
tabl(paste0("Duplicated permit numbers with different locations from ", files[2], "."), row.names=FALSE)
# use means for now
l00 <- aggregate(loc00[, c("lat", "long")], data.frame(permit=loc00$permit), mean)
d00.1b <- merge(d00.1, l00, all.x=TRUE)
# missing lat/long info
missing <- unique(d00.1b$permit[is.na(d00.1b$lat)])
para("Permit number ", missing, " had no lat/long information in file ", files[2], ".")
# use lat/long info from 1990s data for now
d00.1b[d00.1b$permit==missing, c("lat", "long")] <- l90[l90$permit==missing, c("lat", "long")]
deq <- rbind.fill(d90.1c, d00.1b)
deq <- deq[, !apply(is.na(deq), 2, all)]
# look at DEQ data
pick <- sample(1:dim(deq)[1], 10)
tab <- prettytable(deq[pick, ])
tabl(paste0("DEQ temperature and DO data from the 1990s and 2000s, simplified and combined, 10 randomly selected rows from the full ", dim(deq)[1], "."), 
newpage="land", row.names=FALSE)
pick <- inrange(deq$domgl_min, do.range) | inrange(deq$domgl_min, do.range)
# | inrange(deq$domgl_mean, do.range) |
# inrange(deq$domgl_max, do.range) |
# inrange(deq$tempc_mean, t.range) |
# inrange(deq$tempc_max, t.range) |
# inrange(deq$tempc_maxmonavg, t.range)
tab <- prettytable(deq[pick, ])
if(dim(tab)[1] > 0) {
tab <- tab[1:min(dim(tab)[1], 10), ]
tabl(paste0("Extreme values in DEQ temperature and DO data.  If there are more than 10, only the first 10 are shown."), 
newpage="land", row.names=FALSE)
}
deq$year <- as.numeric(substring(deq$date, 1, 4))
names(deq) <- jvanames(names(deq))
##############################################
# EC data
wb <- loadWorkbook(paste(dir, files[3], sep="/"))
ec <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=4)
names(ec) <- c("site", "date", "lat", "long", "depthm", "surftempc", "surfcond", "surfdopct", "surfdo", "surfpH", "botdepthm", "botdopct", "botdo")
ec <- cbind(ec[, 1:2], data.frame(lapply(ec[, -(1:2)], as.numeric)))
# look at EC data
pick <- sample(1:dim(ec)[1], 10)
tab <- prettytable(ec[pick, ])
tabl(paste0("EC temperature and DO data, 10 randomly selected rows from the full ", dim(ec)[1], "."), newpage="land", row.names=FALSE)
pick <- inrange(ec$surfdopct, do.range) |
inrange(ec$surfdo, do.range) |
inrange(ec$botdopct, do.range) |
inrange(ec$botdo, do.range) |
inrange(ec$surftempc, t.range)
tab <- prettytable(ec[pick, ])
if(dim(tab)[1] > 0) {
tab <- tab[1:min(dim(tab)[1], 10), ]
tabl(paste0("Extreme values in EC temperature and DO data.  If there are more than 10, only the first 10 are shown."), 
newpage="land", row.names=FALSE)
}
ec$year <- as.numeric(substring(ec$date, 1, 4))
##############################################
# EPA data
newnames <- c("id", "lat", "long", "date", "param", "value", "units", "code", "comments")
wb <- loadWorkbook(paste(dir, files[4], sep="/"))
epa1 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(epa1) <- c("Agency", "Station", "Station.Name", "Latitude", "Longitude", "Agency.Name", "State.Name", "County.Name", "Result.Value", 
"R", "HUC", "Param", "Start.Date", "Start.Time", "End.Date", "End.Time", "Sample.Depth", "UMK", "Replicate.Number", "CS", 
"Composite.Grab.number", "CM", "Primary.Activity.Category", "Secondary.Activity.Category")
ischar <- sapply(sapply(epa1, class), "[", 1)=="character"
epa1[, ischar] <- apply(epa1[, ischar], 2, trimspace)
epa1$Parameter <- recode(epa1$Param, c("00010", "00300", "00078"), c("Temperature, water", "Dissolved oxygen (DO)", "Secchi"))
epa1$Units <- recode(epa1$Param, c("00010", "00300", "00078"), c("deg C", "mg/L", "m"))
epa1$junk1 <- rep("", dim(epa1)[1])
epa1$junk2 <- rep("", dim(epa1)[1])
epa1 <- epa1[, c("Station", "Latitude", "Longitude", "Start.Date", "Parameter", "Result.Value", "Units", "junk1", "junk2")]
names(epa1) <- newnames
wb <- loadWorkbook(paste(dir, files[5], sep="/"))
epa2 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
epa2$row <- paste0("j", 1:dim(epa2)[1])
epa2$junk <- rep("", dim(epa2)[1])
epa2 <- epa2[, c("row", "Station.Latitude", "Station.Longitude", "Activity.Start", "Characteristic.Name", "Result.Value.as.Text", 
"Units", "junk", "Lab.Remark")]
names(epa2) <- newnames
epa2$comments <- as.character(epa2$comments)
wb <- loadWorkbook(paste(dir, files[6], sep="/"))
epa3 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(epa3) <- newnames
epa4 <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
names(epa4) <- newnames
epa5 <- readWorksheet(wb, sheet=getSheets(wb)[3], startRow=1)
epa1234 <- rbind(epa1, epa2, epa3, epa4)
ischar <- sapply(sapply(epa1234, class), "[", 1)=="character"
epa1234[, ischar] <- apply(epa1234[, ischar], 2, trimspace)
table(paste(epa1234$param, epa1234$units, sep="-"))
epa1234$tempc <- ifelse(epa1234$param %in% c("Temperature, water", "Temperature of Water"), epa1234$value, NA)
epa1234$domglf <- ifelse(epa1234$param=="Dissolved Oxygen (Field)", epa1234$value, NA)
epa1234$domgll <- ifelse(epa1234$param=="Dissolved Oxygen (Lab)", epa1234$value, NA)
epa1234$domglu <- ifelse(epa1234$param=="Dissolved oxygen (DO)", epa1234$value, NA)
epa1234$secchim <- NA
epa1234$secchim[epa1234$param=="Secchi"] <- epa1234$value[epa1234$param=="Secchi"]
epa1234$secchim[epa1234$param=="Secchi - Field"] <- epa1234$value[epa1234$param=="Secchi - Field"]*0.3048
epa1234 <- epa1234[, c("id", "lat", "long", "date", "code", "tempc", "domglf", "domgll", "domglu", "secchim")]
# what is code = H or HT . only occurs for DO mg/L lab
epa1234[epa1234$code %in% c("H", "HT"), ]
epa <- aggregate(epa1234[, c("tempc", "domglf", "domgll", "domglu", "secchim")], epa1234[, c("id", "lat", "long", "date")], mean, na.rm=TRUE)
# look at EPA data
pick <- sample(1:dim(epa)[1], 10)
tab <- prettytable(epa[pick, ])
tabl(paste0("EPA temperature and DO data, 10 randomly selected rows from the full ", dim(epa)[1], "."), newpage="land", row.names=FALSE)
pick <- inrange(epa$domglf, do.range) |
inrange(epa$domgll, do.range) |
inrange(epa$domglu, do.range) |
inrange(epa$tempc, t.range) |
inrange(epa$secchim, s.range)
tab <- prettytable(epa[pick, ])
if(dim(tab)[1] > 0) {
tab <- tab[1:min(dim(tab)[1], 10), ]
tabl(paste0("Extreme values in EPA temperature and DO data.  If there are more than 10, only the first 10 are shown."), 
newpage="land", row.names=FALSE)
}
epa$year <- as.numeric(substring(epa$date, 1, 4))
##############################################
# USGS data
newnames <- c("id", "lat", "long", "date", "depthm", "tempc", "secchim")
wb <- loadWorkbook(paste(dir, files[7], sep="/"))
usgs1 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
usgs1$id <- 1000*usgs1$Vessel + usgs1$Serial
usgs1 <- usgs1[, c("id", "Lat", "Long", "Date", "Station_depth..m.", "Water_temp..C.", "Secchi..m.")]
names(usgs1) <- newnames
usgs1$id <- as.character(usgs1$id)
wb <- loadWorkbook(paste(dir, files[8], sep="/"))
usgs2a <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
usgs2b <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
usgs2 <- merge(usgs2a, usgs2b, by.x="site.station.name", by.y="Station.name")
usgs2$depthm <- NA
usgs2$tempc <- NA
usgs2 <- usgs2[, c("site.station.name", "North.decimal.degree", "East.decimal.degree", "date", "depthm", "tempc", "Secchi.depth..m..average")]
names(usgs2) <- newnames
usgs <- rbind(usgs1, usgs2)
usgs$secchim <- as.numeric(usgs$secchim)
usgs$year <- as.numeric(substring(usgs$date, 1, 4))
##############################################
# OMNR data
newnames <- c("id", "lat", "long", "date", "tempc", "secchim")
wb <- loadWorkbook(paste(dir, files[9], sep="/"))
omnr <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
omnr$newDate <- as.Date("1986-09-17")
omnr$newDate[omnr$Date!="Sept 10-25, 1986"] <- as.Date(substring(omnr$Date[omnr$Date!="Sept 10-25, 1986"], 1, 10))
omnr <- omnr[, c("Stn", "Latitude", "Longitude", "newDate", "Temperature_C", "secchi_m")]
names(omnr) <- newnames
omnr$long <- as.numeric(omnr$long)
omnr$tempc <- as.numeric(omnr$tempc)
omnr$year <- as.numeric(substring(omnr$date, 1, 4))
##############################################
# DNR data
newnames <- c("id", "lat", "long", "date", "tempc", "turbntu")
# turbidity of second worksheet disagrees with turbidity of first worksheet for Jan-Mar 1999
wb <- loadWorkbook(paste(dir, files[10], sep="/"))
dnr1a <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
dnr1b <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
dnr1 <- dnr1a
names(dnr1) <- c("date", "tempc", "turbntu")
dnr1$lat <- 42.62147
dnr1$long <- -82.52699
dnr1$id <- "Algonac"
dnr1 <- dnr1[, newnames]
# warning is okay (NULL values)
wb <- loadWorkbook(paste(dir, files[11], sep="/"))
dnr2 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
dnr2$lat <- dnr2$Latdeg + dnr2$Latmin/60
dnr2$long <- -(dnr2$Longdeg + dnr2$Longmin/60)
dnr2 <- dnr2[, c("Idnum", "lat", "long", "Setdate", "Settemp_C", "Set_secchi_m")]
names(dnr2) <- newnames
wb <- loadWorkbook(paste(dir, files[12], sep="/"))
dnr3 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
dnr3$lat <- dnr3$Latdeg + dnr3$Latmin/60
dnr3$long <- -(dnr3$Longdeg + dnr3$Longmin/60)
dnr3 <- dnr3[, c("Idnum", "lat", "long", "Setdate", "Settemp_C", "Set_secchi_m")]
names(dnr3) <- newnames
dnr <- rbind(dnr1, dnr2, dnr3)
dnr$year <- as.numeric(substring(dnr$date, 1, 4))
##############################################
# GLNPO data
newnames <- c("id", "station", "depthm", "date", "domgl.seabird", "domgl.winkler", "tempc.seabird", "tempc.water", "turbntu")
wb <- loadWorkbook(paste(dir, files[13], sep="/"))
glnpo1 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
glnpo2 <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
glnpo1$id <- glnpo1$SAMPLE_ID
glnpo1$station <- glnpo1$STATION
glnpo1$depthm <- as.numeric(glnpo1$SMPL_DEPTH)
glnpo1$date <- glnpo1$SAMPLING_DATE
glnpo1$domgl.seabird <- as.numeric(glnpo1$VALUE.12)
glnpo1$domgl.winkler <- as.numeric(glnpo1$VALUE.22)
glnpo1$tempc.seabird <- as.numeric(glnpo1$VALUE.13)
glnpo1$tempc.water <- as.numeric(glnpo1$VALUE.21)
glnpo1$turbntu <- as.numeric(glnpo1$VALUE.20)
sel <- with(glnpo1, !is.na(domgl.seabird) | !is.na(domgl.winkler) | !is.na(tempc.seabird) | !is.na(tempc.water) | !is.na(turbntu))
glnpo1b <- glnpo1[sel, newnames]
head(glnpo1b)
newnames <- c("id", "station", "lat", "long", "date", "secchim", "secchim.dup")
glnpo2$id <- glnpo2$SAMPLE_ID
glnpo2$station <- glnpo2$STATION
glnpo2$lat <- as.numeric(glnpo2$LATITUDE)
glnpo2$long <- as.numeric(glnpo2$LONGITUDE)
glnpo2$date <- glnpo2$MEAS_DATE
glnpo2$secchim <- as.numeric(glnpo2$VALUE)
glnpo2$secchim.dup <- as.numeric(glnpo2$VALUE.1)
head(glnpo2[, newnames])
glnpo1c <- merge(glnpo1b, glnpo2[, c("station", "lat", "long")], all.x=TRUE)
sel <- with(glnpo2, !is.na(secchim) | !is.na(secchim.dup))
glnpo <- rbind.fill(glnpo1c, glnpo2[sel, newnames])
glnpo$year <- as.numeric(substring(glnpo$date, 1, 4))
##############################################
# NOAA data
newnames <- c("id", "lat", "long", "date", "depthm", "secchim", "turbntu")
# what is "TSS..mg.L." in NOAA data ????
wb <- loadWorkbook(paste(dir, files[14], sep="/"))
noaa <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
noaa <- noaa[, c("Station", "Lattitude", "Longitude", "Date", "Station.Depth..m.", "Secchi..m.", "Turbidity..NTU.")]
names(noaa) <- newnames
sel <- noaa$lat > 42 & noaa$id=="WE8"
noaa$lat[sel] <- noaa$lat[sel] - trunc(noaa$lat[sel]) + 41
noaa$year <- as.numeric(substring(noaa$date, 1, 4))
dfclip()
        name       date
aba.1        ABA 2006-10-24
aba.2        ABA 2006-11-30
aba.3        ABA 2006-10-24
aba.4        ABA 2006-11-30
aba.5        ABA 2006-10-24
aba.6        ABA 2006-11-30
aba.7        ABA 2006-10-24
aba.8        ABA 2006-11-30
aba.9        ABA 2006-10-24
aba.10       ABA 2006-11-30
bank.list.m <- dfclip()
bank.list.m <- dfclip()
bank.list.m
dput(bank.list.m)
        date   spot
1 2006-01-02 1.1826
2 2006-01-03 1.1875
3 2006-01-04 1.2083
4 2006-01-05 1.2088
5 2006-01-06 1.2093
6 2006-01-09 1.2078
dfclip()
df <- dfclip()
dput(df)
bank.list.m <- structure(list(name = c("ABA", "ABA", "ABA", "ABA", "ABA", "ABA", 
"ABA", "ABA", "ABA", "ABA"), date = c("2006-10-24", "2006-11-30", 
"2006-10-24", "2006-11-30", "2006-10-24", "2006-11-30", "2006-10-24", 
"2006-11-30", "2006-10-24", "2006-11-30")), .Names = c("name", 
"date"), class = "data.frame", row.names = c("aba.1", "aba.2", 
"aba.3", "aba.4", "aba.5", "aba.6", "aba.7", "aba.8", "aba.9", 
"aba.10"))
day.spot <- structure(list(date = c("2006-01-02", "2006-01-03", "2006-01-04", 
"2006-01-05", "2006-01-06", "2006-01-09"), spot = c(1.1826, 1.1875, 
1.2083, 1.2088, 1.2093, 1.2078)), .Names = c("date", "spot"), class = "data.frame", row.names = c("1", 
"2", "3", "4", "5", "6"))
match(day.spot$date, bank.list.m$date)
day.spot$date
bank.list.m$date
bank.list.m <- structure(list(name = c("ABA", "ABA", "ABA", "ABA", "ABA", "ABA", 
"ABA", "ABA", "ABA", "ABA"), date = c("2006-10-24", "2006-11-30", 
"2006-10-24", "2006-11-30", "2006-10-24", "2006-11-30", "2006-10-24", 
"2006-11-30", "2006-10-24", "2006-11-30")), .Names = c("name", 
"date"), class = "data.frame", row.names = c("aba.1", "aba.2", 
"aba.3", "aba.4", "aba.5", "aba.6", "aba.7", "aba.8", "aba.9", 
"aba.10"))
day.spot <- structure(list(date = c("2006-10-24", "2006-11-30", "2006-10-24", 
"2006-11-30", "2006-10-24", "2006-11-30"), spot = c(1.1826, 1.1875, 
1.2083, 1.2088, 1.2093, 1.2078)), .Names = c("date", "spot"), class = "data.frame", row.names = c("1", 
"2", "3", "4", "5", "6"))
match(day.spot$date, bank.list.m$date)
bank.list.m <- structure(list(name = c("ABA", "ABA", "ABA", "ABA", "ABA", "ABA", 
"ABA", "ABA", "ABA", "ABA"), date = c("2006-10-24", "2006-11-30", 
"2006-10-25", "2006-11-29", "2006-10-26", "2006-11-28", "2006-10-27", 
"2006-11-23", "2006-10-22", "2006-11-21")), .Names = c("name", 
"date"), class = "data.frame", row.names = c("aba.1", "aba.2", 
"aba.3", "aba.4", "aba.5", "aba.6", "aba.7", "aba.8", "aba.9", 
"aba.10"))
day.spot <- structure(list(date = c("2006-10-25", "2006-11-29", "2006-10-26", 
"2006-11-28", "2006-10-27", "2006-11-23"), spot = c(1.1826, 1.1875, 
1.2083, 1.2088, 1.2093, 1.2078)), .Names = c("date", "spot"), class = "data.frame", row.names = c("1", 
"2", "3", "4", "5", "6"))
match(day.spot$date, bank.list.m$date)
match(bank.list.m$date, day.spot$date)
bank.list.m$spot <- day.spot$spot[match(bank.list.m$date, day.spot$date)]
bank.list.m
cleanup()
q()
pkgin("jvamisc")
q()
cleanup()
q()
pkgin("jvamisc")
pkgman("jvamisc")
q()
ls()
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
head(epa)
head(dnr)
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(0.1, 5, 0.1, 5))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
mtext(paste0("  Number of years with ", casefold(deparse(substitute(df)), upper=TRUE), " data"), side=3, outer=TRUE, line=-2, adj=0, cex=1.5)
mtext(paste0("  for ", var1, " & ", var2), side=3, outer=TRUE, line=-4, adj=0, cex=1.5)
print(m3)
list(mv, m3)
}
windows()
par(mfrow=c(2, 2))
l1 <- lookseries(epa, "tempc", "domglf")
l2 <- lookseries(epa, "tempc", "domgll")
l3 <- lookseries(epa, "tempc", "domglu")
?par
xpd
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(0.1, 5, 0.1, 5))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0("  Number of years with ", casefold(deparse(substitute(df)), upper=TRUE), " data"), side=3, outer=TRUE, line=-2, adj=0, cex=1.5)
mtext(paste0("  for ", var1, " & ", var2), side=3, outer=TRUE, line=-4, adj=0, cex=1.5)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
windows()
par(mfrow=c(2, 2))
l1 <- lookseries(epa, "tempc", "domglf")
l2 <- lookseries(epa, "tempc", "domgll")
l3 <- lookseries(epa, "tempc", "domglu")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(0.1, 5, 0.1, 5))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0("  Number of years with ", casefold(deparse(substitute(df)), upper=TRUE), " data"), side=3, line=-2, adj=-0.2)
mtext(paste0("  for ", var1, " & ", var2), side=3, line=-4, adj=0, cex=1.5)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
windows()
par(mfrow=c(2, 2))
l1 <- lookseries(epa, "tempc", "domglf")
l2 <- lookseries(epa, "tempc", "domgll")
l3 <- lookseries(epa, "tempc", "domglu")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(0.1, 5, 0.1, 5))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-2, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
windows()
par(mfrow=c(2, 2))
l1 <- lookseries(epa, "tempc", "domglf")
l2 <- lookseries(epa, "tempc", "domgll")
l3 <- lookseries(epa, "tempc", "domglu")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(0.1, 5, 0.1, 5))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-3, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
windows()
par(mfrow=c(2, 2))
l1 <- lookseries(epa, "tempc", "domglf")
l2 <- lookseries(epa, "tempc", "domgll")
l3 <- lookseries(epa, "tempc", "domglu")
windows(h=8.5, w=6.5)
par(mfrow=c(2, 2))
l1 <- lookseries(epa, "tempc", "domglf")
l2 <- lookseries(epa, "tempc", "domgll")
l3 <- lookseries(epa, "tempc", "domglu")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(0.1, 2, 0.1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-3, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
windows(h=8.5, w=6.5)
par(mfrow=c(2, 2))
l1 <- lookseries(epa, "tempc", "domglf")
l2 <- lookseries(epa, "tempc", "domgll")
l3 <- lookseries(epa, "tempc", "domglu")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-3, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
windows(h=8.5, w=6.5)
par(mfrow=c(2, 2))
l1 <- lookseries(epa, "tempc", "domglf")
l2 <- lookseries(epa, "tempc", "domgll")
l3 <- lookseries(epa, "tempc", "domglu")
locator()
head(epa)
head(dnr)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Analysis of Temporal Trends in St. Clair River Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth of a minute (0.01'),",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- 
windows(h=8.5, w=6.5)
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
fig()
fig()
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (dommglf), lab (domgll), and unspecified (domglu).", 
h=8.5, w=6.5, newpage="port")
para("Four sites from the St. Clair River were selected for futher analysis, and are identified by the letters A-D,",
"from north to south for convenience (Table ", tabcount, ").")
sitez <- data.frame(
rlong = c(-82.42, -82.49, -82.49, -82.51), 
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
site = c("A", "B", "C", "D"))
tab <- sitez
tab
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = c("A", "B", "C", "D"))
tab <- sitez
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth of a degree (0.01').")
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
picksite <- "A"
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
attach(df)
windows(h=6, w=9)
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1)
plot(date, tempc, type="o", xlab="", ylab="Temperature  (C)")
plot(date, domglf, type="o", ylim=range(domglf, domgll, domglu, na.rm=TRUE), xlab="", ylab="DO  (mg/L)")
points(date, domgll, pch=2, type="o", col=blindcolz[2])
points(date, domglu, pch=3, type="o", col=blindcolz[3])
mtext("Date", side=1, outer=TRUE)
search()
find("long")
ls()
rm(long)
plot(date, tempc, type="o", na.action=na.omit, xlab="", ylab="Temperature  (C)")
?plot.default
selt <- !is.na(tempc)
seld1 <- !is.na(domglf)
seld2 <- !is.na(domgll)
seld3 <- !is.na(domglu)
windows(h=6, w=9)
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1)
plot(date[selt], tempc[selt], type="o", xlab="", ylab="Temperature  (C)")
plot(date[seld1], domglf[seld1], type="o", ylim=range(domglf, domgll, domglu, na.rm=TRUE), xlab="", ylab="DO  (mg/L)")
points(date[seld2], domgll[seld2], pch=2, type="o", col=blindcolz[2])
points(date[seld3], domglu[seld3], pch=3, type="o", col=blindcolz[3])
mtext("Date", side=1, outer=TRUE)
windows(h=6, w=9)
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1)
plot(date[selt], tempc[selt], type="o", xlab="", ylab="Temperature  (C)")
plot(date[seld1], domglf[seld1], type="o", ylim=range(domglf, domgll, domglu, na.rm=TRUE), xlab="", ylab="DO  (mg/L)")
#points(date[seld2], domgll[seld2], pch=2, type="o", col=blindcolz[2])
#points(date[seld3], domglu[seld3], pch=3, type="o", col=blindcolz[3])
mtext("Date", side=1, outer=TRUE)
aprday <- doy(date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
fitt <- loess(tempc ~ aprday, degree=2)
pt <- predict(fitt, newdata=df)
#fitd <- loess(c(domglf, domgll, domglu) ~ rep(aprday, 3), degree=2)
fitd <- loess(domglf ~ aprday, degree=2)
pd <- predict(fitd, newdata=df)
fitt <- loess(tempc ~ aprday, degree=2)
pt <- predict(fitt, newdata=df)
#fitd <- loess(c(domglf, domgll, domglu) ~ rep(aprday, 3), degree=2)
fitd <- loess(domglf ~ aprday, degree=2)
pd <- predict(fitd, newdata=df)
ord <- order(aprday)
windows(w=6.5, h=8.5)
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1)
plot(aprday, tempc, xaxt="n", xlab="", ylab="Temperature  (C)")
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(aprday[ord], pt[ord])
plot(aprday, domglf, ylim=range(domglf, domgll, domglu, na.rm=TRUE), xaxt="n", xlab="", ylab="DO  (mg/L)")
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
# points(aprday, domgll, pch=2, col=blindcolz[2])
# points(aprday, domglu, pch=3, col=blindcolz[3])
lines(aprday[ord], pd[ord])
mtext("Day of year", side=1, outer=TRUE)
windows(h=6.5, w=9)
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1)
plot(date, rt, type="o", xlab="", ylab="Temperature, seasonal trend removed  (C)")
plot(date, rd, type="o", ylim=range(fitd$resid, na.rm=TRUE), xlab="", ylab="DO, seasonal trend removed  (mg/L)")
mtext("Date", side=1, outer=TRUE)
rt
fitt <- loess(tempc ~ aprday, degree=2)
pt <- predict(fitt, newdata=df)
rt <- pt - tempc
#fitd <- loess(c(domglf, domgll, domglu) ~ rep(aprday, 3), degree=2)
fitd <- loess(domglf ~ aprday, degree=2)
pd <- predict(fitd, newdata=df)
rd <- pd - domglf
ord <- order(aprday)
rt
windows(h=6.5, w=9)
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1)
plot(date, rt, type="o", xlab="", ylab="Temperature, seasonal trend removed  (C)")
plot(date, rd, type="o", ylim=range(fitd$resid, na.rm=TRUE), xlab="", ylab="DO, seasonal trend removed  (mg/L)")
mtext("Date", side=1, outer=TRUE)
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1)
plot(date[selt], rt[selt], type="o", xlab="", ylab="Temperature, seasonal trend removed  (C)")
plot(date[seld1], rd[seld1], type="o", ylim=range(fitd$resid, na.rm=TRUE), xlab="", ylab="DO, seasonal trend removed  (mg/L)")
mtext("Date", side=1, outer=TRUE)
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1)
plot(date[selt], rt[selt], type="o", xlab="", ylab="Temperature, seasonal trend removed  (C)")
abline(h=0, lwd=2, col="gray")
lines(loess.smooth(date, rt))
plot(date[seld1], rd[seld1], type="o", ylim=range(fitd$resid, na.rm=TRUE), xlab="", ylab="DO, seasonal trend removed  (mg/L)")
abline(h=0, lwd=2, col="gray")
lines(loess.smooth(date, rd))
mtext("Date", side=1, outer=TRUE)
windows(h=6.5, w=9)
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1)
plot(date[selt], rt[selt], type="h", xlab="", ylab="Temperature, seasonal trend removed  (C)")
windows(h=6.5, w=9)
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1)
plot(date[selt], rt[selt], type="h", xlab="", ylab="Delta temperature  (C)")
plot(date[seld1], rd[seld1], type="h", ylim=range(fitd$resid, na.rm=TRUE), xlab="", ylab="Delta DO  (mg/L)")
mtext("Date", side=1, outer=TRUE)
selt <- !is.na(tempc)
seld1 <- !is.na(domglf)
seld2 <- !is.na(domgll)
seld3 <- !is.na(domglu)
windows(h=6, w=9)
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1)
plot(date[selt], tempc[selt], type="o", xlim=range(date), xlab="", ylab="Temperature  (C)")
plot(date[seld1], domglf[seld1], type="o", xlim=range(date), ylim=range(domglf, domgll, domglu, na.rm=TRUE), xlab="", ylab="DO  (mg/L)")
#points(date[seld2], domgll[seld2], pch=2, type="o", col=blindcolz[2])
#points(date[seld3], domglu[seld3], pch=3, type="o", col=blindcolz[3])
mtext("Date", side=1, outer=TRUE)
aprday <- doy(date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
fitt <- loess(tempc ~ aprday, degree=2)
pt <- predict(fitt, newdata=df)
rt <- pt - tempc
#fitd <- loess(c(domglf, domgll, domglu) ~ rep(aprday, 3), degree=2)
fitd <- loess(domglf ~ aprday, degree=2)
pd <- predict(fitd, newdata=df)
rd <- pd - domglf
ord <- order(aprday)
windows(w=6.5, h=8.5)
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1)
plot(aprday, tempc, xaxt="n", xlab="", ylab="Temperature  (C)")
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(aprday[ord], pt[ord])
plot(aprday, domglf, ylim=range(domglf, domgll, domglu, na.rm=TRUE), xaxt="n", xlab="", ylab="DO  (mg/L)")
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
# points(aprday, domgll, pch=2, col=blindcolz[2])
# points(aprday, domglu, pch=3, col=blindcolz[3])
lines(aprday[ord], pd[ord])
mtext("Day of year", side=1, outer=TRUE)
windows(h=6.5, w=9)
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1)
plot(date[selt], rt[selt], type="o", xlim=range(date), xlab="", ylab="Temperature, seasonal trend removed  (C)")
abline(h=0, lwd=2, col="gray")
lines(loess.smooth(date, rt))
plot(date[seld1], rd[seld1], type="o", xlim=range(date), ylim=range(fitd$resid, na.rm=TRUE), xlab="", ylab="DO, seasonal trend removed  (mg/L)")
abline(h=0, lwd=2, col="gray")
lines(loess.smooth(date, rd))
mtext("Date", side=1, outer=TRUE)
windows(h=6.5, w=9)
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1)
plot(date[selt], rt[selt], type="h", xlim=range(date), xlab="", ylab="Delta temperature  (C)")
plot(date[seld1], rd[seld1], type="h", xlim=range(date), ylim=range(fitd$resid, na.rm=TRUE), xlab="", ylab="Delta DO  (mg/L)")
mtext("Date", side=1, outer=TRUE)
fit <- gam(tempc ~ s(aprday) + as.factor(year))
summary(fit)
windows()
plot(fit)
plot(fit, TRUE)
?plot.gam
plot(fit, all.terms=TRUE)
median(aprday)
m1
cbind(month.abb, m1, m15)
predict(fit, newdata=data.frame(aprday=123, year=1999:2012))
predict(fit, newdata=data.frame(aprday=123, year=1998:2012))
search()
detach()
search()
picksite <- "A"
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- tempc
ylab <- "Temperature  (C)"
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- df$date[sel]
x2 <- aprday[sel]
yr <- df$year[sel]
y <- y[sel]
# raw data
windows(h=6, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="o", xlab=Date, ylab=ylab)
# seasonal pattern
fit <- gam(tempc ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$yhat <- predict(fit, newdata=new)
picksite <- "A"
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df$tempc
ylab <- "Temperature  (C)"
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- df$date[sel]
x2 <- aprday[sel]
yr <- df$year[sel]
y <- y[sel]
# raw data
windows(h=6, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="o", xlab=Date, ylab=ylab)
# seasonal pattern
fit <- gam(tempc ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$yhat <- predict(fit, newdata=new)
picksite <- "A"
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df$tempc
ylab <- "Temperature  (C)"
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- df$date[sel]
x2 <- aprday[sel]
yr <- df$year[sel]
y <- y[sel]
# raw data
windows(h=6, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="o", xlab=Date, ylab=ylab)
# seasonal pattern
fit <- gam(tempc ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$yhat <- predict(fit, newdata=new)
picksite <- "A"
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df$tempc
ylab <- "Temperature  (C)"
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- df$date[sel]
x2 <- aprday[sel]
yr <- df$year[sel]
y <- y[sel]
# raw data
windows(h=6, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="o", xlab="Date", ylab=ylab)
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$yhat <- predict(fit, newdata=new)
head(new)
aprday
sort(aprday)
tapply(new$yhat, new$x2, mean)
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$yhat <- predict(fit, newdata=new)
windows(w=6.5, h=8.5)
par(mar=c(4, 4, 1, 1), las=1)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=ylab)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
head(new)
as.Date(paste(new$yr, "04-01"))
as.Date(paste0(new$yr, "-04-01"))
as.Date(paste0(new$yr, "-04-01")) + new$x2
as.Date(paste0(new$yr, "-04-01")) + new$x2new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
windows(w=6.5, h=8.5)
par(mar=c(4, 4, 1, 1), las=1)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=ylab)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
# raw data
suy <- sort(unique(new$yr))
windows(h=6, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="n", xlab="Date", ylab=ylab)
for(i in seq(suy)) {
sel <- new$yr==suy[i]
lines(new$date[sel], new$yhat[sel], lwd=3, col="lightgray")
}
lines(x1, y, type="o")
x1[1:10]
new$date[1:10]
plot(new$date[sel], new$yhat[sel])
class(x1)
class(new$date)
as.Date(x1)
class(as.Date(x1))
graphics.off()
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
y <- y[sel]
# raw data
windows(h=6, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="o", xlab="Date", ylab=ylab)
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
windows(w=6.5, h=8.5)
par(mar=c(4, 4, 1, 1), las=1)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=ylab)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
# raw data
suy <- sort(unique(new$yr))
windows(h=6, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="n", xlab="Date", ylab=ylab)
for(i in seq(suy)) {
sel <- new$yr==suy[i]
lines(new$date[sel], new$yhat[sel], lwd=3, col="lightgray")
}
lines(x1, y, type="o")
picksite <- "A"
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df$tempc
ylab <- "Temperature  (C)"
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
y <- y[sel]
# raw data
windows(h=6, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="o", xlab="Date", ylab=ylab)
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
windows(w=6.5, h=8.5)
par(mar=c(4, 4, 1, 1), las=1)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=ylab)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
# raw data
suy <- sort(unique(new$yr))
windows(h=6, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="n", xlab="Date", ylab=ylab)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
lines(x1, y, type="o")
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="n", xlab="Date", ylab=ylab)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
head(new)
# trend over time
windows(h=3, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(suy, tapply(new$yhat, new$yr, median), type="o", xlab="Date", ylab=ylab)
graphics.off()
picksite <- "A"
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df$tempc
ylab <- "Temperature  (C)"
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
y <- y[sel]
# raw data
windows(h=3, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="o", xlab="Date", ylab=ylab)
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
windows(w=6.5, h=6.5)
par(mar=c(4, 4, 1, 1), las=1)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=ylab)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
# raw data with predicted lines
suy <- sort(unique(new$yr))
windows(h=3, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="n", xlab="Date", ylab=ylab)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
# trend over time
windows(h=3, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(suy, tapply(new$yhat, new$yr, median), type="o", xlab="Date", ylab=ylab)
figu
dataprep <- function(picksite, yvar, yvarname) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
suy <- sort(unique(new$yr))
list(x1, x2, y, yvarname, m1, m15, new)
}
run1 <- dataprep(picksite=="A", yvar="tempc", yvarname="Temperature  (C)")
picksite=="A"
yvar="tempc"
yvarname="Temperature  (C)"
run1 <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)")
run1
length(run1)
names(run1)
rm(x1, x2, x, y, new, yvar, yvarname, m1, m15)
dataprep <- function(picksite, yvar, yvarname) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
suy <- sort(unique(new$yr))
list(x1=x1, x2=x2, y=y, yvarname=yvarname, m1=m1, m15=m15, new=new)
}
run1 <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)")
names(run1)
attach(run1)
figu("Raw data.", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern.", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw data with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time.", FIG=figtrend, h=3, w=9, newpage="land")
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(suy, tapply(new$yhat, new$yr, median), type="o", xlab="Date", ylab=yvarname)
}
figu("Raw data.", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern.", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw data with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time.", FIG=figtrend, h=3, w=9, newpage="land")
cleanup()
graphics.off()
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
#source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
head(epa)
head(dnr)
rm(long)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Analysis of Temporal Trends in St. Clair River Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth of a degree (0.01'),",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (dommglf), lab (domgll), and unspecified (domglu).", 
h=8.5, w=6.5, newpage="port")
para("Four sites from the St. Clair River were selected for futher analysis, and are identified by the letters A-D,",
"from north to south for convenience (Table ", tabcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = c("A", "B", "C", "D"))
tab <- sitez
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth of a degree (0.01').")
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
dataprep <- function(picksite, yvar, yvarname) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
suy <- sort(unique(new$yr))
list(x1=x1, x2=x2, y=y, yvarname=yvarname, m1=m1, m15=m15, new=new)
}
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(suy, tapply(new$yhat, new$yr, median), type="o", xlab="Date", ylab=yvarname)
}
run1 <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)")
attach(run1)
figu("Raw data.", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern.", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw data with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time.", FIG=figtrend, h=3, w=9, newpage="land")
detach(run1)
run1 <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)")
attach(run1)
figu("Raw data.", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern.", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw data with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time.", FIG=figtrend, h=3, w=9, newpage="land")
detach(run1)
endrtf()
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
#source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
head(epa)
head(dnr)
rm(long)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Analysis of Temporal Trends in St. Clair River Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth of a degree (0.01'),",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (dommglf), lab (domgll), and unspecified (domglu).", 
h=8.5, w=6.5, newpage="port")
para("Four sites from the St. Clair River were selected for futher analysis, and are identified by the letters A-D,",
"from north to south for convenience (Table ", tabcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = c("A", "B", "C", "D"))
tab <- sitez
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth of a degree (0.01').")
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
dataprep <- function(picksite, yvar, yvarname) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
suy <- sort(unique(new$yr))
list(x1=x1, x2=x2, y=y, yvarname=yvarname, m1=m1, m15=m15, new=new)
}
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(suy, tapply(new$yhat, new$yr, median), type="o", xlab="Date", ylab=yvarname)
}
run1 <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)")
attach(run1)
figu("Raw data.", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern.", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw data with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time.", FIG=figtrend, h=3, w=9, newpage="land")
detach(run1)
run1 <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)")
attach(run1)
figu("Raw data.", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern.", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw data with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time.", FIG=figtrend, h=3, w=9, newpage="land")
detach(run1)
endrtf()
dataprep <- function(picksite, yvar, yvarname) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
suy <- sort(unique(new$yr))
list(y=y, x1=x1, x2=x2, yvarname=yvarname, m1=m1, m15=m15, new=new, suy=suy)
}
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(suy, tapply(new$yhat, new$yr, median), type="o", xlab="Date", ylab=yvarname)
}
run1 <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)")
attach(run1)
figu("Raw data.", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern.", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw data with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time.", FIG=figtrend, h=3, w=9, newpage="land")
detach(run1)
run1 <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)")
attach(run1)
figu("Raw data.", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern.", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw data with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time.", FIG=figtrend, h=3, w=9, newpage="land")
detach(run1)
endrtf()
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
#source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
head(epa)
head(dnr)
rm(long)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Analysis of Temporal Trends in St. Clair River Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth of a degree (0.01'),",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (dommglf), lab (domgll), and unspecified (domglu).", 
h=8.5, w=6.5, newpage="port")
para("Four sites from the St. Clair River were selected for futher analysis, and are identified by the letters A-D,",
"from north to south for convenience (Table ", tabcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = c("A", "B", "C", "D"))
tab <- sitez
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth of a degree (0.01').")
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
dataprep <- function(picksite, yvar, yvarname) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
suy <- sort(unique(new$yr))
list(y=y, x1=x1, x2=x2, yvarname=yvarname, m1=m1, m15=m15, new=new, suy=suy)
}
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(suy, tapply(new$yhat, new$yr, median), type="o", xlab="Date", ylab=yvarname)
}
run1 <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)")
attach(run1)
figu("Raw data.", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern.", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw data with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time.", FIG=figtrend, h=3, w=9, newpage="land")
detach(run1)
run1 <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)")
attach(run1)
figu("Raw data.", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern.", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw data with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time.", FIG=figtrend, h=3, w=9, newpage="land")
detach(run1)
endrtf()
format(sitez)
tabl
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="B", yvar="tempc", yvarname="Temperature  (C)")
run.bd <- dataprep(picksite="B", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="C", yvar="tempc", yvarname="Temperature  (C)")
run.cd <- dataprep(picksite="C", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)")
run.dd1 <- dataprep(picksite="D", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="D", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
doit <- function(mylist) {
attach(mylist)
figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", FIG=figtrend, h=3, w=9, newpage="land")
detach(mylist)
}
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
suy <- sort(unique(new$yr))
list(y=y, x1=x1, x2=x2, yvarname=yvarname, m1=m1, m15=m15, new=new, suy=suy)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="B", yvar="tempc", yvarname="Temperature  (C)")
run.bd <- dataprep(picksite="B", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="C", yvar="tempc", yvarname="Temperature  (C)")
run.cd <- dataprep(picksite="C", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)")
run.dd1 <- dataprep(picksite="D", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="D", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(y=y, x1=x1, x2=x2, yvarname=yvarname, m1=m1, m15=m15, new=new, suy=suy)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="B", yvar="tempc", yvarname="Temperature  (C)")
run.bd <- dataprep(picksite="B", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="C", yvar="tempc", yvarname="Temperature  (C)")
run.cd <- dataprep(picksite="C", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)")
run.dd1 <- dataprep(picksite="D", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="D", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
doit <- function(mylist) {
attach(mylist)
figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", FIG=figtrend, h=3, w=9, newpage="land")
detach(mylist)
}
doit(run.at)
doit(run.ad)
doit(run.bt)
doit(run.bd)
doit(run.ct)
doit(run.cd)
doit(run.dt)
doit(run.dd1)
doit(run.dd2)
doit(run.dd3)
search()
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
doit <- function(mylist) {
attach(mylist)
figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", FIG=figtrend, h=3, w=9, newpage="land")
detach(mylist)
}
doit(run.at)
doit(run.ad)
doit(run.bt)
doit(run.bd)
doit(run.ct)
doit(run.cd)
doit(run.dt)
doit(run.dd1)
doit(run.dd2)
doit(run.dd3)
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, m1=m1, m15=m15, new=new, suy=suy)
}
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="B", yvar="tempc", yvarname="Temperature  (C)")
run.bd <- dataprep(picksite="B", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="C", yvar="tempc", yvarname="Temperature  (C)")
run.cd <- dataprep(picksite="C", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)")
run.dd1 <- dataprep(picksite="D", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="D", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
doit(run.at)
attach(run.at)
search()
detach(mylist)
paste("Raw ", desc, " data from site ", picksite, ".")
dex
desc
ls(2)
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="B", yvar="tempc", yvarname="Temperature  (C)")
run.bd <- dataprep(picksite="B", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="C", yvar="tempc", yvarname="Temperature  (C)")
run.cd <- dataprep(picksite="C", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)")
run.dd1 <- dataprep(picksite="D", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="D", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="B", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="B", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="C", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="C", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="D", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="D", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
doit(run.at)
search()
detach()
doit(run.at)
doit(run.ad)
doit(run.bt)
doit(run.bd)
doit(run.ct)
doit(run.cd)
doit(run.dt)
doit(run.dd1)
doit(run.dd2)
doit(run.dd3)
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
#source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
head(epa)
head(dnr)
rm(long)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Analysis of Temporal Trends in St. Clair River Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth of a degree (0.01'),",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (dommglf), lab (domgll), and unspecified (domglu).", 
h=8, w=6.5, newpage="port")
para("Four sites from the St. Clair River were selected for futher analysis, and are identified by the letters A-D,",
" from north to south for convenience (Table ", tabcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = c("A", "B", "C", "D"))
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth of a degree (0.01').", row.names=FALSE)
para("For each of the four sites, the seasonal pattern in temperature and DO was removed in order to reveal the underlying trend",
" over time.  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.  The results are shown in the following figures."
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(suy, tapply(new$yhat, new$yr, median), type="o", xlab="Date", ylab=yvarname)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="B", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="B", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="C", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="C", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="D", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="D", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
doit <- function(mylist) {
attach(mylist)
figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", FIG=figtrend, h=3, w=9, newpage="land")
detach(mylist)
}
doit(run.at)
doit(run.ad)
doit(run.bt)
doit(run.bd)
doit(run.ct)
doit(run.cd)
doit(run.dt)
doit(run.dd1)
doit(run.dd2)
doit(run.dd3)
endrtf()
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
#source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
head(epa)
head(dnr)
rm(long)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Analysis of Temporal Trends in St. Clair River Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth of a degree (0.01'),",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (dommglf), lab (domgll), and unspecified (domglu).", 
h=8, w=6.5, newpage="port")
para("Four sites from the St. Clair River were selected for futher analysis, and are identified by the letters A-D,",
" from north to south for convenience (Table ", tabcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = c("A", "B", "C", "D"))
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth of a degree (0.01').", row.names=FALSE)
para("For each of the four sites, the seasonal pattern in temperature and DO was removed in order to reveal the underlying trend",
" over time.  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.  The results are shown in the following figures.")
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(suy, tapply(new$yhat, new$yr, median), type="o", xlab="Date", ylab=yvarname)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="B", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="B", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="C", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="C", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="D", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="D", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
doit <- function(mylist) {
attach(mylist)
figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", FIG=figtrend, h=3, w=9, newpage="land")
detach(mylist)
}
doit(run.at)
doit(run.ad)
doit(run.bt)
doit(run.bd)
doit(run.ct)
doit(run.cd)
doit(run.dt)
doit(run.dd1)
doit(run.dd2)
doit(run.dd3)
endrtf()
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
#source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
head(epa)
head(dnr)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Temporal Trends in St. Clair River Water Quality Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth (0.01) of a degree,",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (dommglf), lab (domgll), and unspecified (domglu).", 
h=8, w=6.5, newpage="port")
para("Four sites from the St. Clair River were selected for futher analysis, and are identified by the letters A-D,",
" from north to south for convenience (Table ", tabcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = c("A", "B", "C", "D"))
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth (0.01) of a degree.", row.names=FALSE)
para("For each of the four sites, the seasonal pattern in temperature and DO was removed in order to reveal the underlying trend",
" over time.  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.  The results are shown in the following figures.")
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.5)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.5)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.5)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.5)
plot(suy, tapply(new$yhat, new$yr, median), type="o", xlab="Date", ylab=yvarname)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="B", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="B", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="C", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="C", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="D", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="D", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
doit <- function(mylist) {
attach(mylist)
#figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6.5, w=6.5, newpage="land")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", FIG=figtrend, h=3, w=9)
detach(mylist)
}
doit(run.at)
doit(run.ad)
doit(run.bt)
doit(run.bd)
doit(run.ct)
doit(run.cd)
doit(run.dt)
doit(run.dd1)
doit(run.dd2)
doit(run.dd3)
endrtf()
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
#source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
head(epa)
head(dnr)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Temporal Trends in St. Clair River Water Quality Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth (0.01) of a degree,",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (dommglf), lab (domgll), and unspecified (domglu).", 
h=8, w=6.5, newpage="port")
para("Four sites from the St. Clair River were selected for futher analysis, and are identified by the letters A-D,",
" from north to south for convenience (Table ", tabcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = c("A", "B", "C", "D"))
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth (0.01) of a degree.", row.names=FALSE)
para("For each of the four sites, the seasonal pattern in temperature and DO was removed in order to reveal the underlying trend",
" over time.  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.  The results are shown in the following figures.")
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(suy, tapply(new$yhat, new$yr, median), type="o", xlab="Date", ylab=yvarname)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="B", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="B", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="C", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="C", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="D", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="D", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
doit <- function(mylist) {
attach(mylist)
#figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=2.5, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6, w=6.5, newpage="land")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=2.5, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", FIG=figtrend, h=2.5, w=9)
detach(mylist)
}
doit(run.at)
doit(run.ad)
doit(run.bt)
doit(run.bd)
doit(run.ct)
doit(run.cd)
doit(run.dt)
doit(run.dd1)
doit(run.dd2)
doit(run.dd3)
endrtf()
biglist <- list(run.at, run.ad, run.bt, run.bd, run.ct, run.cd, run.dt, run.dd1, run.dd2, run.dd3)
do.call
lapply(biglist, "$suy")
biglist[[1]]
biglist[[1]]["suy"]
biglist[[1]][["suy"]]
lapply(biglist, "[[", "suy")
unlist(lapply(biglist, "[[", "suy"))
range(unlist(lapply(biglist[c(1, 3, 5, 7)], "[[", "yvar")))
lapply(biglist, "[[", "suy")
lapply(biglist, "[[", "yvar")
lapply(biglist, "[[", "y")
range(unlist(lapply(biglist[c(1, 3, 5, 7)], "[[", "y")))
range(unlist(lapply(biglist[c(2, 4, 6, 8:10)], "[[", "y")))
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
trng <- range(unlist(lapply(biglist[c(1, 3, 5, 7)], "[[", "y")))
drng <- range(unlist(lapply(biglist[c(2, 4, 6, 8:10)], "[[", "y")))
windows()
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(run.at$suy, tapply(run.at$new$yhat, run.at$new$yr, median), xlim=yrrng, ylim=trng, type="o", xlab="Date", ylab=yvarname)
plot(run.at$suy, tapply(run.at$new$yhat, run.at$new$yr, median), xlim=yrrng, ylim=trng, type="o", xlab="Year", ylab="Temperature  (C)")
plot(run.at$suy, tapply(run.at$new$yhat, run.at$new$yr, median), pch="A", xlim=yrrng, ylim=trng, type="o", xlab="Year", ylab="Temperature  (C)")
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(run.at$suy, tapply(run.at$new$yhat, run.at$new$yr, median), pch="A", xlim=yrrng, ylim=trng, type="o", xlab="Year", ylab="Temperature  (C)")
points(run.bt$suy, tapply(run.bt$new$yhat, run.bt$new$yr, median), pch="B", type="o")
points(run.ct$suy, tapply(run.ct$new$yhat, run.ct$new$yr, median), pch="C", type="o")
points(run.dt$suy, tapply(run.dt$new$yhat, run.dt$new$yr, median), pch="D", type="o")
locator()
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(run.at$suy, tapply(run.at$new$yhat, run.at$new$yr, median), pch="A", xlim=yrrng, ylim=c(10, 17), type="o", xlab="Year", ylab="Temperature  (C)")
points(run.bt$suy, tapply(run.bt$new$yhat, run.bt$new$yr, median), pch="B", type="o")
points(run.ct$suy, tapply(run.ct$new$yhat, run.ct$new$yr, median), pch="C", type="o")
points(run.dt$suy, tapply(run.dt$new$yhat, run.dt$new$yr, median), pch="D", type="o")
locator()
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(run.at$suy, tapply(run.at$new$yhat, run.at$new$yr, median), pch="A", xlim=yrrng, ylim=c(10.5, 17), type="o", xlab="Year", ylab="Temperature  (C)")
points(run.bt$suy, tapply(run.bt$new$yhat, run.bt$new$yr, median), pch="B", type="o")
points(run.ct$suy, tapply(run.ct$new$yhat, run.ct$new$yr, median), pch="C", type="o")
points(run.dt$suy, tapply(run.dt$new$yhat, run.dt$new$yr, median), pch="D", type="o")
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(run.at$suy, tapply(run.at$new$yhat, run.at$new$yr, median), pch="A", xlim=yrrng, ylim=c(10.5, 17), type="o", xlab="Year", ylab="Temperature  (C)")
points(run.bt$suy, tapply(run.bt$new$yhat, run.bt$new$yr, median), pch="B", type="o", col=blindcolz[2])
points(run.ct$suy, tapply(run.ct$new$yhat, run.ct$new$yr, median), pch="C", type="o", col=blindcolz[3])
points(run.dt$suy, tapply(run.dt$new$yhat, run.dt$new$yr, median), pch="D", type="o", col=blindcolz[4])
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(run.at$suy, tapply(run.at$new$yhat, run.at$new$yr, median), pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(10.5, 17), xlab="Year", ylab="Temperature  (C)")
points(run.bt$suy, tapply(run.bt$new$yhat, run.bt$new$yr, median), pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, tapply(run.ct$new$yhat, run.ct$new$yr, median), pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, tapply(run.dt$new$yhat, run.dt$new$yr, median), pch="D", type="o", col=blindcolz[5])
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(run.at$suy, tapply(run.at$new$yhat, run.at$new$yr, median), pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(10.5, 17), xlab="Year", ylab="Temperature  (C)")
points(run.bt$suy, tapply(run.bt$new$yhat, run.bt$new$yr, median), pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, tapply(run.ct$new$yhat, run.ct$new$yr, median), pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, tapply(run.dt$new$yhat, run.dt$new$yr, median), pch="D", type="o", col=blindcolz[6])
windows()
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(run.ad$suy, tapply(run.ad$new$yhat, run.ad$new$yr, median), pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=drng, xlab="Year", ylab="Temperature  (C)")
points(run.bd$suy, tapply(run.bd$new$yhat, run.bd$new$yr, median), pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, tapply(run.cd$new$yhat, run.cd$new$yr, median), pch="C", type="o", col=blindcolz[4])
points(run.dd$suy, tapply(run.dd$new$yhat, run.dd$new$yr, median), pch="D", type="o", col=blindcolz[6])
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(run.ad$suy, tapply(run.ad$new$yhat, run.ad$new$yr, median), pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=drng, xlab="Year", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, tapply(run.bd$new$yhat, run.bd$new$yr, median), pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, tapply(run.cd$new$yhat, run.cd$new$yr, median), pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, tapply(run.dd1$new$yhat, run.dd1$new$yr, median), pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, tapply(run.dd2$new$yhat, run.dd2$new$yr, median), pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, tapply(run.dd3$new$yhat, run.dd3$new$yr, median), pch="D", type="o", col=blindcolz[8])
locator()
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(run.ad$suy, tapply(run.ad$new$yhat, run.ad$new$yr, median), pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(7, 12), xlab="Year", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, tapply(run.bd$new$yhat, run.bd$new$yr, median), pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, tapply(run.cd$new$yhat, run.cd$new$yr, median), pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, tapply(run.dd1$new$yhat, run.dd1$new$yr, median), pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, tapply(run.dd2$new$yhat, run.dd2$new$yr, median), pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, tapply(run.dd3$new$yhat, run.dd3$new$yr, median), pch="D", type="o", col=blindcolz[8])
windows()
par(mfrow=c(2, 1), mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(run.at$suy, tapply(run.at$new$yhat, run.at$new$yr, median), pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(10.5, 17), xlab="Year", ylab="Temperature  (C)")
points(run.bt$suy, tapply(run.bt$new$yhat, run.bt$new$yr, median), pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, tapply(run.ct$new$yhat, run.ct$new$yr, median), pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, tapply(run.dt$new$yhat, run.dt$new$yr, median), pch="D", type="o", col=blindcolz[6])
plot(run.ad$suy, tapply(run.ad$new$yhat, run.ad$new$yr, median), pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(7, 12), xlab="Year", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, tapply(run.bd$new$yhat, run.bd$new$yr, median), pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, tapply(run.cd$new$yhat, run.cd$new$yr, median), pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, tapply(run.dd1$new$yhat, run.dd1$new$yr, median), pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, tapply(run.dd2$new$yhat, run.dd2$new$yr, median), pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, tapply(run.dd3$new$yhat, run.dd3$new$yr, median), pch="D", type="o", col=blindcolz[8])
windows()
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, tapply(run.at$new$yhat, run.at$new$yr, median), pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(10.5, 17), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, tapply(run.bt$new$yhat, run.bt$new$yr, median), pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, tapply(run.ct$new$yhat, run.ct$new$yr, median), pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, tapply(run.dt$new$yhat, run.dt$new$yr, median), pch="D", type="o", col=blindcolz[6])
plot(run.ad$suy, tapply(run.ad$new$yhat, run.ad$new$yr, median), pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(7, 12), xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, tapply(run.bd$new$yhat, run.bd$new$yr, median), pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, tapply(run.cd$new$yhat, run.cd$new$yr, median), pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, tapply(run.dd1$new$yhat, run.dd1$new$yr, median), pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, tapply(run.dd2$new$yhat, run.dd2$new$yr, median), pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, tapply(run.dd3$new$yhat, run.dd3$new$yr, median), pch="D", type="o", col=blindcolz[8])
mtext("Year", side=1, outer=TRUE)
mtext("Year", side=1, outer=TRUE, cex=1.2)
windows()
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, tapply(run.at$new$yhat, run.at$new$yr, median), pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(10.5, 17), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, tapply(run.bt$new$yhat, run.bt$new$yr, median), pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, tapply(run.ct$new$yhat, run.ct$new$yr, median), pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, tapply(run.dt$new$yhat, run.dt$new$yr, median), pch="D", type="o", col=blindcolz[6])
plot(run.ad$suy, tapply(run.ad$new$yhat, run.ad$new$yr, median), pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(7, 12), xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, tapply(run.bd$new$yhat, run.bd$new$yr, median), pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, tapply(run.cd$new$yhat, run.cd$new$yr, median), pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, tapply(run.dd1$new$yhat, run.dd1$new$yr, median), pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, tapply(run.dd2$new$yhat, run.dd2$new$yr, median), pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, tapply(run.dd3$new$yhat, run.dd3$new$yr, median), pch="D", type="o", col=blindcolz[8])
mtext("Year", side=1, outer=TRUE, cex=1.2)
windows()
par(mfrow=c(2, 1), mar=c(2.5, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, tapply(run.at$new$yhat, run.at$new$yr, median), pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(10.5, 17), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, tapply(run.bt$new$yhat, run.bt$new$yr, median), pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, tapply(run.ct$new$yhat, run.ct$new$yr, median), pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, tapply(run.dt$new$yhat, run.dt$new$yr, median), pch="D", type="o", col=blindcolz[6])
plot(run.ad$suy, tapply(run.ad$new$yhat, run.ad$new$yr, median), pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(7, 12), xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, tapply(run.bd$new$yhat, run.bd$new$yr, median), pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, tapply(run.cd$new$yhat, run.cd$new$yr, median), pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, tapply(run.dd1$new$yhat, run.dd1$new$yr, median), pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, tapply(run.dd2$new$yhat, run.dd2$new$yr, median), pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, tapply(run.dd3$new$yhat, run.dd3$new$yr, median), pch="D", type="o", col=blindcolz[8])
mtext("Year", side=1, outer=TRUE, cex=1.2)
suy
yrng
yrrng
paste(yrrng, collapse="-")
head(epasub)
xxx <- doy(epasub$date, "04-01")
windows()
hist(xxx)
hist(xxx, nclass=25)
m1
doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
new
run.at$new
head(run.at$new)
a <- run.at$new
a[a$x2==123]
a[a$x2==123, ]
a$newhat[a$x2==123]
a$yhat[a$x2==123]
head(a)
xxx
table(round(xxx))
sort(table(round(xxx)))
doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
191-183
suy
locator()
locator()
fig <- function() {
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
par(mfrow=c(2, 1), mar=c(2.5, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(10.5, 17), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="D", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(7, 12), xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="D", type="o", col=blindcolz[8])
mtext("Year", side=1, outer=TRUE, cex=1.2)
}
fig()
fig()
windows()
fig()
locator()
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
par(mfrow=c(2, 1), mar=c(2.5, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(10.5, 17), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="D", type="o", col=blindcolz[6])
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
par(mfrow=c(2, 1), mar=c(2.5, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(10.5, 17), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="D", type="o", col=blindcolz[6])
run.bt$suy
run.bt$new$yhat[run.bt$new$x2==123]
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123])
par(mfrow=c(2, 1), mar=c(2.5, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(10.5, 25), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="D", type="o", col=blindcolz[6])
par(mfrow=c(2, 1), mar=c(2.5, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(17, 30), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="D", type="o", col=blindcolz[6])
locator()
par(mfrow=c(2, 1), mar=c(2.5, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18.5, 26.5), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="D", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(7, 12), xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="D", type="o", col=blindcolz[8])
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
par(mfrow=c(2, 1), mar=c(2.5, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18.5, 26.5), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="D", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(5, 11), xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="D", type="o", col=blindcolz[8])
mtext("Year", side=1, outer=TRUE, cex=1.2)
locator()
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
par(mfrow=c(2, 1), mar=c(2.5, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18.5, 26.5), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="D", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 10.5), xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="D", type="o", col=blindcolz[8])
mtext("Year", side=1, outer=TRUE, cex=1.2)
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
par(mfrow=c(2, 1), mar=c(2.5, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18, 26.5), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="D", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 11), xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="D", type="o", col=blindcolz[8])
mtext("Year", side=1, outer=TRUE, cex=1.2)
locator()
locator()
1998-1974
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
#source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
head(epa)
head(dnr)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Temporal Trends in St. Clair River Water Quality Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth (0.01) of a degree,",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (dommglf), lab (domgll), and unspecified (domglu).", 
h=8, w=6.5, newpage="port")
para("Four sites from the St. Clair River were selected for futher analysis, and are identified by the letters A-D,",
" from north to south for convenience (Table ", tabcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = c("A", "B", "C", "D"))
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth (0.01) of a degree.", row.names=FALSE)
para("For each of the four sites, the seasonal patterns in temperature and DO were removed in order to reveal the underlying trend",
" over time.  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.",
"  The predicted value on 1 August of each year was used to represent the trend over time.",
"  The same pattern over time would be generated regardless of the selected date.",
"  Sampling years are largely confounded with sampling locations, with sites B and C sampled",
" during 1963-1973, sites A and D sampled during 1998-2012, and over a 20-year gap in sampling in between (Figure ", figcount, ".")
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="B", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="B", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="C", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="C", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="D", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="D", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
biglist <- list(run.at, run.ad, run.bt, run.bd, run.ct, run.cd, run.dt, run.dd1, run.dd2, run.dd3)
fig <- function() {
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
par(mfrow=c(2, 1), mar=c(2.5, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18, 26.5), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="D", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 11), xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="D", type="o", col=blindcolz[8])
mtext("Year", side=1, outer=TRUE, cex=1.2)
}
figu("Trend over time in EPA temperature and dissolved oxygen data from sites A-D, ", paste(yrrng, collapse="-"), ".", 
"  Values are predictions for 1 August of each year.", h=6, w=9, newpage="land")
para("The remaining figures show the raw data, the seasonal pattern, and the result of the seaonal detrending for each site and response",
" variable.")
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(suy, new$yhat[new$x2==123], type="o", xlab="Year", ylab=yvarname)
}
doit <- function(mylist) {
attach(mylist)
#figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=2.5, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6, w=6.5, newpage="land")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=2.5, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", 
"  Values are predictions for 1 August of each year.", FIG=figtrend, h=2.5, w=9)
detach(mylist)
}
lapply(biglist, doit)
endrtf()
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
#source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
head(epa)
head(dnr)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Temporal Trends in St. Clair River Water Quality Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth (0.01) of a degree,",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (dommglf), lab (domgll), and unspecified (domglu).", 
h=5, w=5)
para("Four sites from the St. Clair River were selected for futher analysis, and are identified by the letters A-D,",
" from north to south for convenience (Table ", tabcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = c("A", "B", "C", "D"))
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth (0.01) of a degree.", row.names=FALSE)
para("For each of the four sites, the seasonal patterns in temperature and DO were removed in order to reveal the underlying trend",
" over time.  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.",
"  The predicted value on 1 August of each year was used to represent the trend over time.",
"  The same pattern over time would be generated regardless of the selected date.",
"  Sampling years are largely confounded with sampling locations, with sites B and C sampled",
" during 1963-1973, sites A and D sampled during 1998-2012, and over a 20-year gap in sampling in between (Figure ", figcount, ".")
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="B", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="B", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="C", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="C", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="D", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="D", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
biglist <- list(run.at, run.ad, run.bt, run.bd, run.ct, run.cd, run.dt, run.dd1, run.dd2, run.dd3)
fig <- function() {
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
par(mfrow=c(2, 1), mar=c(2.5, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18, 26.5), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="D", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 11), xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="D", type="o", col=blindcolz[8])
mtext("Year", side=1, outer=TRUE, cex=1.2)
}
figu("Trend over time in EPA temperature and dissolved oxygen data from sites A-D, ", paste(yrrng, collapse="-"), ".", 
"  Values are predictions for 1 August of each year.", h=5.5, w=9, newpage="land")
para("The remaining figures show the raw data, the seasonal pattern, and the result of the seaonal detrending for each site and response",
" variable.")
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(suy, new$yhat[new$x2==123], type="o", xlab="Year", ylab=yvarname)
}
doit <- function(mylist) {
attach(mylist)
#figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=2.5, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6, w=6.5, newpage="land")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=2.5, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", 
"  Values are predictions for 1 August of each year.", FIG=figtrend, h=2.5, w=9)
detach(mylist)
invisible()
}
lapply(biglist, doit)
endrtf()
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
#source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
head(epa)
head(dnr)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Temporal Trends in St. Clair River Water Quality Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth (0.01) of a degree,",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (domglf), lab (domgll), and unspecified (domglu).", 
h=6.4, w=6.4)
para("Four sites from the St. Clair River were selected for further analysis, and are identified by the letters A-D,",
" from north to south for convenience (Table ", tabcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = c("A", "B", "C", "D"))
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth (0.01) of a degree.", row.names=FALSE)
para("For each of the four sites, the seasonal patterns in temperature and DO were removed in order to reveal the underlying trend",
" over time.  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.",
"  The predicted value on 1 August of each year was used to represent the trend over time.",
"  The same pattern over time would be generated regardless of the selected date.",
"  Sampling years are largely confounded with sampling locations, with sites B and C sampled",
" during 1963-1973, sites A and D sampled during 1998-2012, and over a 20-year gap in sampling in between (Figure ", figcount, ".")
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="B", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="B", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="C", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="C", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="D", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="D", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
biglist <- list(run.at, run.ad, run.bt, run.bd, run.ct, run.cd, run.dt, run.dd1, run.dd2, run.dd3)
fig <- function() {
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
par(mfrow=c(2, 1), mar=c(2.5, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18, 26.5), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="D", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 11), xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="D", type="o", col=blindcolz[8])
mtext("Year", side=1, outer=TRUE, cex=1.2)
}
figu("Trend over time in EPA temperature and dissolved oxygen data from sites A-D, ", paste(yrrng, collapse="-"), ".", 
"  Values are predictions for 1 August of each year.", h=5.5, w=9, newpage="land")
para("The remaining figures show the raw data, the seasonal pattern, and the result of the seasonal detrending for each site and response",
" variable.")
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(suy, new$yhat[new$x2==123], type="o", xlab="Year", ylab=yvarname)
}
doit <- function(mylist) {
attach(mylist)
#figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=2.5, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6, w=6.5, newpage="land")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=2.5, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", 
"  Values are predictions for 1 August of each year.", FIG=figtrend, h=2.5, w=9)
detach(mylist)
invisible()
}
lapply(biglist, doit)
endrtf()
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
#source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
head(epa)
head(dnr)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Temporal Trends in St. Clair River Water Quality Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth (0.01) of a degree,",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (domglf), lab (domgll), and unspecified (domglu).", 
h=6.4, w=6.4)
para("Four sites from the St. Clair River were selected for further analysis, and are identified by the letters A-D,",
" from north to south for convenience (Table ", tabcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = c("A", "B", "C", "D"))
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth (0.01) of a degree.", row.names=FALSE)
para("For each of the four sites, seasonal patterns in temperature and DO were removed to reveal underlying trends over time.",
"  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.",
"  The predicted value on 1 August of each year was used to represent the trend over time.",
"  The same pattern over time would be generated regardless of the selected date.")
para("Sampling years are largely confounded with sampling locations, with sites B and C sampled",
" during 1963-1973, sites A and D sampled during 1998-2012, and over a 20-year gap in sampling in between (Figure ", figcount, ").")
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="B", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="B", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="C", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="C", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="D", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="D", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
biglist <- list(run.at, run.ad, run.bt, run.bd, run.ct, run.cd, run.dt, run.dd1, run.dd2, run.dd3)
fig <- function() {
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
par(mfrow=c(2, 1), mar=c(2.5, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18, 26.5), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="D", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 11), xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="D", type="o", col=blindcolz[8])
mtext("Year", side=1, outer=TRUE, cex=1.2)
}
figu("Trend over time in EPA temperature and dissolved oxygen data from sites A-D, ", paste(yrrng, collapse="-"), ".", 
"  Values are predictions for 1 August of each year.", h=5.5, w=9, newpage="land")
para("The remaining figures show the raw data, the seasonal pattern, and the results of the seasonal detrending for each site and response",
" variable.")
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(suy, new$yhat[new$x2==123], type="o", xlab="Year", ylab=yvarname)
}
doit <- function(mylist) {
attach(mylist)
#figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=2.5, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6, w=6.5, newpage="land")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=2.5, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", 
"  Values are predictions for 1 August of each year.", FIG=figtrend, h=2.5, w=9)
detach(mylist)
invisible()
}
lapply(biglist, doit)
endrtf()
invisible(lapply(biglist, doit))
q()
pkgin("jvamisc")
ls()
cleanup()
pkgman("jvamisc")
q()
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
# just keep the epa and dnr objects from the TempDO program
objs <- NA
mobj <- NA
objs <- ls()
mobj <- match(c("epa", "dnr", "objs", "mobj"), objs)
if(any(is.na(mobj))) {
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
rm(list=objs[-mobj])
}
rm(objs, mobj)
head(epa)
head(dnr)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Temporal Trends in St. Clair River Water Quality Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth (0.01) of a degree,",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (domglf), lab (domgll), and unspecified (domglu).", 
h=6.4, w=6.4)
sites4 <- c("A", "D", "F", "G")
para("Four sites from the St. Clair River were selected for further analysis, and are identified by the letters ", 
paste(sites4, collapse=", "), " based on patches of historic larval sea lamprey sampling locations (Table ", 
tabcount, " and Figure ", figcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = sites4)
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth (0.01) of a degree.", row.names=FALSE)
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
source("C:/JVA/GLFC/People/Hinderer/larval.r")
mycolz <- rep(blindcolz[7:2], 5)
ord <- order(-latm.[selc.short])
stz <- LETTERS[1:length(ord)]
stsl <- stz %in% sites4
fig <- function() {
par(mar=c(0, 0, 0, 0))
map(xlim=c(-82.892, -82.352), ylim=c(42.498, 43.034), type="n", mar=c(0, 0, 0, 0))
lines(map5, col="lightgray")
points(allloc$long[selc.long], allloc$lat[selc.long], pch=16, col=mycolz[as.numeric(as.factor(allloc$clust[selc.long]))])
text(lonm.[selc.short][ord]-0.03, latm.[selc.short][ord], stz, cex=1.5, font=2)
text(lonm.[selc.short][ord][!stsl]-0.03 + 0.001, latm.[selc.short][ord][!stsl]-0.0005, stz[!stsl], cex=1.5, font=2, col="gray")
points(epasub$long, epasub$lat, pch=4, lwd=2, cex=3)
}
figu("Patches (< 5 km in diameter) of sampling locations (colored circles) in the St. Clair River with",
" relatively frequent larval sea lamprey survey histories during 1975-2013.  EPA sampling locations in the St. Clair River",
" with more than five years of data for both water temperature and dissolved oxygen (DO) are marked with Xes.",
h=8, w=6.5, newpage="port")
para("For each of the four sites, seasonal patterns in temperature and DO were removed to reveal underlying trends over time.",
"  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.",
"  The predicted value on 1 August of each year was used to represent the trend over time.",
"  The same pattern over time would be generated regardless of the selected date.")
para("Sampling years are largely confounded with sampling locations, with sites D and F sampled",
" during 1963-1973, sites A and G sampled during 1998-2012, and over a 20-year gap in sampling in between (Figure ", figcount, ").")
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="F", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="F", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="G", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="G", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="G", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="G", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
biglist <- list(run.at, run.ad, run.bt, run.bd, run.ct, run.cd, run.dt, run.dd1, run.dd2, run.dd3)
fig <- function() {
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
par(mfrow=c(3, 1), mar=c(0, 4, 0, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18, 26.5), xaxt="n", xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="G", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 11), xaxt="n", xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="G", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="G", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="G", type="o", col=blindcolz[8])
plotblank(xlim=yrrng, ylim=sqrt(range(smry$rat, na.rm=TRUE)), yaxt="n", ylab="Larval density  (#/m2)")
pl <- prettylog(smry$rat, 1, extra=4)
pl <- c(0, 0.01, 0.05, 0.1, 0.2, 0.3)
axis(2, at=sqrt(pl), labels=pl)
for(i in seq(sites4)) {
sell <- smry$cletr==sites4[i]
points(smry$year[sell], sqrt(smry$rat[sell]), pch=sites4[i], type="o", col=blindcolz[i+1])
}
mtext("Year", side=1, outer=TRUE, cex=1.2)
}
figu("Trend over time in EPA temperature, EPA dissolved oxygen, and FWS/DFO larval sea lamprey data from sites ", 
paste(sites4, collapse=", "), ", ", paste(yrrng, collapse="-"), ".", 
"  Water quality values are predictions for 1 August of each year.", h=5.5, w=9, newpage="land")
para("The remaining figures show the raw data, the seasonal pattern, and the results of the seasonal detrending for each site and response",
" variable.")
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(suy, new$yhat[new$x2==123], type="o", xlab="Year", ylab=yvarname)
}
doit <- function(mylist) {
attach(mylist)
#figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=2.5, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6, w=6.5, newpage="land")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=2.5, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", 
"  Values are predictions for 1 August of each year.", FIG=figtrend, h=2.5, w=9)
detach(mylist)
}
invisible(lapply(biglist, doit))
endrtf()
ls()
cleanup()
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
# just keep the epa and dnr objects from the TempDO program
objs <- NA
mobj <- NA
objs <- ls()
mobj <- match(c("epa", "dnr", "objs", "mobj"), objs)
any(is.na(mobj))
mobj
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
mobj <- match(c("epa", "dnr", "objs", "mobj"), objs)
objs[-mobj]
mobj
objs <- ls()
mobj <- match(c("epa", "dnr", "objs", "mobj"), objs)
objs[-mobj]
rm(list=objs[-mobj])
ls()
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
# just keep the epa and dnr objects from the TempDO program
objs <- NA
mobj <- NA
objs <- ls()
mobj <- match(c("epa", "dnr", "objs", "mobj"), objs)
if(any(is.na(mobj))) {
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
objs <- ls()
mobj <- match(c("epa", "dnr", "objs", "mobj"), objs)
rm(list=objs[-mobj])
}
rm(objs, mobj)
head(epa)
head(dnr)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Temporal Trends in St. Clair River Water Quality Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth (0.01) of a degree,",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (domglf), lab (domgll), and unspecified (domglu).", 
h=6.4, w=6.4)
sites4 <- c("A", "D", "F", "G")
para("Four sites from the St. Clair River were selected for further analysis, and are identified by the letters ", 
paste(sites4, collapse=", "), " based on patches of historic larval sea lamprey sampling locations (Table ", 
tabcount, " and Figure ", figcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = sites4)
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth (0.01) of a degree.", row.names=FALSE)
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
source("C:/JVA/GLFC/People/Hinderer/larval.r")
mycolz <- rep(blindcolz[7:2], 5)
ord <- order(-latm.[selc.short])
stz <- LETTERS[1:length(ord)]
stsl <- stz %in% sites4
fig <- function() {
par(mar=c(0, 0, 0, 0))
map(xlim=c(-82.892, -82.352), ylim=c(42.498, 43.034), type="n", mar=c(0, 0, 0, 0))
lines(map5, col="lightgray")
points(allloc$long[selc.long], allloc$lat[selc.long], pch=16, col=mycolz[as.numeric(as.factor(allloc$clust[selc.long]))])
text(lonm.[selc.short][ord]-0.03, latm.[selc.short][ord], stz, cex=1.5, font=2)
text(lonm.[selc.short][ord][!stsl]-0.03 + 0.001, latm.[selc.short][ord][!stsl]-0.0005, stz[!stsl], cex=1.5, font=2, col="gray")
points(epasub$long, epasub$lat, pch=4, lwd=2, cex=3)
}
figu("Patches (< 5 km in diameter) of sampling locations (colored circles) in the St. Clair River with",
" relatively frequent larval sea lamprey survey histories during 1975-2013.  EPA sampling locations in the St. Clair River",
" with more than five years of data for both water temperature and dissolved oxygen (DO) are marked with Xes.",
h=8, w=6.5, newpage="port")
para("For each of the four sites, seasonal patterns in temperature and DO were removed to reveal underlying trends over time.",
"  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.",
"  The predicted value on 1 August of each year was used to represent the trend over time.",
"  The same pattern over time would be generated regardless of the selected date.")
para("Sampling years are largely confounded with sampling locations, with sites D and F sampled",
" during 1963-1973, sites A and G sampled during 1998-2012, and over a 20-year gap in sampling in between (Figure ", figcount, ").")
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="F", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="F", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="G", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="G", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="G", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="G", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
biglist <- list(run.at, run.ad, run.bt, run.bd, run.ct, run.cd, run.dt, run.dd1, run.dd2, run.dd3)
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
fig <- function() {
par(mfrow=c(3, 1), mar=c(0, 4, 0, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18, 26.5), xaxt="n", xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="G", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 11), xaxt="n", xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="G", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="G", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="G", type="o", col=blindcolz[8])
plotblank(xlim=yrrng, ylim=sqrt(range(smry$rat, na.rm=TRUE)), yaxt="n", ylab="Larval density  (#/m2)")
pl <- prettylog(smry$rat, 1, extra=4)
pl <- c(0, 0.01, 0.05, 0.1, 0.2, 0.3)
axis(2, at=sqrt(pl), labels=pl)
for(i in seq(sites4)) {
sell <- smry$cletr==sites4[i]
points(smry$year[sell], sqrt(smry$rat[sell]), pch=sites4[i], type="o", col=blindcolz[i+1])
}
mtext("Year", side=1, outer=TRUE, cex=1.2)
}
figu("Trend over time in EPA temperature, EPA dissolved oxygen, and FWS/DFO larval sea lamprey data from sites ", 
paste(sites4, collapse=", "), ", ", paste(yrrng, collapse="-"), ".", 
"  Water quality values are predictions for 1 August of each year.", h=5.5, w=9, newpage="land")
para("The remaining figures show the raw data, the seasonal pattern, and the results of the seasonal detrending for each site and response",
" variable.")
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(suy, new$yhat[new$x2==123], type="o", xlab="Year", ylab=yvarname)
}
doit <- function(mylist) {
attach(mylist)
#figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=2.5, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6, w=6.5, newpage="land")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=2.5, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", 
"  Values are predictions for 1 August of each year.", FIG=figtrend, h=2.5, w=9)
detach(mylist)
}
invisible(lapply(biglist, doit))
endrtf()
cleanup()
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
# just keep the epa and dnr objects from the TempDO program
objs <- NA
mobj <- NA
objs <- ls()
mobj <- match(c("epa", "dnr", "objs", "mobj", "dir"), objs)
if(any(is.na(mobj))) {
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
objs <- ls()
mobj <- match(c("epa", "dnr", "objs", "mobj"), objs)
rm(list=objs[-mobj])
}
rm(objs, mobj)
head(epa)
head(dnr)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Temporal Trends in St. Clair River Water Quality Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth (0.01) of a degree,",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (domglf), lab (domgll), and unspecified (domglu).", 
h=6.4, w=6.4)
sites4 <- c("A", "D", "F", "G")
para("Four sites from the St. Clair River were selected for further analysis, and are identified by the letters ", 
paste(sites4, collapse=", "), " based on patches of historic larval sea lamprey sampling locations (Table ", 
tabcount, " and Figure ", figcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = sites4)
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth (0.01) of a degree.", row.names=FALSE)
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
source("C:/JVA/GLFC/People/Hinderer/larval.r")
mycolz <- rep(blindcolz[7:2], 5)
ord <- order(-latm.[selc.short])
stz <- LETTERS[1:length(ord)]
stsl <- stz %in% sites4
fig <- function() {
par(mar=c(0, 0, 0, 0))
map(xlim=c(-82.892, -82.352), ylim=c(42.498, 43.034), type="n", mar=c(0, 0, 0, 0))
lines(map5, col="lightgray")
points(allloc$long[selc.long], allloc$lat[selc.long], pch=16, col=mycolz[as.numeric(as.factor(allloc$clust[selc.long]))])
text(lonm.[selc.short][ord]-0.03, latm.[selc.short][ord], stz, cex=1.5, font=2)
text(lonm.[selc.short][ord][!stsl]-0.03 + 0.001, latm.[selc.short][ord][!stsl]-0.0005, stz[!stsl], cex=1.5, font=2, col="gray")
points(epasub$long, epasub$lat, pch=4, lwd=2, cex=3)
}
figu("Patches (< 5 km in diameter) of sampling locations (colored circles) in the St. Clair River with",
" relatively frequent larval sea lamprey survey histories during 1975-2013.  EPA sampling locations in the St. Clair River",
" with more than five years of data for both water temperature and dissolved oxygen (DO) are marked with Xes.",
h=8, w=6.5, newpage="port")
para("For each of the four sites, seasonal patterns in temperature and DO were removed to reveal underlying trends over time.",
"  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.",
"  The predicted value on 1 August of each year was used to represent the trend over time.",
"  The same pattern over time would be generated regardless of the selected date.")
para("Sampling years are largely confounded with sampling locations, with sites D and F sampled",
" during 1963-1973, sites A and G sampled during 1998-2012, and over a 20-year gap in sampling in between (Figure ", figcount, ").")
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="F", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="F", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="G", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="G", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="G", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="G", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
biglist <- list(run.at, run.ad, run.bt, run.bd, run.ct, run.cd, run.dt, run.dd1, run.dd2, run.dd3)
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
fig <- function() {
par(mfrow=c(3, 1), mar=c(0, 4, 0, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18, 26.5), xaxt="n", xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="G", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 11), xaxt="n", xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="G", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="G", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="G", type="o", col=blindcolz[8])
plotblank(xlim=yrrng, ylim=sqrt(range(smry$rat, na.rm=TRUE)), yaxt="n", ylab="Larval density  (#/m2)")
pl <- prettylog(smry$rat, 1, extra=4)
pl <- c(0, 0.01, 0.05, 0.1, 0.2, 0.3)
axis(2, at=sqrt(pl), labels=pl)
for(i in seq(sites4)) {
sell <- smry$cletr==sites4[i]
points(smry$year[sell], sqrt(smry$rat[sell]), pch=sites4[i], type="o", col=blindcolz[i+1])
}
mtext("Year", side=1, outer=TRUE, cex=1.2)
}
figu("Trend over time in EPA temperature, EPA dissolved oxygen, and FWS/DFO larval sea lamprey data from sites ", 
paste(sites4, collapse=", "), ", ", paste(yrrng, collapse="-"), ".", 
"  Water quality values are predictions for 1 August of each year.", h=5.5, w=9, newpage="land")
para("The remaining figures show the raw data, the seasonal pattern, and the results of the seasonal detrending for each site and response",
" variable.")
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(suy, new$yhat[new$x2==123], type="o", xlab="Year", ylab=yvarname)
}
doit <- function(mylist) {
attach(mylist)
#figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=2.5, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6, w=6.5, newpage="land")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=2.5, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", 
"  Values are predictions for 1 August of each year.", FIG=figtrend, h=2.5, w=9)
detach(mylist)
}
invisible(lapply(biglist, doit))
endrtf()
# just keep the epa and dnr objects from the TempDO program
objs <- NA
mobj <- NA
objs <- ls()
need <- c("epa", "dnr", "objs", "mobj", "dir")
mobj <- match(need, objs)
if(any(is.na(mobj))) {
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
objs <- ls()
mobj <- match(need, objs)
rm(list=objs[-mobj])
}
rm(objs, mobj)
search()
detach()
cleanup()
# just keep the epa and dnr objects from the TempDO program
objs <- NA
mobj <- NA
objs <- ls()
need <- c("epa", "dnr", "objs", "mobj", "dir")
mobj <- match(need, objs)
if(any(is.na(mobj))) {
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
objs <- ls()
mobj <- match(need, objs)
rm(list=objs[-mobj])
}
rm(objs, mobj)
# just keep the epa and dnr objects from the TempDO program
objs <- NA
mobj <- NA
objs <- ls()
need <- c("epa", "dnr", "objs", "mobj", "dir")
mobj <- match(need, objs)
if(any(is.na(mobj))) {
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
objs <- ls()
mobj <- match(need, objs)
rm(list=objs[-mobj])
}
rm(objs, mobj)
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
# just keep the epa and dnr objects from the TempDO program
objs <- NA
mobj <- NA
objs <- ls()
need <- c("epa", "dnr", "objs", "mobj", "dir")
mobj <- match(need, objs)
if(any(is.na(mobj))) {
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
objs <- ls()
mobj <- match(need, objs)
rm(list=objs[-mobj])
}
rm(objs, mobj)
head(epa)
head(dnr)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Temporal Trends in St. Clair River Water Quality Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth (0.01) of a degree,",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (domglf), lab (domgll), and unspecified (domglu).", 
h=6.4, w=6.4)
sites4 <- c("A", "D", "F", "G")
para("Four sites from the St. Clair River were selected for further analysis, and are identified by the letters ", 
paste(sites4, collapse=", "), " based on patches of historic larval sea lamprey sampling locations (Table ", 
tabcount, " and Figure ", figcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = sites4)
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth (0.01) of a degree.", row.names=FALSE)
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
source("C:/JVA/GLFC/People/Hinderer/larval.r")
mycolz <- rep(blindcolz[7:2], 5)
ord <- order(-latm.[selc.short])
stz <- LETTERS[1:length(ord)]
stsl <- stz %in% sites4
fig <- function() {
par(mar=c(0, 0, 0, 0))
map(xlim=c(-82.892, -82.352), ylim=c(42.498, 43.034), type="n", mar=c(0, 0, 0, 0))
lines(map5, col="lightgray")
points(allloc$long[selc.long], allloc$lat[selc.long], pch=16, col=mycolz[as.numeric(as.factor(allloc$clust[selc.long]))])
text(lonm.[selc.short][ord]-0.03, latm.[selc.short][ord], stz, cex=1.5, font=2)
text(lonm.[selc.short][ord][!stsl]-0.03 + 0.001, latm.[selc.short][ord][!stsl]-0.0005, stz[!stsl], cex=1.5, font=2, col="gray")
points(epasub$long, epasub$lat, pch=4, lwd=2, cex=3)
}
figu("Patches (< 5 km in diameter) of sampling locations (colored circles) in the St. Clair River with",
" relatively frequent larval sea lamprey survey histories during 1975-2013.  EPA sampling locations in the St. Clair River",
" with more than five years of data for both water temperature and dissolved oxygen (DO) are marked with Xes.",
h=8, w=6.5, newpage="port")
para("For each of the four sites, seasonal patterns in temperature and DO were removed to reveal underlying trends over time.",
"  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.",
"  The predicted value on 1 August of each year was used to represent the trend over time.",
"  The same pattern over time would be generated regardless of the selected date.")
para("Sampling years are largely confounded with sampling locations, with sites D and F sampled",
" during 1963-1973, sites A and G sampled during 1998-2012, and over a 20-year gap in sampling in between (Figure ", figcount, ").")
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="F", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="F", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="G", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="G", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="G", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="G", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
biglist <- list(run.at, run.ad, run.bt, run.bd, run.ct, run.cd, run.dt, run.dd1, run.dd2, run.dd3)
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
fig <- function() {
par(mfrow=c(3, 1), mar=c(0, 4, 0, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18, 26.5), xaxt="n", xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="G", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 11), xaxt="n", xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="G", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="G", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="G", type="o", col=blindcolz[8])
plotblank(xlim=yrrng, ylim=sqrt(range(smry$rat, na.rm=TRUE)), yaxt="n", ylab="Larval density  (#/m2)")
pl <- prettylog(smry$rat, 1, extra=4)
pl <- c(0, 0.01, 0.05, 0.1, 0.2, 0.3)
axis(2, at=sqrt(pl), labels=pl)
for(i in seq(sites4)) {
sell <- smry$cletr==sites4[i]
points(smry$year[sell], sqrt(smry$rat[sell]), pch=sites4[i], type="o", col=blindcolz[i+1])
}
mtext("Year", side=1, outer=TRUE, cex=1.2)
}
figu("Trend over time in EPA temperature, EPA dissolved oxygen, and FWS/DFO larval sea lamprey data from sites ", 
paste(sites4, collapse=", "), ", ", paste(yrrng, collapse="-"), ".", 
"  Water quality values are predictions for 1 August of each year.", h=5.5, w=9, newpage="land")
para("The remaining figures show the raw data, the seasonal pattern, and the results of the seasonal detrending for each site and response",
" variable.")
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(suy, new$yhat[new$x2==123], type="o", xlab="Year", ylab=yvarname)
}
doit <- function(mylist) {
attach(mylist)
#figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=2.5, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6, w=6.5, newpage="land")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=2.5, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", 
"  Values are predictions for 1 August of each year.", FIG=figtrend, h=2.5, w=9)
detach(mylist)
}
invisible(lapply(biglist, doit))
endrtf()
cleanup()
# just keep the epa and dnr objects from the TempDO program
objs <- NA
mobj <- NA
objs <- ls()
need <- c("epa", "dnr", "objs", "mobj", "dir", "longr", "latr")
mobj <- match(need, objs)
if(any(is.na(mobj))) {
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
objs <- ls()
mobj <- match(need, objs)
rm(list=objs[-mobj])
}
rm(objs, mobj)
# just keep the epa and dnr objects from the TempDO program
objs <- NA
mobj <- NA
objs <- ls()
need <- c("epa", "dnr", "objs", "mobj", "dir", "longr", "latr")
mobj <- match(need, objs)
if(any(is.na(mobj))) {
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
objs <- ls()
mobj <- match(need, objs)
rm(list=objs[-mobj])
}
rm(objs, mobj)
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
# just keep the epa and dnr objects from the TempDO program
objs <- NA
mobj <- NA
objs <- ls()
need <- c("epa", "dnr", "objs", "mobj", "dir", "longr", "latr")
mobj <- match(need, objs)
if(any(is.na(mobj))) {
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
objs <- ls()
mobj <- match(need, objs)
rm(list=objs[-mobj])
}
rm(objs, mobj)
head(epa)
head(dnr)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Temporal Trends in St. Clair River Water Quality Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth (0.01) of a degree,",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (domglf), lab (domgll), and unspecified (domglu).", 
h=6.4, w=6.4)
sites4 <- c("A", "D", "F", "G")
para("Four sites from the St. Clair River were selected for further analysis, and are identified by the letters ", 
paste(sites4, collapse=", "), " based on patches of historic larval sea lamprey sampling locations (Table ", 
tabcount, " and Figure ", figcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = sites4)
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth (0.01) of a degree.", row.names=FALSE)
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
source("C:/JVA/GLFC/People/Hinderer/larval.r")
mycolz <- rep(blindcolz[7:2], 5)
ord <- order(-latm.[selc.short])
stz <- LETTERS[1:length(ord)]
stsl <- stz %in% sites4
fig <- function() {
par(mar=c(0, 0, 0, 0))
map(xlim=c(-82.892, -82.352), ylim=c(42.498, 43.034), type="n", mar=c(0, 0, 0, 0))
lines(map5, col="lightgray")
points(allloc$long[selc.long], allloc$lat[selc.long], pch=16, col=mycolz[as.numeric(as.factor(allloc$clust[selc.long]))])
text(lonm.[selc.short][ord]-0.03, latm.[selc.short][ord], stz, cex=1.5, font=2)
text(lonm.[selc.short][ord][!stsl]-0.03 + 0.001, latm.[selc.short][ord][!stsl]-0.0005, stz[!stsl], cex=1.5, font=2, col="gray")
points(epasub$long, epasub$lat, pch=4, lwd=2, cex=3)
}
figu("Patches (< 5 km in diameter) of sampling locations (colored circles) in the St. Clair River with",
" relatively frequent larval sea lamprey survey histories during 1975-2013.  EPA sampling locations in the St. Clair River",
" with more than five years of data for both water temperature and dissolved oxygen (DO) are marked with Xes.",
h=8, w=6.5, newpage="port")
para("For each of the four sites, seasonal patterns in temperature and DO were removed to reveal underlying trends over time.",
"  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.",
"  The predicted value on 1 August of each year was used to represent the trend over time.",
"  The same pattern over time would be generated regardless of the selected date.")
para("Sampling years are largely confounded with sampling locations, with sites D and F sampled",
" during 1963-1973, sites A and G sampled during 1998-2012, and over a 20-year gap in sampling in between (Figure ", figcount, ").")
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="F", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="F", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="G", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="G", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="G", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="G", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
biglist <- list(run.at, run.ad, run.bt, run.bd, run.ct, run.cd, run.dt, run.dd1, run.dd2, run.dd3)
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
fig <- function() {
par(mfrow=c(3, 1), mar=c(0, 4, 0, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18, 26.5), xaxt="n", xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="G", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 11), xaxt="n", xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="G", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="G", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="G", type="o", col=blindcolz[8])
plotblank(xlim=yrrng, ylim=sqrt(range(smry$rat, na.rm=TRUE)), yaxt="n", ylab="Larval density  (#/m2)")
pl <- prettylog(smry$rat, 1, extra=4)
pl <- c(0, 0.01, 0.05, 0.1, 0.2, 0.3)
axis(2, at=sqrt(pl), labels=pl)
for(i in seq(sites4)) {
sell <- smry$cletr==sites4[i]
points(smry$year[sell], sqrt(smry$rat[sell]), pch=sites4[i], type="o", col=blindcolz[i+1])
}
mtext("Year", side=1, outer=TRUE, cex=1.2)
}
figu("Trend over time in EPA temperature, EPA dissolved oxygen, and FWS/DFO larval sea lamprey data from sites ", 
paste(sites4, collapse=", "), ", ", paste(yrrng, collapse="-"), ".", 
"  Water quality values are predictions for 1 August of each year.", h=5.5, w=9, newpage="land")
para("The remaining figures show the raw data, the seasonal pattern, and the results of the seasonal detrending for each site and response",
" variable.")
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(suy, new$yhat[new$x2==123], type="o", xlab="Year", ylab=yvarname)
}
doit <- function(mylist) {
attach(mylist)
#figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=2.5, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6, w=6.5, newpage="land")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=2.5, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", 
"  Values are predictions for 1 August of each year.", FIG=figtrend, h=2.5, w=9)
detach(mylist)
}
invisible(lapply(biglist, doit))
endrtf()
par(mfrow=c(3, 1), mar=c(0, 4, 0, 1), oma=c(4, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18, 26.5), xaxt="n", xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="G", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 11), xaxt="n", xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="G", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="G", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="G", type="o", col=blindcolz[8])
plotblank(xlim=yrrng, ylim=sqrt(range(smry$rat, na.rm=TRUE)), axes=FALSE, ylab="Larval density  (#/m2)")
axis(1, outer=TRUE)
pl <- prettylog(smry$rat, 1, extra=4)
pl <- c(0, 0.01, 0.05, 0.1, 0.2, 0.3)
axis(2, at=sqrt(pl), labels=pl)
for(i in seq(sites4)) {
sell <- smry$cletr==sites4[i]
points(smry$year[sell], sqrt(smry$rat[sell]), pch=sites4[i], type="o", col=blindcolz[i+1])
}
mtext("Year", side=1, outer=TRUE, line=3, cex=1.2)
windows()
par(mfrow=c(3, 1), mar=c(0, 4, 0, 1), oma=c(4, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18, 26.5), xaxt="n", xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="G", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 11), xaxt="n", xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="G", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="G", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="G", type="o", col=blindcolz[8])
plotblank(xlim=yrrng, ylim=sqrt(range(smry$rat, na.rm=TRUE)), axes=FALSE, ylab="Larval density  (#/m2)")
axis(1, outer=TRUE)
pl <- prettylog(smry$rat, 1, extra=4)
pl <- c(0, 0.01, 0.05, 0.1, 0.2, 0.3)
axis(2, at=sqrt(pl), labels=pl)
for(i in seq(sites4)) {
sell <- smry$cletr==sites4[i]
points(smry$year[sell], sqrt(smry$rat[sell]), pch=sites4[i], type="o", col=blindcolz[i+1])
}
mtext("Year", side=1, outer=TRUE, line=3, cex=1.2)
locator()
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
# just keep the epa and dnr objects from the TempDO program
objs <- NA
mobj <- NA
objs <- ls()
need <- c("epa", "dnr", "objs", "mobj", "dir", "longr", "latr")
mobj <- match(need, objs)
if(any(is.na(mobj))) {
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
objs <- ls()
mobj <- match(need, objs)
rm(list=objs[-mobj])
}
rm(objs, mobj)
head(epa)
head(dnr)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Temporal Trends in St. Clair River Water Quality Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 18 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth (0.01) of a degree,",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (domglf), lab (domgll), and unspecified (domglu).", 
h=6.4, w=6.4)
sites4 <- c("A", "D", "F", "G")
para("Four sites from the St. Clair River were selected for further analysis, and are identified by the letters ", 
paste(sites4, collapse=", "), " based on patches of historic larval sea lamprey sampling locations (Table ", 
tabcount, " and Figure ", figcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = sites4)
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth (0.01) of a degree.", row.names=FALSE)
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
source("C:/JVA/GLFC/People/Hinderer/larval.r")
mycolz <- rep(blindcolz[7:2], 5)
ord <- order(-latm.[selc.short])
stz <- LETTERS[1:length(ord)]
stsl <- stz %in% sites4
fig <- function() {
par(mar=c(0, 0, 0, 0))
map(xlim=c(-82.892, -82.352), ylim=c(42.498, 43.034), type="n", mar=c(0, 0, 0, 0))
lines(map5, col="lightgray")
points(allloc$long[selc.long], allloc$lat[selc.long], pch=16, col=mycolz[as.numeric(as.factor(allloc$clust[selc.long]))])
text(lonm.[selc.short][ord]-0.03, latm.[selc.short][ord], stz, cex=1.5, font=2)
text(lonm.[selc.short][ord][!stsl]-0.03 + 0.001, latm.[selc.short][ord][!stsl]-0.0005, stz[!stsl], cex=1.5, font=2, col="gray")
points(epasub$long, epasub$lat, pch=4, lwd=2, cex=3)
}
figu("Patches (< 5 km in diameter) of sampling locations (colored circles) in the St. Clair River with",
" relatively frequent larval sea lamprey survey histories during 1975-2013.  Each EPA sampling location in the St. Clair River",
" with more than five years of data for both water temperature and dissolved oxygen (DO) is marked with an X.",
h=8, w=6.5, newpage="port")
para("For each of the four sites, seasonal patterns in temperature and DO were removed to reveal underlying trends over time.",
"  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.",
"  The predicted value on 1 August of each year was used to represent the trend over time.",
"  (The selected date is arbitrary, any date would give the same pattern over time.)")
para("Sampling years are largely confounded with sampling locations for the water quality data, with sites D and F sampled",
" during 1963-1973, sites A and G sampled during 1998-2012, and over a 20-year gap in sampling in between (Figure ", figcount, ").",
"  Larval sea lamprey data (at least as far as I know) is unavailable prior to 1975.")
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="F", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="F", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="G", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="G", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="G", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="G", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
biglist <- list(run.at, run.ad, run.bt, run.bd, run.ct, run.cd, run.dt, run.dd1, run.dd2, run.dd3)
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
fig <- function() {
par(mfrow=c(3, 1), mar=c(0, 4, 0, 1), oma=c(4, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18, 26.5), xaxt="n", xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="G", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 11), xaxt="n", xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="G", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="G", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="G", type="o", col=blindcolz[8])
plotblank(xlim=yrrng, ylim=sqrt(range(smry$rat, na.rm=TRUE)), axes=FALSE, ylab="Larval density  (#/m2)")
axis(1, outer=TRUE)
pl <- prettylog(smry$rat, 1, extra=4)
pl <- c(0, 0.01, 0.05, 0.1, 0.2, 0.3)
axis(2, at=sqrt(pl), labels=pl)
box()
for(i in seq(sites4)) {
sell <- smry$cletr==sites4[i]
points(smry$year[sell], sqrt(smry$rat[sell]), pch=sites4[i], type="o", col=blindcolz[c(2, 3, 4, 6)][i])
}
mtext("Year", side=1, outer=TRUE, line=3, cex=1.2)
}
figu("Trend over time in EPA temperature, EPA dissolved oxygen, and FWS/DFO larval sea lamprey data from sites ", 
paste(sites4, collapse=", "), ", ", paste(yrrng, collapse="-"), ".", 
"  Water quality values are predictions for 1 August of each year.", h=5.5, w=9, newpage="land")
para("The remaining figures show the raw data, the seasonal pattern, and the results of the seasonal detrending for each site and response",
" variable.")
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(suy, new$yhat[new$x2==123], type="o", xlab="Year", ylab=yvarname)
}
doit <- function(mylist) {
attach(mylist)
#figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=2.5, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6, w=6.5, newpage="land")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=2.5, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", 
"  Values are predictions for 1 August of each year.", FIG=figtrend, h=2.5, w=9)
detach(mylist)
}
invisible(lapply(biglist, doit))
endrtf()
cleanup()
q()
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
# just keep the epa and dnr objects from the TempDO program
objs <- NA
mobj <- NA
objs <- ls()
need <- c("epa", "dnr", "objs", "mobj", "dir", "longr", "latr")
mobj <- match(need, objs)
if(any(is.na(mobj))) {
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
objs <- ls()
mobj <- match(need, objs)
rm(list=objs[-mobj])
}
rm(objs, mobj)
head(epa)
head(dnr)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Temporal Trends in St. Clair River Water Quality Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 18 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth (0.01) of a degree,",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (domglf), lab (domgll), and unspecified (domglu).", 
h=6.4, w=6.4)
sites4 <- c("A", "D", "F", "G")
para("Four sites from the St. Clair River were selected for further analysis, and are identified by the letters ", 
paste(sites4, collapse=", "), " based on patches of historic larval sea lamprey sampling locations (Table ", 
tabcount, " and Figure ", figcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = sites4)
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth (0.01) of a degree.", row.names=FALSE)
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
source("C:/JVA/GLFC/People/Hinderer/larval.r")
mycolz <- rep(blindcolz[7:2], 5)
ord <- order(-latm.[selc.short])
stz <- LETTERS[1:length(ord)]
stsl <- stz %in% sites4
fig <- function() {
par(mar=c(0, 0, 0, 0))
map(xlim=c(-82.892, -82.352), ylim=c(42.498, 43.034), type="n", mar=c(0, 0, 0, 0))
lines(map5, col="lightgray")
points(allloc$long[selc.long], allloc$lat[selc.long], pch=16, col=mycolz[as.numeric(as.factor(allloc$clust[selc.long]))])
text(lonm.[selc.short][ord]-0.03, latm.[selc.short][ord], stz, cex=1.5, font=2)
text(lonm.[selc.short][ord][!stsl]-0.03 + 0.001, latm.[selc.short][ord][!stsl]-0.0005, stz[!stsl], cex=1.5, font=2, col="gray")
points(epasub$long, epasub$lat, pch=4, lwd=2, cex=3)
}
figu("Patches (< 5 km in diameter) of sampling locations (colored circles) in the St. Clair River with",
" relatively frequent larval sea lamprey survey histories during 1975-2013.  Each EPA sampling location in the St. Clair River",
" with more than five years of data for both water temperature and dissolved oxygen (DO) is marked with an X.",
h=8, w=6.5, newpage="port")
para("For each of the four sites, seasonal patterns in temperature and DO were removed to reveal underlying trends over time.",
"  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.",
"  The predicted value on 1 August of each year was used to represent the trend over time.",
"  (The selected date is arbitrary, any date would give the same pattern over time.)")
para("Sampling years are largely confounded with sampling locations for the water quality data, with sites D and F sampled",
" during 1963-1973, sites A and G sampled during 1998-2012, and over a 20-year gap in sampling in between (Figure ", figcount, ").",
"  Larval sea lamprey data (at least as far as I know) is unavailable prior to 1975.")
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="F", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="F", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="G", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="G", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="G", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="G", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
biglist <- list(run.at, run.ad, run.bt, run.bd, run.ct, run.cd, run.dt, run.dd1, run.dd2, run.dd3)
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
fig <- function() {
par(mfrow=c(3, 1), mar=c(0, 4, 0, 1), oma=c(4, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18, 26.5), xaxt="n", xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="G", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 11), xaxt="n", xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="G", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="G", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="G", type="o", col=blindcolz[8])
plotblank(xlim=yrrng, ylim=sqrt(range(smry$rat, na.rm=TRUE)), axes=FALSE, ylab="Larval density  (#/m2)")
axis(1, outer=TRUE)
pl <- prettylog(smry$rat, 1, extra=4)
pl <- c(0, 0.01, 0.05, 0.1, 0.2, 0.3)
axis(2, at=sqrt(pl), labels=pl)
box()
for(i in seq(sites4)) {
sell <- smry$cletr==sites4[i]
points(smry$year[sell], sqrt(smry$rat[sell]), pch=sites4[i], type="o", col=blindcolz[c(2, 3, 4, 6)][i])
}
mtext("Year", side=1, outer=TRUE, line=3, cex=1.2)
}
figu("Trend over time in EPA temperature, EPA dissolved oxygen, and FWS/DFO larval sea lamprey data from sites ", 
paste(sites4, collapse=", "), ", ", paste(yrrng, collapse="-"), ".", 
"  Water quality values are predictions for 1 August of each year.", h=5.5, w=9, newpage="land")
para("The remaining figures show the raw data, the seasonal pattern, and the results of the seasonal detrending for each site and response",
" variable.")
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(suy, new$yhat[new$x2==123], type="o", xlab="Year", ylab=yvarname)
}
doit <- function(mylist) {
attach(mylist)
#figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=2.5, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=5, w=5, newpage="land")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=2.5, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", 
"  Values are predictions for 1 August of each year.", FIG=figtrend, h=2.5, w=9)
detach(mylist)
}
invisible(lapply(biglist, doit))
endrtf()
cleanup()
x <- c(0.02, 0.29)
x
1/x
.29/.2
.29/.02
50/3.45
q()
library(LW1949)
?LW
??LW
>LW1949
?LW1949
fitLW
dat <- read.csv("C:/JVA/Lamprey/ChemControl/Toxicity/Nomo3Digi.csv")
A <- c((12:25)/10, 3:10)
ya <- log(dat$y[dat$group==1])
plot(log(A), ya)
abline(lsfit(log(A), ya))
summary(lm(log(A) ~ ya))
sel <- c(1, length(A))
summary(lm(log(A[sel]) ~ ya[sel]))
datdat$y[dat$group==1]
dat$y[dat$group==1]
plot(log(A), ya)
plot(A, exp(ya))
plot(A, exp(ya), log="xy")
plot(A, exp(ya))
A
plot(log(A), ya)
plot(log(A), log(ya))
plot(log(A), exp(ya))
dat <- read.csv("C:/JVA/Lamprey/ChemControl/Toxicity/Nomo3Digi.csv")
A <- c((12:25)/10, 3:10)
ya <- log(dat$y[dat$group==1])
plot(log(A), exp(ya))
abline(lsfit(log(A), exp(ya)))
summary(lm(log(A) ~ exp(ya)))
sel <- c(1, length(A))
summary(lm(log(A[sel]) ~ exp(ya)[sel]))
B <- c(1.01, 1.015, (102:105)/100, (11:15)/10, 2:5, 10, 20, 50, 100, 500, 1000)
yb <- log(dat$y[dat$group==2])
plot(log(B), exp(yb))
length(B)
length(yb)
dat <- read.csv("C:/JVA/Lamprey/ChemControl/Toxicity/Nomo3Digi.csv")
B <- c(1.01, 1.015, (102:105)/100, (11:15)/10, 2:5, 10, 20, 50, 100, 500, 1000)
yb <- log(dat$y[dat$group==2])
plot(log(B), exp(yb))
plot(log(B), (yb))
plot(log(B), exp(yb))
plot((B), exp(yb))
plot(log(B), exp(yb))
plot(log(B), exp(exp(yb)))
plot(log(B), exp(yb))
plot(log10(B), exp(yb))
plot(log(B), exp(yb))
plot(log(B), 10^(yb))
plot(log(B), 20^(yb))
plot(log(B), 50^(yb))
plot(log(B), 100^(yb))
B <- c(1.01, 1.015, (102:105)/100, (11:15)/10, 2:5, 10, 20, 50, 100, 500, 1000)
yb <- log(dat$y[dat$group==2])
plot(log(B), 100^yb)
abline(lsfit(log(B), 100^yb))
summary(lm(log(B) ~ 100^yb))
sel <- c(1, length(B))
summary(lm(log(B[sel]) ~ (100^yb)[sel]))
B <- c(1.01, 1.015, (102:105)/100, (11:15)/10, 2:5, 10, 20, 50, 100, 500, 1000)
yb <- log(dat$y[dat$group==2])
plot(log(B), 100^yb)
abline(lsfit(log(B), 100^yb))
summary(lm(log(B) ~ I(100^yb)))
sel <- c(1, length(B))
summary(lm(log(B[sel]) ~ (100^yb)[sel]))
C <- c((3:1)*100, 50, (3:1)*10, 5:2, (19:12)/10)
yc <- log(dat$y1[dat$group==3])
plot(log(C), yc)
C <- c((3:1)*100, 50, (3:1)*10, 5:2, (19:12)/10)
yc <- log(dat$y[dat$group==3])
plot(log(C), yc)
length(C)
length(yc)
dat <- read.csv("C:/JVA/Lamprey/ChemControl/Toxicity/Nomo3Digi.csv")
C <- c((3:1)*100, 50, (3:1)*10, 5:2, (19:12)/10)
yc <- log(dat$y[dat$group==3])
plot(log(C), yc)
plot(log(C), exp(yc))
plot(log(C), yc)
plot(log(C), log(yc))
plot(log(C), log(log(yc)))
plot(log(C), log(yc))
plot(C, log(yc))
plot(sqrt(C), log(yc))
plot(C^.1, log(yc))
plot(C^.01, log(yc))
plot(C^.001, log(yc))
plot(C^.00001, log(yc))
plot(C^.00000000000001, log(yc))
plot(1/C, log(yc))
plot(1/C, yc)
plot(log(C), log(yc))
q()
library(rgdal)
stations <- readOGR(".","stations")
print(proj4string(stations))
library(sp)
coordinates(xy) <- c("X", "Y")
proj4string(xy) <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")  ## for example
res <- spTransform(xy, CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
res
as(res, "SpatialPoints")
x<-as(res, "SpatialPoints")
xx<-as.data.frame(x)
cleanup()
q()
library(sp)
{
xy <- structure(list(ID = 1:120, X = c(-102.6, -101.9, -97.1, -97, 
-95.7, -99.1, -100.1, -97.2, -97, -99.3, -96, -95.2, -98.8, -98.1, 
-99.6, -97.8, -96.1, -98.3, -95.6, -96.8, -101.2, -101.1, -97.2, 
-111.1, -111.2, -116, -117.6, -103.7, -107.1, -102.3, -105.6, 
-105.3, -108.5, -103.2, -94.1, -101.9, -94.7, -101.1, -97.9, 
-111.4, -111.2, -110.5, -111.3, -107.3, -102.3, -104.7, -106.7, 
-101.8, -106, -103, -107.9, -103.7, -103.8, -109.2, -108.9, -109.5, 
-102.1, -104.6, -105.6, -101.7, -104, -108.3, -107.1, -103.9, 
-105.2, -105.7, -104.7, -106.7, -108.8, -107.7, -102.2, -107.8, 
-109.4, -106.1, -106.4, -104.2, -101.1, -99.9, -99.7, -101.3, 
-113.3, -119.4, -113.8, -114.7, -112.8, -110.3, -113.6, -111.1, 
-116.3, -118.5, -118.9, -117.4, -111.7, -114.1, -114.8, -113.8, 
-115.8, -108.4, -109.1, -115.6, -114.2, -114, -113.4, -113.7, 
-114.5, -112.9, -116.4, -113.1, -114.4, -117.5, -118, -113.8, 
-112.8, -110.7, -113.6, -114.1, -114, -114.9, -112.7, -112.1), 
    Y = c(52.88, 52.08, 50.93, 52.35, 51.03, 49.55, 51.1, 49, 
    50.63, 53.15, 50.47, 49.62, 50.42, 49.18, 50.15, 53.97, 50.18, 
    49.95, 49.02, 49.53, 52.12, 53.97, 49.92, 58.77, 56.65, 58.38, 
    57.75, 58.18, 57.35, 55.53, 57.25, 55.15, 59.57, 56.23, 58.73, 
    54.77, 56.35, 56.87, 55.8, 52.07, 50.72, 49.12, 51.58, 49.72, 
    50.9, 49.38, 50.47, 51.52, 51.27, 49.22, 50.98, 50.55, 51.25, 
    51.52, 49.68, 50.9, 49.62, 52.82, 50.33, 50.13, 53.33, 52.77, 
    51.48, 51.98, 52.42, 53.22, 50.43, 52.17, 52.37, 50.27, 51.2, 
    49.37, 53.13, 53.92, 49, 49.82, 50.43, 49.92, 49.42, 49.18, 
    54.72, 55.2, 53.28, 54.13, 53.03, 54.42, 53.32, 53.88, 55.42, 
    56.08, 55.18, 56.23, 53.42, 53.88, 55.28, 55.97, 54.15, 55.83, 
    54.05, 51.2, 49.47, 51.12, 49, 49.93, 49.63, 51.47, 53.58, 
    50.88, 50.55, 53.4, 52.93, 52.45, 49.63, 50.02, 49.13, 51.78, 
    49.52, 52.42, 52.33, 50.05)), .Names = c("ID", "X", "Y"), row.names = c(NA, 
-120L), class = "data.frame")
}
coordinates(xy) <- c("X", "Y")
proj4string(xy) <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")  ## for example
res <- spTransform(xy, CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
res
as(res, "SpatialPoints")
x <- as(res, "SpatialPoints")
xx <- as.data.frame(x)
head(xy)
xy
xy$coordinates
{
xy <- structure(list(ID = 1:120, X = c(-102.6, -101.9, -97.1, -97, 
-95.7, -99.1, -100.1, -97.2, -97, -99.3, -96, -95.2, -98.8, -98.1, 
-99.6, -97.8, -96.1, -98.3, -95.6, -96.8, -101.2, -101.1, -97.2, 
-111.1, -111.2, -116, -117.6, -103.7, -107.1, -102.3, -105.6, 
-105.3, -108.5, -103.2, -94.1, -101.9, -94.7, -101.1, -97.9, 
-111.4, -111.2, -110.5, -111.3, -107.3, -102.3, -104.7, -106.7, 
-101.8, -106, -103, -107.9, -103.7, -103.8, -109.2, -108.9, -109.5, 
-102.1, -104.6, -105.6, -101.7, -104, -108.3, -107.1, -103.9, 
-105.2, -105.7, -104.7, -106.7, -108.8, -107.7, -102.2, -107.8, 
-109.4, -106.1, -106.4, -104.2, -101.1, -99.9, -99.7, -101.3, 
-113.3, -119.4, -113.8, -114.7, -112.8, -110.3, -113.6, -111.1, 
-116.3, -118.5, -118.9, -117.4, -111.7, -114.1, -114.8, -113.8, 
-115.8, -108.4, -109.1, -115.6, -114.2, -114, -113.4, -113.7, 
-114.5, -112.9, -116.4, -113.1, -114.4, -117.5, -118, -113.8, 
-112.8, -110.7, -113.6, -114.1, -114, -114.9, -112.7, -112.1), 
    Y = c(52.88, 52.08, 50.93, 52.35, 51.03, 49.55, 51.1, 49, 
    50.63, 53.15, 50.47, 49.62, 50.42, 49.18, 50.15, 53.97, 50.18, 
    49.95, 49.02, 49.53, 52.12, 53.97, 49.92, 58.77, 56.65, 58.38, 
    57.75, 58.18, 57.35, 55.53, 57.25, 55.15, 59.57, 56.23, 58.73, 
    54.77, 56.35, 56.87, 55.8, 52.07, 50.72, 49.12, 51.58, 49.72, 
    50.9, 49.38, 50.47, 51.52, 51.27, 49.22, 50.98, 50.55, 51.25, 
    51.52, 49.68, 50.9, 49.62, 52.82, 50.33, 50.13, 53.33, 52.77, 
    51.48, 51.98, 52.42, 53.22, 50.43, 52.17, 52.37, 50.27, 51.2, 
    49.37, 53.13, 53.92, 49, 49.82, 50.43, 49.92, 49.42, 49.18, 
    54.72, 55.2, 53.28, 54.13, 53.03, 54.42, 53.32, 53.88, 55.42, 
    56.08, 55.18, 56.23, 53.42, 53.88, 55.28, 55.97, 54.15, 55.83, 
    54.05, 51.2, 49.47, 51.12, 49, 49.93, 49.63, 51.47, 53.58, 
    50.88, 50.55, 53.4, 52.93, 52.45, 49.63, 50.02, 49.13, 51.78, 
    49.52, 52.42, 52.33, 50.05)), .Names = c("ID", "X", "Y"), row.names = c(NA, 
-120L), class = "data.frame")
}
head(xy)
{
xy <- structure(list(ID = 1:120, X = c(-102.6, -101.9, -97.1, -97, 
-95.7, -99.1, -100.1, -97.2, -97, -99.3, -96, -95.2, -98.8, -98.1, 
-99.6, -97.8, -96.1, -98.3, -95.6, -96.8, -101.2, -101.1, -97.2, 
-111.1, -111.2, -116, -117.6, -103.7, -107.1, -102.3, -105.6, 
-105.3, -108.5, -103.2, -94.1, -101.9, -94.7, -101.1, -97.9, 
-111.4, -111.2, -110.5, -111.3, -107.3, -102.3, -104.7, -106.7, 
-101.8, -106, -103, -107.9, -103.7, -103.8, -109.2, -108.9, -109.5, 
-102.1, -104.6, -105.6, -101.7, -104, -108.3, -107.1, -103.9, 
-105.2, -105.7, -104.7, -106.7, -108.8, -107.7, -102.2, -107.8, 
-109.4, -106.1, -106.4, -104.2, -101.1, -99.9, -99.7, -101.3, 
-113.3, -119.4, -113.8, -114.7, -112.8, -110.3, -113.6, -111.1, 
-116.3, -118.5, -118.9, -117.4, -111.7, -114.1, -114.8, -113.8, 
-115.8, -108.4, -109.1, -115.6, -114.2, -114, -113.4, -113.7, 
-114.5, -112.9, -116.4, -113.1, -114.4, -117.5, -118, -113.8, 
-112.8, -110.7, -113.6, -114.1, -114, -114.9, -112.7, -112.1), 
    Y = c(52.88, 52.08, 50.93, 52.35, 51.03, 49.55, 51.1, 49, 
    50.63, 53.15, 50.47, 49.62, 50.42, 49.18, 50.15, 53.97, 50.18, 
    49.95, 49.02, 49.53, 52.12, 53.97, 49.92, 58.77, 56.65, 58.38, 
    57.75, 58.18, 57.35, 55.53, 57.25, 55.15, 59.57, 56.23, 58.73, 
    54.77, 56.35, 56.87, 55.8, 52.07, 50.72, 49.12, 51.58, 49.72, 
    50.9, 49.38, 50.47, 51.52, 51.27, 49.22, 50.98, 50.55, 51.25, 
    51.52, 49.68, 50.9, 49.62, 52.82, 50.33, 50.13, 53.33, 52.77, 
    51.48, 51.98, 52.42, 53.22, 50.43, 52.17, 52.37, 50.27, 51.2, 
    49.37, 53.13, 53.92, 49, 49.82, 50.43, 49.92, 49.42, 49.18, 
    54.72, 55.2, 53.28, 54.13, 53.03, 54.42, 53.32, 53.88, 55.42, 
    56.08, 55.18, 56.23, 53.42, 53.88, 55.28, 55.97, 54.15, 55.83, 
    54.05, 51.2, 49.47, 51.12, 49, 49.93, 49.63, 51.47, 53.58, 
    50.88, 50.55, 53.4, 52.93, 52.45, 49.63, 50.02, 49.13, 51.78, 
    49.52, 52.42, 52.33, 50.05)), .Names = c("ID", "X", "Y"), row.names = c(NA, 
-120L), class = "data.frame")
}
utm <- project(as.matrix(xy[, c("X", "Y")]), "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
??project
library(rgdal)
utm <- project(as.matrix(xy[, c("X", "Y")]), "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
utm
search()
detach()
detach()
search()
library(rgdal)
{
xy <- structure(list(ID = 1:120, X = c(-102.6, -101.9, -97.1, -97, 
-95.7, -99.1, -100.1, -97.2, -97, -99.3, -96, -95.2, -98.8, -98.1, 
-99.6, -97.8, -96.1, -98.3, -95.6, -96.8, -101.2, -101.1, -97.2, 
-111.1, -111.2, -116, -117.6, -103.7, -107.1, -102.3, -105.6, 
-105.3, -108.5, -103.2, -94.1, -101.9, -94.7, -101.1, -97.9, 
-111.4, -111.2, -110.5, -111.3, -107.3, -102.3, -104.7, -106.7, 
-101.8, -106, -103, -107.9, -103.7, -103.8, -109.2, -108.9, -109.5, 
-102.1, -104.6, -105.6, -101.7, -104, -108.3, -107.1, -103.9, 
-105.2, -105.7, -104.7, -106.7, -108.8, -107.7, -102.2, -107.8, 
-109.4, -106.1, -106.4, -104.2, -101.1, -99.9, -99.7, -101.3, 
-113.3, -119.4, -113.8, -114.7, -112.8, -110.3, -113.6, -111.1, 
-116.3, -118.5, -118.9, -117.4, -111.7, -114.1, -114.8, -113.8, 
-115.8, -108.4, -109.1, -115.6, -114.2, -114, -113.4, -113.7, 
-114.5, -112.9, -116.4, -113.1, -114.4, -117.5, -118, -113.8, 
-112.8, -110.7, -113.6, -114.1, -114, -114.9, -112.7, -112.1), 
    Y = c(52.88, 52.08, 50.93, 52.35, 51.03, 49.55, 51.1, 49, 
    50.63, 53.15, 50.47, 49.62, 50.42, 49.18, 50.15, 53.97, 50.18, 
    49.95, 49.02, 49.53, 52.12, 53.97, 49.92, 58.77, 56.65, 58.38, 
    57.75, 58.18, 57.35, 55.53, 57.25, 55.15, 59.57, 56.23, 58.73, 
    54.77, 56.35, 56.87, 55.8, 52.07, 50.72, 49.12, 51.58, 49.72, 
    50.9, 49.38, 50.47, 51.52, 51.27, 49.22, 50.98, 50.55, 51.25, 
    51.52, 49.68, 50.9, 49.62, 52.82, 50.33, 50.13, 53.33, 52.77, 
    51.48, 51.98, 52.42, 53.22, 50.43, 52.17, 52.37, 50.27, 51.2, 
    49.37, 53.13, 53.92, 49, 49.82, 50.43, 49.92, 49.42, 49.18, 
    54.72, 55.2, 53.28, 54.13, 53.03, 54.42, 53.32, 53.88, 55.42, 
    56.08, 55.18, 56.23, 53.42, 53.88, 55.28, 55.97, 54.15, 55.83, 
    54.05, 51.2, 49.47, 51.12, 49, 49.93, 49.63, 51.47, 53.58, 
    50.88, 50.55, 53.4, 52.93, 52.45, 49.63, 50.02, 49.13, 51.78, 
    49.52, 52.42, 52.33, 50.05)), .Names = c("ID", "X", "Y"), row.names = c(NA, 
-120L), class = "data.frame")
}
utm <- project(as.matrix(xy[, c("X", "Y")]), "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
utm
windows()
map(world)
points(xy[, c("X", "Y")])
map("world")
points(xy[, c("X", "Y")])
map("usa")
points(xy[, c("X", "Y")])
map("world", xlim=range(xy$X), ylim=range(xy$Y))
points(xy[, c("X", "Y")])
map("world", xlim=range(xy$X)+c(-1, 1)*2, ylim=range(xy$Y)+c(-1, 1)*2)
points(xy[, c("X", "Y")])
adj <- 5
windows()
map("world", xlim=range(xy$X)+c(-1, 1)*adj, ylim=range(xy$Y)+c(-1, 1)*adj)
points(xy[, c("X", "Y")])
?map
windows()
plot(utm)
library(rgdal)
utm <- project(as.matrix(xy[,c("X","Y")]), "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
windows()
plot(utm)
map("world", xlim=range(xy$X), ylim=range(xy$Y))
points(xy[, c("X", "Y")])
cleanup()
q()
# C:\JVA\Lamprey\ChemControl\Toxicity\Nomo3.r
dat <- read.csv("C:/JVA/Lamprey/ChemControl/Toxicity/Nomo3Digi.csv")
A <- c((12:25)/10, 3:10)
ya <- log(dat$y[dat$group==1])
plot(log(A), exp(ya))
abline(lsfit(log(A), exp(ya)))
summary(lm(log(A) ~ exp(ya)))
sel <- c(1, length(A))
summary(lm(log(A[sel]) ~ exp(ya)[sel]))
B <- c(1.01, 1.015, (102:105)/100, (11:15)/10, 2:5, 10, 20, 50, 100, 500, 1000)
yb <- log(dat$y[dat$group==2])
plot(log(B), 100^yb)
abline(lsfit(log(B), 100^yb))
summary(lm(log(B) ~ I(100^yb)))
sel <- c(1, length(B))
summary(lm(log(B[sel]) ~ (100^yb)[sel]))
C <- c((3:1)*100, 50, (3:1)*10, 5:2, (19:12)/10)
yc <- log(dat$y[dat$group==3])
plot(log(C), yc)
plot((C), yc)
plot(log(C), yc)
plot(log(C), log(yc))
plot(log(C), log(log(yc)))
plot(exp(log(C)), (log(yc)))
plot((log(C)), log(yc))(log(yc)))
log(yc))
log(yc)
plot(log(C), log(log(yc)))
plot(log(C), log(log(yc)+1))
plot(log(C), log(log(yc)+10))
plot(log(C), log(log(yc)+.3))
plot(log(C), log(log(yc)+.4))
plot(log(C), log(log(yc)+.5))
?qnorm
qnorm(0.95)
qnorm(0.05)
S <- c(10, 10, 1.2, 1.2, 2, 2, 6.4, 1.41)
A <- c(1000, 2.9, 1.01, 1.21, 1.10, 16, 2, 2)
R <- c(2.4, 300, 40, 1.2, 300, 1.2, 300, 1.2)
pairs(cbind(S, A, R))
pairs(cbind(log(S), log(A), log(R)))
ls <- log10(S)
la <- log10(A)
lr <- log10(R)
symbols(ls, lr, circles=la)
fit <- gam(la ~ s(ls) + s(lr))
fit <- gam(la ~ s(ls, k=2) + s(lr, k=2))
fit <- gam(la ~ s(ls, k=3) + s(lr, k=3))
fit <- gam(la ~ s(ls, k=4) + s(lr, k=4))
fit <- gam(la ~ s(ls, k=5) + s(lr, k=5))
fit <- gam(la ~ s(ls, k=4) + s(lr, k=4))
plot(fit)
locator()
10^0.69178
symbols(ls, lr, circles=la)
plot(S, R, log="xy")
symbols(S, R, circles=la, add=TRUE)
plot(S, R, log="xy", type="n")
symbols(S, R, circles=la, add=TRUE)
la
plot(a, A)
plot(A, ya)
A <- c((12:25)/10, 3:10)
ya <- log(dat$y[dat$group==1])
plot(A, ya)
plot(dat$group, log(dat$y))
dat <- read.csv("C:/JVA/Lamprey/ChemControl/Toxicity/Nomo3Digi.csv")
A <- c((12:25)/10, 3:10)
ya <- log(dat$y[dat$group==1])
plot(log(A), exp(ya))
abline(lsfit(log(A), exp(ya)))
summary(lm(log(A) ~ exp(ya)))
sel <- c(1, length(A))
summary(lm(log(A[sel]) ~ exp(ya)[sel]))
B <- c(1.01, 1.015, (102:105)/100, (11:15)/10, 2:5, 10, 20, 50, 100, 500, 1000)
yb <- log(dat$y[dat$group==2])
plot(log(B), 100^yb)
abline(lsfit(log(B), 100^yb))
summary(lm(log(B) ~ I(100^yb)))
sel <- c(1, length(B))
summary(lm(log(B[sel]) ~ (100^yb)[sel]))
C <- c((3:1)*100, 50, (3:1)*10, 5:2, (19:12)/10)
yc <- log(dat$y[dat$group==3])
plot(dat$group, log(dat$y))
text(dat$group, log(dat$y), c(A, B, C), pos=4)
plot(dat$group, log(dat$y), xlim=c(0.5, 3.5))
text(dat$group, log(dat$y), c(A, B, C), pos=4)
windows()
par(mar=c(0, 1, 0, 1))
plot(dat$group, log(dat$y), xlim=c(0.5, 3.5))
text(dat$group, log(dat$y), c(A, B, C), pos=4)
cleanup()
### bring in the data ###
#library(tcltk)
library(LW1949)
# allow user to choose raw data file from menu
rawfile <- tk_choose.files(filters=matrix(c("csv", ".csv"), ncol=2))
### bring in the data ###
library(tcltk)
library(LW1949)
# allow user to choose raw data file from menu
rawfile <- tk_choose.files(filters=matrix(c("csv", ".csv"), ncol=2))
# read in the data, fill in the blanks
rawdat <- read.csv(rawfile, as.is=TRUE)
rawdat2 <- data.frame(lapply(rawdat, fill))
# use the input filename to name the output files
filesegs <- strsplit(rawfile, "/")[[1]]
L <- length(filesegs)
filename <- filesegs[L]
dirname <- paste(filesegs[-L], collapse="/")
prefix <- strsplit(filename, ".csv")[[1]]
smryname <- paste0(prefix, "Smry.csv")
pdfname <- paste0(prefix, "Smry.pdf")
pdf(file = paste(dirname, pdfname, sep="/"), paper="letter")
### fit LW and probit models to the data
# unique test IDs
sut <- sort(unique(rawdat2$Test.ID))
# empty list in which to put results
results <- vector("list", length(sut))
for(i in seq(along=sut)) {
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- with(df, paste(Test.ID, Source, Batch, Species, sep=", "))[1]
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
estimate <- c(fLW$params, predlinear(pctalive, fLW$params[1], fLW$params[2]), fLW$LWest["S"])
param <- names(estimate)
method <- rep("Auto Litchfield-Wilcoxon", length(param))
lower95ci <- c(NA, NA, NA, fLW$LWest["lower"], NA, NA)
upper95ci <- c(NA, NA, NA, fLW$LWest["upper"], NA, NA)
smryLW <- data.frame(param, method, estimate, lower95ci, upper95ci)
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
estimate <- c(fp$coef, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), 1:8], smry)
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr)
abline(fp$coef, lty=2)
abline(fLW$params)
legend("topleft", c("LW", "Probit"), lty=c(1, 2), bg="white")
}
graphics.off()
smrydat <- do.call(rbind, results)
write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
?optim
plotDE(mydat, main=descr, xlab="Concentration", ylab="Mortality  (%)")
abline(fp$coef, lty=2)
abline(fLW$params)
i <- 1
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- with(df, paste(Test.ID, Source, Batch, Species, sep=", "))[1]
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
DEdata <- mydat
estimable(DEdata)
dfsub <- DEdata[DEdata$LWkeep, ]
# fit a smooth GAM function to expected and corrected values in Table 1 of Litchfield and Wilcoxon (1949)
gamfit <- gamtable1()
# calculate starting values for the int and slope using simple linear regression
pms <- sum(dfsub$fxcateg==50)
sv <- c(NA, NA)
svchi <- NA
pms
dfpart <- dfsub[dfsub$fxcateg==50, ]
sv <- fitlinear(dfpart, gamfit)
svchi <- assessfit(sv, dfpart, gamfit)
svchi
sv
estparams <- optim(par=sv, fn=assessfit, DEdata=dfsub, fit=gamfit)$par
estparams
assessfit(estparams, DEdata=dfsub, fit=gamfit, simple=FALSE)\
assessfit(estparams, DEdata=dfsub, fit=gamfit, simple=FALSE)
assessfit(sv, DEdata=dfsub, fit=gamfit, simple=FALSE)
fp <- fitprobit(mydat)
fp
fp$coef
assessfit(fp$coef, DEdata=dfsub, fit=gamfit, simple=FALSE)
### fit LW and probit models to the data
# unique test IDs
sut <- sort(unique(rawdat2$Test.ID))
# empty list in which to put results
results <- vector("list", length(sut))
for(i in seq(along=sut)) {
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- with(df, paste(Test.ID, Source, Batch, Species, sep=", "))[1]
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
estimate <- c(fLW$params, predlinear(pctalive, fLW$params[1], fLW$params[2]), fLW$LWest["S"])
param <- names(estimate)
method <- rep("Auto Litchfield-Wilcoxon", length(param))
lower95ci <- c(NA, NA, NA, fLW$LWest["lower"], NA, NA)
upper95ci <- c(NA, NA, NA, fLW$LWest["upper"], NA, NA)
smryLW <- data.frame(param, method, estimate, lower95ci, upper95ci)
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
estimate <- c(fp$coef, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
print(cat("\n\n\n"))
print(descr)
print(smry)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), 1:8], smry)
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr, ylab="Mortality  (%)")
abline(fp$coef, lty=2)
abline(fLW$params)
legend("topleft", c("Litchfield Wilcoxon", "Probit"), lty=c(1, 2), bg="white")
}
graphics.off()
smrydat <- do.call(rbind, results)
write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
### fit LW and probit models to the data
# unique test IDs
sut <- sort(unique(rawdat2$Test.ID))
# empty list in which to put results
results <- vector("list", length(sut))
for(i in seq(along=sut)) {
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- with(df, paste(Test.ID, Source, Batch, Species, sep=", "))[1]
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
estimate <- c(fLW$params, predlinear(pctalive, fLW$params[1], fLW$params[2]), fLW$LWest["S"])
param <- names(estimate)
method <- rep("Auto Litchfield-Wilcoxon", length(param))
lower95ci <- c(NA, NA, NA, fLW$LWest["lower"], NA, NA)
upper95ci <- c(NA, NA, NA, fLW$LWest["upper"], NA, NA)
smryLW <- data.frame(param, method, estimate, lower95ci, upper95ci)
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
estimate <- c(fp$coef, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
print(cat("\n\n\n"))
print(descr)
print(smry)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), 1:8], smry)
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr, ylab="Mortality  (%)")
abline(fp$coef, lty=2)
abline(fLW$params)
legend("topleft", c("Litchfield Wilcoxon", "Probit"), lty=c(1, 2), bg="white")
}
graphics.off()
smrydat <- do.call(rbind, results)
write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
smry
smryLW
print(smryLW, row.names=FALSE)
print(smryLW[, -2], row.names=FALSE)
smryPr
for(i in seq(along=sut)) {
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- with(df, paste(Test.ID, Source, Batch, Species, sep=", "))[1]
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
estimate <- c(fLW$params, predlinear(pctalive, fLW$params[1], fLW$params[2]), fLW$LWest["S"])
param <- names(estimate)
method <- rep("Auto Litchfield-Wilcoxon", length(param))
lower95ci <- c(NA, NA, NA, fLW$LWest["lower"], NA, NA)
upper95ci <- c(NA, NA, NA, fLW$LWest["upper"], NA, NA)
smryLW <- data.frame(param, method, estimate, lower95ci, upper95ci)
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
estimate <- c(fp$coef, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
print(cat("\n\n\n"))
print(descr)
print(cat("\nLitchfield Wicoxon method\n")
print(smryLW[, -2], row.names=FALSE)
print(cat("\nProbit method\n")
print(smryPr[, -2], row.names=FALSE)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), 1:8], smry)
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr, ylab="Mortality  (%)")
abline(fp$coef, lty=2)
abline(fLW$params)
legend("topleft", c("Litchfield Wilcoxon", "Probit"), lty=c(1, 2), bg="white")
}
graphics.off()
smrydat <- do.call(rbind, results)
write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
for(i in seq(along=sut)) {
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- with(df, paste(Test.ID, Source, Batch, Species, sep=", "))[1]
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
estimate <- c(fLW$params, predlinear(pctalive, fLW$params[1], fLW$params[2]), fLW$LWest["S"])
param <- names(estimate)
method <- rep("Auto Litchfield-Wilcoxon", length(param))
lower95ci <- c(NA, NA, NA, fLW$LWest["lower"], NA, NA)
upper95ci <- c(NA, NA, NA, fLW$LWest["upper"], NA, NA)
smryLW <- data.frame(param, method, estimate, lower95ci, upper95ci)
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
estimate <- c(fp$coef, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
print(cat("\n\n\n"))
print(descr)
print(cat("\nLitchfield Wicoxon method\n"))
print(smryLW[, -2], row.names=FALSE)
print(cat("\nProbit method\n"))
print(smryPr[, -2], row.names=FALSE)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), 1:8], smry)
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr, ylab="Mortality  (%)")
abline(fp$coef, lty=2)
abline(fLW$params)
legend("topleft", c("Litchfield Wilcoxon", "Probit"), lty=c(1, 2), bg="white")
}
graphics.off()
smrydat <- do.call(rbind, results)
write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
?print
?cat
for(i in seq(along=sut)) {
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- with(df, paste(Test.ID, Source, Batch, Species, sep=", "))[1]
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
estimate <- c(fLW$params, predlinear(pctalive, fLW$params[1], fLW$params[2]), fLW$LWest["S"])
param <- names(estimate)
method <- rep("Auto Litchfield-Wilcoxon", length(param))
lower95ci <- c(NA, NA, NA, fLW$LWest["lower"], NA, NA)
upper95ci <- c(NA, NA, NA, fLW$LWest["upper"], NA, NA)
smryLW <- data.frame(param, method, estimate, lower95ci, upper95ci)
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
estimate <- c(fp$coef, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
(cat("\n\n\n"))
print(paste0("Test ", i, ":   ", descr))
(cat("\nLitchfield Wicoxon method\n"))
print(smryLW[, -2], row.names=FALSE)
(cat("\nProbit method\n"))
print(smryPr[, -2], row.names=FALSE)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), 1:8], smry)
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr, ylab="Mortality  (%)")
abline(fp$coef, lty=2)
abline(fLW$params)
legend("topleft", c("Litchfield Wilcoxon", "Probit"), lty=c(1, 2), bg="white")
}
graphics.off()
smrydat <- do.call(rbind, results)
write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
for(i in seq(along=sut)) {
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- with(df, paste(Test.ID, Source, Batch, Species, sep=", "))[1]
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
estimate <- c(fLW$params, predlinear(pctalive, fLW$params[1], fLW$params[2]), fLW$LWest["S"])
param <- names(estimate)
method <- rep("Auto Litchfield-Wilcoxon", length(param))
lower95ci <- c(NA, NA, NA, fLW$LWest["lower"], NA, NA)
upper95ci <- c(NA, NA, NA, fLW$LWest["upper"], NA, NA)
smryLW <- data.frame(param, method, estimate, lower95ci, upper95ci)
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
estimate <- c(fp$coef, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
cat("\n\n\n")
cat(paste0("Test ", i, ":   ", descr))
cat("\nLitchfield Wicoxon method\n")
print(smryLW[, -2], row.names=FALSE)
cat("\nProbit method\n")
print(smryPr[, -2], row.names=FALSE)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), 1:8], smry)
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr, ylab="Mortality  (%)")
abline(fp$coef, lty=2)
abline(fLW$params)
legend("topleft", c("Litchfield Wilcoxon", "Probit"), lty=c(1, 2), bg="white")
}
graphics.off()
smrydat <- do.call(rbind, results)
write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
for(i in seq(along=sut)) {
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- with(df, paste(Test.ID, Source, Batch, Species, sep=", "))[1]
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
estimate <- c(fLW$params, predlinear(pctalive, fLW$params[1], fLW$params[2]), fLW$LWest["S"])
param <- names(estimate)
method <- rep("Auto Litchfield-Wilcoxon", length(param))
lower95ci <- c(NA, NA, NA, fLW$LWest["lower"], NA, NA)
upper95ci <- c(NA, NA, NA, fLW$LWest["upper"], NA, NA)
smryLW <- data.frame(param, method, estimate, lower95ci, upper95ci)
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
estimate <- c(fp$coef, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
cat("\n\n")
cat(paste0("Test ", i, ":   ", descr, "\n"))
cat("\nLitchfield Wicoxon method\n")
print(smryLW[, -2], row.names=FALSE)
cat("\nProbit method\n")
print(smryPr[, -2], row.names=FALSE)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), 1:8], smry)
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr, ylab="Mortality  (%)")
abline(fp$coef, lty=2)
abline(fLW$params)
legend("topleft", c("Litchfield Wilcoxon", "Probit"), lty=c(1, 2), bg="white")
}
graphics.off()
smrydat <- do.call(rbind, results)
write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
cleanup()
q()
q()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
assessfit()
mydat
LWP <- function(rawfile=NULL, descrcolz=4, saveplots=TRUE, showplots=FALSE, saveresults=TRUE, showresults=TRUE, returnresults=FALSE) {
### bring in the data ###
# allow user to choose raw data file from menu
if(is.null(rawfile) rawfile <- tk_choose.files(filters=matrix(c("csv", ".csv"), ncol=2))
# read in the data, fill in the blanks
rawdat <- read.csv(rawfile, as.is=TRUE)
rawdat2 <- data.frame(lapply(rawdat, fill))
rawcolz <- match(c("TFM.Conc...mg.L.", "No..Tested", "No..Dead"), names(rawdat2))
# use the input filename to name the output files
filesegs <- strsplit(rawfile, "/")[[1]]
L <- length(filesegs)
filename <- filesegs[L]
dirname <- paste(filesegs[-L], collapse="/")
prefix <- strsplit(filename, ".csv")[[1]]
smryname <- paste0(prefix, "Smry.csv")
if(saveplots) {
pdfname <- paste0(prefix, "Smry.pdf")
pdf(file = paste(dirname, pdfname, sep="/"), paper="letter")
}
### fit LW and probit models to the data
# unique test IDs
sut <- sort(unique(rawdat2$Test.ID))
# empty list in which to put results
results <- vector("list", length(sut))
if(showresults) {
# print a header to the screen
cat("\n\n\n")
cat("Rounded results are printed to the screen for convenience.\n")
cat("No need to copy or print them though, because they are saved in:\n")
cat("     ", paste(dirname, smryname, sep="/"), "\n")
cat('Note that "S" is the slope defined by Litchfield and Wilcoxon (1949).\n')
}
for(i in seq(along=sut)) {
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- paste(df[1, 1:descrcolz], sep=",")
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
estimate <- c(fLW$params, predlinear(pctalive, fLW$params[1], fLW$params[2]), fLW$LWest["S"])
param <- names(estimate)
method <- rep("Auto Litchfield-Wilcoxon", length(param))
lower95ci <- c(NA, NA, NA, fLW$LWest["lower"], NA, NA)
upper95ci <- c(NA, NA, NA, fLW$LWest["upper"], NA, NA)
smryLW <- data.frame(param, method, estimate, lower95ci, upper95ci)
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
estimate <- c(fp$coef, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), -rawcolz], smry)
if(showresults) {
# print the results to the screen
cat("\n\n\n")
cat(paste0("Test ", i, ":   ", descr, "\n"))
cat("\nLitchfield Wicoxon method\n")
print(format(smryLW[, -2], 2, nsmall=2, digits=0), row.names=FALSE)
cat("\nProbit method\n")
print(format(smryPr[, -2], 2, nsmall=2, digits=0), row.names=FALSE)
}
if(showplots) windows()
if(saveplots | showplots) {
# plot the results to a pdf file
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr, ylab="Mortality  (%)")
abline(fp$coef, lty=2)
abline(fLW$params)
legend("topleft", c("Litchfield Wilcoxon", "Probit"), lty=c(1, 2), bg="white")
}
}
if(saveplots) graphics.off()
# save the results to a csv file
smrydat <- do.call(rbind, results)
if(saveresults) write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
if(returnresults) return(smrydat) else invisible()
}
LWP <- function(rawfile=NULL, descrcolz=4, saveplots=TRUE, showplots=FALSE, saveresults=TRUE, showresults=TRUE, returnresults=FALSE) {
### bring in the data ###
# allow user to choose raw data file from menu
if(is.null(rawfile) rawfile <- tk_choose.files(filters=matrix(c("csv", ".csv"), ncol=2))
# read in the data, fill in the blanks
rawdat <- read.csv(rawfile, as.is=TRUE)
rawdat2 <- data.frame(lapply(rawdat, fill))
rawcolz <- match(c("TFM.Conc...mg.L.", "No..Tested", "No..Dead"), names(rawdat2))
# use the input filename to name the output files
filesegs <- strsplit(rawfile, "/")[[1]]
L <- length(filesegs)
filename <- filesegs[L]
dirname <- paste(filesegs[-L], collapse="/")
prefix <- strsplit(filename, ".csv")[[1]]
smryname <- paste0(prefix, "Smry.csv")
if(saveplots) {
pdfname <- paste0(prefix, "Smry.pdf")
pdf(file = paste(dirname, pdfname, sep="/"), paper="letter")
}
### fit LW and probit models to the data
# unique test IDs
sut <- sort(unique(rawdat2$Test.ID))
# empty list in which to put results
results <- vector("list", length(sut))
if(showresults) {
# print a header to the screen
cat("\n\n\n")
cat("Rounded results are printed to the screen for convenience.\n")
cat("No need to copy or print them though, because they are saved in:\n")
cat("     ", paste(dirname, smryname, sep="/"), "\n")
cat('Note that "S" is the slope defined by Litchfield and Wilcoxon (1949).\n')
}
for(i in seq(along=sut)) {
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- paste(df[1, 1:descrcolz], sep=",")
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
estimate <- c(fLW$params, predlinear(pctalive, fLW$params[1], fLW$params[2]), fLW$LWest["S"])
param <- names(estimate)
method <- rep("Auto Litchfield-Wilcoxon", length(param))
lower95ci <- c(NA, NA, NA, fLW$LWest["lower"], NA, NA)
upper95ci <- c(NA, NA, NA, fLW$LWest["upper"], NA, NA)
smryLW <- data.frame(param, method, estimate, lower95ci, upper95ci)
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
estimate <- c(fp$coef, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), -rawcolz], smry)
if(showresults) {
# print the results to the screen
cat("\n\n\n")
cat(paste0("Test ", i, ":   ", descr, "\n"))
cat("\nLitchfield Wicoxon method\n")
print(format(smryLW[, -2], 2, nsmall=2, digits=0), row.names=FALSE)
cat("\nProbit method\n")
print(format(smryPr[, -2], 2, nsmall=2, digits=0), row.names=FALSE)
}
if(showplots) windows()
if(saveplots | showplots) {
# plot the results to a pdf file
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr, ylab="Mortality  (%)")
abline(fp$coef, lty=2)
abline(fLW$params)
legend("topleft", c("Litchfield Wilcoxon", "Probit"), lty=c(1, 2), bg="white")
}
}
if(saveplots) graphics.off()
# save the results to a csv file
smrydat <- do.call(rbind, results)
if(saveresults) write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
if(returnresults) return(smrydat) else invisible()
}
LWP <- function(rawfile=NULL, descrcolz=4, saveplots=TRUE, showplots=FALSE, saveresults=TRUE, showresults=TRUE, returnresults=FALSE) {
# rawfile=NULL
# descrcolz=4
# saveplots=TRUE
# showplots=FALSE
# saveresults=TRUE
# showresults=TRUE
# returnresults=FALSE
### bring in the data ###
# allow user to choose raw data file from menu
if(is.null(rawfile)) rawfile <- tk_choose.files(filters=matrix(c("csv", ".csv"), ncol=2))
# read in the data, fill in the blanks
rawdat <- read.csv(rawfile, as.is=TRUE)
rawdat2 <- data.frame(lapply(rawdat, fill))
rawcolz <- match(c("TFM.Conc...mg.L.", "No..Tested", "No..Dead"), names(rawdat2))
# use the input filename to name the output files
filesegs <- strsplit(rawfile, "/")[[1]]
L <- length(filesegs)
filename <- filesegs[L]
dirname <- paste(filesegs[-L], collapse="/")
prefix <- strsplit(filename, ".csv")[[1]]
smryname <- paste0(prefix, "Smry.csv")
if(saveplots) {
pdfname <- paste0(prefix, "Smry.pdf")
pdf(file = paste(dirname, pdfname, sep="/"), paper="letter")
}
### fit LW and probit models to the data
# unique test IDs
sut <- sort(unique(rawdat2$Test.ID))
# empty list in which to put results
results <- vector("list", length(sut))
if(showresults) {
# print a header to the screen
cat("\n\n\n")
cat("Rounded results are printed to the screen for convenience.\n")
cat("No need to copy or print them though, because they are saved in:\n")
cat("     ", paste(dirname, smryname, sep="/"), "\n")
cat('Note that "S" is the slope defined by Litchfield and Wilcoxon (1949).\n')
}
for(i in seq(along=sut)) {
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- paste(df[1, 1:descrcolz], sep=",")
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
estimate <- c(fLW$params, predlinear(pctalive, fLW$params[1], fLW$params[2]), fLW$LWest["S"])
param <- names(estimate)
method <- rep("Auto Litchfield-Wilcoxon", length(param))
lower95ci <- c(NA, NA, NA, fLW$LWest["lower"], NA, NA)
upper95ci <- c(NA, NA, NA, fLW$LWest["upper"], NA, NA)
smryLW <- data.frame(param, method, estimate, lower95ci, upper95ci)
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
estimate <- c(fp$coef, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), -rawcolz], smry)
if(showresults) {
# print the results to the screen
cat("\n\n\n")
cat(paste0("Test ", i, ":   ", descr, "\n"))
cat("\nLitchfield Wicoxon method\n")
print(format(smryLW[, -2], 2, nsmall=2, digits=0), row.names=FALSE)
cat("\nProbit method\n")
print(format(smryPr[, -2], 2, nsmall=2, digits=0), row.names=FALSE)
}
if(showplots) windows()
if(saveplots | showplots) {
# plot the results to a pdf file
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr, ylab="Mortality  (%)")
abline(fp$coef, lty=2)
abline(fLW$params)
legend("topleft", c("Litchfield Wilcoxon", "Probit"), lty=c(1, 2), bg="white")
}
}
if(saveplots) graphics.off()
# save the results to a csv file
smrydat <- do.call(rbind, results)
if(saveresults) write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
if(returnresults) return(smrydat) else invisible()
}
search()
LWP()
library(tcltk)
LWP()
#' User Friendly Evaluation of Dose-Effect Experiments using Litchfield-Wilcoxon and Probit Methods
#'
#' User friendly evaluation of dose-effect experiments using automated Litchfield Wilcoxon (1949) and probit estimation methods.
#'This function has been tailored for non-R users with input data set up in a particular way (see Details).
#' @param rawfileA character scalar specifying the path of the input data as a csv file.  If NULL, default, the user will be 
#'prompted to browse to a file using a menu.
#' @param descrcolzA numeric scalar, the number of columns to use as the description of the test, 
#'from 1 to \code{descrcolz}, default 4.
#' @param saveplotsA logical scalar indicating if plots should be saved to a pdf file, default TRUE.
#' @param showplotsA logical scalar indicating if plots should be shown on screen, default FALSE.
#' @param saveresultsA logical scalar indicating if results should be saved to a csv file, default TRUE.
#'The csv file is given the same name (plus the suffix "Smry") and is placed in the same directory as the input file.
#' @param showresultsA logical scalar indicating if results should be printed to the console, default TRUE. 
#' @param returnresultsA logical scalar indicating if results should be returned by the funcion, default FALSE.
#' @return If \code{returnresults=TRUE}, a data frame with 11 rows per test and 2 more columns than the input data.
#'Three columns from the input data are not included (\code{TFM Conc. (mg/L)}, \code{No. Tested}, and \code{No. Dead}).
#'Five columns are added: the parameter (\code{param}), the method used (\code{method}),
#'the estimate (\code{estimate}), and the 95% confidence interval of the estimate (\code{lower95ci} and \code{upper95ci})
#' @importtcltk
#' @export
#' @detailsThe input data must include at least these seven columns, with these names: 
#' "Test ID" = A character or numeric vector, the unique identifier for each test
#' "Source" = A character vector, the source of the chemical
#' "Batch" = A character or numeric vector, the batch of the chemical
#' "Species" = A character vector, the species tested
#' "TFM Conc. (mg/L)" = A numeric vector, the concentration of TFM in mg/L
#' "No. Tested" = A numeric vector, the number of animals tested
#' "No. Dead" = A numeric vector, the number of animals dead
#' @examples 
#' \dontrun{
#' LWP()
#' }
LWP <- function(rawfile=NULL, descrcolz=4, saveplots=TRUE, showplots=FALSE, saveresults=TRUE, showresults=TRUE, returnresults=FALSE) {
# rawfile=NULL
# descrcolz=4
# saveplots=TRUE
# showplots=FALSE
# saveresults=TRUE
# showresults=TRUE
# returnresults=FALSE
### bring in the data ###
# allow user to choose raw data file from menu
if(is.null(rawfile)) rawfile <- tk_choose.files(filters=matrix(c("csv", ".csv"), ncol=2))
# read in the data, fill in the blanks
rawdat <- read.csv(rawfile, as.is=TRUE)
rawdat2 <- data.frame(lapply(rawdat, fill))
rawcolz <- match(c("TFM.Conc...mg.L.", "No..Tested", "No..Dead"), names(rawdat2))
# use the input filename to name the output files
filesegs <- strsplit(rawfile, "/")[[1]]
L <- length(filesegs)
filename <- filesegs[L]
dirname <- paste(filesegs[-L], collapse="/")
prefix <- strsplit(filename, ".csv")[[1]]
smryname <- paste0(prefix, "Smry.csv")
if(saveplots) {
pdfname <- paste0(prefix, "Smry.pdf")
pdf(file = paste(dirname, pdfname, sep="/"), paper="letter")
}
### fit LW and probit models to the data
# unique test IDs
sut <- sort(unique(rawdat2$Test.ID))
# empty list in which to put results
results <- vector("list", length(sut))
if(showresults) {
# print a header to the screen
cat("\n\n\n")
cat("Rounded results are printed to the screen for convenience.\n")
cat("No need to copy or print them though, because they are saved in:\n")
cat("     ", paste(dirname, smryname, sep="/"), "\n")
cat('Note that "S" is the slope defined by Litchfield and Wilcoxon (1949).\n')
}
for(i in seq(along=sut)) {
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- paste(df[1, 1:descrcolz], collapse=",")
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
estimate <- c(fLW$params, predlinear(pctalive, fLW$params[1], fLW$params[2]), fLW$LWest["S"])
param <- names(estimate)
method <- rep("Auto Litchfield-Wilcoxon", length(param))
lower95ci <- c(NA, NA, NA, fLW$LWest["lower"], NA, NA)
upper95ci <- c(NA, NA, NA, fLW$LWest["upper"], NA, NA)
smryLW <- data.frame(param, method, estimate, lower95ci, upper95ci)
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
estimate <- c(fp$coef, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), -rawcolz], smry)
if(showresults) {
# print the results to the screen
cat("\n\n\n")
cat(paste0("Test ", i, ":   ", descr, "\n"))
cat("\nLitchfield Wicoxon method\n")
print(format(smryLW[, -2], 2, nsmall=2, digits=0), row.names=FALSE)
cat("\nProbit method\n")
print(format(smryPr[, -2], 2, nsmall=2, digits=0), row.names=FALSE)
}
if(showplots) windows()
if(saveplots | showplots) {
# plot the results to a pdf file
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr, ylab="Mortality  (%)")
abline(fp$coef, lty=2)
abline(fLW$params)
legend("topleft", c("Litchfield Wilcoxon", "Probit"), lty=c(1, 2), bg="white")
}
}
if(saveplots) graphics.off()
# save the results to a csv file
smrydat <- do.call(rbind, results)
if(saveresults) write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
if(returnresults) return(smrydat) else invisible()
}
LWP()
?tk_choose.files
rawfile <- tk_choose.files(default="%userprofile%\documents", filters=matrix(c("csv", ".csv"), ncol=2), multi=FALSE)
LWP()
#' User Friendly Evaluation of Dose-Effect Experiments using Litchfield-Wilcoxon and Probit Methods
#'
#' User friendly evaluation of dose-effect experiments using automated Litchfield Wilcoxon (1949) and probit estimation methods.
#'This function has been tailored for non-R users with input data set up in a particular way (see Details).
#' @param rawfileA character scalar specifying the path of the input data as a csv file.  If NULL, default, the user will be 
#'prompted to browse to a file using a menu.
#' @param descrcolzA numeric scalar, the number of columns to use as the description of the test, 
#'from 1 to \code{descrcolz}, default 4.
#' @param saveplotsA logical scalar indicating if plots should be saved to a pdf file, default TRUE.
#' @param showplotsA logical scalar indicating if plots should be shown on screen, default FALSE.
#' @param saveresultsA logical scalar indicating if results should be saved to a csv file, default TRUE.
#'The csv file is given the same name (plus the suffix "Smry") and is placed in the same directory as the input file.
#' @param showresultsA logical scalar indicating if results should be printed to the console, default TRUE. 
#' @param returnresultsA logical scalar indicating if results should be returned by the funcion, default FALSE.
#' @return If \code{returnresults=TRUE}, a data frame with 11 rows per test and 2 more columns than the input data.
#'Three columns from the input data are not included (\code{TFM Conc. (mg/L)}, \code{No. Tested}, and \code{No. Dead}).
#'Five columns are added: the parameter (\code{param}), the method used (\code{method}),
#'the estimate (\code{estimate}), and the 95% confidence interval of the estimate (\code{lower95ci} and \code{upper95ci})
#' @importtcltk
#' @export
#' @detailsThe input data must include at least these seven columns, with these names: 
#' "Test ID" = A character or numeric vector, the unique identifier for each test
#' "Source" = A character vector, the source of the chemical
#' "Batch" = A character or numeric vector, the batch of the chemical
#' "Species" = A character vector, the species tested
#' "TFM Conc. (mg/L)" = A numeric vector, the concentration of TFM in mg/L
#' "No. Tested" = A numeric vector, the number of animals tested
#' "No. Dead" = A numeric vector, the number of animals dead
#' @examples 
#' \dontrun{
#' LWP()
#' }
LWP <- function(rawfile=NULL, descrcolz=4, saveplots=TRUE, showplots=FALSE, saveresults=TRUE, showresults=TRUE, returnresults=FALSE) {
### bring in the data ###
# allow user to choose raw data file from menu
if(is.null(rawfile)) rawfile <- tk_choose.files(filters=matrix(c("csv", ".csv"), ncol=2), multi=FALSE)
# read in the data, fill in the blanks
rawdat <- read.csv(rawfile, as.is=TRUE)
rawdat2 <- data.frame(lapply(rawdat, fill))
rawcolz <- match(c("TFM.Conc...mg.L.", "No..Tested", "No..Dead"), names(rawdat2))
# use the input filename to name the output files
filesegs <- strsplit(rawfile, "/")[[1]]
L <- length(filesegs)
filename <- filesegs[L]
dirname <- paste(filesegs[-L], collapse="/")
prefix <- strsplit(filename, ".csv")[[1]]
smryname <- paste0(prefix, "Smry.csv")
if(saveplots) {
pdfname <- paste0(prefix, "Smry.pdf")
pdf(file = paste(dirname, pdfname, sep="/"), paper="letter")
}
### fit LW and probit models to the data
# unique test IDs
sut <- sort(unique(rawdat2$Test.ID))
# empty list in which to put results
results <- vector("list", length(sut))
if(showresults) {
# print a header to the screen
cat("\n\n\n")
cat("Rounded results are printed to the screen for convenience.\n")
cat("No need to copy or print them though, because they are saved in:\n")
cat("     ", paste(dirname, smryname, sep="/"), "\n")
cat('Note that "S" is the slope defined by Litchfield and Wilcoxon (1949).\n')
}
for(i in seq(along=sut)) {
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- paste(df[1, 1:descrcolz], collapse=", ")
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
estimate <- c(fLW$params, predlinear(pctalive, fLW$params[1], fLW$params[2]), fLW$LWest["S"])
param <- names(estimate)
method <- rep("Auto Litchfield-Wilcoxon", length(param))
lower95ci <- c(NA, NA, NA, fLW$LWest["lower"], NA, NA)
upper95ci <- c(NA, NA, NA, fLW$LWest["upper"], NA, NA)
smryLW <- data.frame(param, method, estimate, lower95ci, upper95ci)
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
estimate <- c(fp$coef, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), -rawcolz], smry)
if(showresults) {
# print the results to the screen
cat("\n\n\n")
cat(paste0("Test ", i, ":   ", descr, "\n"))
cat("\nLitchfield Wicoxon method\n")
print(format(smryLW[, -2], 2, nsmall=2, digits=0), row.names=FALSE)
cat("\nProbit method\n")
print(format(smryPr[, -2], 2, nsmall=2, digits=0), row.names=FALSE)
}
if(showplots) windows()
if(saveplots | showplots) {
# plot the results to a pdf file
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr, ylab="Mortality  (%)")
abline(fp$coef, lty=2)
abline(fLW$params)
legend("topleft", c("Litchfield Wilcoxon", "Probit"), lty=c(1, 2), bg="white")
}
}
if(saveplots) graphics.off()
# save the results to a csv file
smrydat <- do.call(rbind, results)
if(saveresults) write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
if(returnresults) return(smrydat) else invisible()
}
LWP
LWP()
pkgup("jvamisc")
q()
