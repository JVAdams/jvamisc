write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
for(i in seq(along=sut)) {
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- with(df, paste(Test.ID, Source, Batch, Species, sep=", "))[1]
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
estimate <- c(fLW$params, predlinear(pctalive, fLW$params[1], fLW$params[2]), fLW$LWest["S"])
param <- names(estimate)
method <- rep("Auto Litchfield-Wilcoxon", length(param))
lower95ci <- c(NA, NA, NA, fLW$LWest["lower"], NA, NA)
upper95ci <- c(NA, NA, NA, fLW$LWest["upper"], NA, NA)
smryLW <- data.frame(param, method, estimate, lower95ci, upper95ci)
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
estimate <- c(fp$coef, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
cat("\n\n")
cat(paste0("Test ", i, ":   ", descr, "\n"))
cat("\nLitchfield Wicoxon method\n")
print(smryLW[, -2], row.names=FALSE)
cat("\nProbit method\n")
print(smryPr[, -2], row.names=FALSE)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), 1:8], smry)
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr, ylab="Mortality  (%)")
abline(fp$coef, lty=2)
abline(fLW$params)
legend("topleft", c("Litchfield Wilcoxon", "Probit"), lty=c(1, 2), bg="white")
}
graphics.off()
smrydat <- do.call(rbind, results)
write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
cleanup()
q()
q()
library(LW1949)
LWP()
cleanup()
xy <-
structure(list(ID = 1:120, X = c(-102.6, -101.9, -97.1, -97,
-95.7, -99.1, -100.1, -97.2, -97, -99.3, -96, -95.2, -98.8, -98.1,
-99.6, -97.8, -96.1, -98.3, -95.6, -96.8, -101.2, -101.1, -97.2,
-111.1, -111.2, -116, -117.6, -103.7, -107.1, -102.3, -105.6,
-105.3, -108.5, -103.2, -94.1, -101.9, -94.7, -101.1, -97.9,
-111.4, -111.2, -110.5, -111.3, -107.3, -102.3, -104.7, -106.7,
-101.8, -106, -103, -107.9, -103.7, -103.8, -109.2, -108.9, -109.5,
-102.1, -104.6, -105.6, -101.7, -104, -108.3, -107.1, -103.9,
-105.2, -105.7, -104.7, -106.7, -108.8, -107.7, -102.2, -107.8,
-109.4, -106.1, -106.4, -104.2, -101.1, -99.9, -99.7, -101.3,
-113.3, -119.4, -113.8, -114.7, -112.8, -110.3, -113.6, -111.1,
-116.3, -118.5, -118.9, -117.4, -111.7, -114.1, -114.8, -113.8,
-115.8, -108.4, -109.1, -115.6, -114.2, -114, -113.4, -113.7,
-114.5, -112.9, -116.4, -113.1, -114.4, -117.5, -118, -113.8,
-112.8, -110.7, -113.6, -114.1, -114, -114.9, -112.7, -112.1),
Y = c(52.88, 52.08, 50.93, 52.35, 51.03, 49.55, 51.1, 49,
50.63, 53.15, 50.47, 49.62, 50.42, 49.18, 50.15, 53.97, 50.18,
49.95, 49.02, 49.53, 52.12, 53.97, 49.92, 58.77, 56.65, 58.38,
57.75, 58.18, 57.35, 55.53, 57.25, 55.15, 59.57, 56.23, 58.73,
54.77, 56.35, 56.87, 55.8, 52.07, 50.72, 49.12, 51.58, 49.72,
50.9, 49.38, 50.47, 51.52, 51.27, 49.22, 50.98, 50.55, 51.25,
51.52, 49.68, 50.9, 49.62, 52.82, 50.33, 50.13, 53.33, 52.77,
51.48, 51.98, 52.42, 53.22, 50.43, 52.17, 52.37, 50.27, 51.2,
49.37, 53.13, 53.92, 49, 49.82, 50.43, 49.92, 49.42, 49.18,
54.72, 55.2, 53.28, 54.13, 53.03, 54.42, 53.32, 53.88, 55.42,
56.08, 55.18, 56.23, 53.42, 53.88, 55.28, 55.97, 54.15, 55.83,
54.05, 51.2, 49.47, 51.12, 49, 49.93, 49.63, 51.47, 53.58,
50.88, 50.55, 53.4, 52.93, 52.45, 49.63, 50.02, 49.13, 51.78,
49.52, 52.42, 52.33, 50.05)), .Names = c("ID", "X", "Y"), row.names = c(NA,
-120L), class = "data.frame")
arc <- structure(list(Long = c(662843L, 303344L, 634922L, 634177L, 310679L,
494213L, 426481L, 629459L, 640032L, 481274L, 712879L, 341099L,
514207L, 567047L, 459277L, 575434L, 709183L, 552371L, 309914L,
661364L, 347328L, 362256L, 627057L, 493059L, 486510L, 556726L,
463097L, 576453L, 371836L, 667253L, 462589L, 482793L, 642357L,
614686L, 438047L, 314744L, 393704L, 373215L, 570837L, 469155L,
485882L, 538672L, 475748L, 334217L, 691256L, 525404L, 382909L,
307134L, 431634L, 647819L, 294333L, 595640L, 587238L, 626271L,
650049L, 605478L, 709453L, 526955L, 460853L, 309177L, 566596L,
685513L, 357648L, 574174L, 489798L, 455265L, 523438L, 382373L,
647731L, 305459L, 693516L, 293105L, 607049L, 429728L, 399064L,
558985L, 354402L, 431804L, 452858L, 334572L, 353150L, 347255L,
309997L, 651587L, 377949L, 546719L, 328154L, 495398L, 544308L,
404778L, 380285L, 472101L, 451486L, 689300L, 641007L, 323389L,
579680L, 660968L, 624387L, 601305L, 704301L, 708545L, 325927L,
304077L, 681973L, 370117L, 536414L, 355787L, 686312L, 464761L,
430765L, 313128L, 370015L, 520058L, 308146L, 700041L, 284328L,
641445L, 382795L, 419101L), Lat = c(5861664L, 5773823L, 5643796L,
5801793L, 5656630L, 5488602L, 5661469L, 5428965L, 5610551L, 5888993L,
5595190L, 5498706L, 5585348L, 5447873L, 5555464L, 5980796L, 5562753L,
5533326L, 5432936L, 5488765L, 5776730L, 5982225L, 5531237L, 6514448L,
6278448L, 6471427L, 6401046L, 6449487L, 6358353L, 6156961L, 6345385L,
6111516L, 6606224L, 6233217L, 6510482L, 6073002L, 6246362L, 6304842L,
6184398L, 5768919L, 5618707L, 5440930L, 5714384L, 5510039L, 5642229L,
5469758L, 5592190L, 5711317L, 5680306L, 5453896L, 5651687L, 5600655L,
5678368L, 5709223L, 5505129L, 5639776L, 5500421L, 5852322L, 5575467L,
5556498L, 5909447L, 5850231L, 5705197L, 5759364L, 5807763L, 5896953L,
5586493L, 5781340L, 5804407L, 5572216L, 5675712L, 5472494L, 5887928L,
5975151L, 5428373L, 5518940L, 5588450L, 5530168L, 5474349L, 5449946L,
6066019L, 6119675L, 5907208L, 6000473L, 5877156L, 6030491L, 5910972L,
5970172L, 6141752L, 6216038L, 6116434L, 6231769L, 5919241L, 5974015L,
6128195L, 6206356L, 6000898L, 6190147L, 5990754L, 5673065L, 5483528L,
5667392L, 5430185L, 5534421L, 5500543L, 5703751L, 5936934L, 5638482L,
5603087L, 5916899L, 5864980L, 5814647L, 5499049L, 5540892L, 5445238L,
5740548L, 5489532L, 5809788L, 5799135L, 5544801L)), .Names = c("Long",
"Lat"), class = "data.frame", row.names = c(NA, -120L))
library(rgdal)
utm <- project(as.matrix(xy[,c("X","Y")]), "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
windows()
map("world", xlim=range(xy$X), ylim=range(xy$Y))
points(xy[, c("X", "Y")])
windows()
plot(utm)
windows()
plot(arc)
head(xy)
head(utm)
head(arc)
windows()
par(mfrow=(2, 2), mar=c(0, 0, 2, 0))
map("world", type="n", xlim=range(xy$X), ylim=range(xy$Y))
points(xy[, c("X", "Y")])
mtext("xy lat long", side=3)
plot(utm, xlab="", ylab="", main="xy utm", axes=FALSE)
plot(arc, xlab="", ylab="", main="arc utm, axes=FALSE)
par(mfrow=c(2, 2), mar=c(0, 0, 2, 0))
map("world", type="n", xlim=range(xy$X), ylim=range(xy$Y))
points(xy[, c("X", "Y")])
mtext("xy lat long", side=3)
plot(utm, xlab="", ylab="", main="xy utm", axes=FALSE)
plot(arc, xlab="", ylab="", main="arc utm, axes=FALSE)
windows()
par(mfrow=c(2, 2), mar=c(0, 0, 2, 0))
map("world", type="n", xlim=range(xy$X), ylim=range(xy$Y))
points(xy[, c("X", "Y")])
mtext("xy lat long", side=3)
plot(utm, xlab="", ylab="", main="xy utm", axes=FALSE)
plot(arc, xlab="", ylab="", main="arc utm, axes=FALSE)
windows()
par(mfrow=c(2, 2), mar=c(0, 0, 2, 0))
map("world", type="n", xlim=range(xy$X), ylim=range(xy$Y))
points(xy[, c("X", "Y")])
mtext("xy lat long", side=3)
plot(utm, xlab="", ylab="", main="xy utm", axes=FALSE)
plot(arc, xlab="", ylab="", main="arc utm, axes=FALSE)
graphics.off()
windows()
par(mfrow=c(2, 2), mar=c(0, 0, 2, 0))
map("world", type="n", xlim=range(xy$X), ylim=range(xy$Y))
points(xy[, c("X", "Y")])
mtext("xy lat long", side=3)
plot(utm, xlab="", ylab="", main="xy utm", axes=FALSE)
plot(arc, xlab="", ylab="", main="arc utm", axes=FALSE)
par("mar")
par(mfrow=c(2, 2), mar=c(0, 0, 2, 0))
map("world", type="n", xlim=range(xy$X), ylim=range(xy$Y), mar=c(0, 0, 2, 0))
points(xy[, c("X", "Y")])
mtext("xy lat long", side=3)
plot(utm, xlab="", ylab="", main="xy utm", axes=FALSE)
plot(arc, xlab="", ylab="", main="arc utm", axes=FALSE)
par(mfrow=c(2, 2), mar=c(0, 0, 2, 0))
map("world", type="n", xlim=range(xy$X), ylim=range(xy$Y), mar=c(0, 0, 2, 0))
points(xy[, c("X", "Y")])
mtext("xy lat long", side=3, font=2, line=1)
plot(utm, xlab="", ylab="", main="xy utm", axes=FALSE)
plot(arc, xlab="", ylab="", main="arc utm", axes=FALSE)
par(mfrow=c(2, 2))
map("world", type="n", xlim=range(xy$X), ylim=range(xy$Y), mar=c(1, 1, 2, 1))
points(xy[, c("X", "Y")])
mtext("xy lat long", side=3, font=2, line=1)
plot(utm, xlab="", ylab="", main="xy utm", axes=FALSE)
plot(arc, xlab="", ylab="", main="arc utm", axes=FALSE)
cleanup()
q()
svyplot
??svyplot
library(survey)
svyplot
design:::svyplot
showMethods("svyplot")
methods(svyplot)
svyplot.default
survey:::svyplot.default
data(api)
dstrat<-svydesign(id=~1,strata=~stype, weights=~pw, data=apistrat, fpc=~fpc)
svyplot(api00~api99, design=dstrat, style="bubble")
svyplot(api00~api99, design=dstrat, style="bubble", xlim=c(500, 700))
??julian
search()
ls(5)
doy
?doy
??Julian
?doy
plot(101:200, rnorm(100), axes=FALSE)
axis(1, at=doy(as.Date(paste(2000, 1:12, 1, sep="-")))-0.5, labels=FALSE)
axis(1, at=doy(as.Date(paste(2000, 1:12, 15, sep="-"))), labels=month.abb, tick=FALSE)
axis(2)
box()
file.choose
?file.choose
??file.choose
q()
Does not work when ,style="grayhex".
library(survey)
data(api)
dstrat<-svydesign(id=~1,strata=~stype, weights=~pw, data=apistrat, fpc=~fpc)
svyplot(api00~api99, design=dstrat, style="grayhex")
svyplot(api00~api99, design=dstrat, style="grayhex", ylim=c(500, 700))
?gplot.hexbin
gplot.hexbin
cleanup()
q()
utils:::menuInstallLocal()
?LW1949
library(LW1949)
?LW1949
?cheat
pkgin
utils:::menuInstallLocal()
detach()
utils:::menuInstallLocal()
library(LW1949)
cleanup()
q()
pkgin("LW1949")
pkgman("LW1949")
cleanup()
search()
library(LW1949)
LWP()
?LWP
q()
source('~/.active-rstudio-document', echo=TRUE)
LWP(rawfile="SpikedDace.csv", descrcolz=c(1, 4),
saveplots=TRUE, showplots=TRUE)
LWP(rawfile="SpikedDace.csv", descrcolz=c(1, 4),
saveplots=FALSE, showplots=TRUE)
LWP(rawfile="SpikedDace.csv", saveplots=FALSE, showplots=TRUE)
LWP(saveplots=FALSE, showplots=TRUE)
ls()
rawfile <- tk_choose.files(default="*.csv", multi=FALSE)
library(tcltk)
rawfile <- tk_choose.files(default="*.csv", multi=FALSE)
rawfile
# the long way
rawfile <- "C:/JVA/Lamprey/ChemControl/Toxicity/SpikedDace.csv"
descrcolz <- 4
saveplots <- FALSE
showplots <- TRUE
saveresults <- TRUE
showresults <- TRUE
returnresults <- FALSE
oldopt <- as.logical(options("stringsAsFactors"))
options(stringsAsFactors = FALSE)
# read in the data, fill in the blanks
rawdat <- read.csv(rawfile, as.is=TRUE)
rawdat2 <- data.frame(lapply(rawdat, fill))
rawcolz <- match(c("TFM.Conc...mg.L.", "No..Tested", "No..Dead"),
names(rawdat2))
# use the input filename to name the output files
filesegs <- strsplit(rawfile, "/")[[1]]
L <- length(filesegs)
filename <- filesegs[L]
dirname <- paste(filesegs[-L], collapse="/")
prefix <- strsplit(filename, ".csv")[[1]]
smryname <- paste0(prefix, "Smry.csv")
if (saveplots) {
pdfname <- paste0(prefix, "Smry.pdf")
pdf(file = paste(dirname, pdfname, sep="/"), paper="letter")
}
# unique test IDs
sut <- sort(unique(rawdat2$Test.ID))
# empty list in which to put results
results <- vector("list", length(sut))
i <- 1
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- paste(df[1, 1:descrcolz], collapse=", ")
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested,
nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
fLW
mydat
rawdat
rawdat
rawdat2
names(rawdat2)
aggregate(rawdat2[, c("No..Tested", "No..Dead")],
rawdat2[, names(rawdat2)[c(1:4, 9)]], sum)
rawdat2[, c("No..Tested", "No..Dead")]
rawdat2[, names(rawdat2)[c(1:4, 9)]]
lapply(rawdat2, class)
aggregate(rawdat2[, c("No..Tested", "No..Dead")],
list(rawdat2[, "TFM.Conc...mg.L."]), sum)
head(rawdat2)
agg <- aggregate(rawdat2[, c("No..Tested", "No..Dead")],
list(rawdat2[, "TFM.Conc...mg.L."]), sum)
rawdat3 <- head(rawdat2, dim(agg)[1])
rawdat3[, c("TFM.Conc...mg.L.", "No..Tested", "No..Dead")] <- agg
rawdat2
rawdat3
# redefine rawdat2 as the summarized data
rawdat2orig <- rawdat2
agg <- aggregate(rawdat2orig[, c("No..Tested", "No..Dead")],
list(rawdat2orig[, "TFM.Conc...mg.L."]), sum)
rawdat2 <- head(rawdat2orig, dim(agg)[1])
rawdat2[, c("TFM.Conc...mg.L.", "No..Tested", "No..Dead")] <- agg
rawcolz <- match(c("TFM.Conc...mg.L.", "No..Tested", "No..Dead"),
names(rawdat2))
# use the input filename to name the output files
filesegs <- strsplit(rawfile, "/")[[1]]
L <- length(filesegs)
filename <- filesegs[L]
dirname <- paste(filesegs[-L], collapse="/")
prefix <- strsplit(filename, ".csv")[[1]]
smryname <- paste0(prefix, "Smry.csv")
if (saveplots) {
pdfname <- paste0(prefix, "Smry.pdf")
pdf(file = paste(dirname, pdfname, sep="/"), paper="letter")
}
# unique test IDs
sut <- sort(unique(rawdat2$Test.ID))
# empty list in which to put results
results <- vector("list", length(sut))
# for(i in seq(along=sut)) {
i <- 1
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- paste(df[1, 1:descrcolz], collapse=", ")
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested,
nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
pm <- predlinear(pctalive, fLW)
estimate <- c(fLW$params, pm[, "ED"], fLW$LWest["S"])
param <- c(names(estimate[1:2]), paste0("ED", pctalive), "S")
method <- rep("Auto Litchfield-Wilcoxon", length(param))
lower95ci <- c(NA, NA, pm[1, "lower"], fLW$LWest["lower"], pm[3, "lower"],
fLW$LWest["lowerS"])
upper95ci <- c(NA, NA, pm[1, "upper"], fLW$LWest["upper"], pm[3, "upper"],
fLW$LWest["upperS"])
smryLW <- data.frame(param, method, estimate, lower95ci, upper95ci)
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
fpc <- fp$coef
if (!fp$converged) fpc[1:2] <- NA
estimate <- c(fpc, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), -rawcolz], smry)
if (showresults) {
# print the results to the screen
cat("\n\n\n")
cat(paste0("Test ", i, ":   ", descr, "\n"))
cat("\nLitchfield Wicoxon method\n\n")
print(fLW$chi$chi)
cat("\n")
print(format(smryLW[, -2], 2, nsmall=2, digits=0), row.names=FALSE)
cat("\nProbit method\n\n")
print(format(smryPr[, -2], 2, nsmall=2, digits=0), row.names=FALSE)
}
if (showplots) windows()
if (saveplots | showplots) {
# plot the results to a pdf file
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr, ylab="Mortality  (%)")
if (!is.na(fpc[1])) abline(fpc, lty=2, col="red")
abline(fLW$params)
# notes on graph
right <- 0.8 * (par("usr")[2] - par("usr")[1]) + par("usr")[1]
lwsel <- substring(smry$method, 1, 1)=="A"
rows <- match(c("ED25", "ED50", "ED99.9", "S"), smry$param[lwsel])
text(right, -1.2, "Litchfield Wilcoxon", font=2)
text(right, -seq(1.6, 2.8, 0.4), c("ED25", "ED50", "ED99.9", "LW Slope"),
adj=1)
text(right, -seq(1.6, 2.8, 0.4), paste("  ",
formatC(smry$estimate[lwsel][rows], digits=3, flag="#")), adj=0)
left <- 0.2 * (par("usr")[2] - par("usr")[1]) + par("usr")[1]
psel <- substring(smry$method, 1, 1)=="P"
rows <- match(c("ED25", "ED50", "ED99.9"), smry$param[psel])
text(left, 2.9, "Probit  (dashed)", font=2, col="red")
text(left, seq(2.5, 1.7, -0.4), c("ED25", "ED50", "ED99.9"), adj=1,
col="red")
text(left, seq(2.5, 1.7, -0.4),
paste("  ", formatC(smry$estimate[psel][rows], digits=3, flag="#")),
adj=0, col="red")
}
#	}
rawdat2
rawdat2[, 9:12]
rawdat2[, 9:11]
library(LW1949)
search()
library(devtools)
search()
#' Plot Dose-Effect Experiments
#'
#' Plot the results of dose-effect experiments.
#' @param DEdata
#'   A data frame of dose-effect data (typically, the output from
#'     \code{\link{dataprep}}) containing at least five variables:
#'     dose, pfx, log10dose, bitpfx, fxcateg.
#' @param xlab
#'   A character scalar, the title for the dose (x) axis, default "Dose".
#' @param ylab
#'   A character scalar, the title for the affected (y) axis,
#'     default "Affected  (\%)".
#' @param ylim
#'   A numeric vector of length two giving the y coordinate range for
#'     affected (\%), default c(0.1, 99.9).
#'    Observed effects beyond this range will be plotted at the limits of this
#'  range using an open symbol.
#' @param ...
#'   Additional arguments to \code{\link{plot}}.
#' @import
#'   jvamisc
#' @export
#' @examples
#' dose <- c(0.0625, 0.125, 0.25, 0.5, 1)
#' ntested <- rep(8, 5)
#' nalive <- c(1, 4, 4, 7, 8)
#' mydat <- dataprep(dose=dose, ntot=ntested, nfx=nalive)
#' # just plot the raw data
#' plotDE(mydat)
#' # plot the raw data and some fitted lines
#' fLW <- fitLW(mydat)
#' fp <- fitprobit(mydat)
#' plotDE(mydat)
#' abline(fp$coef, lty=2)
#' abline(fLW$params)
#' legend("topleft", c("Litchfield-Wilcoxon", "Probit"), lty=c(1, 2),
#'   bg="white")
plotDE <- function(DEdata, xlab="Dose", ylab="Affected  (%)",
ylim=c(0.1, 99.9), ...) {
if (!is.data.frame(DEdata)) stop("DEdata must be a data frame.")
if (any(is.na(match(c("dose", "pfx", "log10dose", "bitpfx", "fxcateg"),
names(DEdata))))) {
stop("DEdata must include at least five variables:",
"dose, pfx, log10dose, bitpfx, fxcateg.")
}
if (!is.character(xlab) | length(xlab)!=1) {
stop("xlab must be a character scalar")
}
if (!is.character(ylab) | length(ylab)!=1) {
stop("ylab must be a character scalar")
}
if (!is.numeric(ylim) | length(ylim)!=2) {
stop("ylim must be a numeric vector of length 2.")
}
if (any(ylim <= 0) | any(ylim >= 100)) stop("ylim must be between 0 and 100.")
xtix <- prettylog(DEdata$dose, 1:9, 5)
# xtix <- axTicks(side=2, axp=c(range(pretty(DEdata$dose)), -4), log=TRUE,
#   nintLog=Inf)
plot(DEdata$log10dose, DEdata$bitpfx, type="n",
xlim=range(  log10( c(DEdata$dose, xtix[xtix>0]) ), na.rm=TRUE),
ylim=probit(ylim/100), axes=F, xlab=xlab, ylab=ylab, ...)
# background grid and axes
abline(v=log10(xtix), lwd=2, col="lightgray")
axis(1, at=log10(xtix), labels=xtix)
ytix1 <- c(seq(0.1, 0.9, 0.1), seq(1, 9, 1), seq(10, 90, 10), seq(91, 99, 1),
seq(99.1, 99.9, 0.1))
ytix2 <- c(0.1, 1, 10, 50, 90, 99, 99.9)
abline(h=probit(ytix1/100), col="lightgray")
abline(h=probit(ytix2/100), lwd=2, col="lightgray")
axis(2, at=probit(ytix2/100), labels=ytix2, las=1)
box()
# observed points
points(DEdata$log10dose, probit(constrain(DEdata$pfx, ylim/100)), pch=16,
cex=1.5)
points(DEdata$log10dose[DEdata$fxcateg!=50],
probit(constrain(DEdata$pfx[DEdata$fxcateg!=50], ylim/100)),
pch=16, col="white")
}
library(jvamisc)
example(prettylog)
library(jvamisc)
pkgup("LW1949")
pkgin("LW1949")
library(LW1949)
library(testthat)
library(magrittr)
test_package("LW1949")
setwd("C:/JVA/GitHub/LW1949")
library(LW1949)
?fitLW
example(addhist)
library(jvamisc)
example(addhist)
ls()
.Last
jvaLast
library(jvamisc)
pkgup("jvamisc")
pkgup("jvamisc")
library(jvamisc)
pkgup("jvamisc")
