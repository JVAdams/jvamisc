# 3 1989-02-20    3    6.5   6.54      30      27 0.31   20    20         0         0     <NA> <NA> 1989-1990 combined tox data TFM sea lamprey.xls
# 4 1989-02-20    4    6.5   6.54      30      27 0.26   19    20         0         0     <NA> <NA> 1989-1990 combined tox data TFM sea lamprey.xls
# 5 1989-02-20    5    6.5   6.54      30      27 0.20   11    20         0         0     <NA> <NA> 1989-1990 combined tox data TFM sea lamprey.xls
# 6 1989-02-20    6    6.5   6.54      30      27 0.17    2    20         0         0     <NA> <NA> 1989-1990 combined tox data TFM sea lamprey.xls
boogdat <- dat1
rm(boogdir, boogfiles, startr, datlist, dat, dat1)
ls()
rm(boogdir, boogfiles, startr, datlist, i, wb, dat, dat1)
ls()
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
myfiles
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(boogdir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$source <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <-  <- do.call(rbind.fill, sheetlist)
}
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(boogdir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$source <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$source <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
print(paste(i, j, sep="-"))
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$source <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
i
j
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$source <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
sheetlist[[j]]
stringin
grep("old", myfiles)
myfiles
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
grep("old", myfiles)
myfiles[-grep("old", myfiles)]
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
# all csv files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
# exclude files with "old" in their names
myfiles <- myfiles[-grep("old", myfiles)]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
print(paste(i, j, sep="-"))
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$source <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
sheetlist[[j]]
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
# all csv files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
# exclude files with "old" in their names
myfiles <- myfiles[-grep("old", myfiles)]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
print(paste(i, j, sep="-"))
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$source <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
dat
myfiles[i]
mysheets[j]
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
# all csv files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
# exclude files with "old" in their names
myfiles <- myfiles[-grep("old", myfiles)]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
print(paste(i, j, sep="-"))
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$source <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
dat <- do.call(rbind.fill, datlist)
head(dat)
stringin("date", names(dat))
dim(dat)
lapply(datlist, function(df) {
unique(c(df$start.date[!is.na(df$start.date)], df$df$end.date[!is.na(df$end.date)]))
}
)
head(datlist[[35]])
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
# all csv files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
# exclude files with "old" in their names
myfiles <- myfiles[-grep("old", myfiles)]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$source <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
dat <- do.call(rbind.fill, datlist)
lapply(datlist, function(df) {
unique(c(df$start.date[!is.na(df$start.date)], df$df$end.date[!is.na(df$end.date)]))
}
)
unlist(unique(c(df$start.date[!is.na(df$start.date)], df$df$end.date[!is.na(df$end.date)])))
unique(c(df$start.date[!is.na(df$start.date)], df$df$end.date[!is.na(df$end.date)]))
a <- lapply(datlist, function(df) {
unique(c(df$start.date[!is.na(df$start.date)], df$df$end.date[!is.na(df$end.date)]))
}
)
a
unlist(a)
lapply(a, as.character)
unlist(lapply(a, as.character))
sort(unlist(lapply(a, as.character)))
a <- lapply(datlist, function(df) {
unique(c(df$start.date[!is.na(df$start.date)], df$df$end.date[!is.na(df$end.date)]))
}
)
b <- sort(unlist(lapply(a, as.character)))
b
as.Date(b)
dat <- do.call(rbind.fill, datlist)
a <- lapply(datlist, function(df) {
unique(c(df$start.date[!is.na(df$start.date)], df$df$end.date[!is.na(df$end.date)]))
}
)
b <- as.Date(unlist(lapply(a, as.character)))
b2 <- unlist(a)
b
b2
plot(b, b2)
length(datlist)
look <- do.call(rbind.fill, datlist[1:20])
look <- do.call(rbind.fill, datlist[1:10])
look <- do.call(rbind.fill, datlist[11:20])
look <- do.call(rbind.fill, datlist[11:15])
look <- do.call(rbind.fill, datlist[11:12])
look <- do.call(rbind.fill, datlist[11:13])
datlist[[13]]
# C:\JVA\Lamprey\ChemControl\Resistance\McGarry\ReadMcGarry.r
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
# all csv files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
# exclude files with "old" in their names
myfiles <- myfiles[-grep("old", myfiles)]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$source <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
dat <- do.call(rbind.fill, datlist)
look <- do.call(rbind.fill, datlist[1:20])
look <- do.call(rbind.fill, datlist[1:30])
look <- do.call(rbind.fill, datlist[1:25])
look <- do.call(rbind.fill, datlist[1:27])
look <- do.call(rbind.fill, datlist[1:26])
datlist[[27]]
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
# all csv files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
# exclude files with "old" in their names
myfiles <- myfiles[-grep("old", myfiles)]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$source <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
dat <- do.call(rbind.fill, datlist)
head(dat)
# C:\JVA\Lamprey\ChemControl\Resistance\McGarry\ReadMcGarry.r
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
# all csv files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
# exclude files with "old" in their names
myfiles <- myfiles[-grep("old", myfiles)]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$source <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
if(FALSE) {
# try to figure out errors
a <- lapply(datlist, function(df) unique(c(df$start.date[!is.na(df$start.date)], df$df$end.date[!is.na(df$end.date)])) )
b <- as.Date(unlist(lapply(a, as.character)))
b2 <- unlist(a)
look <- do.call(rbind.fill, datlist[1:26])
}
dat <- do.call(rbind.fill, datlist)
head(dat)
# C:\JVA\Lamprey\ChemControl\Resistance\McGarry\ReadMcGarry.r
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
# all csv files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
# exclude files with "old" in their names
myfiles <- myfiles[-grep("old", myfiles)]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$source <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
if(FALSE) {
# try to figure out errors
a <- lapply(datlist, function(df) unique(c(df$start.date[!is.na(df$start.date)], df$df$end.date[!is.na(df$end.date)])) )
b <- as.Date(unlist(lapply(a, as.character)))
b2 <- unlist(a)
look <- do.call(rbind.fill, datlist[1:26])
}
dat <- do.call(rbind.fill, datlist)
head(dat)
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
# all csv files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
# exclude files with "old" in their names
myfiles <- myfiles[-grep("old", myfiles)]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$folder <- "McGarry"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
if(FALSE) {
# try to figure out errors
a <- lapply(datlist, function(df) unique(c(df$start.date[!is.na(df$start.date)], df$df$end.date[!is.na(df$end.date)])) )
b <- as.Date(unlist(lapply(a, as.character)))
b2 <- unlist(a)
look <- do.call(rbind.fill, datlist[1:26])
}
dat <- do.call(rbind.fill, datlist)
head(dat)
summary(dat)
unique(dat$test.no.)
unique(dat$check.time)
unique(dat$discomfort)
unique(dat$dead)
# C:\JVA\Lamprey\ChemControl\Resistance\McGarry\ReadMcGarry.r
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/McGarry/"
# all csv files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
# exclude files with "old" in their names
myfiles <- myfiles[-grep("old", myfiles)]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=1)
names(dat) <- jvanames(names(dat))
dat$folder <- "McGarry"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
if(FALSE) {
# try to figure out errors
a <- lapply(datlist, function(df) unique(c(df$start.date[!is.na(df$start.date)], df$df$end.date[!is.na(df$end.date)])) )
b <- as.Date(unlist(lapply(a, as.character)))
b2 <- unlist(a)
look <- do.call(rbind.fill, datlist[1:26])
}
dat <- do.call(rbind.fill, datlist)
head(dat)
# convert to numeric
dat$dead <- as.numeric(dat$dead)
summary(dat)
McGarrydat <- dat
head(McGarrydat)
rm(mydir, myfiles, datlist, i, wb, mysheets, dat)
ls()
rm(mydir, myfiles, datlist, i, wb, mysheets, sheetlist, j, dat)
ls()
??accdb
mdbConnect <- odbcConnectAccess2007("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/Toxicity Data.accdb") 
??odbcConnectAccess2007
library(RODBC)
utils:::menuInstallPkgs()
library(RODBC)
mdbConnect <- odbcConnectAccess2007("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/Toxicity Data.accdb") 
testdb <- file.path("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/Toxicity Data.accdb")
channel <- odbcConnectAccess2007(testdb)
?odbcConnectAccess2007
?setwd
getwd()
orig <- getwd()
library(RODBC)
orig <- getwd()
setwd("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki")
testdb <- file.path("Toxicity Data.accdb")
channel <- odbcConnectAccess2007(testdb)
# Getting Access data into R
# http://sandymuspratt.blogspot.com/2013/01/getting-access-data-into-r.html
# I couldn't get it to work, so I just exported each table individually to an Excel file, and I will work with them instead
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/"
# all xlsx files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
# exclude files with "old" in their names
# myfiles <- myfiles[-grep("old", myfiles)]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=startr[i])
names(dat) <- jvanames(names(dat))
dat$folder <- "Nowicki"
dat$file <- myfiles[i]
datlist[[i]] <- dat
}
# Getting Access data into R
# http://sandymuspratt.blogspot.com/2013/01/getting-access-data-into-r.html
# I couldn't get it to work, so I just exported each table individually to an Excel file, and I will work with them instead
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/"
# all xlsx files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
# exclude files with "old" in their names
# myfiles <- myfiles[-grep("old", myfiles)]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
names(dat) <- jvanames(names(dat))
dat$folder <- "Nowicki"
dat$file <- myfiles[i]
datlist[[i]] <- dat
}
getwd()
orig
setwd(orig)
cleanup()
q()
# C:\JVA\Lamprey\ChemControl\Resistance\Nowicki\ReadNowicki.r
# Getting Access data into R
# http://sandymuspratt.blogspot.com/2013/01/getting-access-data-into-r.html
# I couldn't get it to work, so I just exported each table individually to an Excel file, and I will work with them instead
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/"
# all xlsx files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
# exclude files with "old" in their names
# myfiles <- myfiles[-grep("old", myfiles)]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
names(dat) <- jvanames(names(dat))
dat$folder <- "Nowicki"
dat$file <- myfiles[i]
datlist[[i]] <- dat
}
i
length(myfiles)
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
names(dat) <- jvanames(names(dat))
dat$folder <- "Nowicki"
dat$file <- myfiles[i]
datlist[[i]] <- dat
?loadWorkbook
rm(wb)
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
names(dat) <- jvanames(names(dat))
dat$folder <- "Nowicki"
dat$file <- myfiles[i]
datlist[[i]] <- dat
}
utils::recover
ls()
myfiles
# Getting Access data into R
# http://sandymuspratt.blogspot.com/2013/01/getting-access-data-into-r.html
# I couldn't get it to work, so I just exported each table individually to an Excel file, and I will work with them instead
# ALSO, I had to change the first column heading from ID to XID in the Main table to read it into R 
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/"
# all xlsx files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
# exclude files with "old" in their names
myfiles <- myfiles[-grep("old", myfiles)]
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
names(dat) <- jvanames(names(dat))
dat$folder <- "Nowicki"
dat$file <- myfiles[i]
datlist[[i]] <- dat
}
i
dim(dat)
head(dat)
myfiles
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
i <- 10
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
head(dat)
myfiles)
myfiles
myfiles
dput(myfiles)
# Getting Access data into R
# http://sandymuspratt.blogspot.com/2013/01/getting-access-data-into-r.html
# I couldn't get it to work, so I just exported each table individually to an Excel file, and I will work with them instead
# ALSO, I had to change the first column heading from ID to XID in the Main table to read it into R 
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/"
# xlsx files in directory
myfiles <- c("_Chemicals.xlsx", "_Formulations.xlsx", "_Labs.xlsx", "_Lakes.xlsx", "_Species.xlsx", "_Streams.xlsx", "_Test_Types.xlsx", "CheckTimes.xlsx")
mycsv <- "Main.csv"
datlist <- vector("list", length(myfiles)+1)
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
names(dat) <- jvanames(names(dat))
dat$folder <- "Nowicki"
dat$file <- myfiles[i]
datlist[[i]] <- dat
}
datlist[[length(myfiles)+1]] <- read.csv(paste0(mydir, mycsv), as.is=TRUE)
length(datlist)
lapply(datlist, head)
lapply(datlist, head)
lapply(datlist, head)
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/"
# xlsx files in directory
myfiles <- c("_Chemicals.xlsx", "_Formulations.xlsx", "_Labs.xlsx", "_Lakes.xlsx", "_Species.xlsx", "_Streams.xlsx", "_Test_Types.xlsx", "CheckTimes.xlsx")
mycsv <- "Main.csv"
datlist <- vector("list", length(myfiles)+1)
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
names(dat) <- jvanames(names(dat))
datlist[[i]] <- dat
}
datlist[[length(myfiles)+1]] <- read.csv(paste0(mydir, mycsv), as.is=TRUE)
lapply(datlist, head)
lapply(datlist, head, 3)
myfiles
jvanames(myfiles)
dput(jvanames(myfiles))
names(datlist) <- c("chemicals", "formulations", "labs", "lakes", "species", "streams", "testtypes", "checktimes", "main")
lapply(datlist, head, 3)
datlist$main$folder <- "Nowicki"
datlist$main$file <- "Toxicity Data.accdb"
lapply(datlist, head, 3)
ls()
# C:\JVA\Lamprey\ChemControl\Resistance\Nowicki\ReadNowicki.r
# Getting Access data into R
# http://sandymuspratt.blogspot.com/2013/01/getting-access-data-into-r.html
# I couldn't get it to work, so I just exported each table individually to an Excel file, and I will work with them instead
# ALSO, I had to save the Main table as a csv file to read it into R 
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/"
# xlsx files in directory
myfiles <- c("_Chemicals.xlsx", "_Formulations.xlsx", "_Labs.xlsx", "_Lakes.xlsx", "_Species.xlsx", "_Streams.xlsx", "_Test_Types.xlsx", "CheckTimes.xlsx")
mycsv <- "Main.csv"
datlist <- vector("list", length(myfiles)+1)
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
names(dat) <- jvanames(names(dat))
datlist[[i]] <- dat
}
datlist[[length(myfiles)+1]] <- read.csv(paste0(mydir, mycsv), as.is=TRUE)
names(datlist) <- c("chemicals", "formulations", "labs", "lakes", "species", "streams", "testtypes", "checktimes", "main")
datlist$main$folder <- "Nowicki"
datlist$main$file <- "Toxicity Data.accdb"
Nowdat <- datlist
rm(mydir, myfiles, datlist, dat)
lapply(Nowdat, head, 3)
i
myfiles[8]
cleanup()
# Getting Access data into R
# http://sandymuspratt.blogspot.com/2013/01/getting-access-data-into-r.html
# I couldn't get it to work, so I just exported each table individually to an Excel file, and I will work with them instead
# ALSO, I had to save the Main table as a csv file to read it into R 
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/"
# xlsx files in directory
myfiles <- c("_Chemicals.xlsx", "_Formulations.xlsx", "_Labs.xlsx", "_Lakes.xlsx", "_Species.xlsx", "_Streams.xlsx", "_Test_Types.xlsx", "CheckTimes.xlsx")
mycsv <- "Main.csv"
datlist <- vector("list", length(myfiles)+1)
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
names(dat) <- jvanames(names(dat))
datlist[[i]] <- dat
}
rm(wb)
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
names(dat) <- jvanames(names(dat))
datlist[[i]] <- dat
}
i
cleanup()
# Getting Access data into R
# http://sandymuspratt.blogspot.com/2013/01/getting-access-data-into-r.html
# I couldn't get it to work, so I just exported each table individually to an Excel file, and I will work with them instead
# ALSO, I had to save the Main table as a csv file to read it into R 
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/"
# xlsx files in directory
myfiles <- c("_Chemicals.xlsx", "_Formulations.xlsx", "_Labs.xlsx", "_Lakes.xlsx", "_Species.xlsx", "_Streams.xlsx", "_Test_Types.xlsx", "CheckTimes.xlsx")
datlist <- vector("list", length(myfiles)+1)
rm(wb)
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
names(dat) <- jvanames(names(dat))
datlist[[i]] <- dat
}
datlist[[length(myfiles)+1]] <- read.csv(paste0(mydir, "CheckTimes"), as.is=TRUE)
datlist[[length(myfiles)+2]] <- read.csv(paste0(mydir, "Main"), as.is=TRUE)
q()
# Getting Access data into R
# http://sandymuspratt.blogspot.com/2013/01/getting-access-data-into-r.html
# I couldn't get it to work, so I just exported each table individually to an Excel file, and I will work with them instead
# ALSO, I had to save the Main table as a csv file to read it into R 
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/"
# xlsx files in directory
myfiles <- c("_Chemicals.xlsx", "_Formulations.xlsx", "_Labs.xlsx", "_Lakes.xlsx", "_Species.xlsx", "_Streams.xlsx", "_Test_Types.xlsx", "CheckTimes.xlsx")
datlist <- vector("list", length(myfiles)+1)
rm(wb)
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
names(dat) <- jvanames(names(dat))
datlist[[i]] <- dat
}
datlist[[length(myfiles)+1]] <- read.csv(paste0(mydir, "CheckTimes"), as.is=TRUE)
datlist[[length(myfiles)+2]] <- read.csv(paste0(mydir, "Main"), as.is=TRUE)
datlist[[length(myfiles)+1]] <- read.csv(paste0(mydir, "CheckTimes.csv"), as.is=TRUE)
datlist[[length(myfiles)+2]] <- read.csv(paste0(mydir, "Main.csv"), as.is=TRUE)
names(datlist) <- c("chemicals", "formulations", "labs", "lakes", "species", "streams", "testtypes", "checktimes", "main")
datlist$main$folder <- "Nowicki"
datlist$main$file <- "Toxicity Data.accdb"
Nowdat <- datlist
rm(mydir, myfiles, datlist, dat)
lapply(Nowdat, head, 3)
length(datlist)
length(Nowdat)
cleanup()
q()
# C:\JVA\Lamprey\ChemControl\Resistance\Nowicki\ReadNowicki.r
# Getting Access data into R
# http://sandymuspratt.blogspot.com/2013/01/getting-access-data-into-r.html
# I couldn't get it to work, so I just exported each table individually to an Excel file, and I will work with them instead
# ALSO, I had to save the Main table as a csv file to read it into R 
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/"
# xlsx files in directory
myfiles <- c("_Chemicals.xlsx", "_Formulations.xlsx", "_Labs.xlsx", "_Lakes.xlsx", "_Species.xlsx", "_Streams.xlsx", "_Test_Types.xlsx")
datlist <- vector("list", length(myfiles)+2)
rm(wb)
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
names(dat) <- jvanames(names(dat))
datlist[[i]] <- dat
}
datlist[[length(myfiles)+1]] <- read.csv(paste0(mydir, "CheckTimes.csv"), as.is=TRUE)
datlist[[length(myfiles)+2]] <- read.csv(paste0(mydir, "Main.csv"), as.is=TRUE)
names(datlist) <- c("chemicals", "formulations", "labs", "lakes", "species", "streams", "testtypes", "checktimes", "main")
datlist$main$folder <- "Nowicki"
datlist$main$file <- "Toxicity Data.accdb"
Nowdat <- datlist
lapply(Nowdat, head, 3)
lapply(Nowdat, head, 3)
rm(mydir, myfiles, datlist, dat)
ls()
wb <- loadWorkbook("C:/JVA/Lamprey/ChemControl/Resistance/Pubs/TechReports.xlsx")
mysheets <- getSheets(wb)
datlist <- vector("list", length(mysheets))
startr <- c(9, 3, 4, 3)
for(i in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=startr[i])
names(dat) <- jvanames(names(dat))
dat$folder <- "Pubs"
dat$file <- "TechReports.xlsx"
dat$sheet <- mysheets[i]
datlist[[i]] <- dat
}
datlist
mysheets
startr
# C:\JVA\Lamprey\ChemControl\Resistance\Pubs\ReadPubs.r
wb <- loadWorkbook("C:/JVA/Lamprey/ChemControl/Resistance/Pubs/TechReports.xlsx")
mysheets <- getSheets(wb)
datlist <- vector("list", length(mysheets))
startr <- c(9, 3, 4, 3)
for(i in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[i], startRow=startr[i])
names(dat) <- jvanames(names(dat))
dat$folder <- "Pubs"
dat$file <- "TechReports.xlsx"
dat$sheet <- mysheets[i]
datlist[[i]] <- dat
}
datlist
ls()
Pubdat <- datlist
rm(wb, mysheets, datlist, startr, i, dat)
lapply(Pubdat, head, 3)
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
# all xlsx files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
myfiles
# C:\JVA\Lamprey\ChemControl\Resistance\Robertson\ReadRobertson.r
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
# all xlsx files in directory
myfiles <- list.files(mydir)[grep(".xlsx$", list.files(mydir))]
myfiles
dput(myfiles)
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
# all xlsx files in directory
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
datlist
dat <- do.call(rbind.fill, datlist)
summary(dat)
dat$start.date
dat$start.date[!is.na(dat$start.date)]
sort(dat$start.date[!is.na(dat$start.date)])
dat$start.date[!is.na(dat$start.date)]
a <- dat$start.date[!is.na(dat$start.date)]
a
stringin("/", a)
stringin
stringin("/", a, value=FALSE)
?grep
grep("/", a)
# C:\JVA\Lamprey\ChemControl\Resistance\Robertson\ReadRobertson.r
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
# all xlsx files in directory
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
a <- dat$start.date[!is.na(dat$start.date)]
a
dat
dat$start.date
cleanup()
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
dat <- do.call(rbind.fill, datlist)
a <- dat$start.date[!is.na(dat$start.date)]
a
dat[!is.na(dat$start.date)]
dat[!is.na(dat$start.date), ]
# C:\JVA\Lamprey\ChemControl\Resistance\Robertson\ReadRobertson.r
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
dat <- do.call(rbind.fill, datlist)
a <- dat$start.date[!is.na(dat$start.date)]
a
rm(wb)
q()
# C:\JVA\Lamprey\ChemControl\Resistance\Robertson\ReadRobertson.r
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
dat <- do.call(rbind.fill, datlist)
a <- dat$start.date[!is.na(dat$start.date)]
a
cleanup()
q()
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
dat <- do.call(rbind.fill, datlist)
a <- dat$start.date[!is.na(dat$start.date)]
a
i
ls()
rm(wb)
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
dat <- do.call(rbind.fill, datlist)
a <- dat$start.date[!is.na(dat$start.date)]
a
cleanup()
q()
mydir <- "C:/JVA/R/CharCal"
progname <- "CharCalendarYear.r"
inputfile <- "CharlotteCalendarYear.xls"
# source(paste(mydir, progname, sep="/"))
library(TeachingDemos)
library(XLConnect)
library(jpeg)
source(paste(mydir, progname, sep="/"))
source(paste(mydir, progname, sep="/"))
library(TeachingDemos)
library(XLConnect)
library(jpeg)
numdays <- function(mm, year) {
# modification of code on http://stackoverflow.com/questions/6243088/find-out-the-number-of-days-of-a-month-in-r
date <- as.Date(paste(year, mm, 15, sep="-"))
    m <- format(date, format="%m")
    while (format(date, format="%m") == m) {
        date <- date + 1
}
    return(as.integer(format(date - 1, format="%d")))
}
wb <- loadWorkbook(paste(mydir, inputfile, sep="/"), create=TRUE)
sheetz <- getSheets(wb)
monthstodo <- 1:12
### MONTHLY CALENDAR ###
quest <- readWorksheet(wb, sheet="Question")
if(is.numeric(quest$Answer)) {
monthstodo <- c(monthstodo, quest$Answer)
cat(paste0("\n\n\n\n\nYou have requested a monthly calendar for ", casefold(month.name[quest$Answer], TRUE), ".\n"))
} else {
cat("\n\nYou have not requested a monthly calendar.  Only a yearly calendar will be created.\n")
}
### YEARLY CALENDAR ###
time.summary <- vector("list", 12)
count <- 0
for(i in monthstodo) {
count <- count + 1
dat <- readWorksheet(wb, sheet=sheetz[i])
hhmmss <- strsplit(sapply(strsplit(as.character(dat$Start.time), " "), "[", 2), ":")
hh1 <- as.numeric(sapply(hhmmss, "[", 1))
mm1 <- sapply(hhmmss, "[", 2)
hh <- ifelse(hh1>12, hh1-12, hh1)
mm <- ifelse(mm1 == "00", "", paste0(":", mm1))
ap <- ifelse(hh1>=12, "p", "a")
dat$time.format <- paste0(hh, mm, ap)
dat$time.format[dat$time.format=="0a"] <- "12a"
dat$timex <- (hh1+as.numeric(mm1)/60)/24
dat$Timex <- dat$Start.day + dat$timex
col.dat <- readWorksheet(wb, sheet="Colors")
mm <- match(substr(sheetz[i], 1, 3), month.abb)
year <- as.numeric(substr(sheetz[i], 4, 7))
nd <- numdays(mm, year)
nr <- dim(dat)[1]
# midpoints of bars
dat$midtime <- c(dat$Timex[-1], nd+1) - (c(dat$Timex[-1], nd+1) - dat$Timex)/2
dat$midday <- floor(dat$midtime)
dat$midx <- dat$midtime - dat$midday
dhm1 <- dat$Start.day + hh1/24 + as.numeric(mm1)/60/24
dhm2 <- c(dhm1[-1], nd + 1)
days <- dhm2 - dhm1
# only add first 12 months to summary list
if(count < 12.5) {
time.summary[[i]] <- data.frame(year=year, month=mm, startday=dat$Start.day, person=dat$Person, duration=days)
}
attach(dat)
# create jpeg for first 12 months, and pdf for selected month
if(count < 12.5) {
jpeg(paste0(mydir, "/temp/", sheetz[i], ".jpg"), width=7.5, height=3*10/4, units="in", res=72, quality=100)
} else {
pdf(file=paste0(mydir, "/", sheetz[i], " Calendar as of ", Sys.Date(), ".pdf"), 
width=10, height=7.5, paper="USr")
}
setday <- cal(mm, year)
# create a data frame with the far left and right for every day of the month
pusr <- par("usr")
long <- expand.grid(Start.day=1:nd, timex=pusr[1:2]+c(-0.01, 0.01))
both <- merge(dat[, c("Person", "Start.day", "timex")], long, all=TRUE)
both <- merge(both, col.dat, all.x=TRUE)
both <- both[order(both$Start.day, both$timex), ]
colnow <- both$Color[1]
par(xpd=NA)
for(j in 1:nr) {
# only print times for selected month calendar ... and use bigger font for year calendar
if(count > 12.5) {
setday(Start.day[j])
text(timex[j], 0.7, time.format[j], srt=50, adj=0, cex=1.3)
setday(midday[j])
text(midx[j], 0.1, Person[j], font=2, cex=2)
} else {
setday(midday[j])
text(midx[j], 0.1, Person[j], font=2, cex=3)
}
}
for(j in 2:dim(both)[1]) {
setday(both$Start.day[j-1])
if(!is.na(both$Color[j-1])) colnow <- both$Color[j-1]
if(both$Start.day[j-1]==both$Start.day[j]) {
lines(c(both$timex[j-1], both$timex[j]), c(0.4, 0.4), lwd=30, col=colnow, lend="butt")
}
}
for(j in 1:nr) {
setday(Start.day[j])
lines(c(timex[j], timex[j]), c(0.2, 0.6), lend="butt", lwd=2)
}
detach(dat)
}
search()
detach(3)
detach(2)
search()
monthstodo
### YEARLY CALENDAR ###
time.summary <- vector("list", 12)
count <- 0
i
search()
source(paste(mydir, progname, sep="/"))
i
search()
detach()
ls()
count
setday
cal(mm, year)
setday <- cal(mm, year)
# create a data frame with the far left and right for every day of the month
pusr <- par("usr")
long <- expand.grid(Start.day=1:nd, timex=pusr[1:2]+c(-0.01, 0.01))
both <- merge(dat[, c("Person", "Start.day", "timex")], long, all=TRUE)
both <- merge(both, col.dat, all.x=TRUE)
both <- both[order(both$Start.day, both$timex), ]
colnow <- both$Color[1]
j
setday(midday[j])
text(midx[j], 0.1, Person[j], font=2, cex=3)
search()
attach(dat)
setday(midday[j])
text(midx[j], 0.1, Person[j], font=2, cex=3)
setday
?setday
midday[j])
midday[j]
midday
dat
search()
detach()
dat <- readWorksheet(wb, sheet=sheetz[i])
hhmmss <- strsplit(sapply(strsplit(as.character(dat$Start.time), " "), "[", 2), ":")
hh1 <- as.numeric(sapply(hhmmss, "[", 1))
mm1 <- sapply(hhmmss, "[", 2)
hh <- ifelse(hh1>12, hh1-12, hh1)
mm <- ifelse(mm1 == "00", "", paste0(":", mm1))
ap <- ifelse(hh1>=12, "p", "a")
dat$time.format <- paste0(hh, mm, ap)
dat$time.format[dat$time.format=="0a"] <- "12a"
dat$timex <- (hh1+as.numeric(mm1)/60)/24
dat$Timex <- dat$Start.day + dat$timex
col.dat <- readWorksheet(wb, sheet="Colors")
mm <- match(substr(sheetz[i], 1, 3), month.abb)
year <- as.numeric(substr(sheetz[i], 4, 7))
nd <- numdays(mm, year)
nr <- dim(dat)[1]
dat
i
i <- 3
dat <- readWorksheet(wb, sheet=sheetz[i])
hhmmss <- strsplit(sapply(strsplit(as.character(dat$Start.time), " "), "[", 2), ":")
hh1 <- as.numeric(sapply(hhmmss, "[", 1))
mm1 <- sapply(hhmmss, "[", 2)
hh <- ifelse(hh1>12, hh1-12, hh1)
mm <- ifelse(mm1 == "00", "", paste0(":", mm1))
ap <- ifelse(hh1>=12, "p", "a")
dat$time.format <- paste0(hh, mm, ap)
dat$time.format[dat$time.format=="0a"] <- "12a"
dat$timex <- (hh1+as.numeric(mm1)/60)/24
dat$Timex <- dat$Start.day + dat$timex
col.dat <- readWorksheet(wb, sheet="Colors")
mm <- match(substr(sheetz[i], 1, 3), month.abb)
year <- as.numeric(substr(sheetz[i], 4, 7))
nd <- numdays(mm, year)
nr <- dim(dat)[1]
dat
hhmmss
i <- 4
dat <- readWorksheet(wb, sheet=sheetz[i])
hhmmss <- strsplit(sapply(strsplit(as.character(dat$Start.time), " "), "[", 2), ":")
hh1 <- as.numeric(sapply(hhmmss, "[", 1))
mm1 <- sapply(hhmmss, "[", 2)
hh <- ifelse(hh1>12, hh1-12, hh1)
mm <- ifelse(mm1 == "00", "", paste0(":", mm1))
ap <- ifelse(hh1>=12, "p", "a")
dat$time.format <- paste0(hh, mm, ap)
dat$time.format[dat$time.format=="0a"] <- "12a"
dat$timex <- (hh1+as.numeric(mm1)/60)/24
dat$Timex <- dat$Start.day + dat$timex
hhmmss
as.character(dat$Start.time)
i <- 3
dat <- readWorksheet(wb, sheet=sheetz[i])
hhmmss <- strsplit(sapply(strsplit(as.character(dat$Start.time), " "), "[", 2), ":")
hhmmss
as.character(dat$Start.time)
search()
source(paste(mydir, progname, sep="/"))
i
search()
detach()
source(paste(mydir, progname, sep="/"))
cleanup()
q()
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
dat <- do.call(rbind.fill, datlist)
a <- dat$start.date[!is.na(dat$start.date)]
a
i
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
paste0(mydir, myfiles[i])
utils:::menuInstallPkgs()
library(xlsx)
mydata <- read.xlsx(paste0(mydir, myfiles[i]), 1)
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
dat <- do.call(rbind.fill, datlist)
a <- dat$start.date[!is.na(dat$start.date)]
a
search()
detach(2)
detach(2)
search()
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
dat <- do.call(rbind.fill, datlist)
a <- dat$start.date[!is.na(dat$start.date)]
a
lapply(datlist, head, 2)
lapply(datlist, head, 2)
stringin("dat", names(datlist[[1]]))
stringin("date", names(datlist[[1]]))
lapply(datlist, function(df) lapply(df[, c("start.date", "water.chem..date")], class)
)
datlist[[1]][, c("start.date", "water.chem..date")]
datlist[[1]][!is.na(datlist[[1]]$ph), c("start.date", "water.chem..date")]
length(datlist)
datlist[[1]][!is.na(datlist[[1]]$ph), c("start.date", "water.chem..date")]
datlist[[2]][!is.na(datlist[[2]]$ph), c("start.date", "water.chem..date")]
datlist[[3]][!is.na(datlist[[3]]$ph), c("start.date", "water.chem..date")]
datlist[[4]][!is.na(datlist[[4]]$ph), c("start.date", "water.chem..date")]
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
dat <- do.call(rbind.fill, datlist)
a <- dat$start.date[!is.na(dat$start.date)]
a
datlist[[1]][!is.na(datlist[[1]]$ph), c("start.date", "water.chem..date")]
datlist[[2]][!is.na(datlist[[2]]$ph), c("start.date", "water.chem..date")]
datlist[[3]][!is.na(datlist[[3]]$ph), c("start.date", "water.chem..date")]
datlist[[4]][!is.na(datlist[[4]]$ph), c("start.date", "water.chem..date")]
a <- datlist[[3]][!is.na(datlist[[3]]$ph), c("start.date", "water.chem..date")]
a
as.POSIXlt(a[, 1])
a[, 1]
stringin("-", a[, 1])
stringin("-", a[, 2])
?cheat
x <- a[, 2]
# replace all punctuation marks with hyphens
gsub("[[:punct:]]", "-", x)
x
x <- a[, 2]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x)
# break up string into three parts
splitstr(x2, "-")
strsplit
strsplit(x2, "-")
# break up string into three parts
x3 <- strsplit(x2, "-")
nc3 <- lapply(x3, nchar)
nc3
# length of 3rd string
nc3 <- lapply(x3, function(y) nchar(y)[3])
nc3
# if last string is length 4, move it to first
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[3, 1, 2] else y
}
)
x3
x3[[1]]
y <- x3[[1]]
if(nchar(y)[3] > 3) y[3, 1, 2] else y
nchar(y)[3]
y[3, 1, 2]
# if last string is length 4, move it to first
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
nc3
a <- datlist[[3]][!is.na(datlist[[3]]$ph), c("start.date", "water.chem..date")]
a
x <- a[, 2]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
lapply(nc3, paste, collapse="-")
x2
# if 3rd string is length 4, move it to 1st
nc3 <- sapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
nc3
a <- datlist[[3]][!is.na(datlist[[3]]$ph), c("start.date", "water.chem..date")]
a
x <- a[, 2]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
sapply(nc3, paste, collapse="-")
# combine three parts again
x4 <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x4)
datlist[[1]][!is.na(datlist[[1]]$ph), c("start.date", "water.chem..date")]
datlist[[2]][!is.na(datlist[[2]]$ph), c("start.date", "water.chem..date")]
datlist[[3]][!is.na(datlist[[3]]$ph), c("start.date", "water.chem..date")]
datlist[[4]][!is.na(datlist[[4]]$ph), c("start.date", "water.chem..date")]
makedate(datlist[[3]]$start.date)
makedate(datlist[[3]]$water.chem..date)
makedate(datlist[[4]]$start.date)
makedate(datlist[[4]]$water.chem..date)
makedate <- function(x) {
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x4 <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x4)
}
makedate(datlist[[3]]$start.date)
makedate(datlist[[3]]$water.chem..date)
makedate(datlist[[4]]$start.date)
makedate(datlist[[4]]$water.chem..date)
datlist[[3]]$start.date
is.na(datlist[[3]]$start.date)
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x4 <- sapply(nc3, paste, collapse="-")
x[sel] <- as.POSIXlt(x4)
x
}
makedate(datlist[[3]]$start.date)
makedate(datlist[[3]]$water.chem..date)
makedate(datlist[[4]]$start.date)
makedate(datlist[[4]]$water.chem..date)
x <- datlist[[3]]$start.date
x
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x4 <- sapply(nc3, paste, collapse="-")
x
x4
x <- datlist[[3]]$start.date
x
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
sapply(nc3, paste, collapse="-")
x[sel] <- sapply(nc3, paste, collapse="-")
x
as.POSIXlt(x)
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
makedate(datlist[[3]]$start.date)
makedate(datlist[[3]]$water.chem..date)
makedate(datlist[[4]]$start.date)
makedate(datlist[[4]]$water.chem..date)
datlist[[3]]$start.date <- makedate(datlist[[3]]$start.date)
datlist[[3]]$water.chem..date <- makedate(datlist[[3]]$water.chem..date)
datlist[[4]]$start.date <- makedate(datlist[[4]]$start.date)
datlist[[4]]$water.chem..date <- makedate(datlist[[4]]$water.chem..date)
dat <- do.call(rbind.fill, datlist)
search()
# C:\JVA\Lamprey\ChemControl\Resistance\Robertson\ReadRobertson.r
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
datlist[[3]]$start.date <- makedate(datlist[[3]]$start.date)
datlist[[3]]$water.chem..date <- makedate(datlist[[3]]$water.chem..date)
datlist[[4]]$start.date <- makedate(datlist[[4]]$start.date)
datlist[[4]]$water.chem..date <- makedate(datlist[[4]]$water.chem..date)
dat <- do.call(rbind.fill, datlist)
a <- dat$start.date[!is.na(dat$start.date)]
a
lapply(dat, class)
head(dat)
summary(dat)
dat[, c("conc.", "ill", "dead")]
is.na(dat$conc.)
test1 <- is.na(dat$conc.)
test2 <- is.na(as.numeric(dat$conc.))
dat[!test1 & test2, ]
x <- dat$ill
test1 <- is.na(x)
test2 <- is.na(as.numeric(x))
dat[!test1 & test2, ]
x <- dat$dead
test1 <- is.na(x)
test2 <- is.na(as.numeric(x))
dat[!test1 & test2, ]
# C:\JVA\Lamprey\ChemControl\Resistance\Robertson\ReadRobertson.r
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
datlist[[3]]$start.date <- makedate(datlist[[3]]$start.date)
datlist[[3]]$water.chem..date <- makedate(datlist[[3]]$water.chem..date)
datlist[[4]]$start.date <- makedate(datlist[[4]]$start.date)
datlist[[4]]$water.chem..date <- makedate(datlist[[4]]$water.chem..date)
dat <- do.call(rbind.fill, datlist)
summary(dat)
# C:\JVA\Lamprey\ChemControl\Resistance\Robertson\ReadRobertson.r
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
datlist[[3]]$start.date <- makedate(datlist[[3]]$start.date)
datlist[[3]]$water.chem..date <- makedate(datlist[[3]]$water.chem..date)
datlist[[4]]$start.date <- makedate(datlist[[4]]$start.date)
datlist[[4]]$water.chem..date <- makedate(datlist[[4]]$water.chem..date)
dat <- do.call(rbind.fill, datlist)
summary(dat)
cleanup()
# C:\JVA\Lamprey\ChemControl\Resistance\Robertson\ReadRobertson.r
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Robertson/"
myfiles <- c("2009_Toxdata.xlsx", "2010_toxdata.xlsx", "2011_toxdata.xlsx", "2013_toxdata.xlsx")
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Robertson"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
datlist[[3]]$start.date <- makedate(datlist[[3]]$start.date)
datlist[[3]]$water.chem..date <- makedate(datlist[[3]]$water.chem..date)
datlist[[4]]$start.date <- makedate(datlist[[4]]$start.date)
datlist[[4]]$water.chem..date <- makedate(datlist[[4]]$water.chem..date)
dat <- do.call(rbind.fill, datlist)
Robdat <- dat
head(Robdat)
rm(mydir, myfiles, datlist, i, wb, mysheets, sheetlist, j, dat)
ls()
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
myfiles <- "Historical TFM Testing.xlsx"
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
lapply(datlist, head)
length(datlist)
i
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
j
j <- 1
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
j <- 1
dat <- readWorksheet(wb, sheet=getSheets(wb)[j], startRow=3)
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
lapply(sheetlist, head)
mysheets
j <- 1
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
j <- 2
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
lapply(sheetlist, head)
datlist[[i]] <- do.call(rbind.fill, sheetlist)
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
myfiles <- "Historical TFM Testing.xlsx"
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
cleanup()
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
myfiles <- "Historical TFM Testing.xlsx"
datlist <- vector("list", length(myfiles))
i <- 1
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
cleanup()
q()
i <- 1
library(plyr)
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
myfiles <- "Historical TFM Testing.xlsx"
datlist <- vector("list", length(myfiles))
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
stringin("date", names(sheetlist[[1]]))
class(dat$start.date)
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)=="character") dat$start.date <- makedate(dat$start.date)
if(class(dat$end.date)=="character") dat$end.date <- makedate(dat$end.date)
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)=="character") dat$start.date <- makedate(dat$start.date)
if(class(dat$end.date)=="character") dat$end.date <- makedate(dat$end.date)
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
j <- 1
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)=="character") dat$start.date <- makedate(dat$start.date)
if(class(dat$end.date)=="character") dat$end.date <- makedate(dat$end.date)
sheetlist[[j]] <- dat
class(dat$start.date)=="character"
class(dat$start.date)
class(dat$start.date)[1]=="character"
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(dat$start.date)
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(dat$end.date)
sheetlist[[j]] <- dat
j <- 2
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(dat$start.date)
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(dat$end.date)
sheetlist[[j]] <- dat
class(dat$start.date)[1]
dat$start.date
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(substring(dat$start.date, 1, 10))
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(substring(dat$start.date, 1, 10))
sheetlist[[j]] <- dat
datlist[[i]] <- do.call(rbind.fill, sheetlist)
lapply(sheetlist, head)
lapply(sheetlist, head)
lapply(sheetlist, class)
lapply(sheetlist, lapply, class)
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(substring(dat$start.date, 1, 10))
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(substring(dat$start.date, 1, 10))
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
lapply(sheetlist[[1]], class)
lapply(sheetlist[[2]], class)
head(sheetlist[[1]])
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(substring(dat$start.date, 1, 10))
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(substring(dat$start.date, 1, 10))
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
head(sheetlist[[1]])
head(sheetlist[[2]])
unique(sheetlist[[2]]$start.time)
cleanup()
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
library(plyr)
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
myfiles <- "Historical TFM Testing.xlsx"
datlist <- vector("list", length(myfiles))
i <- 1
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(substring(dat$start.date, 1, 10))
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(substring(dat$start.date, 1, 10))
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
lapply(sheetlist, head)
lapply(sheetlist[[1]][, 1:9], class)
lapply(sheetlist[[2]][, 1:9], class)
lapply(sheetlist[[1]][, 1:10], class)
lapply(sheetlist[[2]][, 1:10], class)
unique(sheetlist[[2]]$start.time)
unique(sheetlist[[2]]$end.time)
rm(wb)
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(substring(dat$start.date, 1, 10))
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(substring(dat$start.date, 1, 10))
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
length(datlist)
datlist
rm(wb)
library(plyr)
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
myfiles <- "Historical TFM Testing.xlsx"
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(substring(dat$start.date, 1, 10))
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(substring(dat$start.date, 1, 10))
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
Karendat <- datlist[[1]]
head(Karendat)
rm(mydir, myfiles, datlist, i, wb, mysheets, sheetlist, j, makedate, dat)
ls()
cleanup()
q()
# read in all the raw data
source("C:/JVA/Lamprey/ChemControl/Resistance/McGarry/ReadMcGarry.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/ReadNowicki.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
ls()
q()
# C:\JVA\Lamprey\ChemControl\Resistance\Analysis\Resist.r
# read in all the raw data
source("C:/JVA/Lamprey/ChemControl/Resistance/McGarry/ReadMcGarry.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/ReadNowicki.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
# use Nowdat as comparison
lapply(Nowdat, head, 3)
head(McGarrydat)
head(Karendat)
head(Robdat)
# use Nowdat as comparison
lapply(Nowdat, head, 3)
head(McGarrydat)
head(Karendat)
head(Robdat)
# use Nowdat as comparison
lapply(Nowdat, head, 2)
head(McGarrydat, 2)
head(Karendatm, 2)
head(Robdat, 2)
# use Nowdat as comparison
lapply(Nowdat, head, 2)
head(McGarrydat, 2)
head(Karendat, 2)
head(Robdat, 2)
n <- names(Nowdat$main)
m <- names(McGarrydat)
k <- names(Karendat)
r <- names(Robdat)
n
unique(c(m, k, r))
sort(n)
sort(unique(c(m, k, r)))
dput(sort(n))
mnames <- matrix(
c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comments",
"conc.", "Concentration",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested_Species_1", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species_1", 
"source.of.animals", "Test_Species_1_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit"
), ncol=2, byrow=TRUE)
mnames
match(n, mnames[, 2])
n[is.na(match(n, mnames[, 2]))]
m[is.na(match(m, mnames[, 1]))]
a <- unique(c(m, k, r))
a[is.na(match(a, mnames[, 1]))]
c <- names(Nowdat$checktimes)
c
sort(a[is.na(match(a, mnames[, 1]))])
sort(c)
head(Nowdat$checktime)
dput(sort(c))
sort(a[is.na(match(a, mnames[, 1]))])
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Karendat)
r <- names(Robdat)
a <- unique(c(m, k, r))
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comments",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested_Species_1", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species_1", 
"source.of.animals", "Test_Species_1_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit"
), ncol=2, byrow=TRUE)
n[is.na(match(n, mainnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1]))])
sort(c)
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Karendat)
r <- names(Robdat)
a <- unique(c(m, k, r))
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comments",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested_Species_1", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species_1", 
"source.of.animals", "Test_Species_1_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit"
), ncol=2, byrow=TRUE)
subnames <- matrix(c(
"check.time", "Check_Time", 
"conc.", "concentration_t", 
"dead", "Test_Species_1_Dead", 
"ill", "Test_Species_1_Sick"
), ncol=2, byrow=TRUE)
n[is.na(match(n, mainnames[, 2]))]
c[is.na(match(c, subnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
m
k
r
head(Karendat)
summary(Karendat$col28)
unique(Karendat$col28)
sort(k)
table(Karendat$col28=="")
Karendat[Karendat$col28=="", ]
Karendat[Karendat$col28!="", ]
Karendat[!is.na(Karendat$col28), ]
unique(Karendat$col28)
# C:\JVA\Lamprey\ChemControl\Resistance\Slaght\ReadSlaght.r
library(plyr)
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
myfiles <- "Historical TFM Testing.xlsx"
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(substring(dat$start.date, 1, 10))
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(substring(dat$start.date, 1, 10))
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
Karendat <- datlist[[1]]
head(Karendat)
rm(mydir, myfiles, datlist, i, wb, mysheets, sheetlist, j, makedate, dat)
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Karendat)
r <- names(Robdat)
a <- unique(c(m, k, r))
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comments",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested_Species_1", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species_1", 
"source.of.animals", "Test_Species_1_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit"
), ncol=2, byrow=TRUE)
subnames <- matrix(c(
"check.time", "Check_Time", 
"conc.", "concentration_t", 
"dead", "Test_Species_1_Dead", 
"ill", "Test_Species_1_Sick"
), ncol=2, byrow=TRUE)
n[is.na(match(n, mainnames[, 2]))]
c[is.na(match(c, subnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
look <- function(varname) {
print(unique(McGarrydat[, varname]))
print(unique(Karendat[, varname]))
print(unique(Robdat[, varname]))
invisible()
}
look("acc..no.")
look("aerated.")
look <- function(varname) {
if(varname in m) print(unique(McGarrydat[, varname]))
if(varname in k) print(unique(Karendat[, varname]))
if(varname in r) print(unique(Robdat[, varname]))
invisible()
}
look("aerated.")
look <- function(varname) {
if(varname %in% m) print(unique(McGarrydat[, varname]))
if(varname %in% k) print(unique(Karendat[, varname]))
if(varname %in% r) print(unique(Robdat[, varname]))
invisible()
}
look("aerated.")
look("cond.")
look("water.chem..date")
look("alk..unit")
look("conc..unit")
look("cond..unit")
look("container")
look("cumulative..dead")
m
k
r
sort(m)
sort(k)
sort(r)
Slaghtdat <- Karendat
Slaghtdat
tabattach(Slaghtdat)
attach(Slaghtdat)
table(species)
unique(species)
table(is.na(species))
sum(table(species))
unique(cumulative..dead)
summary(cumulative..dead)
newdead <- cumulative..dead
newdead[!is.na(species) & is.na(cumulative..dead)] <- 0
newdead <- fill(newdead)
unique(newdead)
table(newdead)
summary(newdead)
Slaghtdat[is.na(newdead), ]
search()
detach()
library(plyr)
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
myfiles <- "Historical TFM Testing.xlsx"
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(substring(dat$start.date, 1, 10))
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(substring(dat$start.date, 1, 10))
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
Slaghtdat <- datlist[[1]]
# the cumulative number of dead was recorded only when there was a new death (same for ill)
# so, a series of numbers like 0, 1, 0, 2, 0 represents new dead 0, 1, 0, 1, 0, and true cumulative dead 0, 1, 1, 2, 2
# to make these numbers conform to the number of dead recorded in other data sheets, they will be converted to "new dead"
# first, if the first row of so-called cumdead is missing, set the number of new dead to zero
attach(Slaghtdat)
newdead <- cumulative..dead
newdead[!is.na(species) & is.na(cumulative..dead)] <- 0
newdead <- fill(newdead)
summary(newdead)
cumdead <- cumulative..dead
cumdead[!is.na(species) & is.na(cumulative..dead)] <- 0
cumdead <- fill(cumdead)
cumdeadb4 <- c(NA, cumdead[-length(cumdead)])
newdead <- ifelse(!is.na(species), cumdead, cumdead-cumdeadb4)
dput(names(Slaghtdat))
cbind(Slaghtdat[, c("species", "total.no..tested", "check.time", "cumulative..dead")], cumdead, newdead)
convert
k
r
m
k
sort(k)
# C:\JVA\Lamprey\ChemControl\Resistance\Slaght\ReadSlaght.r
library(plyr)
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
myfiles <- "Historical TFM Testing.xlsx"
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(substring(dat$start.date, 1, 10))
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(substring(dat$start.date, 1, 10))
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
Slaghtdat <- datlist[[1]]
# the cumulative number of dead was recorded only when there was a new death (same for ill)
# so, a series of numbers like 0, 1, 0, 2, 0 represents new dead 0, 1, 0, 1, 0, and true cumulative dead 0, 1, 1, 2, 2
# to make these numbers conform to the number of dead recorded in other data sheets, they will be converted to "new dead"
convert <- function(cumsortof) {
# convert so-called cumulative dead/ill numbers to real new dead/ill numbers
cumdead <- cumsortof
# change all zeroes to missings
cumdead[!is.na(cumdead) & cumdead < 0.5] <- NA
# first, if the first row of so-called cumdead is missing, set the number of new dead to zero
cumdead[!is.na(species) & is.na(cumsortof)] <- 0
# then, fill in the remaining missing values with the previous value
cumdead <- fill(cumdead)
# then calculate the new dead as the difference along the cumdead
cumdeadb4 <- c(NA, cumdead[-length(cumdead)])
newdead <- ifelse(!is.na(species), cumdead, cumdead-cumdeadb4)
newdead
}
Slaghtdat$dead <- convert(Slaghtdat$cumulative..dead)
Slaghtdat$ill <- convert(Slaghtdat$cumulative..ill)
head(Slaghtdat)
Slaghtdat <- datlist[[1]]
# the cumulative number of dead was recorded only when there was a new death (same for ill)
# so, a series of numbers like 0, 1, 0, 2, 0 represents new dead 0, 1, 0, 1, 0, and true cumulative dead 0, 1, 1, 2, 2
# to make these numbers conform to the number of dead recorded in other data sheets, they will be converted to "new dead"
convert <- function(cumsortof) {
# convert so-called cumulative dead/ill numbers to real new dead/ill numbers
cumdead <- cumsortof
# change all zeroes to missings
cumdead[!is.na(cumdead) & cumdead < 0.5] <- NA
# first, if the first row of so-called cumdead is missing, set the number of new dead to zero
cumdead[!is.na(species) & is.na(cumsortof)] <- 0
# then, fill in the remaining missing values with the previous value
cumdead <- fill(cumdead)
# then calculate the new dead as the difference along the cumdead
cumdeadb4 <- c(NA, cumdead[-length(cumdead)])
newdead <- ifelse(!is.na(species), cumdead, cumdead-cumdeadb4)
newdead
}
Slaghtdat$ill <- convert(Slaghtdat$cumulative..ill)
Slaghtdat$dead <- convert(Slaghtdat$cumulative..dead)
head(Slaghtdat)
rm(mydir, myfiles, datlist, i, wb, mysheets, sheetlist, j, makedate, dat)
ls()
look("discomfort")
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
dput(sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))]))
head(McGarrydat, 2)
table(McGarrydat$check.time)
summary(McGarrydat$check.time)
McGarrydat[is.na(McGarrdat$check.time), ]
McGarrydat[is.na(McGarrydat$check.time), ]
a <- McGarrydat[is.na(McGarrydat$check.time), ]
summary(a)
dim9a)
dim(a)
McGarrydat[is.na(McGarrydat$check.time) & !is.na(McGarrydat$dead), ]
source("C:/JVA/Lamprey/ChemControl/Resistance/McGarry/ReadMcGarry.r")
McGarrydat[is.na(McGarrydat$check.time) & !is.na(McGarrydat$dead), ]
McGarrydat
dim(McGarrydat)
# a blank line was left between many entries
McGarrydat <- McGarrydat[!is.na(McGarrydat$check.time), ]
dim(McGarrydat)
summary(McGarrydat)
newid <- cumsum(!is.na(McGarrydat$start.date))
newid
summary(newid)
McGarrydat$ID <- cumsum(!is.na(McGarrydat$start.date))
summary(Slaghtdat)
summary(Robdat)
cleanup()
q()
# read in all the raw data
source("C:/JVA/Lamprey/ChemControl/Resistance/McGarry/ReadMcGarry.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/ReadNowicki.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
# use Nowdat as comparison
lapply(Nowdat, head, 2)
head(McGarrydat, 2)
head(Slaghtdat, 2)
head(Robdat, 2)
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Slaghtdat)
r <- names(Robdat)
a <- unique(c(m, k, r))
summary(Nowdat$main)
summary(Nowdat$main)
Nowdat$main
summary(Nowdat$checktimes)
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
head(Slaghtdat)
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
# C:\JVA\Lamprey\ChemControl\Resistance\Slaght\ReadSlaght.r
library(plyr)
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
myfiles <- "Historical TFM Testing.xlsx"
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$folder <- "Slaght"
dat$file <- myfiles[i]
dat$sheet <- mysheets[j]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(substring(dat$start.date, 1, 10))
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(substring(dat$start.date, 1, 10))
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
Slaghtdat <- datlist[[1]]
# the cumulative number of dead was recorded only when there was a new death (same for ill)
# so, a series of numbers like 0, 1, 0, 2, 0 represents new dead 0, 1, 0, 1, 0, and true cumulative dead 0, 1, 1, 2, 2
# to make these numbers conform to the number of dead recorded in other data sheets, they will be converted to "new dead"
convert <- function(cumsortof, firstrow) {
# convert so-called cumulative dead/ill numbers to real new dead/ill numbers
cumdead <- cumsortof
# change all zeroes to missings
cumdead[!is.na(cumdead) & cumdead < 0.5] <- NA
# first, if the first row of so-called cumdead is missing, set the number of new dead to zero
cumdead[!is.na(firstrow) & is.na(cumsortof)] <- 0
# then, fill in the remaining missing values with the previous value
cumdead <- fill(cumdead)
# then calculate the new dead as the difference along the cumdead
cumdeadb4 <- c(NA, cumdead[-length(cumdead)])
newdead <- ifelse(!is.na(firstrow), cumdead, cumdead-cumdeadb4)
newdead
}
Slaghtdat$ill <- convert(Slaghtdat$cumulative..ill, Slaghtdat$species)
Slaghtdat$dead <- convert(Slaghtdat$cumulative..dead, Slaghtdat$species)
Slaghtdat$ID <- cumsum(!is.na(Slaghtdat$start.date))
head(Slaghtdat)
rm(mydir, myfiles, datlist, i, wb, mysheets, sheetlist, j, makedate, dat, convert)
if(FALSE) {
x <- dat$dead
test1 <- is.na(x)
test2 <- is.na(as.numeric(x))
dat[!test1 & test2, ]
# try to figure out errors
a <- lapply(datlist, function(df) unique(c(df$start.date[!is.na(df$start.date)], df$df$end.date[!is.na(df$end.date)])) )
b <- as.Date(unlist(lapply(a, as.character)))
b2 <- unlist(a)
look <- do.call(rbind.fill, datlist[1:26])
# convert to numeric
dat$dead <- as.numeric(dat$dead)
}
source("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
head(McGarrydat)
tapply(McGarrydat$check.time, McGarrydat$ID, max)
# convert end.date and end.time to Duration
mmax <- tapply(McGarrydat$check.time, McGarrydat$ID, max)
indx <- tapply(McGarrydat$check.time, McGarrydat$ID)
McGarrydat$Duration <- mmax[indx]
head(Slaght)
head(Slaghtdat)
a <- Slaghtdat$start.date
b <- Slaghtdat$start.time
c <- Slaghtdat$end.date
d <- Slaghtdat$end.time
as.numeric(a)
as.numeric(b)
as.numeric(c)
as.numeric(d)
as.numeric(b) - as.numeric(a)
(as.numeric(b) - as.numeric(a))/60/60/24
b
as.numeric(c) - as.numeric(a)
as.numeric(c) - as.numeric(a)/60/60/24
(as.numeric(c) - as.numeric(a))/60/60/24
as.numeric(d) - as.numeric(b)
(as.numeric(d) - as.numeric(b)) / 60/60/24
d
b
d[1:100]
b[1:100]
(as.numeric(d) - as.numeric(b))
(as.numeric(b) - as.numeric(d))
14400/60/60
(as.numeric(c) + as.numeric(d) - (as.numeric(a) + as.numeric(b)))/60/60
Slaghtdat$Duration <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
Slaghtdat
head(Robdat)
mmax <- tapply(Robdat$check.time, Robdat$ID, max)
indx <- tapply(Robdat$check.time, Robdat$ID)
maxtime <- mmax[indx]
(as.numeric(maxtime) - as.numeric(Robdat$start.time))/60/60
maxtime
mmax <- tapply(Robdat$check.time, Robdat$ID, max, na.rm=TRUE)
indx <- tapply(Robdat$check.time, Robdat$ID)
maxtime <- mmax[indx]
(as.numeric(maxtime) - as.numeric(Robdat$start.time))/60/60
# calculate Duration
mmax <- tapply(McGarrydat$check.time, McGarrydat$ID, max)
indx <- tapply(McGarrydat$check.time, McGarrydat$ID)
McGarrydat$Duration <- mmax[indx]
Slaghtdat$Duration <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
mmax <- tapply(Robdat$check.time, Robdat$ID, max, na.rm=TRUE)
indx <- tapply(Robdat$check.time, Robdat$ID)
maxtime <- mmax[indx]
Robdat$Duration <- (as.numeric(maxtime) - as.numeric(Robdat$start.time))/60/60
# added to main
# c("acc..no.", "aerated.", "cond.", "cond..unit", "water.chem..date", "file", "folder", "sheet", "water")
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comment_ID",
"Comments", "Comment_ID",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested_Species_1", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species_1", 
"source.of.animals", "Test_Species_1_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit"
"acc..no.", "Acc_No",
"aerated.", "Aerated", 
"cond.", "Conductivity",
"cond..unit", "Conductivity_Unit",
"water.chem..date", "Water_Chem_Date",
"folder", "Folder", 
"file", "File",
"sheet", "Sheet",
"water", "Water_Name"
), ncol=2, byrow=TRUE)
# added to main
# c("acc..no.", "aerated.", "cond.", "cond..unit", "water.chem..date", "file", "folder", "sheet", "water")
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comment_ID",
"Comments", "Comment_ID",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested_Species_1", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species_1", 
"source.of.animals", "Test_Species_1_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit",
"acc..no.", "Acc_No",
"aerated.", "Aerated", 
"cond.", "Conductivity",
"cond..unit", "Conductivity_Unit",
"water.chem..date", "Water_Chem_Date",
"folder", "Folder", 
"file", "File",
"sheet", "Sheet",
"water", "Water_Name"
), ncol=2, byrow=TRUE)
mainnames
# added to sub
# "specific.comment..regarding.just.the.corresponding.line.of.data."
subnames <- matrix(c(
"check.time", "Check_Time", 
"conc.", "concentration_t", 
"dead", "Test_Species_1_Dead", 
"ill", "Test_Species_1_Sick",
"specific.comment..regarding.just.the.corresponding.line.of.data.", "Comment_Tank"
), ncol=2, byrow=TRUE)
n[is.na(match(n, mainnames[, 2]))]
c[is.na(match(c, subnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Slaghtdat)
r <- names(Robdat)
a <- unique(c(m, k, r))
n[is.na(match(n, mainnames[, 2]))]
c[is.na(match(c, subnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
cleanup()
search()
# read in all the raw data
source("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/ReadNowicki.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/McGarry/ReadMcGarry.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
# use Nowdat as comparison
lapply(Nowdat, head, 2)
head(McGarrydat, 2)
head(Slaghtdat, 2)
head(Robdat, 2)
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Slaghtdat)
r <- names(Robdat)
a <- unique(c(m, k, r))
# added to main
# c("acc..no.", "aerated.", "cond.", "cond..unit", "water.chem..date", "file", "folder", "sheet", "water")
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comment_ID",
"Comments", "Comment_ID",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested_Species_1", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species_1", 
"source.of.animals", "Test_Species_1_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit",
"acc..no.", "Acc_No",
"aerated.", "Aerated", 
"cond.", "Conductivity",
"cond..unit", "Conductivity_Unit",
"water.chem..date", "Water_Chem_Date",
"water", "Water_Name"
), ncol=2, byrow=TRUE)
# added to sub
# "specific.comment..regarding.just.the.corresponding.line.of.data."
subnames <- matrix(c(
"check.time", "Check_Time", 
"conc.", "concentration_t", 
"dead", "Test_Species_1_Dead", 
"ill", "Test_Species_1_Sick",
"specific.comment..regarding.just.the.corresponding.line.of.data.", "Comment_Tank"
), ncol=2, byrow=TRUE)
n[is.na(match(n, mainnames[, 2]))]
c[is.na(match(c, subnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
source("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/ReadNowicki.r")
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Slaghtdat)
r <- names(Robdat)
a <- unique(c(m, k, r))
# added to main
# c("acc..no.", "aerated.", "cond.", "cond..unit", "water.chem..date", "file", "folder", "sheet", "water")
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comment_ID",
"Comments", "Comment_ID",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested_Species_1", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species_1", 
"source.of.animals", "Test_Species_1_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit",
"acc..no.", "Acc_No",
"aerated.", "Aerated", 
"cond.", "Conductivity",
"cond..unit", "Conductivity_Unit",
"water.chem..date", "Water_Chem_Date",
"water", "Water_Name"
), ncol=2, byrow=TRUE)
# added to sub
# "specific.comment..regarding.just.the.corresponding.line.of.data."
subnames <- matrix(c(
"check.time", "Check_Time", 
"conc.", "concentration_t", 
"dead", "Test_Species_1_Dead", 
"ill", "Test_Species_1_Sick",
"specific.comment..regarding.just.the.corresponding.line.of.data.", "Comment_Tank"
), ncol=2, byrow=TRUE)
n[is.na(match(n, mainnames[, 2]))]
c[is.na(match(c, subnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
c
# split up Nowicki data by species
Main1 <- Nowdat$main
Main1 <- Main1[, !(names(Main1) %in% c("Test_Species_2", "Number_Tested_Species_2", "Test_Species_2_Source"))]
Sub1 <- Nowdat$checktimes
Sub1 <- Sub1[, !(names(Sub1) %in% c("Test_Species_2_Sick", "Test_Species_2_Dead"))]
Sub1$Species <- Main1$Test_Species_1[match(Sub1$ID, Main1$ID)]
Sub1$Number_Tested <- Number_Tested_Species_1[match(Sub1$ID, Main1$ID)]
Sub1$Test_Source <- Main1$Test_Species_1_Source[match(Sub1$ID, Main1$ID)]
# split up Nowicki data by species
Main1 <- Nowdat$main
Main1 <- Main1[, !(names(Main1) %in% c("Test_Species_2", "Number_Tested_Species_2", "Test_Species_2_Source"))]
Sub1 <- Nowdat$checktimes
Sub1 <- Sub1[, !(names(Sub1) %in% c("Test_Species_2_Sick", "Test_Species_2_Dead"))]
Sub1$Species <- Main1$Test_Species_1[match(Sub1$ID, Main1$ID)]
Sub1$Number_Tested <- Main1$Number_Tested_Species_1[match(Sub1$ID, Main1$ID)]
Sub1$Test_Source <- Main1$Test_Species_1_Source[match(Sub1$ID, Main1$ID)]
head(Main1)
head(Sub1)
# split up Nowicki data by species
Main1 <- Nowdat$main
Main1 <- Main1[, !(names(Main1) %in% c("Test_Species_2", "Number_Tested_Species_2", "Test_Species_2_Source"))]
Sub1 <- Nowdat$checktimes
Sub1 <- Sub1[, !(names(Sub1) %in% c("Test_Species_2_Sick", "Test_Species_2_Dead"))]
sm <- [match(Sub1$ID, Main1$ID)]
Sub1$Species <- Main1$Test_Species_1[sm]
Sub1$Number_Tested <- Main1$Number_Tested_Species_1[sm]
Sub1$Test_Source <- Main1$Test_Species_1_Source[sm]
Sub1$Hours <- (as.numeric(Sub1$Check_Date) + as.numeric(Sub1$Check_Time) -
(as.numeric(Main1$Start_Date) + as.numeric(Main1$Start_Time))[sm])/60/60
# split up Nowicki data by species
Main1 <- Nowdat$main
Main1 <- Main1[, !(names(Main1) %in% c("Test_Species_2", "Number_Tested_Species_2", "Test_Species_2_Source"))]
Sub1 <- Nowdat$checktimes
Sub1 <- Sub1[, !(names(Sub1) %in% c("Test_Species_2_Sick", "Test_Species_2_Dead"))]
sm <- match(Sub1$ID, Main1$ID)
Sub1$Species <- Main1$Test_Species_1[sm]
Sub1$Number_Tested <- Main1$Number_Tested_Species_1[sm]
Sub1$Test_Source <- Main1$Test_Species_1_Source[sm]
Sub1$Hours <- (as.numeric(Sub1$Check_Date) + as.numeric(Sub1$Check_Time) -
(as.numeric(Main1$Start_Date) + as.numeric(Main1$Start_Time))[sm])/60/60
summary(Main1)
summary(Sub1)
head(Main1)
as.Date(Main1$Start_Date, "%m/%d/%Y")
?as.Date
?strftime
strptime(paste(Main1$Start_Date, Main1$Start_Time), "%m/%d/%Y %H:%M")
head(Main1)
strptime(paste(Main1$Start_Date, Main1$Start_Time), "%m/%d/%Y %H:%M")
Main1 <- Nowdat$main
Main1 <- Main1[, !(names(Main1) %in% c("Test_Species_2", "Number_Tested_Species_2", "Test_Species_2_Source"))]
mdt <- strptime(paste(Main1$Start_Date, Main1$Start_Time), "%m/%d/%Y %H:%M")
Sub1 <- Nowdat$checktimes
Sub1 <- Sub1[, !(names(Sub1) %in% c("Test_Species_2_Sick", "Test_Species_2_Dead"))]
sdt <- strptime(paste(Sub1$Check_Date, Sub1$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub1$ID, Main1$ID)
Sub1$Species <- Main1$Test_Species_1[sm]
Sub1$Number_Tested <- Main1$Number_Tested_Species_1[sm]
Sub1$Test_Source <- Main1$Test_Species_1_Source[sm]
Sub1$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
head(Sub1)
dput(names(Main1))
dput(names(Sub1))
match(names(Main1), mainnames[, 1])
?match
match(mainnames[, 1], names(Main1))
!is.na(match(names(Main1), mainnames[, 1]))
recode(names(Main1), mainnames[, 1], mainnames[, 2])
?recode
recode(names(Main1), mainnames[, 1], mainnames[, 2], must.match=FALSE)
keepmain <- c("ID", "Test_Type", "Lake", "Stream", "Water_Not_Lake_Or_Stream", 
"Location", "Lab", "Start_Date", "Start_Time", "Test_Number", 
"Chemical", "Formulation", "Concentration", "Water_Temp", "Water_Temp_Unit", "pH", 
"Total_Alkalinity", "Comment_ID", "Burrowed", "Duration", "Folder", "File")
Main1 <- Nowdat$main
Main1 <- Main1[, !(names(Main1) %in% c("Test_Species_2", "Number_Tested_Species_2", "Test_Species_2_Source"))]
mdt <- strptime(paste(Main1$Start_Date, Main1$Start_Time), "%m/%d/%Y %H:%M")
Sub1 <- Nowdat$checktimes
Sub1 <- Sub1[, !(names(Sub1) %in% c("Test_Species_2_Sick", "Test_Species_2_Dead"))]
sdt <- strptime(paste(Sub1$Check_Date, Sub1$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub1$ID, Main1$ID)
Sub1$Species <- Main1$Test_Species_1[sm]
Sub1$Number_Tested <- Main1$Number_Tested_Species_1[sm]
Sub1$Test_Source <- Main1$Test_Species_1_Source[sm]
Sub1$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main1) <- recode(names(Main1), mainnames[, 1], mainnames[, 2], must.match=FALSE)
Main1 <- Main1[, keepmain]
head(Main1)
names(Sub1) <- recode(names(Sub1), subnames[, 1], subnames[, 2], must.match=FALSE)
dput(names(Sub1))
# added to sub
# "specific.comment..regarding.just.the.corresponding.line.of.data."
subnames <- matrix(c(
"check.time", "Check_Time", 
"conc.", "concentration_t", 
"dead", "Test_Dead", 
"Test_Species_1_Dead", "Test_Dead", 
"Test_Species_2_Dead", "Test_Dead", 
"ill", "Test_Sick",
"Test_Species_1_Sick", "Test_Sick",
"Test_Species_2_Sick", "Test_Sick",
"specific.comment..regarding.just.the.corresponding.line.of.data.", "Comment_Tank"
), ncol=2, byrow=TRUE)
names(Sub1) <- recode(names(Sub1), subnames[, 1], subnames[, 2], must.match=FALSE)
dput(names(Sub1))
keepmain <- c("ID", "Test_Type", "Lake", "Stream", "Water_Not_Lake_Or_Stream", 
"Location", "Lab", "Start_Date", "Start_Time", "Test_Number", 
"Chemical", "Formulation", "Concentration", "Water_Temp", "Water_Temp_Unit", "pH", 
"Total_Alkalinity", "Comment_ID", "Burrowed", "Duration", "Folder", "File")
keepsub <- c("ID", "Test_Sick", "Test_Dead", 
"concentration_t", "pH_t", "DO_t", "water_temp_t", "alkalinity_t", 
"concentrationB_t", "Species", "Number_Tested", "Test_Source", "Hours")
Main1 <- Nowdat$main
Main1 <- Main1[, !(names(Main1) %in% c("Test_Species_2", "Number_Tested_Species_2", "Test_Species_2_Source"))]
mdt <- strptime(paste(Main1$Start_Date, Main1$Start_Time), "%m/%d/%Y %H:%M")
Sub1 <- Nowdat$checktimes
Sub1 <- Sub1[, !(names(Sub1) %in% c("Test_Species_2_Sick", "Test_Species_2_Dead"))]
sdt <- strptime(paste(Sub1$Check_Date, Sub1$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub1$ID, Main1$ID)
Sub1$Species <- Main1$Test_Species_1[sm]
Sub1$Number_Tested <- Main1$Number_Tested_Species_1[sm]
Sub1$Test_Source <- Main1$Test_Species_1_Source[sm]
Sub1$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main1) <- recode(names(Main1), mainnames[, 1], mainnames[, 2], must.match=FALSE)
Main1 <- Main1[, keepmain]
names(Sub1) <- recode(names(Sub1), subnames[, 1], subnames[, 2], must.match=FALSE)
Sub1 <- Sub1[, keepsub]
Main2 <- Nowdat$main
Main2 <- Main2[, !(names(Main2) %in% c("Test_Species_1", "Number_Tested_Species_1", "Test_Species_1_Source"))]
mdt <- strptime(paste(Main2$Start_Date, Main2$Start_Time), "%m/%d/%Y %H:%M")
Sub2 <- Nowdat$checktimes
Sub2 <- Sub2[, !(names(Sub2) %in% c("Test_Species_1_Sick", "Test_Species_1_Dead"))]
sdt <- strptime(paste(Sub2$Check_Date, Sub2$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub2$ID, Main2$ID)
Sub2$Species <- Main2$Test_Species_2[sm]
Sub2$Number_Tested <- Main2$Number_Tested_Species_2[sm]
Sub2$Test_Source <- Main2$Test_Species_2_Source[sm]
Sub2$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main2) <- recode(names(Main2), mainnames[, 1], mainnames[, 2], must.match=FALSE)
Main2 <- Main2[, keepmain]
names(Sub2) <- recode(names(Sub2), subnames[, 1], subnames[, 2], must.match=FALSE)
Sub2 <- Sub2[, keepsub]
head(Main1)
head(Main2)
all.equal(Main1, Main2)
head(Sub1)
head(Sub2)
all.equal(Main1, Main2)
Main <- Main1
Sub <- rbind(Sub1, Sub2)
head(Main)
head(Sub)
head(McGarrydat)
recode(names(McGarrydat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
mainnames
# added to main
# c("acc..no.", "aerated.", "cond.", "cond..unit", "water.chem..date", "file", "folder", "sheet", "water")
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comment_ID",
"Comments", "Comment_ID",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested", 
"Number_Tested_Species_1", "Number_Tested", 
"Number_Tested_Species_2", "Number_Tested", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species", 
"Test_Species_1", "Test_Species", 
"Test_Species_2", "Test_Species", 
"source.of.animals", "Test_Source", 
"Test_Species_1_Source", "Test_Source", 
"Test_Species_2_Source", "Test_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit",
"acc..no.", "Acc_No",
"aerated.", "Aerated", 
"cond.", "Conductivity",
"cond..unit", "Conductivity_Unit",
"water.chem..date", "Water_Chem_Date",
"water", "Water_Name"
), ncol=2, byrow=TRUE)
mainnames
recode(names(McGarrydat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
recode(names(McGarrydat), subnames[, 1], subnames[, 2], must.match=FALSE)
# split up others into a main and a sub
names(McGarrydat) <- recode(names(McGarrydat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(McGarrydat) <- recode(names(McGarrydat), subnames[, 1], subnames[, 2], must.match=FALSE)
head(McGarrydat)
dput(names(McGarrydat))
summary(McGarrydat$checktime)
summary(McGarrydat$check.time)
summary(McGarrydat$Check_Time)
# added to sub
# "specific.comment..regarding.just.the.corresponding.line.of.data."
subnames <- matrix(c(
"check.time", "Hours", 
"conc.", "concentration_t", 
"dead", "Test_Dead", 
"Test_Species_1_Dead", "Test_Dead", 
"Test_Species_2_Dead", "Test_Dead", 
"ill", "Test_Sick",
"Test_Species_1_Sick", "Test_Sick",
"Test_Species_2_Sick", "Test_Sick",
"specific.comment..regarding.just.the.corresponding.line.of.data.", "Comment_Tank"
), ncol=2, byrow=TRUE)
names(McGarrydat)
names(McGarrydat)[25]
names(McGarrydat)[25] <- "Hours"
names(McGarrydat)
m.main <- McGarrydat[!is.na(McGarrydat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Conductivity", "Conductivity_Unit", "Test_Number", "pH", "Total_Alkalinity", 
"Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "ID")]
m.sub <- McGarrydat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours", 
"Test_Sick", "Test_Dead", "Comment_Tank", "ID")]
head(m.main)
head(m.sub)
?fill
a <- m.sub[1:100, ]
lapply(a, fill)
apply(a, 2, fill)
sapply(a, fill)
lapply(a, fill)
data.frame(lapply(a, fill))
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2], must.match=FALSE)
head(Slaghtdat)
dput(names(Slaghtdat))
k.main <- Slaghtdat[!is.na(Slaghtdat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Test_Number", "pH", "Total_Alkalinity", "Chemical", 
"Formulation", "Folder", "File", "Sheet", "Aerated", "Comment_ID")]
k.sub <- Slaghtdat[, c("concentration_t", "conc..unit", "Test_Source", 
"Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID")]
head(k.main)
head(k.sub)
table(k.sub$Hours)
strptime(Slaghtdat$Hours, "%H%M")
as.numeric(strptime(Slaghtdat$Hours, "%H%M")) - as.numeric(Slaghtdat$Start_Time)
strptime(paste(Slaghtdat$Start_Date, Slaghtdat$Start_Time), "%m/%d/%Y %H:%M")
head(Slaghtdat)
dt1 <- as.numeric(Slaghtdat$Start_Date) + as.numeric(Slaghtdat$Start_Time)
dt2 <- as.numeric(Slaghtdat$Start_Date) + as.numeric(strptime(Slaghtdat$Hours, "%H%M"))
dt1 <- as.numeric(Slaghtdat$Start_Date) + as.numeric(Slaghtdat$Start_Time)
dt2 <- as.numeric(Slaghtdat$Start_Date) + as.numeric(strptime(Slaghtdat$Hours, "%H%M"))
hrs <- (dt2-dt1)/60/60
hrs
Slaghtdat$Start_Date
as.character(Slaghtdat$Start_Date)
strptime(paste(as.character(Slaghtdat$Start_Date), Slaghtdat$Hours), "%Y-%m-%d %H%M")
dt1 <- as.numeric(Slaghtdat$Start_Date) + as.numeric(Slaghtdat$Start_Time)
dt2 <- as.numeric(strptime(paste(as.character(Slaghtdat$Start_Date), Slaghtdat$Hours), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs
cbind(dt1, dt2)
cbind(Slaghtdat$Start_Time
Slaghtdat$Start_Time
dt1 <- as.numeric(Slaghtdat$Start_Time)
dt2 <- as.numeric(strptime(paste("1899-12-31", Slaghtdat$Hours), "%Y-%m-%d %H%M"))
cbind(dt1, dt2)
hrs <- (dt2-dt1)/60/60
hrs
table(hrs)
plot(hrs)
dt1 <- as.numeric(Slaghtdat$Start_Time)
dt2 <- as.numeric(strptime(paste("1899-12-31", Slaghtdat$Hours), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
plot(hrs)
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2], must.match=FALSE)
dt1 <- as.numeric(Slaghtdat$Start_Time)
dt2 <- as.numeric(strptime(paste("1899-12-31", Slaghtdat$Hours), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Slaghtdat$Hours <- hrs
k.main <- Slaghtdat[!is.na(Slaghtdat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Test_Number", "pH", "Total_Alkalinity", "Chemical", 
"Formulation", "Folder", "File", "Sheet", "Aerated", "Comment_ID")]
k.sub <- Slaghtdat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID")]
head(k.main)
head(k.sub)
# split up others into a main and a sub
names(McGarrydat) <- recode(names(McGarrydat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(McGarrydat) <- recode(names(McGarrydat), subnames[, 1], subnames[, 2], must.match=FALSE)
m.main <- McGarrydat[!is.na(McGarrydat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Conductivity", "Conductivity_Unit", "Test_Number", "pH", "Total_Alkalinity", 
"Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "ID")]
m.sub <- McGarrydat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours", 
"Test_Sick", "Test_Dead", "Comment_Tank", "ID")]
head(m.sub)
summary(m.sub)
table(m.sub$Test_Species)
table(is.na(m.sub$Test_Species))
# split up others into a main and a sub
names(McGarrydat) <- recode(names(McGarrydat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(McGarrydat) <- recode(names(McGarrydat), subnames[, 1], subnames[, 2], must.match=FALSE)
m.main <- McGarrydat[!is.na(McGarrydat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Conductivity", "Conductivity_Unit", "Test_Number", "pH", "Total_Alkalinity", 
"Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "ID")]
m.sub <- McGarrydat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours", 
"Test_Sick", "Test_Dead", "Comment_Tank", "ID")]
m.sub$concentration_t <- fill(m.sub$concentration_t)
m.sub$Test_Species <- fill(m.sub$Test_Species)
m.sub$Number_Tested  <- fill(m.sub$Number_Tested)
m.sub$Test_Sick[is.na(m.sub$Test_Sick)] <- 0
m.sub$Test_Dead[is.na(m.sub$Test_Dead)] <- 0
head(m.main)
head(m.sub)
is <- paste(m.sub$ID, m.sub$species)
is <- paste(m.sub$ID, m.sub$species)
tapply(m.sub$Test_Source, is, fill)
is <- paste(m.sub$ID, m.sub$Test_Species)
tapply(m.sub$Test_Source, is, fill)
tapply(m.sub$Test_Source, is, function(x) length(unique(x)))
m.sub[m.sub$ID==15176, ]
m.main[m.main$ID==15176, ]
m.sub$Test_Source[m.sub$ID==15176 & m.sub$Test_Species=="Sea Lamprey"]
tapply(m.sub$Test_Source, is, function(x) length(unique(x)))
sort(tapply(m.sub$Test_Source, is, function(x) length(unique(x))))
unique(m.sub$Test_Source)
sort(unique(m.sub$Test_Source))
a <- c("a", NA, "B")
sort(a)
a <- c(NA, NA, NA)
sort(a)
tapply(m.sub$Test_Source[!is.na(m.sub$Test_Source)], is[!is.na(m.sub$Test_Source)], "[", 1)
is <- paste(m.sub$ID, m.sub$Test_Species)
ts <- tapply(m.sub$Test_Source[!is.na(m.sub$Test_Source)], is[!is.na(m.sub$Test_Source)], "[", 1)
match(is, names(ts))
b <- match(is, names(ts))
summary(b)
length(b)
b[!is.na(b)
]
is <- paste(m.sub$ID, m.sub$Test_Species)
ts <- tapply(m.sub$Test_Source[!is.na(m.sub$Test_Source)], is[!is.na(m.sub$Test_Source)], "[", 1)
ts[match(is, names(ts))]
m.sub$Test_Source <- ts[match(is, names(ts))]
m.sub
m.sub[m.sub$ID==15176, ]
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2], must.match=FALSE)
dt1 <- as.numeric(Slaghtdat$Start_Time)
dt2 <- as.numeric(strptime(paste("1899-12-31", Slaghtdat$Hours), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Slaghtdat$Hours <- hrs
k.main <- Slaghtdat[!is.na(Slaghtdat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Test_Number", "pH", "Total_Alkalinity", "Chemical", 
"Formulation", "Folder", "File", "Sheet", "Aerated", "Comment_ID")]
k.sub <- Slaghtdat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID")]
summary(k.sub)
table(is.na(k.sub$Test_Species))
k.sub[!is.na(k.sub$Test_Species) & is.na(concentration_t) | is.na(Number_Tested)
with(k.sub, k.sub[!is.na(Test_Species) & (is.na(concentration_t) | is.na(Number_Tested)), ])
with(k.sub, k.sub[!is.na(Test_Species) & (is.na(concentration_t) | is.na(Number_Tested)), ])
a <- with(k.sub, k.sub[!is.na(Test_Species) & (is.na(concentration_t) | is.na(Number_Tested)), ])
dim(a)
with(k.sub, k.sub[!is.na(Test_Species) & s.na(Number_Tested), ])
with(k.sub, k.sub[!is.na(Test_Species) & is.na(Number_Tested), ])
with(k.sub, k.sub$ID[!is.na(Test_Species) & is.na(Number_Tested)])
showme <- function(df, id) {
print(df[df$ID %in% id, ])
}
b <- with(k.sub, k.sub$ID[!is.na(Test_Species) & is.na(Number_Tested)])
showme(k.main, b)
showme(k.sub, b)
k.main <- Slaghtdat[!is.na(Slaghtdat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Test_Number", "pH", "Total_Alkalinity", "Chemical", 
"Formulation", "Folder", "File", "Sheet", "Aerated", "Comment_ID", "ID")]
k.sub <- Slaghtdat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID")]
showme(k.main, b)
source("C:/JVA/Lamprey/ChemControl/Resistance/McGarry/ReadMcGarry.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Slaghtdat)
r <- names(Robdat)
a <- unique(c(m, k, r))
# added to main
# c("acc..no.", "aerated.", "cond.", "cond..unit", "water.chem..date", "file", "Row", "water")
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comment_ID",
"Comments", "Comment_ID",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested", 
"Number_Tested_Species_1", "Number_Tested", 
"Number_Tested_Species_2", "Number_Tested", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species", 
"Test_Species_1", "Test_Species", 
"Test_Species_2", "Test_Species", 
"source.of.animals", "Test_Source", 
"Test_Species_1_Source", "Test_Source", 
"Test_Species_2_Source", "Test_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit",
"acc..no.", "Acc_No",
"aerated.", "Aerated", 
"cond.", "Conductivity",
"cond..unit", "Conductivity_Unit",
"water.chem..date", "Water_Chem_Date",
"water", "Water_Name"
), ncol=2, byrow=TRUE)
# added to sub
# "specific.comment..regarding.just.the.corresponding.line.of.data."
subnames <- matrix(c(
"check.time", "Hours", 
"conc.", "concentration_t", 
"dead", "Test_Dead", 
"Test_Species_1_Dead", "Test_Dead", 
"Test_Species_2_Dead", "Test_Dead", 
"ill", "Test_Sick",
"Test_Species_1_Sick", "Test_Sick",
"Test_Species_2_Sick", "Test_Sick",
"specific.comment..regarding.just.the.corresponding.line.of.data.", "Comment_Tank"
), ncol=2, byrow=TRUE)
n[is.na(match(n, mainnames[, 2]))]
c[is.na(match(c, subnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
# calculate Duration
mmax <- tapply(McGarrydat$check.time, McGarrydat$ID, max)
indx <- tapply(McGarrydat$check.time, McGarrydat$ID)
McGarrydat$Duration <- mmax[indx]
Slaghtdat$Duration <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
mmax <- tapply(Robdat$check.time, Robdat$ID, max, na.rm=TRUE)
indx <- tapply(Robdat$check.time, Robdat$ID)
maxtime <- mmax[indx]
Robdat$Duration <- (as.numeric(maxtime) - as.numeric(Robdat$start.time))/60/60
head(Slaghtdat)
Slaghtdat[Slaghtdat$Row==8700, ]
Slaghtdat[Slaghtdat$Row %in% 8700:8720, ]
Slaghtdat[Slaghtdat$Row %in% 8700:8720, ]
# C:\JVA\Lamprey\ChemControl\Resistance\Slaght\ReadSlaght.r
library(plyr)
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
myfiles <- "Historical TFM Testing.xlsx"
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$Folder <- "Slaght"
dat$File <- myfiles[i]
dat$Sheet <- mysheets[j]
dat$Row <- 1:dim(dat)[1]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(substring(dat$start.date, 1, 10))
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(substring(dat$start.date, 1, 10))
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
Slaghtdat <- datlist[[1]]
Slaghtdat[Slaghtdat$Row %in% 8700:8720, ]
summary(Slaghtdat)
# C:\JVA\Lamprey\ChemControl\Resistance\Slaght\ReadSlaght.r
library(plyr)
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
myfiles <- "Historical TFM Testing.xlsx"
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$Folder <- "Slaght"
dat$File <- myfiles[i]
dat$Sheet <- mysheets[j]
dat$Row <- 1:dim(dat)[1]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(substring(dat$start.date, 1, 10))
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(substring(dat$start.date, 1, 10))
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
Slaghtdat <- datlist[[1]]
summary(Slaghtdat)
Slaghtdat[is.na(Slaghtdat$check.time), ]
Slaghtdat[is.na(Slaghtdat$check.time), c("Sheet", "Row")]
# C:\JVA\Lamprey\ChemControl\Resistance\Slaght\ReadSlaght.r
library(plyr)
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
myfiles <- "Historical TFM Testing.xlsx"
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$Folder <- "Slaght"
dat$File <- myfiles[i]
dat$Sheet <- mysheets[j]
dat$Row <- 1:dim(dat)[1]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(substring(dat$start.date, 1, 10))
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(substring(dat$start.date, 1, 10))
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
Slaghtdat <- datlist[[1]]
Slaghtdat[is.na(Slaghtdat$check.time), ]
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
# C:\JVA\Lamprey\ChemControl\Resistance\Slaght\ReadSlaght.r
library(plyr)
makedate <- function(x) {
sel <- !is.na(x)
x1 <- x[sel]
# replace all punctuation marks with hyphens
x2 <- gsub("[[:punct:]]", "-", x1)
# break up string into three parts
x3 <- strsplit(x2, "-")
# if 3rd string is length 4, move it to 1st
nc3 <- lapply(x3, function(y) 
{
if(nchar(y)[3] > 3) y[c(3, 1, 2)] else y
}
)
# combine three parts again
x[sel] <- sapply(nc3, paste, collapse="-")
as.POSIXlt(x)
}
mydir <- "C:/JVA/Lamprey/ChemControl/Resistance/Slaght/"
myfiles <- "Historical TFM Testing.xlsx"
datlist <- vector("list", length(myfiles))
for(i in seq_along(myfiles)) {
wb <- loadWorkbook(paste0(mydir, myfiles[i]))
mysheets <- getSheets(wb)
sheetlist <- vector("list", length(mysheets))
for(j in seq_along(mysheets)) {
dat <- readWorksheet(wb, sheet=getSheets(wb)[j])
names(dat) <- jvanames(names(dat))
dat$Folder <- "Slaght"
dat$File <- myfiles[i]
dat$Sheet <- mysheets[j]
dat$Row <- 1:dim(dat)[1]
if(class(dat$start.date)[1]=="character") dat$start.date <- makedate(substring(dat$start.date, 1, 10))
if(class(dat$end.date)[1]=="character") dat$end.date <- makedate(substring(dat$start.date, 1, 10))
sheetlist[[j]] <- dat
}
datlist[[i]] <- do.call(rbind.fill, sheetlist)
}
Slaghtdat <- datlist[[1]]
# the cumulative number of dead was recorded only when there was a new death (same for ill)
# so, a series of numbers like 0, 1, 0, 2, 0 represents new dead 0, 1, 0, 1, 0, and true cumulative dead 0, 1, 1, 2, 2
# to make these numbers conform to the number of dead recorded in other data sheets, they will be converted to "new dead"
convert <- function(cumsortof, firstrow) {
# convert so-called cumulative dead/ill numbers to real new dead/ill numbers
cumdead <- cumsortof
# change all zeroes to missings
cumdead[!is.na(cumdead) & cumdead < 0.5] <- NA
# first, if the first row of so-called cumdead is missing, set the number of new dead to zero
cumdead[!is.na(firstrow) & is.na(cumsortof)] <- 0
# then, fill in the remaining missing values with the previous value
cumdead <- fill(cumdead)
# then calculate the new dead as the difference along the cumdead
cumdeadb4 <- c(NA, cumdead[-length(cumdead)])
newdead <- ifelse(!is.na(firstrow), cumdead, cumdead-cumdeadb4)
newdead
}
Slaghtdat$ill <- convert(Slaghtdat$cumulative..ill, Slaghtdat$species)
Slaghtdat$dead <- convert(Slaghtdat$cumulative..dead, Slaghtdat$species)
Slaghtdat$ID <- cumsum(!is.na(Slaghtdat$start.date))
head(Slaghtdat)
rm(mydir, myfiles, datlist, i, wb, mysheets, sheetlist, j, makedate, dat, convert)
if(FALSE) {
x <- dat$dead
test1 <- is.na(x)
test2 <- is.na(as.numeric(x))
dat[!test1 & test2, ]
# try to figure out errors
a <- lapply(datlist, function(df) unique(c(df$start.date[!is.na(df$start.date)], df$df$end.date[!is.na(df$end.date)])) )
b <- as.Date(unlist(lapply(a, as.character)))
b2 <- unlist(a)
look <- do.call(rbind.fill, datlist[1:26])
# convert to numeric
dat$dead <- as.numeric(dat$dead)
}
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Slaghtdat)
r <- names(Robdat)
a <- unique(c(m, k, r))
# added to main
# c("acc..no.", "aerated.", "cond.", "cond..unit", "water.chem..date", "file", "Row", "water")
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comment_ID",
"Comments", "Comment_ID",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested", 
"Number_Tested_Species_1", "Number_Tested", 
"Number_Tested_Species_2", "Number_Tested", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species", 
"Test_Species_1", "Test_Species", 
"Test_Species_2", "Test_Species", 
"source.of.animals", "Test_Source", 
"Test_Species_1_Source", "Test_Source", 
"Test_Species_2_Source", "Test_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit",
"acc..no.", "Acc_No",
"aerated.", "Aerated", 
"cond.", "Conductivity",
"cond..unit", "Conductivity_Unit",
"water.chem..date", "Water_Chem_Date",
"water", "Water_Name"
), ncol=2, byrow=TRUE)
# added to sub
# "specific.comment..regarding.just.the.corresponding.line.of.data."
subnames <- matrix(c(
"check.time", "Hours", 
"conc.", "concentration_t", 
"dead", "Test_Dead", 
"Test_Species_1_Dead", "Test_Dead", 
"Test_Species_2_Dead", "Test_Dead", 
"ill", "Test_Sick",
"Test_Species_1_Sick", "Test_Sick",
"Test_Species_2_Sick", "Test_Sick",
"specific.comment..regarding.just.the.corresponding.line.of.data.", "Comment_Tank"
), ncol=2, byrow=TRUE)
n[is.na(match(n, mainnames[, 2]))]
c[is.na(match(c, subnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
# calculate Duration
mmax <- tapply(McGarrydat$check.time, McGarrydat$ID, max)
indx <- tapply(McGarrydat$check.time, McGarrydat$ID)
McGarrydat$Duration <- mmax[indx]
Slaghtdat$Duration <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
mmax <- tapply(Robdat$check.time, Robdat$ID, max, na.rm=TRUE)
indx <- tapply(Robdat$check.time, Robdat$ID)
maxtime <- mmax[indx]
Robdat$Duration <- (as.numeric(maxtime) - as.numeric(Robdat$start.time))/60/60
# split up Nowicki data by species
keepmain <- c("ID", "Test_Type", "Lake", "Stream", "Water_Not_Lake_Or_Stream", 
"Location", "Lab", "Start_Date", "Start_Time", "Test_Number", 
"Chemical", "Formulation", "Concentration", "Water_Temp", "Water_Temp_Unit", "pH", 
"Total_Alkalinity", "Comment_ID", "Burrowed", "Duration", "Folder", "File")
keepsub <- c("ID", "Test_Sick", "Test_Dead", 
"concentration_t", "pH_t", "DO_t", "water_temp_t", "alkalinity_t", 
"concentrationB_t", "Species", "Number_Tested", "Test_Source", "Hours")
Main1 <- Nowdat$main
Main1 <- Main1[, !(names(Main1) %in% c("Test_Species_2", "Number_Tested_Species_2", "Test_Species_2_Source"))]
mdt <- strptime(paste(Main1$Start_Date, Main1$Start_Time), "%m/%d/%Y %H:%M")
Sub1 <- Nowdat$checktimes
Sub1 <- Sub1[, !(names(Sub1) %in% c("Test_Species_2_Sick", "Test_Species_2_Dead"))]
sdt <- strptime(paste(Sub1$Check_Date, Sub1$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub1$ID, Main1$ID)
Sub1$Species <- Main1$Test_Species_1[sm]
Sub1$Number_Tested <- Main1$Number_Tested_Species_1[sm]
Sub1$Test_Source <- Main1$Test_Species_1_Source[sm]
Sub1$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main1) <- recode(names(Main1), mainnames[, 1], mainnames[, 2], must.match=FALSE)
Main1 <- Main1[, keepmain]
names(Sub1) <- recode(names(Sub1), subnames[, 1], subnames[, 2], must.match=FALSE)
Sub1 <- Sub1[, keepsub]
Main2 <- Nowdat$main
Main2 <- Main2[, !(names(Main2) %in% c("Test_Species_1", "Number_Tested_Species_1", "Test_Species_1_Source"))]
mdt <- strptime(paste(Main2$Start_Date, Main2$Start_Time), "%m/%d/%Y %H:%M")
Sub2 <- Nowdat$checktimes
Sub2 <- Sub2[, !(names(Sub2) %in% c("Test_Species_1_Sick", "Test_Species_1_Dead"))]
sdt <- strptime(paste(Sub2$Check_Date, Sub2$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub2$ID, Main2$ID)
Sub2$Species <- Main2$Test_Species_2[sm]
Sub2$Number_Tested <- Main2$Number_Tested_Species_2[sm]
Sub2$Test_Source <- Main2$Test_Species_2_Source[sm]
Sub2$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main2) <- recode(names(Main2), mainnames[, 1], mainnames[, 2], must.match=FALSE)
Main2 <- Main2[, keepmain]
names(Sub2) <- recode(names(Sub2), subnames[, 1], subnames[, 2], must.match=FALSE)
Sub2 <- Sub2[, keepsub]
all.equal(Main1, Main2)
Main <- Main1
Sub <- rbind(Sub1, Sub2)
head(Main)
head(Sub)
# split up others into a main and a sub
names(McGarrydat) <- recode(names(McGarrydat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(McGarrydat) <- recode(names(McGarrydat), subnames[, 1], subnames[, 2], must.match=FALSE)
m.main <- McGarrydat[!is.na(McGarrydat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Conductivity", "Conductivity_Unit", "Test_Number", "pH", "Total_Alkalinity", 
"Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID")]
m.sub <- McGarrydat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours", 
"Test_Sick", "Test_Dead", "Comment_Tank", "ID")]
m.sub$concentration_t <- fill(m.sub$concentration_t)
m.sub$Test_Species <- fill(m.sub$Test_Species)
m.sub$Number_Tested  <- fill(m.sub$Number_Tested)
m.sub$Test_Sick[is.na(m.sub$Test_Sick)] <- 0
m.sub$Test_Dead[is.na(m.sub$Test_Dead)] <- 0
is <- paste(m.sub$ID, m.sub$Test_Species)
ts <- tapply(m.sub$Test_Source[!is.na(m.sub$Test_Source)], is[!is.na(m.sub$Test_Source)], "[", 1)
m.sub$Test_Source <- ts[match(is, names(ts))]
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2], must.match=FALSE)
dt1 <- as.numeric(Slaghtdat$Start_Time)
dt2 <- as.numeric(strptime(paste("1899-12-31", Slaghtdat$Hours), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Slaghtdat$Hours <- hrs
k.main <- Slaghtdat[!is.na(Slaghtdat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Test_Number", "pH", "Total_Alkalinity", "Chemical", 
"Formulation", "Folder", "File", "Sheet", "Row", "Aerated", "Comment_ID", "ID")]
k.sub <- Slaghtdat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID")]
showme <- function(df, id) {
print(df[df$ID %in% id, ])
}
b <- with(k.sub, k.sub$ID[!is.na(Test_Species) & is.na(Number_Tested)])
showme(k.main, b)
showme(k.sub, b)
k.main[k.main %in% c(420:440), ]
k.main[k.main$Row %in% c(420:440), ]
k.sub[k.sub$Row %in% 420:440, ]
k.sub <- Slaghtdat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID", "Row")]
k.sub[k.sub$Row %in% 420:440, ]
Slaghtdat[Slaghtdat$ID==45645, ]
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
Slaghtdat$Duration <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2], must.match=FALSE)
dt1 <- as.numeric(Slaghtdat$Start_Time)
dt2 <- as.numeric(strptime(paste("1899-12-31", Slaghtdat$Hours), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Slaghtdat$Hours <- hrs
k.main <- Slaghtdat[!is.na(Slaghtdat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Test_Number", "pH", "Total_Alkalinity", "Chemical", 
"Formulation", "Folder", "File", "Sheet", "Row", "Aerated", "Comment_ID", "ID")]
k.sub <- Slaghtdat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID", "Row")]
showme <- function(df, id) {
print(df[df$ID %in% id, ])
}
b <- with(k.sub, k.sub$ID[!is.na(Test_Species) & is.na(Number_Tested)])
showme(k.main, b)
showme(k.sub, b)
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2], must.match=FALSE)
dt1 <- as.numeric(Slaghtdat$Start_Time)
dt2 <- as.numeric(strptime(paste("1899-12-31", Slaghtdat$Hours), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Slaghtdat$Hours <- hrs
k.main <- Slaghtdat[!is.na(Slaghtdat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Test_Number", "pH", "Total_Alkalinity", "Chemical", 
"Formulation", "Folder", "File", "Sheet", "Row", "Aerated", "Comment_ID", "ID")]
k.sub <- Slaghtdat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID", "Row")]
head(k.main)
head(k.sub)
k.sub$concentration_t <- fill(k.sub$concentration_t)
k.sub$Test_Species <- fill(k.sub$Test_Species)
k.sub$Number_Tested  <- fill(k.sub$Number_Tested)
k.sub$Test_Sick[is.na(k.sub$Test_Sick)] <- 0
k.sub$Test_Dead[is.na(k.sub$Test_Dead)] <- 0
is <- paste(k.sub$ID, k.sub$Test_Species)
ts <- tapply(k.sub$Test_Source[!is.na(k.sub$Test_Source)], is[!is.na(k.sub$Test_Source)], "[", 1)
k.sub$Test_Source <- ts[match(is, names(ts))]
head(k.sub)
summary(k.sub)
dim(k.sub)
dt1
dt2
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
Slaghtdat$Duration <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2], must.match=FALSE)
dt1 <- as.numeric(Slaghtdat$Start_Time)
dt2 <- as.numeric(strptime(paste("1899-12-31", Slaghtdat$Hours), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
hrs
summary(hrs)
Slaghtdat
Slaghtdat$Hours
summary(Slaghtdat)
dt2 <- as.numeric(strptime(paste("1899-12-31", Slaghtdat$Hours), "%Y-%m-%d %H%M"))
dt2
strptime(paste("1899-12-31", Slaghtdat$Hours)
strptime(paste("1899-12-31", Slaghtdat$Hours), "%Y-%m-%d %H%M")
paste("1899-12-31", Slaghtdat$Hours)
format(Slaghtdat$Hours)
?format
Slaghtdat$Hours + 10000
as.character(Slaghtdat$Hours + 10000)
substring(as.character(Slaghtdat$Hours + 10000), 2)
dt2 <- as.numeric(strptime(paste("1899-12-31", substring(as.character(Slaghtdat$Hours + 10000), 2)), "%Y-%m-%d %H%M"))
dt2
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2], must.match=FALSE)
dt1 <- as.numeric(Slaghtdat$Start_Time)
dt2 <- as.numeric(strptime(paste("1899-12-31", substring(as.character(Slaghtdat$Hours + 10000), 2)), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
hrs
dt1
dt2
dt1 <- fill(as.numeric(Slaghtdat$Start_Time))
dt2 <- as.numeric(strptime(paste("1899-12-31", substring(as.character(Slaghtdat$Hours + 10000), 2)), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
hrs
summary(hrs)
Slaghtdat[is.na(hrs), ]
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
Slaghtdat$Duration <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2], must.match=FALSE)
dt1 <- fill(as.numeric(Slaghtdat$Start_Time))
dt2 <- as.numeric(strptime(paste("1899-12-31", substring(as.character(Slaghtdat$Hours + 10000), 2)), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
summary(hrs)
Slaghtdat$Hours <- hrs
k.main <- Slaghtdat[!is.na(Slaghtdat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Test_Number", "pH", "Total_Alkalinity", "Chemical", 
"Formulation", "Folder", "File", "Sheet", "Row", "Aerated", "Comment_ID", "ID")]
k.sub <- Slaghtdat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID", "Row")]
k.sub$concentration_t <- fill(k.sub$concentration_t)
k.sub$Test_Species <- fill(k.sub$Test_Species)
k.sub$Number_Tested  <- fill(k.sub$Number_Tested)
k.sub$Test_Sick[is.na(k.sub$Test_Sick)] <- 0
k.sub$Test_Dead[is.na(k.sub$Test_Dead)] <- 0
is <- paste(k.sub$ID, k.sub$Test_Species)
ts <- tapply(k.sub$Test_Source[!is.na(k.sub$Test_Source)], is[!is.na(k.sub$Test_Source)], "[", 1)
k.sub$Test_Source <- ts[match(is, names(ts))]
head(k.main)
head(k.sub)
names(Robdat) <- recode(names(Robdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Robdat) <- recode(names(Robdat), subnames[, 1], subnames[, 2], must.match=FALSE)
dput(names(Robdat))
names(Robdat) <- recode(names(Robdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Robdat) <- recode(names(Robdat), subnames[, 1], subnames[, 2], must.match=FALSE)
r.main <- Robdat[!is.na(Robdat$Start_Date), c("Test_Type", "Lake", "Stream", "Water_Name", "Location", "Start_Date", 
"Start_Time", "Water_Chem_Date", "Water_Temp", "Water_Temp_Unit", 
"pH", "Total_Alkalinity", "Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
r.sub <- Robdat[, c("concentration_t", "Test_Species", "Number_Tested", 
"Hours", "Test_Sick", "Test_Dead", "Comment_Tank", "Row", "ID")]
head(r.main)
head(r.sub)
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
summary(Robdat)
summary(McGarrydat)
summary(Slaghtdat)
Robsource("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
summary(Robdat$ID)
Robdat$ID
max(Slaghtdat$ID)
Robdat$ID + max(Slaghtdat$ID)
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID + max(Slaghtdat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
mmax <- tapply(Robdat$check.time, Robdat$ID, max, na.rm=TRUE)
indx <- tapply(Robdat$check.time, Robdat$ID)
maxtime <- mmax[indx]
Robdat$Duration <- (as.numeric(maxtime) - as.numeric(Robdat$start.time))/60/60
names(Robdat) <- recode(names(Robdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Robdat) <- recode(names(Robdat), subnames[, 1], subnames[, 2], must.match=FALSE)
r.main <- Robdat[!is.na(Robdat$Start_Date), c("Test_Type", "Lake", "Stream", "Water_Name", "Location", "Start_Date", 
"Start_Time", "Water_Chem_Date", "Water_Temp", "Water_Temp_Unit", 
"pH", "Total_Alkalinity", "Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
r.sub <- Robdat[, c("concentration_t", "Test_Species", "Number_Tested", 
"Hours", "Test_Sick", "Test_Dead", "Comment_Tank", "Row", "ID")]
head(r.main)
head(r.sub)
head(Robdat)
dt1 <- fill(as.numeric(Robdat$Start_Time))
dt2 <- as.numeric(Robdat$Hours)
hrs <- (dt2-dt1)/60/60
hrs
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
summary(hrs)
dt1 <- fill(as.numeric(Robdat$Start_Time))
dt2 <- as.numeric(Robdat$Hours)
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Robdat$Hours <- fill(hrs)
r.main <- Robdat[!is.na(Robdat$Start_Date), c("Test_Type", "Lake", "Stream", "Water_Name", "Location", "Start_Date", 
"Start_Time", "Water_Chem_Date", "Water_Temp", "Water_Temp_Unit", 
"pH", "Total_Alkalinity", "Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
r.sub <- Robdat[, c("concentration_t", "Test_Species", "Number_Tested", 
"Hours", "Test_Sick", "Test_Dead", "Comment_Tank", "Row", "ID")]
summary(Robdat)
Robdat[is.na(concentration_t), ]
Robdat[is.na(Robdat$concentration_t), ]
source("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
mmax <- tapply(Robdat$check.time, Robdat$ID, max, na.rm=TRUE)
indx <- tapply(Robdat$check.time, Robdat$ID)
maxtime <- mmax[indx]
Robdat$Duration <- (as.numeric(maxtime) - as.numeric(Robdat$start.time))/60/60
names(Robdat) <- recode(names(Robdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Robdat) <- recode(names(Robdat), subnames[, 1], subnames[, 2], must.match=FALSE)
dt1 <- fill(as.numeric(Robdat$Start_Time))
dt2 <- as.numeric(Robdat$Hours)
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
hrs
Robdat$Hours <- fill(hrs)
r.main <- Robdat[!is.na(Robdat$Start_Date), c("Test_Type", "Lake", "Stream", "Water_Name", "Location", "Start_Date", 
"Start_Time", "Water_Chem_Date", "Water_Temp", "Water_Temp_Unit", 
"pH", "Total_Alkalinity", "Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
r.sub <- Robdat[, c("concentration_t", "Test_Species", "Number_Tested", 
"Hours", "Test_Sick", "Test_Dead", "Comment_Tank", "Row", "ID")]
head(r.main)
head(r.sub)
summary(r.sub)
r.sub$Test_Species <- fill(r.sub$Test_Species)
r.sub$Number_Tested  <- fill(r.sub$Number_Tested)
r.sub$Test_Sick[is.na(r.sub$Test_Sick)] <- 0
r.sub$Test_Dead[is.na(r.sub$Test_Dead)] <- 0
is <- paste(r.sub$ID, r.sub$Test_Species)
ts <- tapply(r.sub$Test_Source[!is.na(r.sub$Test_Source)], is[!is.na(r.sub$Test_Source)], "[", 1)
r.sub$Test_Source <- ts[match(is, names(ts))]
names(Robdat)
stringin("sourc", names(Robdat))
summary(r.main)
summary(r.sub)
head(r.main)
head(r.sub)
df <- McGarrydat
isc1 <- !is.na(df$Comment_ID)
isc1b4 <- c(NA, isc1[-length(isc1)])
df[isc1 & isc1b4, ]
df[isc1 & isc1b4, c("Folder", "File", "Sheet", "Row")]
df[isc1 & isc1b4, c("Folder", "File", "Sheet", "Row", "Comment_ID")]
sel <- !is.na(df$Comment_ID)
tapply(df$Comment_ID[sel], df$ID[sel], paste, collapse="; ")
sel <- !is.na(df$Comment_ID)
combined <- tapply(df$Comment_ID[sel], df$ID[sel], paste, collapse="; ")
newcom <- rep("", dim(df)[1])
newcom[match(names(combined), df$ID)] <- combined
newcom
combine.comments <- function(df) {
sel <- !is.na(df$Comment_ID)
combined <- tapply(df$Comment_ID[sel], df$ID[sel], paste, collapse="; ")
newcom <- rep("", dim(df)[1])
newcom[match(names(combined), df$ID)] <- combined
newcom
}
combine.comments(McGarrydat)
combine.comments(Slaghtdat)
combine.comments(Robdat)
all.main <- rbind.fill(Main, m.main, k.main, r.main)
all.sub <- rbind.fill(Sub, m.sub, k.sub, r.sub)
summary(all.main)
head(Main)
head(m.main)
sapply(Main, class)
lapply(Main, class)
lapply(lapply(Main, class), "[", 1)
sapply(lapply(Main, class), "[", 1)
a <- merge(
cbind(names=names(Main), nclass=sapply(lapply(Main, class), "[", 1)),
cbind(names=names(m.main), mclass=sapply(lapply(m.main, class), "[", 1)), all=TRUE)
b <- merge(a,
cbind(names=names(k.main), kclass=sapply(lapply(k.main, class), "[", 1)), all=TRUE)
c <- merge(b,
cbind(names=names(r.main), rclass=sapply(lapply(r.main, class), "[", 1)), all=TRUE)
c
# use Nowdat as comparison
lapply(Nowdat, head, 2)
match(Main$Chemical, Nowdat$chemicals$chemical)
Nowdat$chemicals$chemical.desc[match(Main$Chemical, Nowdat$chemicals$chemical)]
Main$Chemical <- Nowdat$chemicals$chemical.desc[match(Main$Chemical, Nowdat$chemicals$chemical)]
head(Main)
Nowdat$formulations$formulation.desc[match(Main$Formulation, Nowdat$formulations$formulation)]
Nowdat$labs$lab.name[match(Main$Lab, Nowdat$labs$lab)]
Nowdat$testtypes$test.type.desc[match(Main$Test_Type, Nowdat$testtypes$test.type)]
Main$Formulation <- Nowdat$formulations$formulation.desc[match(Main$Formulation, Nowdat$formulations$formulation)]
Main$Lab <- Nowdat$labs$lab.name[match(Main$Lab, Nowdat$labs$lab)]
Main$Test_Type <- Nowdat$testtypes$test.type.desc[match(Main$Test_Type, Nowdat$testtypes$test.type)]
unique(r.main$Lake)
recode(r.main$Lake, c("S", "H", "NYO"), c(1, 3, 5))
r.main$Lake <- recode(r.main$Lake, c("S", "H", "NYO"), c(1, 3, 5))
head(r.main)
Main$pH
unique(Main$pH)
unique(m.main$pH)
unique(k.main$pH)
unique(r.main$pH)
head(Main)
as.Date(Main$Start_Date, "%m/%d/%Y")
as.character(m.main$Start_Time)
(m.main$Start_Time)
m.main[, c("Start_Time", "File", "Sheet", "Row")]
unique(Main$Start_Time)
a <- m.main$Start_Time
a1 <- floor(a/100)
a2 <- a - 100*a1
paste(a1, a2, ":")
a <- m.main$Start_Time
a1 <- floor(a/100)
a2 <- a - 100*a1
paste(a1, a2, sep=":")
a1
a2
a <- m.main$Start_Time
a1 <- floor(a/100)
a2 <- a - 100*a1
paste(a1, substring(100+a2, 2), sep=":")
paste(substring(100+a1, 2), substring(100+a2, 2), sep=":")
head(Slaght$Start_Time)
head(Slaghtdat$Start_Time)
(Slaghtdat$Start_Time)
as.character(Slaghtdat$Start_Time)
format(Slaghtdat$Start_Time)
format(Slaghtdat$Start_Time, "%H:%M")
cleanup()
# C:\JVA\Lamprey\ChemControl\Resistance\Analysis\Resist.r
# read in all the raw data
source("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/ReadNowicki.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/McGarry/ReadMcGarry.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
# use Nowdat as comparison
lapply(Nowdat, head, 2)
head(McGarrydat, 2)
head(Slaghtdat, 2)
head(Robdat, 2)
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Slaghtdat)
r <- names(Robdat)
a <- unique(c(m, k, r))
# added to main
# c("acc..no.", "aerated.", "cond.", "cond..unit", "water.chem..date", "file", "Row", "water")
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comment_ID",
"Comments", "Comment_ID",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested", 
"Number_Tested_Species_1", "Number_Tested", 
"Number_Tested_Species_2", "Number_Tested", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species", 
"Test_Species_1", "Test_Species", 
"Test_Species_2", "Test_Species", 
"source.of.animals", "Test_Source", 
"Test_Species_1_Source", "Test_Source", 
"Test_Species_2_Source", "Test_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit",
"acc..no.", "Acc_No",
"aerated.", "Aerated", 
"cond.", "Conductivity",
"cond..unit", "Conductivity_Unit",
"water.chem..date", "Water_Chem_Date",
"water", "Water_Name"
), ncol=2, byrow=TRUE)
# added to sub
# "specific.comment..regarding.just.the.corresponding.line.of.data."
subnames <- matrix(c(
"check.time", "Hours", 
"conc.", "concentration_t", 
"dead", "Test_Dead", 
"Test_Species_1_Dead", "Test_Dead", 
"Test_Species_2_Dead", "Test_Dead", 
"ill", "Test_Sick",
"Test_Species_1_Sick", "Test_Sick",
"Test_Species_2_Sick", "Test_Sick",
"specific.comment..regarding.just.the.corresponding.line.of.data.", "Comment_Tank"
), ncol=2, byrow=TRUE)
n[is.na(match(n, mainnames[, 2]))]
c[is.na(match(c, subnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
look <- function(varname) {
if(varname %in% m) print(unique(McGarrydat[, varname]))
if(varname %in% k) print(unique(Slaghtdat[, varname]))
if(varname %in% r) print(unique(Robdat[, varname]))
invisible()
}
look("discomfort")
# calculate Duration
mmax <- tapply(McGarrydat$check.time, McGarrydat$ID, max)
indx <- tapply(McGarrydat$check.time, McGarrydat$ID)
McGarrydat$Duration <- mmax[indx]
Slaghtdat$Duration <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
mmax <- tapply(Robdat$check.time, Robdat$ID, max, na.rm=TRUE)
indx <- tapply(Robdat$check.time, Robdat$ID)
maxtime <- mmax[indx]
Robdat$Duration <- (as.numeric(maxtime) - as.numeric(Robdat$start.time))/60/60
# split up Nowicki data by species
keepmain <- c("ID", "Test_Type", "Lake", "Stream", "Water_Not_Lake_Or_Stream", 
"Location", "Lab", "Start_Date", "Start_Time", "Test_Number", 
"Chemical", "Formulation", "Concentration", "Water_Temp", "Water_Temp_Unit", "pH", 
"Total_Alkalinity", "Comment_ID", "Burrowed", "Duration", "Folder", "File")
keepsub <- c("ID", "Test_Sick", "Test_Dead", 
"concentration_t", "pH_t", "DO_t", "water_temp_t", "alkalinity_t", 
"concentrationB_t", "Species", "Number_Tested", "Test_Source", "Hours")
Main1 <- Nowdat$main
Main1 <- Main1[, !(names(Main1) %in% c("Test_Species_2", "Number_Tested_Species_2", "Test_Species_2_Source"))]
mdt <- strptime(paste(Main1$Start_Date, Main1$Start_Time), "%m/%d/%Y %H:%M")
Sub1 <- Nowdat$checktimes
Sub1 <- Sub1[, !(names(Sub1) %in% c("Test_Species_2_Sick", "Test_Species_2_Dead"))]
sdt <- strptime(paste(Sub1$Check_Date, Sub1$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub1$ID, Main1$ID)
Sub1$Species <- Main1$Test_Species_1[sm]
Sub1$Number_Tested <- Main1$Number_Tested_Species_1[sm]
Sub1$Test_Source <- Main1$Test_Species_1_Source[sm]
Sub1$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main1) <- recode(names(Main1), mainnames[, 1], mainnames[, 2], must.match=FALSE)
Main1 <- Main1[, keepmain]
names(Sub1) <- recode(names(Sub1), subnames[, 1], subnames[, 2], must.match=FALSE)
Sub1 <- Sub1[, keepsub]
Main2 <- Nowdat$main
Main2 <- Main2[, !(names(Main2) %in% c("Test_Species_1", "Number_Tested_Species_1", "Test_Species_1_Source"))]
mdt <- strptime(paste(Main2$Start_Date, Main2$Start_Time), "%m/%d/%Y %H:%M")
Sub2 <- Nowdat$checktimes
Sub2 <- Sub2[, !(names(Sub2) %in% c("Test_Species_1_Sick", "Test_Species_1_Dead"))]
sdt <- strptime(paste(Sub2$Check_Date, Sub2$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub2$ID, Main2$ID)
Sub2$Species <- Main2$Test_Species_2[sm]
Sub2$Number_Tested <- Main2$Number_Tested_Species_2[sm]
Sub2$Test_Source <- Main2$Test_Species_2_Source[sm]
Sub2$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main2) <- recode(names(Main2), mainnames[, 1], mainnames[, 2], must.match=FALSE)
Main2 <- Main2[, keepmain]
names(Sub2) <- recode(names(Sub2), subnames[, 1], subnames[, 2], must.match=FALSE)
Sub2 <- Sub2[, keepsub]
all.equal(Main1, Main2)
Main <- Main1
Sub <- rbind(Sub1, Sub2)
Main$Chemical <- Nowdat$chemicals$chemical.desc[match(Main$Chemical, Nowdat$chemicals$chemical)]
Main$Formulation <- Nowdat$formulations$formulation.desc[match(Main$Formulation, Nowdat$formulations$formulation)]
Main$Lab <- Nowdat$labs$lab.name[match(Main$Lab, Nowdat$labs$lab)]
Main$Test_Type <- Nowdat$testtypes$test.type.desc[match(Main$Test_Type, Nowdat$testtypes$test.type)]
Main$Start_Date <- as.Date(Main$Start_Date, "%m/%d/%Y")
head(Main)
head(Sub)
# split up others into a main and a sub
combine.comments <- function(df) {
# combine general comments for ID into one field if they are spread across several rows
sel <- !is.na(df$Comment_ID)
combined <- tapply(df$Comment_ID[sel], df$ID[sel], paste, collapse="; ")
newcom <- rep("", dim(df)[1])
newcom[match(names(combined), df$ID)] <- combined
newcom
}
names(McGarrydat) <- recode(names(McGarrydat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(McGarrydat) <- recode(names(McGarrydat), subnames[, 1], subnames[, 2], must.match=FALSE)
McGarrydat$Comment_ID <- combine.comments(McGarrydat)
m.main <- McGarrydat[!is.na(McGarrydat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Conductivity", "Conductivity_Unit", "Test_Number", "pH", "Total_Alkalinity", 
"Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
a <- m.main$Start_Time
a1 <- floor(a/100)
a2 <- a - 100*a1
m.main$Start_Time <- paste(substring(100+a1, 2), substring(100+a2, 2), sep=":")
m.sub <- McGarrydat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours", 
"Test_Sick", "Test_Dead", "Comment_Tank", "ID", "Row")]
m.sub$concentration_t <- fill(m.sub$concentration_t)
m.sub$Test_Species <- fill(m.sub$Test_Species)
m.sub$Number_Tested  <- fill(m.sub$Number_Tested)
m.sub$Test_Sick[is.na(m.sub$Test_Sick)] <- 0
m.sub$Test_Dead[is.na(m.sub$Test_Dead)] <- 0
is <- paste(m.sub$ID, m.sub$Test_Species)
ts <- tapply(m.sub$Test_Source[!is.na(m.sub$Test_Source)], is[!is.na(m.sub$Test_Source)], "[", 1)
m.sub$Test_Source <- ts[match(is, names(ts))]
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2], must.match=FALSE)
Slaghtdat$Comment_ID <- combine.comments(Slaghtdat)
dt1 <- fill(as.numeric(Slaghtdat$Start_Time))
dt2 <- as.numeric(strptime(paste("1899-12-31", substring(as.character(Slaghtdat$Hours + 10000), 2)), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Slaghtdat$Hours <- hrs
k.main <- Slaghtdat[!is.na(Slaghtdat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Test_Number", "pH", "Total_Alkalinity", "Chemical", 
"Formulation", "Folder", "File", "Sheet", "Row", "Aerated", "Comment_ID", "ID", "Duration")]
k.main$Start_Time <- format(k.main$Start_Time, "%H:%M")
k.sub <- Slaghtdat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID", "Row")]
k.sub$concentration_t <- fill(k.sub$concentration_t)
k.sub$Test_Species <- fill(k.sub$Test_Species)
k.sub$Number_Tested  <- fill(k.sub$Number_Tested)
k.sub$Test_Sick[is.na(k.sub$Test_Sick)] <- 0
k.sub$Test_Dead[is.na(k.sub$Test_Dead)] <- 0
is <- paste(k.sub$ID, k.sub$Test_Species)
ts <- tapply(k.sub$Test_Source[!is.na(k.sub$Test_Source)], is[!is.na(k.sub$Test_Source)], "[", 1)
k.sub$Test_Source <- ts[match(is, names(ts))]
names(Robdat) <- recode(names(Robdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Robdat) <- recode(names(Robdat), subnames[, 1], subnames[, 2], must.match=FALSE)
Robdat$Comment_ID <- combine.comments(Robdat)
dt1 <- fill(as.numeric(Robdat$Start_Time))
dt2 <- as.numeric(Robdat$Hours)
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Robdat$Hours <- fill(hrs)
r.main <- Robdat[!is.na(Robdat$Start_Date), c("Test_Type", "Lake", "Stream", "Water_Name", "Location", "Start_Date", 
"Start_Time", "Water_Chem_Date", "Water_Temp", "Water_Temp_Unit", 
"pH", "Total_Alkalinity", "Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
r.main$Lake <- recode(r.main$Lake, c("S", "H", "NYO"), c(1, 3, 5))
r.main$Start_Time <- format(r.main$Start_Time, "%H:%M")
r.sub <- Robdat[, c("concentration_t", "Test_Species", "Number_Tested", 
"Hours", "Test_Sick", "Test_Dead", "Comment_Tank", "Row", "ID")]
r.sub$Test_Species <- fill(r.sub$Test_Species)
r.sub$Number_Tested  <- fill(r.sub$Number_Tested)
r.sub$Test_Sick[is.na(r.sub$Test_Sick)] <- 0
r.sub$Test_Dead[is.na(r.sub$Test_Dead)] <- 0
a <- merge(
cbind(names=names(Main), nclass=sapply(lapply(Main, class), "[", 1)),
cbind(names=names(m.main), mclass=sapply(lapply(m.main, class), "[", 1)), all=TRUE)
b <- merge(a,
cbind(names=names(k.main), kclass=sapply(lapply(k.main, class), "[", 1)), all=TRUE)
c <- merge(b,
cbind(names=names(r.main), rclass=sapply(lapply(r.main, class), "[", 1)), all=TRUE)
c
Main$Start_Date
r.main$Start_Date
c(r.main$Start_Date, Main$Start_Date)
as.Date(r.main$Start_Date)
c(as.Date(r.main$Start_Date), Main$Start_Date)
m.main$Duration
head(m.main)
ls()
cleanup()
# C:\JVA\Lamprey\ChemControl\Resistance\Analysis\Resist.r
# read in all the raw data
source("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/ReadNowicki.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/McGarry/ReadMcGarry.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
# use Nowdat as comparison
lapply(Nowdat, head, 2)
head(McGarrydat, 2)
head(Slaghtdat, 2)
head(Robdat, 2)
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Slaghtdat)
r <- names(Robdat)
a <- unique(c(m, k, r))
# added to main
# c("acc..no.", "aerated.", "cond.", "cond..unit", "water.chem..date", "file", "Row", "water")
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comment_ID",
"Comments", "Comment_ID",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested", 
"Number_Tested_Species_1", "Number_Tested", 
"Number_Tested_Species_2", "Number_Tested", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species", 
"Test_Species_1", "Test_Species", 
"Test_Species_2", "Test_Species", 
"source.of.animals", "Test_Source", 
"Test_Species_1_Source", "Test_Source", 
"Test_Species_2_Source", "Test_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit",
"acc..no.", "Acc_No",
"aerated.", "Aerated", 
"cond.", "Conductivity",
"cond..unit", "Conductivity_Unit",
"water.chem..date", "Water_Chem_Date",
"water", "Water_Name"
), ncol=2, byrow=TRUE)
# added to sub
# "specific.comment..regarding.just.the.corresponding.line.of.data."
subnames <- matrix(c(
"check.time", "Hours", 
"conc.", "concentration_t", 
"dead", "Test_Dead", 
"Test_Species_1_Dead", "Test_Dead", 
"Test_Species_2_Dead", "Test_Dead", 
"ill", "Test_Sick",
"Test_Species_1_Sick", "Test_Sick",
"Test_Species_2_Sick", "Test_Sick",
"specific.comment..regarding.just.the.corresponding.line.of.data.", "Comment_Tank"
), ncol=2, byrow=TRUE)
n[is.na(match(n, mainnames[, 2]))]
c[is.na(match(c, subnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
look <- function(varname) {
if(varname %in% m) print(unique(McGarrydat[, varname]))
if(varname %in% k) print(unique(Slaghtdat[, varname]))
if(varname %in% r) print(unique(Robdat[, varname]))
invisible()
}
look("discomfort")
# calculate Duration
mmax <- tapply(McGarrydat$check.time, McGarrydat$ID, max)
indx <- tapply(McGarrydat$check.time, McGarrydat$ID)
McGarrydat$Duration <- as.numeric(mmax[indx])
Slaghtdat$Duration <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
mmax <- tapply(Robdat$check.time, Robdat$ID, max, na.rm=TRUE)
indx <- tapply(Robdat$check.time, Robdat$ID)
maxtime <- mmax[indx]
Robdat$Duration <- (as.numeric(maxtime) - as.numeric(Robdat$start.time))/60/60
# split up Nowicki data by species
keepmain <- c("ID", "Test_Type", "Lake", "Stream", "Water_Not_Lake_Or_Stream", 
"Location", "Lab", "Start_Date", "Start_Time", "Test_Number", 
"Chemical", "Formulation", "Concentration", "Water_Temp", "Water_Temp_Unit", "pH", 
"Total_Alkalinity", "Comment_ID", "Burrowed", "Duration", "Folder", "File")
keepsub <- c("ID", "Test_Sick", "Test_Dead", 
"concentration_t", "pH_t", "DO_t", "water_temp_t", "alkalinity_t", 
"concentrationB_t", "Species", "Number_Tested", "Test_Source", "Hours")
Main1 <- Nowdat$main
Main1 <- Main1[, !(names(Main1) %in% c("Test_Species_2", "Number_Tested_Species_2", "Test_Species_2_Source"))]
mdt <- strptime(paste(Main1$Start_Date, Main1$Start_Time), "%m/%d/%Y %H:%M")
Sub1 <- Nowdat$checktimes
Sub1 <- Sub1[, !(names(Sub1) %in% c("Test_Species_2_Sick", "Test_Species_2_Dead"))]
sdt <- strptime(paste(Sub1$Check_Date, Sub1$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub1$ID, Main1$ID)
Sub1$Species <- Main1$Test_Species_1[sm]
Sub1$Number_Tested <- Main1$Number_Tested_Species_1[sm]
Sub1$Test_Source <- Main1$Test_Species_1_Source[sm]
Sub1$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main1) <- recode(names(Main1), mainnames[, 1], mainnames[, 2], must.match=FALSE)
Main1 <- Main1[, keepmain]
names(Sub1) <- recode(names(Sub1), subnames[, 1], subnames[, 2], must.match=FALSE)
Sub1 <- Sub1[, keepsub]
Main2 <- Nowdat$main
Main2 <- Main2[, !(names(Main2) %in% c("Test_Species_1", "Number_Tested_Species_1", "Test_Species_1_Source"))]
mdt <- strptime(paste(Main2$Start_Date, Main2$Start_Time), "%m/%d/%Y %H:%M")
Sub2 <- Nowdat$checktimes
Sub2 <- Sub2[, !(names(Sub2) %in% c("Test_Species_1_Sick", "Test_Species_1_Dead"))]
sdt <- strptime(paste(Sub2$Check_Date, Sub2$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub2$ID, Main2$ID)
Sub2$Species <- Main2$Test_Species_2[sm]
Sub2$Number_Tested <- Main2$Number_Tested_Species_2[sm]
Sub2$Test_Source <- Main2$Test_Species_2_Source[sm]
Sub2$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main2) <- recode(names(Main2), mainnames[, 1], mainnames[, 2], must.match=FALSE)
Main2 <- Main2[, keepmain]
names(Sub2) <- recode(names(Sub2), subnames[, 1], subnames[, 2], must.match=FALSE)
Sub2 <- Sub2[, keepsub]
all.equal(Main1, Main2)
Main <- Main1
Sub <- rbind(Sub1, Sub2)
Main$Chemical <- Nowdat$chemicals$chemical.desc[match(Main$Chemical, Nowdat$chemicals$chemical)]
Main$Formulation <- Nowdat$formulations$formulation.desc[match(Main$Formulation, Nowdat$formulations$formulation)]
Main$Lab <- Nowdat$labs$lab.name[match(Main$Lab, Nowdat$labs$lab)]
Main$Test_Type <- Nowdat$testtypes$test.type.desc[match(Main$Test_Type, Nowdat$testtypes$test.type)]
Main$Start_Date <- as.Date(Main$Start_Date, "%m/%d/%Y")
head(Main)
head(Sub)
# split up others into a main and a sub
combine.comments <- function(df) {
# combine general comments for ID into one field if they are spread across several rows
sel <- !is.na(df$Comment_ID)
combined <- tapply(df$Comment_ID[sel], df$ID[sel], paste, collapse="; ")
newcom <- rep("", dim(df)[1])
newcom[match(names(combined), df$ID)] <- combined
newcom
}
names(McGarrydat) <- recode(names(McGarrydat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(McGarrydat) <- recode(names(McGarrydat), subnames[, 1], subnames[, 2], must.match=FALSE)
McGarrydat$Comment_ID <- combine.comments(McGarrydat)
m.main <- McGarrydat[!is.na(McGarrydat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Conductivity", "Conductivity_Unit", "Test_Number", "pH", "Total_Alkalinity", 
"Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
a <- m.main$Start_Time
a1 <- floor(a/100)
a2 <- a - 100*a1
m.main$Start_Date <- as.Date(m.main$Start_Date)
m.main$Start_Time <- paste(substring(100+a1, 2), substring(100+a2, 2), sep=":")
m.sub <- McGarrydat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours", 
"Test_Sick", "Test_Dead", "Comment_Tank", "ID", "Row")]
m.sub$concentration_t <- fill(m.sub$concentration_t)
m.sub$Test_Species <- fill(m.sub$Test_Species)
m.sub$Number_Tested  <- fill(m.sub$Number_Tested)
m.sub$Test_Sick[is.na(m.sub$Test_Sick)] <- 0
m.sub$Test_Dead[is.na(m.sub$Test_Dead)] <- 0
is <- paste(m.sub$ID, m.sub$Test_Species)
ts <- tapply(m.sub$Test_Source[!is.na(m.sub$Test_Source)], is[!is.na(m.sub$Test_Source)], "[", 1)
m.sub$Test_Source <- ts[match(is, names(ts))]
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2], must.match=FALSE)
Slaghtdat$Comment_ID <- combine.comments(Slaghtdat)
dt1 <- fill(as.numeric(Slaghtdat$Start_Time))
dt2 <- as.numeric(strptime(paste("1899-12-31", substring(as.character(Slaghtdat$Hours + 10000), 2)), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Slaghtdat$Hours <- hrs
k.main <- Slaghtdat[!is.na(Slaghtdat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Test_Number", "pH", "Total_Alkalinity", "Chemical", 
"Formulation", "Folder", "File", "Sheet", "Row", "Aerated", "Comment_ID", "ID", "Duration")]
k.main$Start_Date <- as.Date(k.main$Start_Date)
k.main$Start_Time <- format(k.main$Start_Time, "%H:%M")
k.sub <- Slaghtdat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID", "Row")]
k.sub$concentration_t <- fill(k.sub$concentration_t)
k.sub$Test_Species <- fill(k.sub$Test_Species)
k.sub$Number_Tested  <- fill(k.sub$Number_Tested)
k.sub$Test_Sick[is.na(k.sub$Test_Sick)] <- 0
k.sub$Test_Dead[is.na(k.sub$Test_Dead)] <- 0
is <- paste(k.sub$ID, k.sub$Test_Species)
ts <- tapply(k.sub$Test_Source[!is.na(k.sub$Test_Source)], is[!is.na(k.sub$Test_Source)], "[", 1)
k.sub$Test_Source <- ts[match(is, names(ts))]
names(Robdat) <- recode(names(Robdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Robdat) <- recode(names(Robdat), subnames[, 1], subnames[, 2], must.match=FALSE)
Robdat$Comment_ID <- combine.comments(Robdat)
dt1 <- fill(as.numeric(Robdat$Start_Time))
dt2 <- as.numeric(Robdat$Hours)
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Robdat$Hours <- fill(hrs)
r.main <- Robdat[!is.na(Robdat$Start_Date), c("Test_Type", "Lake", "Stream", "Water_Name", "Location", "Start_Date", 
"Start_Time", "Water_Chem_Date", "Water_Temp", "Water_Temp_Unit", 
"pH", "Total_Alkalinity", "Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
r.main$Lake <- recode(r.main$Lake, c("S", "H", "NYO"), c(1, 3, 5))
r.main$Start_Date <- as.Date(r.main$Start_Date)
r.main$Start_Time <- format(r.main$Start_Time, "%H:%M")
r.sub <- Robdat[, c("concentration_t", "Test_Species", "Number_Tested", 
"Hours", "Test_Sick", "Test_Dead", "Comment_Tank", "Row", "ID")]
r.sub$Test_Species <- fill(r.sub$Test_Species)
r.sub$Number_Tested  <- fill(r.sub$Number_Tested)
r.sub$Test_Sick[is.na(r.sub$Test_Sick)] <- 0
r.sub$Test_Dead[is.na(r.sub$Test_Dead)] <- 0
a <- merge(
cbind(names=names(Main), nclass=sapply(lapply(Main, class), "[", 1)),
cbind(names=names(m.main), mclass=sapply(lapply(m.main, class), "[", 1)), all=TRUE)
b <- merge(a,
cbind(names=names(k.main), kclass=sapply(lapply(k.main, class), "[", 1)), all=TRUE)
c <- merge(b,
cbind(names=names(r.main), rclass=sapply(lapply(r.main, class), "[", 1)), all=TRUE)
c
  r.main$Water_Chem_Date <- as.Date(r.main$Water_Chem_Date)
a <- merge(
cbind(names=names(Main), nclass=sapply(lapply(Main, class), "[", 1)),
cbind(names=names(m.main), mclass=sapply(lapply(m.main, class), "[", 1)), all=TRUE)
b <- merge(a,
cbind(names=names(k.main), kclass=sapply(lapply(k.main, class), "[", 1)), all=TRUE)
c <- merge(b,
cbind(names=names(r.main), rclass=sapply(lapply(r.main, class), "[", 1)), all=TRUE)
c
  all.main <- rbind.fill(Main, m.main, k.main, r.main)
a <- merge(
cbind(names=names(Sub), nclass=sapply(lapply(Sub, class), "[", 1)),
cbind(names=names(m.sub), mclass=sapply(lapply(m.sub, class), "[", 1)), all=TRUE)
b <- merge(a,
cbind(names=names(k.sub), kclass=sapply(lapply(k.sub, class), "[", 1)), all=TRUE)
c <- merge(b,
cbind(names=names(r.sub), rclass=sapply(lapply(r.sub, class), "[", 1)), all=TRUE)
c
k.sub$Test_Source
summary(k.sub$Test_Source)
summary(Slaghtdat$Test_Source)
m.sub$Test_Source
summary(m.sub$Test_Source)
McGarrydat$Test_Source
summary(McGarrydat$Test_Source)
cleanup()
# C:\JVA\Lamprey\ChemControl\Resistance\Analysis\Resist.r
# read in all the raw data
source("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/ReadNowicki.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/McGarry/ReadMcGarry.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
# use Nowdat as comparison
lapply(Nowdat, head, 2)
head(McGarrydat, 2)
head(Slaghtdat, 2)
head(Robdat, 2)
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Slaghtdat)
r <- names(Robdat)
a <- unique(c(m, k, r))
# added to main
# c("acc..no.", "aerated.", "cond.", "cond..unit", "water.chem..date", "file", "Row", "water")
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comment_ID",
"Comments", "Comment_ID",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested", 
"Number_Tested_Species_1", "Number_Tested", 
"Number_Tested_Species_2", "Number_Tested", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species", 
"Test_Species_1", "Test_Species", 
"Test_Species_2", "Test_Species", 
"source.of.animals", "Test_Source", 
"Test_Species_1_Source", "Test_Source", 
"Test_Species_2_Source", "Test_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit",
"acc..no.", "Acc_No",
"aerated.", "Aerated", 
"cond.", "Conductivity",
"cond..unit", "Conductivity_Unit",
"water.chem..date", "Water_Chem_Date",
"water", "Water_Name"
), ncol=2, byrow=TRUE)
# added to sub
# "specific.comment..regarding.just.the.corresponding.line.of.data."
subnames <- matrix(c(
"check.time", "Hours", 
"conc.", "concentration_t", 
"dead", "Test_Dead", 
"Test_Species_1_Dead", "Test_Dead", 
"Test_Species_2_Dead", "Test_Dead", 
"ill", "Test_Sick",
"Test_Species_1_Sick", "Test_Sick",
"Test_Species_2_Sick", "Test_Sick",
"specific.comment..regarding.just.the.corresponding.line.of.data.", "Comment_Tank"
), ncol=2, byrow=TRUE)
n[is.na(match(n, mainnames[, 2]))]
c[is.na(match(c, subnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
look <- function(varname) {
if(varname %in% m) print(unique(McGarrydat[, varname]))
if(varname %in% k) print(unique(Slaghtdat[, varname]))
if(varname %in% r) print(unique(Robdat[, varname]))
invisible()
}
look("discomfort")
# calculate Duration
mmax <- tapply(McGarrydat$check.time, McGarrydat$ID, max)
indx <- tapply(McGarrydat$check.time, McGarrydat$ID)
McGarrydat$Duration <- as.numeric(mmax[indx])
Slaghtdat$Duration <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
mmax <- tapply(Robdat$check.time, Robdat$ID, max, na.rm=TRUE)
indx <- tapply(Robdat$check.time, Robdat$ID)
maxtime <- mmax[indx]
Robdat$Duration <- (as.numeric(maxtime) - as.numeric(Robdat$start.time))/60/60
# split up Nowicki data by species
keepmain <- c("ID", "Test_Type", "Lake", "Stream", "Water_Not_Lake_Or_Stream", 
"Location", "Lab", "Start_Date", "Start_Time", "Test_Number", 
"Chemical", "Formulation", "Concentration", "Water_Temp", "Water_Temp_Unit", "pH", 
"Total_Alkalinity", "Comment_ID", "Burrowed", "Duration", "Folder", "File")
keepsub <- c("ID", "Test_Sick", "Test_Dead", 
"concentration_t", "pH_t", "DO_t", "water_temp_t", "alkalinity_t", 
"concentrationB_t", "Species", "Number_Tested", "Test_Source", "Hours")
Main1 <- Nowdat$main
Main1 <- Main1[, !(names(Main1) %in% c("Test_Species_2", "Number_Tested_Species_2", "Test_Species_2_Source"))]
mdt <- strptime(paste(Main1$Start_Date, Main1$Start_Time), "%m/%d/%Y %H:%M")
Sub1 <- Nowdat$checktimes
Sub1 <- Sub1[, !(names(Sub1) %in% c("Test_Species_2_Sick", "Test_Species_2_Dead"))]
sdt <- strptime(paste(Sub1$Check_Date, Sub1$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub1$ID, Main1$ID)
Sub1$Species <- Main1$Test_Species_1[sm]
Sub1$Number_Tested <- Main1$Number_Tested_Species_1[sm]
Sub1$Test_Source <- Main1$Test_Species_1_Source[sm]
Sub1$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main1) <- recode(names(Main1), mainnames[, 1], mainnames[, 2], must.match=FALSE)
Main1 <- Main1[, keepmain]
names(Sub1) <- recode(names(Sub1), subnames[, 1], subnames[, 2], must.match=FALSE)
Sub1 <- Sub1[, keepsub]
Main2 <- Nowdat$main
Main2 <- Main2[, !(names(Main2) %in% c("Test_Species_1", "Number_Tested_Species_1", "Test_Species_1_Source"))]
mdt <- strptime(paste(Main2$Start_Date, Main2$Start_Time), "%m/%d/%Y %H:%M")
Sub2 <- Nowdat$checktimes
Sub2 <- Sub2[, !(names(Sub2) %in% c("Test_Species_1_Sick", "Test_Species_1_Dead"))]
sdt <- strptime(paste(Sub2$Check_Date, Sub2$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub2$ID, Main2$ID)
Sub2$Species <- Main2$Test_Species_2[sm]
Sub2$Number_Tested <- Main2$Number_Tested_Species_2[sm]
Sub2$Test_Source <- Main2$Test_Species_2_Source[sm]
Sub2$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main2) <- recode(names(Main2), mainnames[, 1], mainnames[, 2], must.match=FALSE)
Main2 <- Main2[, keepmain]
names(Sub2) <- recode(names(Sub2), subnames[, 1], subnames[, 2], must.match=FALSE)
Sub2 <- Sub2[, keepsub]
all.equal(Main1, Main2)
Main <- Main1
Sub <- rbind(Sub1, Sub2)
Main$Chemical <- Nowdat$chemicals$chemical.desc[match(Main$Chemical, Nowdat$chemicals$chemical)]
Main$Formulation <- Nowdat$formulations$formulation.desc[match(Main$Formulation, Nowdat$formulations$formulation)]
Main$Lab <- Nowdat$labs$lab.name[match(Main$Lab, Nowdat$labs$lab)]
Main$Test_Type <- Nowdat$testtypes$test.type.desc[match(Main$Test_Type, Nowdat$testtypes$test.type)]
Main$Start_Date <- as.Date(Main$Start_Date, "%m/%d/%Y")
head(Main)
head(Sub)
# split up others into a main and a sub
combine.comments <- function(df) {
# combine general comments for ID into one field if they are spread across several rows
sel <- !is.na(df$Comment_ID)
combined <- tapply(df$Comment_ID[sel], df$ID[sel], paste, collapse="; ")
newcom <- rep("", dim(df)[1])
newcom[match(names(combined), df$ID)] <- combined
newcom
}
names(McGarrydat) <- recode(names(McGarrydat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(McGarrydat) <- recode(names(McGarrydat), subnames[, 1], subnames[, 2], must.match=FALSE)
McGarrydat$Comment_ID <- combine.comments(McGarrydat)
m.main <- McGarrydat[!is.na(McGarrydat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Conductivity", "Conductivity_Unit", "Test_Number", "pH", "Total_Alkalinity", 
"Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
a <- m.main$Start_Time
a1 <- floor(a/100)
a2 <- a - 100*a1
m.main$Start_Date <- as.Date(m.main$Start_Date)
m.main$Start_Time <- paste(substring(100+a1, 2), substring(100+a2, 2), sep=":")
m.sub <- McGarrydat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours", 
"Test_Sick", "Test_Dead", "Comment_Tank", "ID", "Row")]
m.sub$concentration_t <- fill(m.sub$concentration_t)
m.sub$Test_Species <- fill(m.sub$Test_Species)
m.sub$Number_Tested  <- fill(m.sub$Number_Tested)
m.sub$Test_Sick[is.na(m.sub$Test_Sick)] <- 0
m.sub$Test_Dead[is.na(m.sub$Test_Dead)] <- 0
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2], must.match=FALSE)
Slaghtdat$Comment_ID <- combine.comments(Slaghtdat)
dt1 <- fill(as.numeric(Slaghtdat$Start_Time))
dt2 <- as.numeric(strptime(paste("1899-12-31", substring(as.character(Slaghtdat$Hours + 10000), 2)), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Slaghtdat$Hours <- hrs
k.main <- Slaghtdat[!is.na(Slaghtdat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Test_Number", "pH", "Total_Alkalinity", "Chemical", 
"Formulation", "Folder", "File", "Sheet", "Row", "Aerated", "Comment_ID", "ID", "Duration")]
k.main$Start_Date <- as.Date(k.main$Start_Date)
k.main$Start_Time <- format(k.main$Start_Time, "%H:%M")
k.sub <- Slaghtdat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID", "Row")]
k.sub$concentration_t <- fill(k.sub$concentration_t)
k.sub$Test_Species <- fill(k.sub$Test_Species)
k.sub$Number_Tested  <- fill(k.sub$Number_Tested)
k.sub$Test_Sick[is.na(k.sub$Test_Sick)] <- 0
k.sub$Test_Dead[is.na(k.sub$Test_Dead)] <- 0
names(Robdat) <- recode(names(Robdat), mainnames[, 1], mainnames[, 2], must.match=FALSE)
names(Robdat) <- recode(names(Robdat), subnames[, 1], subnames[, 2], must.match=FALSE)
Robdat$Comment_ID <- combine.comments(Robdat)
dt1 <- fill(as.numeric(Robdat$Start_Time))
dt2 <- as.numeric(Robdat$Hours)
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Robdat$Hours <- fill(hrs)
r.main <- Robdat[!is.na(Robdat$Start_Date), c("Test_Type", "Lake", "Stream", "Water_Name", "Location", "Start_Date", 
"Start_Time", "Water_Chem_Date", "Water_Temp", "Water_Temp_Unit", 
"pH", "Total_Alkalinity", "Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
r.main$Lake <- recode(r.main$Lake, c("S", "H", "NYO"), c(1, 3, 5))
r.main$Start_Date <- as.Date(r.main$Start_Date)
r.main$Start_Time <- format(r.main$Start_Time, "%H:%M")
r.main$Water_Chem_Date <- as.Date(r.main$Water_Chem_Date)
r.sub <- Robdat[, c("concentration_t", "Test_Species", "Number_Tested", 
"Hours", "Test_Sick", "Test_Dead", "Comment_Tank", "Row", "ID")]
r.sub$Test_Species <- fill(r.sub$Test_Species)
r.sub$Number_Tested  <- fill(r.sub$Number_Tested)
r.sub$Test_Sick[is.na(r.sub$Test_Sick)] <- 0
r.sub$Test_Dead[is.na(r.sub$Test_Dead)] <- 0
a <- merge(
cbind(names=names(Main), nclass=sapply(lapply(Main, class), "[", 1)),
cbind(names=names(m.main), mclass=sapply(lapply(m.main, class), "[", 1)), all=TRUE)
b <- merge(a,
cbind(names=names(k.main), kclass=sapply(lapply(k.main, class), "[", 1)), all=TRUE)
c <- merge(b,
cbind(names=names(r.main), rclass=sapply(lapply(r.main, class), "[", 1)), all=TRUE)
c
a <- merge(
cbind(names=names(Sub), nclass=sapply(lapply(Sub, class), "[", 1)),
cbind(names=names(m.sub), mclass=sapply(lapply(m.sub, class), "[", 1)), all=TRUE)
b <- merge(a,
cbind(names=names(k.sub), kclass=sapply(lapply(k.sub, class), "[", 1)), all=TRUE)
c <- merge(b,
cbind(names=names(r.sub), rclass=sapply(lapply(r.sub, class), "[", 1)), all=TRUE)
c
all.main <- rbind.fill(Main, m.main, k.main, r.main)
all.sub <- rbind.fill(Sub, m.sub, k.sub, r.sub)
cleanup()
Date <- as.Date(paste0(c(rep("2014-", 5), rep("2015-", 6)), 
c("11-01", "11-26", "12-12", "12-19", "12-27", "01-06", "01-13", "01-22", "01-27", "02-03", "02-06")))
Reg14 <- c(36, 92, 124, 157, 209, 287, 303, 339, 345, 365, 389)
Reg13 <- c(NA, NA, 89, 125, 165, 218, 236, 266, 279, 301, 330)
Date2 <- as.Date(paste0(c(rep("2014-", 2), rep("2015-", 0)), 
c("12-04", "12-29")))
Reg15 <- c(154, 221)
L <- length(Date)
pd <- pretty(Date, 4)
windows(h=5, w=5)
par(mar=c(4, 4, 2, 2.5), yaxs="i", las=1)
plot(Date, Reg14, type="n", axes=FALSE, las=1, ylim=c(0, 1.1*max(Reg15, Reg14, Reg13, na.rm=TRUE)), 
ylab="Total Count",main="CSP Registration")
axis(1, at=pd, labels=c("Nov 1", "Dec 1", "Jan 1", "Feb 1"))
axis(2)
box()
lines(Date, Reg13, lwd=1, pch=16, type="o", col="gray")
mtext(" CSP\n 2013", side=4, at=Reg13[L], col="lightgray", adj=0)
lines(Date, Reg14, lwd=2, pch=16, type="o", col="gray")
mtext(" CSP\n 2014", side=4, at=Reg14[L], col="darkgray", adj=0)
lines(Date2, Reg15, lwd=3, pch=16, type="o")
mtext(" CSP\n 2015", side=4, at=Reg15[length(Date2)], font=2, adj=0)
q()
ls()
recode
# C:\JVA\Lamprey\ChemControl\Resistance\Analysis\ReadRawData.r
# read in all the raw data
source("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/ReadNowicki.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/McGarry/ReadMcGarry.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
# use Nowdat as comparison
# lapply(Nowdat, head, 2)
# head(McGarrydat, 2)
# head(Slaghtdat, 2)
# head(Robdat, 2)
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Slaghtdat)
r <- names(Robdat)
a <- unique(c(m, k, r))
# added to main
# c("acc..no.", "aerated.", "cond.", "cond..unit", "water.chem..date", "file", "Row", "water")
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comment_ID",
"Comments", "Comment_ID",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested", 
"Number_Tested_Species_1", "Number_Tested", 
"Number_Tested_Species_2", "Number_Tested", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species", 
"Test_Species_1", "Test_Species", 
"Test_Species_2", "Test_Species", 
"source.of.animals", "Test_Source", 
"Test_Species_1_Source", "Test_Source", 
"Test_Species_2_Source", "Test_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit",
"acc..no.", "Acc_No",
"aerated.", "Aerated", 
"cond.", "Conductivity",
"cond..unit", "Conductivity_Unit",
"water.chem..date", "Water_Chem_Date",
"water", "Water_Name"
), ncol=2, byrow=TRUE)
# added to sub
# "specific.comment..regarding.just.the.corresponding.line.of.data."
subnames <- matrix(c(
"check.time", "Hours", 
"conc.", "concentration_t", 
"dead", "Test_Dead", 
"Test_Species_1_Dead", "Test_Dead", 
"Test_Species_2_Dead", "Test_Dead", 
"ill", "Test_Sick",
"Test_Species_1_Sick", "Test_Sick",
"Test_Species_2_Sick", "Test_Sick",
"specific.comment..regarding.just.the.corresponding.line.of.data.", "Comment_Tank"
), ncol=2, byrow=TRUE)
n[is.na(match(n, mainnames[, 2]))]
c[is.na(match(c, subnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
look <- function(varname) {
if(varname %in% m) print(unique(McGarrydat[, varname]))
if(varname %in% k) print(unique(Slaghtdat[, varname]))
if(varname %in% r) print(unique(Robdat[, varname]))
invisible()
}
look("discomfort")
rm(n, c, m, k, r, a, look)
# calculate Duration
mmax <- tapply(McGarrydat$check.time, McGarrydat$ID, max)
indx <- tapply(McGarrydat$check.time, McGarrydat$ID)
McGarrydat$Duration <- as.numeric(mmax[indx])
Slaghtdat$Duration <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
mmax <- tapply(Robdat$check.time, Robdat$ID, max, na.rm=TRUE)
indx <- tapply(Robdat$check.time, Robdat$ID)
maxtime <- mmax[indx]
Robdat$Duration <- (as.numeric(maxtime) - as.numeric(Robdat$start.time))/60/60
rm(mmax, indx, maxtime)
# split up Nowicki data by species
keepmain <- c("ID", "Test_Type", "Lake", "Stream", "Water_Not_Lake_Or_Stream", 
"Location", "Lab", "Start_Date", "Start_Time", "Test_Number", 
"Chemical", "Formulation", "Concentration", "Water_Temp", "Water_Temp_Unit", "pH", 
"Total_Alkalinity", "Comment_ID", "Burrowed", "Duration", "Folder", "File")
keepsub <- c("ID", "Test_Sick", "Test_Dead", 
"concentration_t", "pH_t", "DO_t", "water_temp_t", "alkalinity_t", 
"concentrationB_t", "Species", "Number_Tested", "Test_Source", "Hours")
Main1 <- Nowdat$main
Main1 <- Main1[, !(names(Main1) %in% c("Test_Species_2", "Number_Tested_Species_2", "Test_Species_2_Source"))]
mdt <- strptime(paste(Main1$Start_Date, Main1$Start_Time), "%m/%d/%Y %H:%M")
Sub1 <- Nowdat$checktimes
Sub1 <- Sub1[, !(names(Sub1) %in% c("Test_Species_2_Sick", "Test_Species_2_Dead"))]
sdt <- strptime(paste(Sub1$Check_Date, Sub1$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub1$ID, Main1$ID)
Sub1$Species <- Main1$Test_Species_1[sm]
Sub1$Number_Tested <- Main1$Number_Tested_Species_1[sm]
Sub1$Test_Source <- Main1$Test_Species_1_Source[sm]
Sub1$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main1) <- recode(names(Main1), mainnames[, 1], mainnames[, 2])
Main1 <- Main1[, keepmain]
names(Sub1) <- recode(names(Sub1), subnames[, 1], subnames[, 2])
Sub1 <- Sub1[, keepsub]
Main2 <- Nowdat$main
Main2 <- Main2[, !(names(Main2) %in% c("Test_Species_1", "Number_Tested_Species_1", "Test_Species_1_Source"))]
mdt <- strptime(paste(Main2$Start_Date, Main2$Start_Time), "%m/%d/%Y %H:%M")
Sub2 <- Nowdat$checktimes
Sub2 <- Sub2[, !(names(Sub2) %in% c("Test_Species_1_Sick", "Test_Species_1_Dead"))]
sdt <- strptime(paste(Sub2$Check_Date, Sub2$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub2$ID, Main2$ID)
Sub2$Species <- Main2$Test_Species_2[sm]
Sub2$Number_Tested <- Main2$Number_Tested_Species_2[sm]
Sub2$Test_Source <- Main2$Test_Species_2_Source[sm]
Sub2$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main2) <- recode(names(Main2), mainnames[, 1], mainnames[, 2])
Main2 <- Main2[, keepmain]
names(Sub2) <- recode(names(Sub2), subnames[, 1], subnames[, 2])
Sub2 <- Sub2[, keepsub]
all.equal(Main1, Main2)
Main <- Main1
Sub <- rbind(Sub1, Sub2)
Main$Chemical <- Nowdat$chemicals$chemical.desc[match(Main$Chemical, Nowdat$chemicals$chemical)]
Main$Formulation <- Nowdat$formulations$formulation.desc[match(Main$Formulation, Nowdat$formulations$formulation)]
Main$Lab <- Nowdat$labs$lab.name[match(Main$Lab, Nowdat$labs$lab)]
Main$Test_Type <- Nowdat$testtypes$test.type.desc[match(Main$Test_Type, Nowdat$testtypes$test.type)]
Main$Start_Date <- as.Date(Main$Start_Date, "%m/%d/%Y")
head(Main)
head(Sub)
rm(keepmain, keepsub, Main1, mdt, Sub1, sdt, sm, Main2, Sub2)
# split up others into a main and a sub
# eliminate   c("alk..unit", "conc..unit", "container", "cumulative..dead", "cumulative..ill", "discomfort", "end.date", "end.time")
combine.comments <- function(df) {
# combine general comments for ID into one field if they are spread across several rows
sel <- !is.na(df$Comment_ID)
combined <- tapply(df$Comment_ID[sel], df$ID[sel], paste, collapse="; ")
newcom <- rep("", dim(df)[1])
newcom[match(names(combined), df$ID)] <- combined
newcom
}
names(McGarrydat) <- recode(names(McGarrydat), mainnames[, 1], mainnames[, 2])
names(McGarrydat) <- recode(names(McGarrydat), subnames[, 1], subnames[, 2])
McGarrydat$Comment_ID <- combine.comments(McGarrydat)
m.main <- McGarrydat[!is.na(McGarrydat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Conductivity", "Conductivity_Unit", "Test_Number", "pH", "Total_Alkalinity", 
"Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
a <- m.main$Start_Time
a1 <- floor(a/100)
a2 <- a - 100*a1
m.main$Start_Date <- as.Date(m.main$Start_Date)
m.main$Start_Time <- paste(substring(100+a1, 2), substring(100+a2, 2), sep=":")
m.sub <- McGarrydat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours", 
"Test_Sick", "Test_Dead", "Comment_Tank", "ID", "Row")]
m.sub$concentration_t <- fill(m.sub$concentration_t)
m.sub$Test_Species <- fill(m.sub$Test_Species)
m.sub$Number_Tested  <- fill(m.sub$Number_Tested)
m.sub$Test_Sick[is.na(m.sub$Test_Sick)] <- 0
m.sub$Test_Dead[is.na(m.sub$Test_Dead)] <- 0
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2])
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2])
Slaghtdat$Comment_ID <- combine.comments(Slaghtdat)
dt1 <- fill(as.numeric(Slaghtdat$Start_Time))
dt2 <- as.numeric(strptime(paste("1899-12-31", substring(as.character(Slaghtdat$Hours + 10000), 2)), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Slaghtdat$Hours <- hrs
k.main <- Slaghtdat[!is.na(Slaghtdat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Test_Number", "pH", "Total_Alkalinity", "Chemical", 
"Formulation", "Folder", "File", "Sheet", "Row", "Aerated", "Comment_ID", "ID", "Duration")]
k.main$Start_Date <- as.Date(k.main$Start_Date)
k.main$Start_Time <- format(k.main$Start_Time, "%H:%M")
k.sub <- Slaghtdat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID", "Row")]
k.sub$concentration_t <- fill(k.sub$concentration_t)
k.sub$Test_Species <- fill(k.sub$Test_Species)
k.sub$Number_Tested  <- fill(k.sub$Number_Tested)
k.sub$Test_Sick[is.na(k.sub$Test_Sick)] <- 0
k.sub$Test_Dead[is.na(k.sub$Test_Dead)] <- 0
names(Robdat) <- recode(names(Robdat), mainnames[, 1], mainnames[, 2])
names(Robdat) <- recode(names(Robdat), subnames[, 1], subnames[, 2])
Robdat$Comment_ID <- combine.comments(Robdat)
dt1 <- fill(as.numeric(Robdat$Start_Time))
dt2 <- as.numeric(Robdat$Hours)
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Robdat$Hours <- fill(hrs)
r.main <- Robdat[!is.na(Robdat$Start_Date), c("Test_Type", "Lake", "Stream", "Water_Name", "Location", "Start_Date", 
"Start_Time", "Water_Chem_Date", "Water_Temp", "Water_Temp_Unit", 
"pH", "Total_Alkalinity", "Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
r.main$Lake <- recode(r.main$Lake, c("S", "H", "NYO"), c(1, 3, 5))
r.main$Start_Date <- as.Date(r.main$Start_Date)
r.main$Start_Time <- format(r.main$Start_Time, "%H:%M")
r.main$Water_Chem_Date <- as.Date(r.main$Water_Chem_Date)
r.sub <- Robdat[, c("concentration_t", "Test_Species", "Number_Tested", 
"Hours", "Test_Sick", "Test_Dead", "Comment_Tank", "Row", "ID")]
r.sub$Test_Species <- fill(r.sub$Test_Species)
r.sub$Number_Tested  <- fill(r.sub$Number_Tested)
r.sub$Test_Sick[is.na(r.sub$Test_Sick)] <- 0
r.sub$Test_Dead[is.na(r.sub$Test_Dead)] <- 0
rm(combine.comments, a, a1, a2, dt1, dt2, hrs, mainnames, subnames)
showme <- function(df, id) {
print(df[df$ID %in% id, ])
}
b <- with(k.sub, k.sub$ID[!is.na(Test_Species) & is.na(Number_Tested)])
showme(k.main, b)
showme(k.sub, b)
rm(showme)
a <- merge(
cbind(names=names(Main), nclass=sapply(lapply(Main, class), "[", 1)),
cbind(names=names(m.main), mclass=sapply(lapply(m.main, class), "[", 1)), all=TRUE)
b <- merge(a,
cbind(names=names(k.main), kclass=sapply(lapply(k.main, class), "[", 1)), all=TRUE)
c <- merge(b,
cbind(names=names(r.main), rclass=sapply(lapply(r.main, class), "[", 1)), all=TRUE)
c
a <- merge(
cbind(names=names(Sub), nclass=sapply(lapply(Sub, class), "[", 1)),
cbind(names=names(m.sub), mclass=sapply(lapply(m.sub, class), "[", 1)), all=TRUE)
b <- merge(a,
cbind(names=names(k.sub), kclass=sapply(lapply(k.sub, class), "[", 1)), all=TRUE)
c <- merge(b,
cbind(names=names(r.sub), rclass=sapply(lapply(r.sub, class), "[", 1)), all=TRUE)
c
rm(a, b, c)
all.main <- rbind.fill(Main, m.main, k.main, r.main)
all.sub <- rbind.fill(Sub, m.sub, k.sub, r.sub)
# fix Aerated
unique(all.main$Aerated)
all.main$Aerated <- recode(all.main$Aerated, c("aerated", "aeraated", "Aerated"), c("Yes", "Yes", "Yes"))
nota1 <- grep("no(n|t)( |-)aer", all.main$Comment_ID, ignore.case=TRUE)
nota2 <- grep("no aer", all.main$Comment_ID, ignore.case=TRUE)
nota3 <- grep("non- aer", all.main$Comment_ID, ignore.case=TRUE)
nota4 <- grep("unaer", all.main$Comment_ID, ignore.case=TRUE)
nota <- unique(c(nota1, nota2, nota3, nota4))
all.main$Aerated[nota] <- "No"
parta1 <- grep("no overnight aeration", all.main$Comment_ID, ignore.case=TRUE)
parta2 <- grep("power", all.main$Comment_ID, ignore.case=TRUE)
parta3 <- grep("Air was off", all.main$Comment_ID, ignore.case=TRUE)
parta4 <- grep("airstone left out", all.main$Comment_ID, ignore.case=TRUE)
parta <- unique(c(parta1, parta2, parta3, parta4))
all.main$Aerated[parta] <- "Partial"
assa <- grep("Assumed to have aeration", all.main$Comment_ID, ignore.case=TRUE)
all.main$Aerated[assa] <- "Assumed"
alla <- grep("aer", all.main$Comment_ID, ignore.case=TRUE)
yesa <- alla[!(alla %in% c(nota, parta, assa))]
all.main$Aerated[parta] <- "Yes"
unique(all.main$Aerated)
# fix Conductivity_Unit
unique(all.main$Conductivity_Unit)
recode(all.main$Conductivity_Unit, c("at 20C", "at 25C", "at 20c", "At 20C"), c("@20C", "@25C", "@20C", "@20C"))
unique(all.main$Conductivity_Unit)
# fix Conductivity_Unit
unique(all.main$Conductivity_Unit)
all.main$Conductivity_Unit <- recode(all.main$Conductivity_Unit, c("at 20C", "at 25C", "at 20c", "At 20C"), c("@20C", "@25C", "@20C", "@20C"))
unique(all.main$Conductivity_Unit)
plotdf(all.main)
# fix Water_Name
unique(all.main$Water_Name)
# fix Water_Name
unique(all.main$Water_Name)
all.main$Water_Name[!is.na(all.main$Water_Name) & all.main$Water_Name=="lake Huron"] <- "Lake Huron"
unique(all.main$Water_Name)
# fix Duration
look <- cut(all.main$Duration, c(-1e9, 1, 24, 1e9), labels=FALSE)
unique(look)
all.main$Duration[!is.na(look) & look > 2.5]
unique(all.main$Duration[!is.na(look) & look > 2.5])
sort(unique(all.main$Duration[!is.na(look) & look > 2.5]))
# fix Duration
look <- cut(all.main$Duration, c(-1e9, 1, 35, 1e9), labels=FALSE)
all.main$Duration[!is.na(look) & look > 2.5]
sort(unique(all.main$Duration[!is.na(look) & look > 2.5]))
all.main[!is.na(look) & look > 2.5, ]
all.main[!is.na(look) & look > 2.5, ]
all.main[!is.na(look) & look > 2.5, c("Folder", "File", "Sheet", "Row", "Duration")]
all.main$Duration[!is.na(all.main$Duration) & all.main$Duration==224]
all.main$File[!is.na(look) & look > 2.5]
table(all.main$File[!is.na(look) & look > 2.5])
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
look <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
look
summary(look)
Slaghtdat[!is.na(look) & look > 50, ]
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
look <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
summary(look)
Slaghtdat[!is.na(look) & look > 50, ]
# read in all the raw data
source("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/ReadNowicki.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/McGarry/ReadMcGarry.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
# use Nowdat as comparison
# lapply(Nowdat, head, 2)
# head(McGarrydat, 2)
# head(Slaghtdat, 2)
# head(Robdat, 2)
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Slaghtdat)
r <- names(Robdat)
a <- unique(c(m, k, r))
# added to main
# c("acc..no.", "aerated.", "cond.", "cond..unit", "water.chem..date", "file", "Row", "water")
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comment_ID",
"Comments", "Comment_ID",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested", 
"Number_Tested_Species_1", "Number_Tested", 
"Number_Tested_Species_2", "Number_Tested", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species", 
"Test_Species_1", "Test_Species", 
"Test_Species_2", "Test_Species", 
"source.of.animals", "Test_Source", 
"Test_Species_1_Source", "Test_Source", 
"Test_Species_2_Source", "Test_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit",
"acc..no.", "Acc_No",
"aerated.", "Aerated", 
"cond.", "Conductivity",
"cond..unit", "Conductivity_Unit",
"water.chem..date", "Water_Chem_Date",
"water", "Water_Name"
), ncol=2, byrow=TRUE)
# added to sub
# "specific.comment..regarding.just.the.corresponding.line.of.data."
subnames <- matrix(c(
"check.time", "Hours", 
"conc.", "concentration_t", 
"dead", "Test_Dead", 
"Test_Species_1_Dead", "Test_Dead", 
"Test_Species_2_Dead", "Test_Dead", 
"ill", "Test_Sick",
"Test_Species_1_Sick", "Test_Sick",
"Test_Species_2_Sick", "Test_Sick",
"specific.comment..regarding.just.the.corresponding.line.of.data.", "Comment_Tank"
), ncol=2, byrow=TRUE)
n[is.na(match(n, mainnames[, 2]))]
c[is.na(match(c, subnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
look <- function(varname) {
if(varname %in% m) print(unique(McGarrydat[, varname]))
if(varname %in% k) print(unique(Slaghtdat[, varname]))
if(varname %in% r) print(unique(Robdat[, varname]))
invisible()
}
look("discomfort")
rm(n, c, m, k, r, a, look)
# calculate Duration
mmax <- tapply(McGarrydat$check.time, McGarrydat$ID, max)
indx <- tapply(McGarrydat$check.time, McGarrydat$ID)
McGarrydat$Duration <- as.numeric(mmax[indx])
look <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
Slaghtdat[!is.na(look) & look > 50, ]
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
look <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
Slaghtdat[!is.na(look) & look > 50, ]
Slaghtdat$Duration <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
mmax <- tapply(Robdat$check.time, Robdat$ID, max, na.rm=TRUE)
indx <- tapply(Robdat$check.time, Robdat$ID)
maxtime <- mmax[indx]
Robdat$Duration <- (as.numeric(maxtime) - as.numeric(Robdat$start.time))/60/60
rm(mmax, indx, maxtime)
# split up Nowicki data by species
keepmain <- c("ID", "Test_Type", "Lake", "Stream", "Water_Not_Lake_Or_Stream", 
"Location", "Lab", "Start_Date", "Start_Time", "Test_Number", 
"Chemical", "Formulation", "Concentration", "Water_Temp", "Water_Temp_Unit", "pH", 
"Total_Alkalinity", "Comment_ID", "Burrowed", "Duration", "Folder", "File")
keepsub <- c("ID", "Test_Sick", "Test_Dead", 
"concentration_t", "pH_t", "DO_t", "water_temp_t", "alkalinity_t", 
"concentrationB_t", "Species", "Number_Tested", "Test_Source", "Hours")
Main1 <- Nowdat$main
Main1 <- Main1[, !(names(Main1) %in% c("Test_Species_2", "Number_Tested_Species_2", "Test_Species_2_Source"))]
mdt <- strptime(paste(Main1$Start_Date, Main1$Start_Time), "%m/%d/%Y %H:%M")
Sub1 <- Nowdat$checktimes
Sub1 <- Sub1[, !(names(Sub1) %in% c("Test_Species_2_Sick", "Test_Species_2_Dead"))]
sdt <- strptime(paste(Sub1$Check_Date, Sub1$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub1$ID, Main1$ID)
Sub1$Species <- Main1$Test_Species_1[sm]
Sub1$Number_Tested <- Main1$Number_Tested_Species_1[sm]
Sub1$Test_Source <- Main1$Test_Species_1_Source[sm]
Sub1$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main1) <- recode(names(Main1), mainnames[, 1], mainnames[, 2])
Main1 <- Main1[, keepmain]
names(Sub1) <- recode(names(Sub1), subnames[, 1], subnames[, 2])
Sub1 <- Sub1[, keepsub]
Main2 <- Nowdat$main
Main2 <- Main2[, !(names(Main2) %in% c("Test_Species_1", "Number_Tested_Species_1", "Test_Species_1_Source"))]
mdt <- strptime(paste(Main2$Start_Date, Main2$Start_Time), "%m/%d/%Y %H:%M")
Sub2 <- Nowdat$checktimes
Sub2 <- Sub2[, !(names(Sub2) %in% c("Test_Species_1_Sick", "Test_Species_1_Dead"))]
sdt <- strptime(paste(Sub2$Check_Date, Sub2$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub2$ID, Main2$ID)
Sub2$Species <- Main2$Test_Species_2[sm]
Sub2$Number_Tested <- Main2$Number_Tested_Species_2[sm]
Sub2$Test_Source <- Main2$Test_Species_2_Source[sm]
Sub2$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main2) <- recode(names(Main2), mainnames[, 1], mainnames[, 2])
Main2 <- Main2[, keepmain]
names(Sub2) <- recode(names(Sub2), subnames[, 1], subnames[, 2])
Sub2 <- Sub2[, keepsub]
all.equal(Main1, Main2)
Main <- Main1
Sub <- rbind(Sub1, Sub2)
Main$Chemical <- Nowdat$chemicals$chemical.desc[match(Main$Chemical, Nowdat$chemicals$chemical)]
Main$Formulation <- Nowdat$formulations$formulation.desc[match(Main$Formulation, Nowdat$formulations$formulation)]
Main$Lab <- Nowdat$labs$lab.name[match(Main$Lab, Nowdat$labs$lab)]
Main$Test_Type <- Nowdat$testtypes$test.type.desc[match(Main$Test_Type, Nowdat$testtypes$test.type)]
Main$Start_Date <- as.Date(Main$Start_Date, "%m/%d/%Y")
head(Main)
head(Sub)
rm(keepmain, keepsub, Main1, mdt, Sub1, sdt, sm, Main2, Sub2)
# split up others into a main and a sub
# eliminate   c("alk..unit", "conc..unit", "container", "cumulative..dead", "cumulative..ill", "discomfort", "end.date", "end.time")
combine.comments <- function(df) {
# combine general comments for ID into one field if they are spread across several rows
sel <- !is.na(df$Comment_ID)
combined <- tapply(df$Comment_ID[sel], df$ID[sel], paste, collapse="; ")
newcom <- rep("", dim(df)[1])
newcom[match(names(combined), df$ID)] <- combined
newcom
}
names(McGarrydat) <- recode(names(McGarrydat), mainnames[, 1], mainnames[, 2])
names(McGarrydat) <- recode(names(McGarrydat), subnames[, 1], subnames[, 2])
McGarrydat$Comment_ID <- combine.comments(McGarrydat)
m.main <- McGarrydat[!is.na(McGarrydat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Conductivity", "Conductivity_Unit", "Test_Number", "pH", "Total_Alkalinity", 
"Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
a <- m.main$Start_Time
a1 <- floor(a/100)
a2 <- a - 100*a1
m.main$Start_Date <- as.Date(m.main$Start_Date)
m.main$Start_Time <- paste(substring(100+a1, 2), substring(100+a2, 2), sep=":")
m.sub <- McGarrydat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours", 
"Test_Sick", "Test_Dead", "Comment_Tank", "ID", "Row")]
m.sub$concentration_t <- fill(m.sub$concentration_t)
m.sub$Test_Species <- fill(m.sub$Test_Species)
m.sub$Number_Tested  <- fill(m.sub$Number_Tested)
m.sub$Test_Sick[is.na(m.sub$Test_Sick)] <- 0
m.sub$Test_Dead[is.na(m.sub$Test_Dead)] <- 0
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2])
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2])
Slaghtdat$Comment_ID <- combine.comments(Slaghtdat)
dt1 <- fill(as.numeric(Slaghtdat$Start_Time))
dt2 <- as.numeric(strptime(paste("1899-12-31", substring(as.character(Slaghtdat$Hours + 10000), 2)), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Slaghtdat$Hours <- hrs
k.main <- Slaghtdat[!is.na(Slaghtdat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Test_Number", "pH", "Total_Alkalinity", "Chemical", 
"Formulation", "Folder", "File", "Sheet", "Row", "Aerated", "Comment_ID", "ID", "Duration")]
k.main$Start_Date <- as.Date(k.main$Start_Date)
k.main$Start_Time <- format(k.main$Start_Time, "%H:%M")
k.sub <- Slaghtdat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID", "Row")]
k.sub$concentration_t <- fill(k.sub$concentration_t)
k.sub$Test_Species <- fill(k.sub$Test_Species)
k.sub$Number_Tested  <- fill(k.sub$Number_Tested)
k.sub$Test_Sick[is.na(k.sub$Test_Sick)] <- 0
k.sub$Test_Dead[is.na(k.sub$Test_Dead)] <- 0
names(Robdat) <- recode(names(Robdat), mainnames[, 1], mainnames[, 2])
names(Robdat) <- recode(names(Robdat), subnames[, 1], subnames[, 2])
Robdat$Comment_ID <- combine.comments(Robdat)
dt1 <- fill(as.numeric(Robdat$Start_Time))
dt2 <- as.numeric(Robdat$Hours)
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Robdat$Hours <- fill(hrs)
r.main <- Robdat[!is.na(Robdat$Start_Date), c("Test_Type", "Lake", "Stream", "Water_Name", "Location", "Start_Date", 
"Start_Time", "Water_Chem_Date", "Water_Temp", "Water_Temp_Unit", 
"pH", "Total_Alkalinity", "Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
r.main$Lake <- recode(r.main$Lake, c("S", "H", "NYO"), c(1, 3, 5))
r.main$Start_Date <- as.Date(r.main$Start_Date)
r.main$Start_Time <- format(r.main$Start_Time, "%H:%M")
r.main$Water_Chem_Date <- as.Date(r.main$Water_Chem_Date)
r.sub <- Robdat[, c("concentration_t", "Test_Species", "Number_Tested", 
"Hours", "Test_Sick", "Test_Dead", "Comment_Tank", "Row", "ID")]
r.sub$Test_Species <- fill(r.sub$Test_Species)
r.sub$Number_Tested  <- fill(r.sub$Number_Tested)
r.sub$Test_Sick[is.na(r.sub$Test_Sick)] <- 0
r.sub$Test_Dead[is.na(r.sub$Test_Dead)] <- 0
rm(combine.comments, a, a1, a2, dt1, dt2, hrs, mainnames, subnames)
showme <- function(df, id) {
print(df[df$ID %in% id, ])
}
b <- with(k.sub, k.sub$ID[!is.na(Test_Species) & is.na(Number_Tested)])
showme(k.main, b)
showme(k.sub, b)
rm(showme)
a <- merge(
cbind(names=names(Main), nclass=sapply(lapply(Main, class), "[", 1)),
cbind(names=names(m.main), mclass=sapply(lapply(m.main, class), "[", 1)), all=TRUE)
b <- merge(a,
cbind(names=names(k.main), kclass=sapply(lapply(k.main, class), "[", 1)), all=TRUE)
c <- merge(b,
cbind(names=names(r.main), rclass=sapply(lapply(r.main, class), "[", 1)), all=TRUE)
c
a <- merge(
cbind(names=names(Sub), nclass=sapply(lapply(Sub, class), "[", 1)),
cbind(names=names(m.sub), mclass=sapply(lapply(m.sub, class), "[", 1)), all=TRUE)
b <- merge(a,
cbind(names=names(k.sub), kclass=sapply(lapply(k.sub, class), "[", 1)), all=TRUE)
c <- merge(b,
cbind(names=names(r.sub), rclass=sapply(lapply(r.sub, class), "[", 1)), all=TRUE)
c
rm(a, b, c)
all.main <- rbind.fill(Main, m.main, k.main, r.main)
all.sub <- rbind.fill(Sub, m.sub, k.sub, r.sub)
# fix Aerated
unique(all.main$Aerated)
all.main$Aerated <- recode(all.main$Aerated, c("aerated", "aeraated", "Aerated"), c("Yes", "Yes", "Yes"))
nota1 <- grep("no(n|t)( |-)aer", all.main$Comment_ID, ignore.case=TRUE)
nota2 <- grep("no aer", all.main$Comment_ID, ignore.case=TRUE)
nota3 <- grep("non- aer", all.main$Comment_ID, ignore.case=TRUE)
nota4 <- grep("unaer", all.main$Comment_ID, ignore.case=TRUE)
nota <- unique(c(nota1, nota2, nota3, nota4))
all.main$Aerated[nota] <- "No"
parta1 <- grep("no overnight aeration", all.main$Comment_ID, ignore.case=TRUE)
parta2 <- grep("power", all.main$Comment_ID, ignore.case=TRUE)
parta3 <- grep("Air was off", all.main$Comment_ID, ignore.case=TRUE)
parta4 <- grep("airstone left out", all.main$Comment_ID, ignore.case=TRUE)
parta <- unique(c(parta1, parta2, parta3, parta4))
all.main$Aerated[parta] <- "Partial"
assa <- grep("Assumed to have aeration", all.main$Comment_ID, ignore.case=TRUE)
all.main$Aerated[assa] <- "Assumed"
alla <- grep("aer", all.main$Comment_ID, ignore.case=TRUE)
yesa <- alla[!(alla %in% c(nota, parta, assa))]
all.main$Aerated[parta] <- "Yes"
unique(all.main$Aerated)
# fix Conductivity_Unit
unique(all.main$Conductivity_Unit)
all.main$Conductivity_Unit <- recode(all.main$Conductivity_Unit, c("at 20C", "at 25C", "at 20c", "At 20C"), c("@20C", "@25C", "@20C", "@20C"))
unique(all.main$Conductivity_Unit)
# fix Water_Name
unique(all.main$Water_Name)
all.main$Water_Name[!is.na(all.main$Water_Name) & all.main$Water_Name=="lake Huron"] <- "Lake Huron"
unique(all.main$Water_Name)
# fix Duration
look <- cut(all.main$Duration, c(-1e9, 1, 35, 1e9), labels=FALSE)
all.main$Duration[!is.na(look) & look > 2.5]
# error in Nowicki Duration
all.main$Duration[!is.na(all.main$Duration) & all.main$Duration==224] <- 24
look <- cut(all.main$Duration, c(-1e9, 1, 35, 1e9), labels=FALSE)
all.main$Duration[!is.na(look) & look > 2.5]
plotdf(all.main)
unique(all.main$Folder[is.na(all.main$Burrowed)])
table(all.main$Folder, all.main$Burrowed)
unique(all.main$Folder[!is.na(all.main$Burrowed)])
eq
?na.locf
library(zoo)
?na.locf
table(all.main$Folder, all.main$Burrowed)
all.main[!is.na(all.main$Burrowed) & all.main$Burrowed==2, ]
all.main[all.main$ID %in% 10850:10880, ]
all.main[all.main$ID %in% 10880:10900, ]
table(all.main$Water_Temp < 40, all.main$Water_Temp_Unit)
mytable(all.main$Water_Temp < 40, all.main$Water_Temp_Unit)
mytable <- function(...) table(..., useNA="ifany")
mytable(all.main$Water_Temp < 40, all.main$Water_Temp_Unit)
?table
#' Cross Tabulation and Table Creation
#'
#' Build a contingency table of the counts at each combination of factor levels, incorporating missing values by default.
#' @param ... Arguments provided to \code{\link{table}}.
#' @return An array of integer values of class "table".
#' @export
#' @examples 
#' mytable(c(1, 1, 1, 2, NA, 3, 4, 1, 10, 3))
mytable <- function(...) table(..., useNA="ifany")
mytable(c(1, 1, 1, 2, NA, 3, 4, 1, 10, 3))
?cheat
mytable <- function(...) table(..., useNA="ifany")
mytable(all.main$Water_Temp > 40, all.main$Water_Temp_Unit)
attach(all.main)
unique(Water_Temp_Unit)
unique(Water_Temp_Unit)
unit <- recode(Water_Temp_Unit, c("", "C", "F", NA), ("", "C", "F", ""))
unique(unit)
temp <- cut(Water_Temp, c(-50, 40, 100), labels=FALSE)
unique(temp)
unique(Water_Temp_Unit)
unit <- recode(Water_Temp_Unit, c("", "C", "F", NA), c("", "C", "F", ""))
unique(unit)
temp <- cut(Water_Temp, c(-50, 40, 100), labels=FALSE)
unique(temp)
unique(Water_Temp_Unit)
unit <- recode(Water_Temp_Unit, c("", "C", "F", NA), c("", "C", "F", ""))
unique(unit)
temp <- cut(Water_Temp, c(-50, 40, 100), labels=FALSE)
temp[is.na(temp)] <- 0
unique(temp)
okay <- (temp==0 & unit="") | (temp==1 & unit=="C") | (temp==2 & unit=="F")
okay <- (temp==0 & unit=="") | (temp==1 & unit=="C") | (temp==2 & unit=="F")
mytable(okay)
all.main[!okay, ]
all.main[!okay, ]
all.main[!okay & Folder=="Nowicki", ]
all.main[!okay & Folder=="Nowicki", c("ID", "Water_Temp", "Water_Temp_Unit")]
all.main[!okay & Folder!="Nowicki", ]
all.main[Folder=="Slaght" & Row %in% 110:160, ]
mytable(all.main$Water_Temp > 40, all.main$Water_Temp_Unit, Folder)
unique(temp)
recode(temp, 0:2, c("", "C", "F"))
mytable(recode(temp, 0:2, c("", "C", "F")))
unit2 <- recode(temp, 0:2, c("", "C", "F"))
unit2 <- recode(temp, 0:2, c("", "C", "F"))
mytable(Water_Temp > 40, unit2)
locator()
all.main[Concentration>100, ]
all.main[!is.na(Concentration) & Concentration>100, ]
ID[!is.na(Concentration) & Concentration>100]
look <- ID[!is.na(Concentration) & Concentration>100]
# fix Concentration
look <- ID[!is.na(Concentration) & Concentration>100]
all.sub[all.sub$ID %in% look, ]
all.sub[all.sub$ID %in% look, 1:4]
all.main[ID %in% look, ]
unique(Formulation)
mytable(Formulation)
dput(sort(unique(Formulation)))
look <- recode(Formulation, c("Hoeschst 37.6%", "Maumee 30", "Maumee 30% "), c("Hoechst 37.6%", "Maumee 30%", "Maumee 30%"))
table(look)
# fix Chemical
mytable(Chemical)
mytable(Chemical)
dput(unique(Chemical))
dfclip()
a <- dfclip()
dput(a)
fixit <- data.frame(
before = c("TFM+Bayuscide", "TFM+Bayluscide", "TFM + Bayer (.5%)-Mqt", "TFM + 0.5%Bayluscide", "TFM+0.5% Bayluscide", 
"TFM + Bayer (.8%)-Mqt", "TFM+0.8% Baylusicde", "TFM + Bayer (1%)-Mqt", "TFM + Bayer (1%)", "TFM+1.0% Bayluscide", "TFM + 1% Bayluscide", 
"TFM + 1.0% Bayluscide", "TFM + 1% Niclosamide", "TFM + 1.5% Niclosamide", "TFM + Bayer (2%)", "TFM + Bayer (2%)-HB", "TFM + Bayer (2%)-Mqt"), 
after = c("TFM + Bayluscide", "TFM + Bayluscide", "TFM + 0.5% Bayluscide (Mqt)", "TFM + 0.5% Bayluscide", "TFM + 0.5% Bayluscide", "TFM + 0.8% Bayluscide (Mqt)", 
"TFM + 0.8% Bayluscide", "TFM + 1.0% Bayluscide (Mqt)", "TFM + 1.0% Bayluscide", "TFM + 1.0% Bayluscide", "TFM + 1.0% Bayluscide", "TFM + 1.0% Bayluscide", 
"TFM + 1.0% Bayluscide", "TFM + 1.5% Bayluscide", "TFM + 2.0% Bayluscide", "TFM + 2.0% Bayluscide (HB)", "TFM + 2.0% Bayluscide (Mqt)")
)
all.equalt(a, fixit)
all.equal(a, fixit)
mytable(recode(Chemical, fixit$before, fixit$after))
unique(Lab)
dput(unique(Lab))
unique(recode(Lab, c("Mobile Lab 2", "Moblie Lab 2", "Hammond bay", "Hmmond Bay"), c("Mobile Lab. No. 2", "Mobile Lab. No. 2", "Hammond Bay", "Hammond Bay")))
# fix Test_Type
unique(Test_Type)
sort(unique(Test_Type))
dput(sort(unique(Test_Type)))
Test_Type=="Static Aerated"
mytable(Test_Type=="Static Aerated")
all.main$Aerated[Test_Type=="Static Aerated"] <- "Yes"
a <- recode(Test_Type, c("Flow", "Flow through", "Flow Through", "static", "Static Aerated"), 
c("Flow Thru", "Flow Thru", "Flow Thru", "Static", "Static"))
unique(a)
mytable(a)
plotdf()
plotdf
.SavedPlots <- NULL
.SavedPlots <- NULL
plotdf(all.main)
graphics.off()
cleanup()
search()
detach()
# C:\JVA\Lamprey\ChemControl\Resistance\Analysis\ReadRawData.r
# read in all the raw data
source("C:/JVA/Lamprey/ChemControl/Resistance/Nowicki/ReadNowicki.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/McGarry/ReadMcGarry.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Slaght/ReadSlaght.r")
source("C:/JVA/Lamprey/ChemControl/Resistance/Robertson/ReadRobertson.r")
# adjust IDs
McGarrydat$ID <- McGarrydat$ID + max(Nowdat$main$ID)
Slaghtdat$ID <- Slaghtdat$ID + max(McGarrydat$ID)
Robdat$ID <- Robdat$ID + max(Slaghtdat$ID)
# use Nowdat as comparison
# lapply(Nowdat, head, 2)
# head(McGarrydat, 2)
# head(Slaghtdat, 2)
# head(Robdat, 2)
n <- names(Nowdat$main)
c <- names(Nowdat$checktimes)
m <- names(McGarrydat)
k <- names(Slaghtdat)
r <- names(Robdat)
a <- unique(c(m, k, r))
# added to main
# c("acc..no.", "aerated.", "cond.", "cond..unit", "water.chem..date", "file", "Row", "water")
mainnames <- matrix(c(
"chemical", "Chemical",
"general.comment..regarding.the.whole.test.", "Comment_ID",
"Comments", "Comment_ID",
"formulation", "Formulation", 
"lab", "Lab", 
"lake", "Lake", 
"location", "Location", 
"total.no..tested", "Number_Tested", 
"Number_Tested_Species_1", "Number_Tested", 
"Number_Tested_Species_2", "Number_Tested", 
"ph", "pH", 
"start.date", "Start_Date", 
"start.time", "Start_Time", 
"water.code", "Stream", 
"test.no.", "Test_Number", 
"species", "Test_Species", 
"Test_Species_1", "Test_Species", 
"Test_Species_2", "Test_Species", 
"source.of.animals", "Test_Source", 
"Test_Species_1_Source", "Test_Source", 
"Test_Species_2_Source", "Test_Source", 
"test.type", "Test_Type", 
"alk.", "Total_Alkalinity", 
"temp.", "Water_Temp", 
"temp..unit", "Water_Temp_Unit",
"acc..no.", "Acc_No",
"aerated.", "Aerated", 
"cond.", "Conductivity",
"cond..unit", "Conductivity_Unit",
"water.chem..date", "Water_Chem_Date",
"water", "Water_Name"
), ncol=2, byrow=TRUE)
# added to sub
# "specific.comment..regarding.just.the.corresponding.line.of.data."
subnames <- matrix(c(
"check.time", "Hours", 
"conc.", "concentration_t", 
"dead", "Test_Dead", 
"Test_Species_1_Dead", "Test_Dead", 
"Test_Species_2_Dead", "Test_Dead", 
"ill", "Test_Sick",
"Test_Species_1_Sick", "Test_Sick",
"Test_Species_2_Sick", "Test_Sick",
"specific.comment..regarding.just.the.corresponding.line.of.data.", "Comment_Tank"
), ncol=2, byrow=TRUE)
n[is.na(match(n, mainnames[, 2]))]
c[is.na(match(c, subnames[, 2]))]
sort(a[is.na(match(a, mainnames[, 1])) & is.na(match(a, subnames[, 1]))])
look <- function(varname) {
if(varname %in% m) print(unique(McGarrydat[, varname]))
if(varname %in% k) print(unique(Slaghtdat[, varname]))
if(varname %in% r) print(unique(Robdat[, varname]))
invisible()
}
look("discomfort")
rm(n, c, m, k, r, a, look)
# calculate Duration
mmax <- tapply(McGarrydat$check.time, McGarrydat$ID, max)
indx <- tapply(McGarrydat$check.time, McGarrydat$ID)
McGarrydat$Duration <- as.numeric(mmax[indx])
Slaghtdat$Duration <- (as.numeric(Slaghtdat$end.date) + as.numeric(Slaghtdat$end.time) - 
(as.numeric(Slaghtdat$start.date) + as.numeric(Slaghtdat$start.time)))/60/60
mmax <- tapply(Robdat$check.time, Robdat$ID, max, na.rm=TRUE)
indx <- tapply(Robdat$check.time, Robdat$ID)
maxtime <- mmax[indx]
Robdat$Duration <- (as.numeric(maxtime) - as.numeric(Robdat$start.time))/60/60
rm(mmax, indx, maxtime)
# split up Nowicki data by species
keepmain <- c("ID", "Test_Type", "Lake", "Stream", "Water_Not_Lake_Or_Stream", 
"Location", "Lab", "Start_Date", "Start_Time", "Test_Number", 
"Chemical", "Formulation", "Concentration", "Water_Temp", "Water_Temp_Unit", "pH", 
"Total_Alkalinity", "Comment_ID", "Burrowed", "Duration", "Folder", "File")
keepsub <- c("ID", "Test_Sick", "Test_Dead", 
"concentration_t", "pH_t", "DO_t", "water_temp_t", "alkalinity_t", 
"concentrationB_t", "Species", "Number_Tested", "Test_Source", "Hours")
Main1 <- Nowdat$main
Main1 <- Main1[, !(names(Main1) %in% c("Test_Species_2", "Number_Tested_Species_2", "Test_Species_2_Source"))]
mdt <- strptime(paste(Main1$Start_Date, Main1$Start_Time), "%m/%d/%Y %H:%M")
Sub1 <- Nowdat$checktimes
Sub1 <- Sub1[, !(names(Sub1) %in% c("Test_Species_2_Sick", "Test_Species_2_Dead"))]
sdt <- strptime(paste(Sub1$Check_Date, Sub1$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub1$ID, Main1$ID)
Sub1$Species <- Main1$Test_Species_1[sm]
Sub1$Number_Tested <- Main1$Number_Tested_Species_1[sm]
Sub1$Test_Source <- Main1$Test_Species_1_Source[sm]
Sub1$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main1) <- recode(names(Main1), mainnames[, 1], mainnames[, 2])
Main1 <- Main1[, keepmain]
names(Sub1) <- recode(names(Sub1), subnames[, 1], subnames[, 2])
Sub1 <- Sub1[, keepsub]
Main2 <- Nowdat$main
Main2 <- Main2[, !(names(Main2) %in% c("Test_Species_1", "Number_Tested_Species_1", "Test_Species_1_Source"))]
mdt <- strptime(paste(Main2$Start_Date, Main2$Start_Time), "%m/%d/%Y %H:%M")
Sub2 <- Nowdat$checktimes
Sub2 <- Sub2[, !(names(Sub2) %in% c("Test_Species_1_Sick", "Test_Species_1_Dead"))]
sdt <- strptime(paste(Sub2$Check_Date, Sub2$Check_Time), "%m/%d/%Y %H:%M")
sm <- match(Sub2$ID, Main2$ID)
Sub2$Species <- Main2$Test_Species_2[sm]
Sub2$Number_Tested <- Main2$Number_Tested_Species_2[sm]
Sub2$Test_Source <- Main2$Test_Species_2_Source[sm]
Sub2$Hours <- (as.numeric(sdt) - as.numeric(mdt)[sm])/60/60
names(Main2) <- recode(names(Main2), mainnames[, 1], mainnames[, 2])
Main2 <- Main2[, keepmain]
names(Sub2) <- recode(names(Sub2), subnames[, 1], subnames[, 2])
Sub2 <- Sub2[, keepsub]
all.equal(Main1, Main2)
Main <- Main1
Sub <- rbind(Sub1, Sub2)
Main$Chemical <- Nowdat$chemicals$chemical.desc[match(Main$Chemical, Nowdat$chemicals$chemical)]
Main$Formulation <- Nowdat$formulations$formulation.desc[match(Main$Formulation, Nowdat$formulations$formulation)]
Main$Lab <- Nowdat$labs$lab.name[match(Main$Lab, Nowdat$labs$lab)]
Main$Test_Type <- Nowdat$testtypes$test.type.desc[match(Main$Test_Type, Nowdat$testtypes$test.type)]
Main$Start_Date <- as.Date(Main$Start_Date, "%m/%d/%Y")
head(Main)
head(Sub)
rm(keepmain, keepsub, Main1, mdt, Sub1, sdt, sm, Main2, Sub2)
# split up others into a main and a sub
# eliminate   c("alk..unit", "conc..unit", "container", "cumulative..dead", "cumulative..ill", "discomfort", "end.date", "end.time")
combine.comments <- function(df) {
# combine general comments for ID into one field if they are spread across several rows
sel <- !is.na(df$Comment_ID)
combined <- tapply(df$Comment_ID[sel], df$ID[sel], paste, collapse="; ")
newcom <- rep("", dim(df)[1])
newcom[match(names(combined), df$ID)] <- combined
newcom
}
names(McGarrydat) <- recode(names(McGarrydat), mainnames[, 1], mainnames[, 2])
names(McGarrydat) <- recode(names(McGarrydat), subnames[, 1], subnames[, 2])
McGarrydat$Comment_ID <- combine.comments(McGarrydat)
m.main <- McGarrydat[!is.na(McGarrydat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Conductivity", "Conductivity_Unit", "Test_Number", "pH", "Total_Alkalinity", 
"Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
a <- m.main$Start_Time
a1 <- floor(a/100)
a2 <- a - 100*a1
m.main$Start_Date <- as.Date(m.main$Start_Date)
m.main$Start_Time <- paste(substring(100+a1, 2), substring(100+a2, 2), sep=":")
m.sub <- McGarrydat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours", 
"Test_Sick", "Test_Dead", "Comment_Tank", "ID", "Row")]
m.sub$concentration_t <- fill(m.sub$concentration_t)
m.sub$Test_Species <- fill(m.sub$Test_Species)
m.sub$Number_Tested  <- fill(m.sub$Number_Tested)
m.sub$Test_Sick[is.na(m.sub$Test_Sick)] <- 0
m.sub$Test_Dead[is.na(m.sub$Test_Dead)] <- 0
names(Slaghtdat) <- recode(names(Slaghtdat), mainnames[, 1], mainnames[, 2])
names(Slaghtdat) <- recode(names(Slaghtdat), subnames[, 1], subnames[, 2])
Slaghtdat$Comment_ID <- combine.comments(Slaghtdat)
dt1 <- fill(as.numeric(Slaghtdat$Start_Time))
dt2 <- as.numeric(strptime(paste("1899-12-31", substring(as.character(Slaghtdat$Hours + 10000), 2)), "%Y-%m-%d %H%M"))
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Slaghtdat$Hours <- hrs
k.main <- Slaghtdat[!is.na(Slaghtdat$Start_Date), c("Test_Type", "Water_Name", "Location", "Lab", "Acc_No", "Start_Date", 
"Start_Time", "Water_Temp", "Water_Temp_Unit", 
"Test_Number", "pH", "Total_Alkalinity", "Chemical", 
"Formulation", "Folder", "File", "Sheet", "Row", "Aerated", "Comment_ID", "ID", "Duration")]
k.main$Start_Date <- as.Date(k.main$Start_Date)
k.main$Start_Time <- format(k.main$Start_Time, "%H:%M")
k.sub <- Slaghtdat[, c("concentration_t", "Test_Source", "Test_Species", "Number_Tested", "Hours",  
"Comment_Tank", "Test_Sick", "Test_Dead", "ID", "Row")]
k.sub$concentration_t <- fill(k.sub$concentration_t)
k.sub$Test_Species <- fill(k.sub$Test_Species)
k.sub$Number_Tested  <- fill(k.sub$Number_Tested)
k.sub$Test_Sick[is.na(k.sub$Test_Sick)] <- 0
k.sub$Test_Dead[is.na(k.sub$Test_Dead)] <- 0
names(Robdat) <- recode(names(Robdat), mainnames[, 1], mainnames[, 2])
names(Robdat) <- recode(names(Robdat), subnames[, 1], subnames[, 2])
Robdat$Comment_ID <- combine.comments(Robdat)
dt1 <- fill(as.numeric(Robdat$Start_Time))
dt2 <- as.numeric(Robdat$Hours)
hrs <- (dt2-dt1)/60/60
hrs[!is.na(hrs) & hrs < 0] <- hrs[!is.na(hrs) & hrs < 0] + 24
Robdat$Hours <- fill(hrs)
r.main <- Robdat[!is.na(Robdat$Start_Date), c("Test_Type", "Lake", "Stream", "Water_Name", "Location", "Start_Date", 
"Start_Time", "Water_Chem_Date", "Water_Temp", "Water_Temp_Unit", 
"pH", "Total_Alkalinity", "Chemical", "Formulation", "Comment_ID", "Folder", "File", "Sheet", "Row", "ID", "Duration")]
r.main$Lake <- recode(r.main$Lake, c("S", "H", "NYO"), c(1, 3, 5))
r.main$Start_Date <- as.Date(r.main$Start_Date)
r.main$Start_Time <- format(r.main$Start_Time, "%H:%M")
r.main$Water_Chem_Date <- as.Date(r.main$Water_Chem_Date)
r.sub <- Robdat[, c("concentration_t", "Test_Species", "Number_Tested", 
"Hours", "Test_Sick", "Test_Dead", "Comment_Tank", "Row", "ID")]
r.sub$Test_Species <- fill(r.sub$Test_Species)
r.sub$Number_Tested  <- fill(r.sub$Number_Tested)
r.sub$Test_Sick[is.na(r.sub$Test_Sick)] <- 0
r.sub$Test_Dead[is.na(r.sub$Test_Dead)] <- 0
rm(combine.comments, a, a1, a2, dt1, dt2, hrs, mainnames, subnames)
showme <- function(df, id) {
print(df[df$ID %in% id, ])
}
b <- with(k.sub, k.sub$ID[!is.na(Test_Species) & is.na(Number_Tested)])
showme(k.main, b)
showme(k.sub, b)
rm(showme)
a <- merge(
cbind(names=names(Main), nclass=sapply(lapply(Main, class), "[", 1)),
cbind(names=names(m.main), mclass=sapply(lapply(m.main, class), "[", 1)), all=TRUE)
b <- merge(a,
cbind(names=names(k.main), kclass=sapply(lapply(k.main, class), "[", 1)), all=TRUE)
c <- merge(b,
cbind(names=names(r.main), rclass=sapply(lapply(r.main, class), "[", 1)), all=TRUE)
c
a <- merge(
cbind(names=names(Sub), nclass=sapply(lapply(Sub, class), "[", 1)),
cbind(names=names(m.sub), mclass=sapply(lapply(m.sub, class), "[", 1)), all=TRUE)
b <- merge(a,
cbind(names=names(k.sub), kclass=sapply(lapply(k.sub, class), "[", 1)), all=TRUE)
c <- merge(b,
cbind(names=names(r.sub), rclass=sapply(lapply(r.sub, class), "[", 1)), all=TRUE)
c
rm(a, b, c)
all.main <- rbind.fill(Main, m.main, k.main, r.main)
all.sub <- rbind.fill(Sub, m.sub, k.sub, r.sub)
####################
# need to revisit all NOWICKI comments and change them from general to specific as needed
####################
attach(all.main)
# fix Aerated
unique(Aerated)
all.main$Aerated <- recode(Aerated, c("aerated", "aeraated", "Aerated"), c("Yes", "Yes", "Yes"))
nota1 <- grep("no(n|t)( |-)aer", Comment_ID, ignore.case=TRUE)
nota2 <- grep("no aer", Comment_ID, ignore.case=TRUE)
nota3 <- grep("non- aer", Comment_ID, ignore.case=TRUE)
nota4 <- grep("unaer", Comment_ID, ignore.case=TRUE)
nota <- unique(c(nota1, nota2, nota3, nota4))
all.main$Aerated[nota] <- "No"
parta1 <- grep("no overnight aeration", Comment_ID, ignore.case=TRUE)
parta2 <- grep("power", Comment_ID, ignore.case=TRUE)
parta3 <- grep("Air was off", Comment_ID, ignore.case=TRUE)
parta4 <- grep("airstone left out", Comment_ID, ignore.case=TRUE)
parta <- unique(c(parta1, parta2, parta3, parta4))
all.main$Aerated[parta] <- "Partial"
assa <- grep("Assumed to have aeration", Comment_ID, ignore.case=TRUE)
all.main$Aerated[assa] <- "Assumed"
alla <- grep("aer", Comment_ID, ignore.case=TRUE)
yesa <- alla[!(alla %in% c(nota, parta, assa))]
all.main$Aerated[yesa] <- "Yes"
all.main$Aerated[Test_Type=="Static Aerated"] <- "Yes"
unique(all.main$Aerated)
# fix Conductivity_Unit
unique(Conductivity_Unit)
all.main$Conductivity_Unit <- recode(Conductivity_Unit, c("at 20C", "at 25C", "at 20c", "At 20C"), c("@20C", "@25C", "@20C", "@20C"))
unique(all.main$Conductivity_Unit)
# fix Water_Name
unique(Water_Name)
all.main$Water_Name[!is.na(Water_Name) & Water_Name=="lake Huron"] <- "Lake Huron"
unique(all.main$Water_Name)
# fix Duration
look <- cut(Duration, c(-1e9, 1, 35, 1e9), labels=FALSE)
Duration[!is.na(look) & look > 2.5]
# error in Nowicki Duration
all.main$Duration[!is.na(Duration) & Duration==224] <- 24
look <- cut(Duration, c(-1e9, 1, 35, 1e9), labels=FALSE)
Duration[!is.na(look) & look > 2.5]
# fix Burrowed
table(Folder, Burrowed)
all.main[!is.na(Burrowed) & Burrowed==2, ]
# ask Nowicki about ID=10881 with Burrowed=2
# fix Water_Temp_Unit
mytable(Water_Temp > 40, Water_Temp_Unit)
                  # C     F  <NA>
  # FALSE     7  1677     0     0
  # TRUE      0     2  1890     6
  # <NA>  13311     2     0     4
unique(Water_Temp_Unit)
unit <- recode(Water_Temp_Unit, c("", "C", "F", NA), c("", "C", "F", ""))
unique(unit)
temp <- cut(Water_Temp, c(-50, 40, 100), labels=FALSE)
temp[is.na(temp)] <- 0
unique(temp)
okay <- (temp==0 & unit=="") | (temp==1 & unit=="C") | (temp==2 & unit=="F")
# let Shawn know ...
all.main[!okay & Folder=="Nowicki", c("ID", "Water_Temp", "Water_Temp_Unit")]
         # ID Water_Temp Water_Temp_Unit
# 8057   8070        5.0                
# 12555 12577         NA               C
# 12785 12810         NA               C
# 12808 12834       15.0                
# 13463 13494       21.0                
# 13525 13556        6.0                
# 13691 13723       13.0                
# 13735 13767       17.0                
# 13852 13885       45.0               C
# 14230 14264       48.0               C
# 14500 14535       17.4                
# change all units according to water temperature
all.main$Water_Temp_Unit <- recode(temp, 0:2, c("", "C", "F"))
# fix Concentration
# ask ... what is the meaning of concentration in the main table???
look <- ID[!is.na(Concentration) & Concentration>100]
all.sub[all.sub$ID %in% look, ]
all.main[ID %in% look, ]
# fix Formulation
mytable(Formulation)
all.main$Formulation <- recode(Formulation, c("Hoeschst 37.6%", "Maumee 30", "Maumee 30% "), c("Hoechst 37.6%", "Maumee 30%", "Maumee 30%"))
mytable(all.main$Formulation)
# fix Chemical
mytable(Chemical)
fixit <- data.frame(
before = c("TFM+Bayuscide", "TFM+Bayluscide", "TFM + Bayer (.5%)-Mqt", "TFM + 0.5%Bayluscide", "TFM+0.5% Bayluscide", 
"TFM + Bayer (.8%)-Mqt", "TFM+0.8% Baylusicde", "TFM + Bayer (1%)-Mqt", "TFM + Bayer (1%)", "TFM+1.0% Bayluscide", "TFM + 1% Bayluscide", 
"TFM + 1.0% Bayluscide", "TFM + 1% Niclosamide", "TFM + 1.5% Niclosamide", "TFM + Bayer (2%)", "TFM + Bayer (2%)-HB", "TFM + Bayer (2%)-Mqt"), 
after = c("TFM + Bayluscide", "TFM + Bayluscide", "TFM + 0.5% Bayluscide (Mqt)", "TFM + 0.5% Bayluscide", "TFM + 0.5% Bayluscide", "TFM + 0.8% Bayluscide (Mqt)", 
"TFM + 0.8% Bayluscide", "TFM + 1.0% Bayluscide (Mqt)", "TFM + 1.0% Bayluscide", "TFM + 1.0% Bayluscide", "TFM + 1.0% Bayluscide", "TFM + 1.0% Bayluscide", 
"TFM + 1.0% Bayluscide", "TFM + 1.5% Bayluscide", "TFM + 2.0% Bayluscide", "TFM + 2.0% Bayluscide (HB)", "TFM + 2.0% Bayluscide (Mqt)")
)
all.main$Chemical <- recode(Chemical, fixit$before, fixit$after)
mytable(all.main$Chemical)
# fix Lab
unique(all.main$Lab)
all.main$Lab <- recode(Lab, c("Mobile Lab 2", "Moblie Lab 2", "Hammond bay", "Hmmond Bay"), 
c("Mobile Lab. No. 2", "Mobile Lab. No. 2", "Hammond Bay", "Hammond Bay"))
unique(Lab)
# fix Test_Type
unique(Test_Type)
all.main$Test_Type <- recode(Test_Type, c("Flow", "Flow through", "Flow Through", "static", "Static Aerated"), 
c("Flow Thru", "Flow Thru", "Flow Thru", "Static", "Static"))
unique(all.main$Test_Type)
detach(all.main)
plotdf(all.main)
attach(all.main)
all.main[Conductivity>400, ]
all.main[!is.na(Conductivity) & Conductivity>400, ]
.SavedPlots <- NULL
cleanup()
q()
dat <- read.csv("C:/JVA/Consult/Kraus/Gill net walleye/GLIMMIX_alldata_commonmeshes (1).txt", sep="",
header=FALSE, col.names=c("year", "type", "mesh", "we", "holes", "catch", "secchi", "site", "serial"))
# site is a "block" effect representing the "pair" ... both location and year information
# mesh is a covariate
# type is a factor
dat <- dat[order(dat$year, dat$site, dat$type, dat$mesh), ]
attach(dat)
obs <- interaction(year, site, type, mesh)
dat[obs %in% obs[duplicated(obs)], ]
search()
detach()
dat <- read.csv("C:/JVA/Consult/Kraus/Gill net walleye/GLIMMIX_alldata_commonmeshes (1).txt", sep="",
header=FALSE, col.names=c("year", "type", "mesh", "we", "holes", "catch", "secchi", "site", "serial"))
# site is a "block" effect representing the "pair" ... both location and year information
# mesh is a covariate
# type is a factor
# for now, subset site<30, sites greater than 29 were fished by OMNR, and their data were structured differently
dat <- dat[order(dat$year, dat$site, dat$type, dat$mesh), ]
attach(dat)
obs <- interaction(year, site, type, mesh)
dat[obs %in% obs[duplicated(obs)], ]
detach(dat)
sub <- dat[dat$site < 29.5, ]
dim(dat)
dim(sub)
attach(sub)
obs <- interaction(year, site, type, mesh)
sub[obs %in% obs[duplicated(obs)], ]
head(sub)
mytable(obs)
mytable(paste(site, year), paste(type, mesh))
mytable(paste(site, year), paste(type, mesh))
mytable(paste(format(site), year), paste(type, format(mesh)))
mytable(paste(format(site), year), mesh, type)
mytable(paste(format(site), year), paste(type, format(mesh)))
mytable(paste0(format(site), "(", year, ")"), paste0(type, "(", format(mesh), ")"))
mytable(paste(format(site), year, sep="-"), paste(type, format(mesh), sep="-"))
mytable(paste(format(site), year, sep="-"), paste(type, format(10*mesh), sep="-"))
sy <- paste(format(site), year, sep="-")
tm <- paste(type, format(10*mesh), sep="-")
# design
mytable(sy, tm)
# covariate
tapply(secchi, list(sy, tm), mean)
# response
tapply(we, list(sy, tm), mean)
lapply(sub, class)
search()
detach()
dat <- read.csv("C:/JVA/Consult/Kraus/Gill net walleye/GLIMMIX_alldata_commonmeshes (1).txt", sep="",
header=FALSE, col.names=c("year", "type", "mesh", "we", "holes", "catch", "secchi", "site", "serial"))
dat$sitef <- as.factor(dat$site)
dat$typef <- as.factor(dat$type)
# site is a "block" effect representing the "pair" ... both location and year information
# mesh is a covariate
# type is a factor
# for now, subset site<30, sites greater than 29 were fished by OMNR, and their data were structured differently
dat <- dat[order(dat$year, dat$site, dat$type, dat$mesh), ]
attach(dat)
obs <- interaction(year, site, type, mesh)
dat[obs %in% obs[duplicated(obs)], ]
detach(dat)
sub <- dat[dat$site < 29.5, ]
attach(sub)
obs <- interaction(year, site, type, mesh)
sub[obs %in% obs[duplicated(obs)], ]
sy <- paste(format(site), year, sep="-")
tm <- paste(type, format(10*mesh), sep="-")
# design
mytable(sy, tm)
# covariate
tapply(secchi, list(sy, tm), mean)
# response
tapply(we, list(sy, tm), mean)
fit <- glm(we ~ sitef + poly(mesh, 2) + typef + sitef:typef + poly(mesh, 2):typef)
summary(fit)
fit <- aov(we ~ sitef + poly(mesh, 2) + typef + sitef:typef + poly(mesh, 2):typef)
summary(fit)
fit <- aov(we ~ sitef*poly(mesh, 2)*poly(secchi, 2)*typef)
summary(fit)
?aov
?formula
fit <- glm(we ~ sitef*poly(mesh, 2)*poly(secchi, 2)*typef)
summary(fit)
fit <- aov(we ~ (sitef + poly(mesh, 2) + poly(secchi, 2) + typef)^2)
summary(fit)
fit <- glm(we ~ (sitef + poly(mesh, 2) + poly(secchi, 2) + typef)^2)
summary(fit)
fit <- aov(we ~ (sitef + poly(mesh, 2) + secchi + typef)^2)
summary(fit)
summary(sub)
fit <- aov(we ~ (sitef + poly(mesh, 2) + typef)^3)
summary(fit)
step(fit)
fit2 <- step(fit)
summary(fit2)
summary(fit)
boxcox(fit)
fit <- aov(we ~ (sitef + poly(mesh, 2) + typef)^3)
fit2 <- step(fit, trace=FALSE)
fit <- aov(we+1 ~ (sitef + poly(mesh, 2) + typef)^3)
fit2 <- step(fit, trace=FALSE)
boxcox(fit2)
locator()
locator()
sort(we)
log(we+1)
sort(log(we+1))
fit <- aov(log(we+1)+1 ~ (sitef + poly(mesh, 2) + typef)^3)
fit2 <- step(fit, trace=FALSE)
boxcox(fit2)
fit <- aov(we^0.25 + 1 ~ (sitef + poly(mesh, 2) + typef)^3)
fit2 <- step(fit, trace=FALSE)
boxcox(fit2)
fit <- aov(log(we+1) + 1 ~ (sitef + poly(mesh, 2) + typef)^3)
fit2 <- step(fit, trace=FALSE)
windows()
boxcox()
fit <- aov(sqrt(we) + 1 ~ (sitef + poly(mesh, 2) + typef)^3)
fit2 <- step(fit, trace=FALSE)
windows()
boxcox()
fit <- aov(log(we+1) + 1 ~ (sitef + poly(mesh, 2) + typef)^3)
fit2 <- step(fit, trace=FALSE)
windows()
boxcox(fit2)
fit <- aov(sqrt(we) + 1 ~ (sitef + poly(mesh, 2) + typef)^3)
fit2 <- step(fit, trace=FALSE)
windows()
boxcox(fit2)
fit <- aov(sqrt(we) ~ (sitef + poly(mesh, 2) + typef)^3)
fit2 <- step(fit, trace=FALSE)
summary(fit2)
length(unique(site))
# first fit a model using site as the informative variable (incorporating abundance and clarity)
fit <- aov(sqrt(we) ~ (sitef + poly(mesh, 2) + typef)^3)
fit2 <- step(fit, trace=FALSE)
sus <- sort(unique(site))
windows(h=9, w=6.5)
par(mfrow=c(3, 10), mar=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="")
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
points(mesh, we, subset=sel2, pch=j, col=j)
lines(mesh, fit2$fitted^2, subset=sel2, col=j)
}
}
sus <- sort(unique(site))
windows(h=9, w=6.5)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="")
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
points(mesh, we, subset=sel2, pch=j, col=j)
lines(mesh, fit2$fitted^2, subset=sel2, col=j)
}
}
sus <- sort(unique(site))
windows(h=9, w=6.5)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="")
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
points(mesh[sel2], we[sel2], pch=j, col=j)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j)
}
}
sus <- sort(unique(site))
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="")
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
points(mesh[sel2], we[sel2], pch=j, col=j)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j)
}
}
sus <- sort(unique(site))
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE)
if(i %in% 1:10) axis(1, outer=TRUE)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
points(mesh[sel2], we[sel2], pch=j, col=j)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j)
}
}
sus <- sort(unique(site))
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=1:10)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
points(mesh[sel2], we[sel2], pch=j, col=j)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j)
}
}
sus <- sort(unique(site))
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=1:10)
box()
mtext(sus[i], side=3, line=-2)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
points(mesh[sel2], we[sel2], pch=j, col=j)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j)
}
}
head(sub)
sus <- sort(unique(site))
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=1:10)
box()
mtext(sus[i], side=3, line=-2)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[i], col=j+1)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j+1)
}
}
sus <- sort(unique(site))
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=1:10)
box()
mtext(sus[i], side=3, line=-2)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j+1)
}
}
tapply(we, type, median)
tapply(we, site, median)
medsite <- tapply(we, site, median)
meansite <- tapply(we, site, mean)
sus <- sort(unique(site))[order(medsite, meansite)]
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=1:10)
box()
mtext(sus[i], side=3, line=-2)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j+1)
}
}
mtext("Mesh", side=1, outer=TRUE)
mtext("Walleye catch", side=2, outer=TRUE)
sus <- sort(unique(site))[order(medsite, meansite)]
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=1:10)
box()
mtext(sus[i], side=3, line=-1.5, cex=0.8)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j+1)
}
}
mtext("Mesh", side=1, outer=TRUE, line=3)
mtext("Walleye catch", side=2, outer=TRUE, line=3)
sus <- sort(unique(site))[order(medsite, meansite)]
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=1:10)
box()
mtext(sus[i], side=3, line=-1.5, cex=0.8)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j+1)
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
sus <- sort(unique(site))[order(medsite, meansite)]
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=1:10)
box()
mtext(sus[i], side=3, line=-1.5, cex=0.8, adj=0.99)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j+1)
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
sus <- sort(unique(site))[order(medsite, meansite)]
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=1:10)
box()
mtext(sus[i], side=3, line=-1.5, cex=0.8, adj=0.96)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j+1)
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
sus <- sort(unique(site))[order(medsite, meansite)]
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=1:10)
box()
mtext(format(sus[i]), side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j+1)
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
sus <- sort(unique(site))[order(medsite, meansite)]
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=1:10)
box()
mtext(format(sus)[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j+1)
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
sus <- sort(unique(site))[order(-medsite, -meansite)]
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=1:10)
box()
mtext(format(sus)[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j+1)
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
c(2:4, "")
sus <- sort(unique(site))[order(-medsite, -meansite)]
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=2:5, lables=c(2:4, ""))
box()
mtext(format(sus)[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j+1)
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
sus <- sort(unique(site))[order(-medsite, -meansite)]
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=2:5, labels=c(2:4, ""))
box()
mtext(format(sus)[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j+1)
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
table(mesh)
sort(table(mesh))
head(sub)
dat$other <- dat$catch - dat$we
search()
detach()
dat <- dat[order(dat$year, dat$site, dat$type, dat$mesh), ]
attach(dat)
obs <- interaction(year, site, type, mesh)
dat[obs %in% obs[duplicated(obs)], ]
detach(dat)
sub <- dat[dat$site < 29.5, ]
attach(sub)
obs <- interaction(year, site, type, mesh)
sub[obs %in% obs[duplicated(obs)], ]
head(sub)
summary(sub)
sub[other< 0.5, ]
sub[other< -0.5, ]
search()
detach()
dat <- read.csv("C:/JVA/Consult/Kraus/Gill net walleye/GLIMMIX_alldata_commonmeshes (1).txt", sep="",
header=FALSE, col.names=c("year", "type", "mesh", "we", "holes", "catch", "secchi", "site", "serial"))
dat$sitef <- as.factor(dat$site)
dat$typef <- as.factor(dat$type)
dat$other <- dat$catch - dat$we
# need to check on an error here ... one case with catch=7 and we=8
dat[dat$other < -0.5, ]
    # year type mesh we holes catch secchi site serial sitef typef other
# 535 2012    3  3.5  8  3933     7      1   23    834    23     3    -1
# site is a "block" effect representing the "pair" ... both location and year information
# mesh is a covariate
# type is a factor
# for now, subset site<30, sites greater than 29 were fished by OMNR, and their data were structured differently
dat <- dat[order(dat$year, dat$site, dat$type, dat$mesh), ]
attach(dat)
obs <- interaction(year, site, type, mesh)
dat[obs %in% obs[duplicated(obs)], ]
detach(dat)
sub <- dat[dat$site < 29.5 & dat$other > -0.5, ]
attach(sub)
obs <- interaction(year, site, type, mesh)
sub[obs %in% obs[duplicated(obs)], ]
head(sub)
summary(sub)
# now, can the site to site variability be adequately explained by abundance of other species and clarity?
fit <- aov(sqrt(we) ~ (sqrt(other) + secchi + poly(mesh, 2) + typef)^3)
summary(fit)
fit <- aov(sqrt(we) ~ (sqrt(other) + secchi + poly(mesh, 2) + typef)^4)
summary(fit)
fit2 <- step(fit, trace=FALSE)
summary(fit2)
# first fit a model using site as the informative variable (incorporating abundance and clarity)
fit <- aov(sqrt(we) ~ (sitef + poly(mesh, 2) + typef)^3)
fit2 <- step(fit, trace=FALSE)
summary(fit2)
# first fit a model using site as the informative variable (incorporating abundance and clarity)
fit <- aov(sqrt(we) ~ (sitef + poly(mesh, 2) + typef)^2)
fit2 <- step(fit, trace=FALSE)
summary(fit2)
# now, can the site to site variability be adequately explained by abundance of other species and clarity?
fit <- aov(sqrt(we) ~ (sqrt(other) + secchi + poly(mesh, 2) + typef)^2)
fit2 <- step(fit, trace=FALSE)
summary(fit)
summary(fit2)
AICc(fit, fit2)
AICc(list(fit, fit2))
# first fit a model using site as the informative variable (incorporating abundance and clarity)
fit <- aov(sqrt(we) ~ (sitef + poly(mesh, 2) + typef)^2)
fit2 <- step(fit, trace=FALSE)
# now, can the site to site variability be adequately explained by abundance of other species and clarity?
fit3 <- aov(sqrt(we) ~ (sqrt(other) + secchi + poly(mesh, 2) + typef)^2)
fit4 <- step(fit3, trace=FALSE)
AICc(fit2, fit4)
AICc(list(fit2, fit4))
names(fit2)
names(summary(fit2))
broom
library(broom)
?broom
glance(fit2)
as.glm
?as.glm
??as.glm
# first fit a model using site as the informative variable (incorporating abundance and clarity)
fit <- aov(sqrt(we) ~ (sitef + poly(mesh, 2) + typef)^2)
fit2 <- step(fit, trace=FALSE)
summary(fit2)
fit <- lm(sqrt(we) ~ (sitef + poly(mesh, 2) + typef)^2)
fit2 <- step(fit, trace=FALSE)
summary(fit2)
glance(fit2)
# now, can the site to site variability be adequately explained by abundance of other species and clarity?
fit3 <- aov(sqrt(we) ~ (sqrt(other) + secchi + poly(mesh, 2) + typef)^2)
fit4 <- step(fit3, trace=FALSE)
summary(fit4)
fit3 <- lm(sqrt(we) ~ (sqrt(other) + secchi + poly(mesh, 2) + typef)^2)
fit4 <- step(fit3, trace=FALSE)
glance(fit4)
windows(h=6.5, w=9)
par(mfrow=c(3, 10), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sus)) {
sel <- site==sus[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=2:5, labels=c(2:4, ""))
box()
mtext(format(sus)[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], fit4$fitted[sel2]^2, col=j+1)
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
q()
cleanup()
library(lme4)
dat <- read.csv("C:/JVA/Consult/Kraus/Gill net walleye/GLIMMIX_alldata_commonmeshes (1).txt", sep="",
header=FALSE, col.names=c("year", "type", "mesh", "we", "holes", "catch", "secchi", "site", "serial"))
dat$sitef <- as.factor(dat$site)
dat$typef <- as.factor(dat$type)
dat$other <- dat$catch - dat$we
# need to check on an error here ... one case with catch=7 and we=8
dat[dat$other < -0.5, ]
    # year type mesh we holes catch secchi site serial sitef typef other
# 535 2012    3  3.5  8  3933     7      1   23    834    23     3    -1
# site is a "block" effect representing the "pair" ... both location and year information
# mesh is a covariate
# type is a factor
# for now, subset site<30, sites greater than 29 were fished by OMNR, and their data were structured differently
dat <- dat[order(dat$year, dat$site, dat$type, dat$mesh), ]
attach(dat)
obs <- interaction(year, site, type, mesh)
dat[obs %in% obs[duplicated(obs)], ]
detach(dat)
sub <- dat[dat$site < 29.5 & dat$other > -0.5, ]
attach(sub)
obs <- interaction(year, site, type, mesh)
sub[obs %in% obs[duplicated(obs)], ]
sy <- paste(format(site), year, sep="-")
tm <- paste(type, format(10*mesh), sep="-")
# design
mytable(sy, tm)
# covariate
tapply(secchi, list(sy, tm), mean)
# response
tapply(we, list(sy, tm), mean)
ls()
head(sub)
# first fit a model using site as the informative variable (incorporating abundance and clarity)
fit1 <- lmer(sqrt(we) ~ (sqrt(other) + secchi + poly(mesh, 2) + typef)^2 + (1 | sitef))
all.combs
allcombs
?allcombs
allcombs3
allcombs(3)
fit1 <- lmer(sqrt(we) ~ sqrt(other) + secchi + poly(mesh, 2) + typef + 
sqrt(other)*secchi + sqrt(other)*poly(mesh, 2) + sqrt(other)*typef + secchi*poly(mesh, 2) + secchi*typef + poly(mesh, 2)*typef +
sqrt(other)*secchi*poly(mesh, 2) + sqrt(other)*secchi*typef + sqrt(other)*poly(mesh, 2)*typef + secchi*poly(mesh, 2)*typef
sqrt(other)*secchi*poly(mesh, 2)*typef + (1 | sitef))
fit1 <- lmer(sqrt(we) ~ sqrt(other) + secchi + poly(mesh, 2) + typef + 
sqrt(other)*secchi + sqrt(other)*poly(mesh, 2) + sqrt(other)*typef + secchi*poly(mesh, 2) + secchi*typef + poly(mesh, 2)*typef +
sqrt(other)*secchi*poly(mesh, 2) + sqrt(other)*secchi*typef + sqrt(other)*poly(mesh, 2)*typef + secchi*poly(mesh, 2)*typef + 
sqrt(other)*secchi*poly(mesh, 2)*typef + (1 | sitef))
summary(fit1)
AIC(fit1)
terms <- c("sqrt(other)", "secchi", "poly(mesh, 2)", "typef", "sqrt(other)*secchi", "sqrt(other)*poly(mesh, 2)", "sqrt(other)*typef", "secchi*poly(mesh, 2)", "secchi*typef", "poly(mesh, 2)*typef", "sqrt(other)*secchi*poly(mesh, 2)", "sqrt(other)*secchi*typef", "sqrt(other)*poly(mesh, 2)*typef", "secchi*poly(mesh, 2)*typef", "sqrt(other)*secchi*poly(mesh, 2)*typef")
length(terms)
allcombs(length(terms))
all <- allcombs(length(terms))
dim(all)
head(all)
terms <- c("sqrt(other)", "secchi", "poly(mesh, 2)", "typef", 
"sqrt(other)*secchi", "sqrt(other)*poly(mesh, 2)", "sqrt(other)*typef", "secchi*poly(mesh, 2)", "secchi*typef", "poly(mesh, 2)*typef")
all <- allcombs(length(terms))
dim(all)
head(all)
colnames(all)
colnames(all) <- terms
head(all)
all[, "sqrt(other)*secchi"]==1 & (all[, "sqrt(other)"]==0 | all[, "secchi"]==0)
terms <- c("sqrt(other)", "secchi", "poly(mesh, 2)", "typef", "sqrt(other)*secchi", "sqrt(other)*poly(mesh, 2)", "sqrt(other)*typef", "secchi*poly(mesh, 2)", 
"secchi*typef", "poly(mesh, 2)*typef", "sqrt(other)*secchi*poly(mesh, 2)", "sqrt(other)*secchi*typef", "sqrt(other)*poly(mesh, 2)*typef", 
"secchi*poly(mesh, 2)*typef", "sqrt(other)*secchi*poly(mesh, 2)*typef")
terms <- c("sqrt(other)", "secchi", "poly(mesh, 2)", "typef", 
"sqrt(other)*secchi", "sqrt(other)*poly(mesh, 2)", "sqrt(other)*typef", "secchi*poly(mesh, 2)", "secchi*typef", "poly(mesh, 2)*typef")
all <- allcombs(length(terms))
colnames(all) <- terms
del1 <- all[, "sqrt(other)*secchi"]==1 & (all[, "sqrt(other)"]==0 | all[, "secchi"]==0)
del2 <- all[, "sqrt(other)*poly(mesh, 2)"]==1 & (all[, "sqrt(other)"]==0 | all[, "poly(mesh, 2)"]==0)
del3 <- all[, "sqrt(other)*typef"]==1 & (all[, "sqrt(other)"]==0 | all[, "typef"]==0)
del4 <- all[, "secchi*poly(mesh, 2)"]==1 & (all[, "secchi"]==0 | all[, "poly(mesh, 2)"]==0)
del5 <- all[, "secchi*typef"]==1 & (all[, "secchi"]==0 | all[, "typef"]==0)
del6 <- all[, "poly(mesh, 2)*typef"]==1 & (all[, "poly(mesh, 2)"]==0 | all[, "typef"]==0)
all[!del1 & !del2 & !del3 & !del4 & !del5 & !del6, ]
all2 <- all[!del1 & !del2 & !del3 & !del4 & !del5 & !del6, ]
dim(all2)
all2
apply(all2==1, 1, function(row) paste(terms[row], collapse=" + "))
formulae <- paste("sqrt(we) ~", apply(all2==1, 1, function(row) paste(terms[row], collapse=" + ")))
formulae
formulae <- paste("sqrt(we) ~", apply(all2==1, 1, function(row) paste(terms[row], collapse=" + ")), " + (1 | sitef)")
formulae[1] <- "sqrt(we) ~ 1 + (1 | sitef)"
formulae
# first fit a model using site as the informative variable (incorporating abundance and clarity)
fit1 <- lmer(sqrt(we) ~ (sqrt(other) + secchi + poly(mesh, 2) + typef)^2 + (1 | sitef))
# terms <- c("sqrt(other)", "secchi", "poly(mesh, 2)", "typef", "sqrt(other)*secchi", "sqrt(other)*poly(mesh, 2)", "sqrt(other)*typef", "secchi*poly(mesh, 2)", 
# "secchi*typef", "poly(mesh, 2)*typef", "sqrt(other)*secchi*poly(mesh, 2)", "sqrt(other)*secchi*typef", "sqrt(other)*poly(mesh, 2)*typef", 
# "secchi*poly(mesh, 2)*typef", "sqrt(other)*secchi*poly(mesh, 2)*typef")
terms <- c("sqrt(other)", "secchi", "poly(mesh, 2)", "typef", 
"sqrt(other)*secchi", "sqrt(other)*poly(mesh, 2)", "sqrt(other)*typef", "secchi*poly(mesh, 2)", "secchi*typef", "poly(mesh, 2)*typef")
all <- allcombs(length(terms))
colnames(all) <- terms
del1 <- all[, "sqrt(other)*secchi"]==1 & (all[, "sqrt(other)"]==0 | all[, "secchi"]==0)
del2 <- all[, "sqrt(other)*poly(mesh, 2)"]==1 & (all[, "sqrt(other)"]==0 | all[, "poly(mesh, 2)"]==0)
del3 <- all[, "sqrt(other)*typef"]==1 & (all[, "sqrt(other)"]==0 | all[, "typef"]==0)
del4 <- all[, "secchi*poly(mesh, 2)"]==1 & (all[, "secchi"]==0 | all[, "poly(mesh, 2)"]==0)
del5 <- all[, "secchi*typef"]==1 & (all[, "secchi"]==0 | all[, "typef"]==0)
del6 <- all[, "poly(mesh, 2)*typef"]==1 & (all[, "poly(mesh, 2)"]==0 | all[, "typef"]==0)
all2 <- all[!del1 & !del2 & !del3 & !del4 & !del5 & !del6, ]
formulae <- paste("sqrt(we) ~", apply(all2==1, 1, function(row) paste(terms[row], collapse=" + ")), " + (1 | sitef)")
formulae[1] <- "sqrt(we) ~ 1 + (1 | sitef)"
fits <- lapply(formulae, function(f) lmer(f)
fits <- lapply(formulae, lmer)
fits <- lapply(formulae, lmer)
length(fits)
fits[[1]]
fits[[113]]
fit1
summary(fits[[113]])
summary(fit1)
all.equal(fit1, fits[[113]])
aic <- sapply(fits, AIC)
as.matrix(round(aic - min(aic)))# 3 is the best, none of the others are close
look <- data.frame(formulae, aic, daic=aic-min(aic))
head(look)
look <- data.frame(formulae, aic, daic=aic-min(aic))
look[order(look$daic), ]
look <- data.frame(formulae, aic, daic=aic-min(aic))
look[order(look$daic), 1:10]
look <- data.frame(formulae, aic, daic=aic-min(aic))
look[order(look$daic), ][1:10, ]
formulae[aic-min(aic) < 2]
# the simplest model of the best (daic < 2) was
fit <- lmer(sqrt(we) ~ secchi + poly(mesh, 2) + typef + secchi*poly(mesh, 2) + poly(mesh, 2)*typef  + (1 | sitef))
summary(fit)
predsite <- predict(fit)
predgen <- predict(fit, re.form=NA)
plot(secchi)
hist(secchi)
plot(hclust(secchi))
hclust(secchi)
?hclust
plot(hclust(dist(secchi)))
prune(hclust(dist(secchi)))
?hclust
cuttree(hclust(dist(secchi)))
cutree(hclust(dist(secchi)))
cutree(hclust(dist(secchi)), 4)
look <- cutree(hclust(dist(secchi)), 4)
table(secchi, look)
dat$secchig <- cut(secchi, c(0, 1, 2, 4), right=FALSE, labels=FALSE)
dat$secchig <- cut(dat$secchi, c(0, 1, 2, 4), right=FALSE, labels=FALSE)
search()
detach()
# need to check on an error here ... one case with catch=7 and we=8
dat[dat$other < -0.5, ]
    # year type mesh we holes catch secchi site serial sitef typef other
# 535 2012    3  3.5  8  3933     7      1   23    834    23     3    -1
# site is a "block" effect representing the "pair" ... both location and year information
# mesh is a covariate
# type is a factor
# for now, subset site<30, sites greater than 29 were fished by OMNR, and their data were structured differently
dat <- dat[order(dat$year, dat$site, dat$type, dat$mesh), ]
attach(dat)
obs <- interaction(year, site, type, mesh)
dat[obs %in% obs[duplicated(obs)], ]
detach(dat)
sub <- dat[dat$site < 29.5 & dat$other > -0.5, ]
attach(sub)
obs <- interaction(year, site, type, mesh)
sub[obs %in% obs[duplicated(obs)], ]
sy <- paste(format(site), year, sep="-")
tm <- paste(type, format(10*mesh), sep="-")
# design
mytable(sy, tm)
# covariate
tapply(secchi, list(sy, tm), mean)
# response
tapply(we, list(sy, tm), mean)
# first fit a model using site as the informative variable (incorporating abundance and clarity)
terms <- c("sqrt(other)", "secchi", "poly(mesh, 2)", "typef", 
"sqrt(other)*secchi", "sqrt(other)*poly(mesh, 2)", "sqrt(other)*typef", "secchi*poly(mesh, 2)", "secchi*typef", "poly(mesh, 2)*typef")
all <- allcombs(length(terms))
colnames(all) <- terms
del1 <- all[, "sqrt(other)*secchi"]==1 & (all[, "sqrt(other)"]==0 | all[, "secchi"]==0)
del2 <- all[, "sqrt(other)*poly(mesh, 2)"]==1 & (all[, "sqrt(other)"]==0 | all[, "poly(mesh, 2)"]==0)
del3 <- all[, "sqrt(other)*typef"]==1 & (all[, "sqrt(other)"]==0 | all[, "typef"]==0)
del4 <- all[, "secchi*poly(mesh, 2)"]==1 & (all[, "secchi"]==0 | all[, "poly(mesh, 2)"]==0)
del5 <- all[, "secchi*typef"]==1 & (all[, "secchi"]==0 | all[, "typef"]==0)
del6 <- all[, "poly(mesh, 2)*typef"]==1 & (all[, "poly(mesh, 2)"]==0 | all[, "typef"]==0)
all2 <- all[!del1 & !del2 & !del3 & !del4 & !del5 & !del6, ]
formulae <- paste("sqrt(we) ~", apply(all2==1, 1, function(row) paste(terms[row], collapse=" + ")), " + (1 | sitef)")
formulae[1] <- "sqrt(we) ~ 1 + (1 | sitef)"
fits <- lapply(formulae, lmer)
aic <- sapply(fits, AIC)
look <- data.frame(formulae, aic, daic=aic-min(aic))
look[order(look$daic), ][1:10, ]
formulae[aic-min(aic) < 2]
sug <- sort(unique(secchig))
windows()
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sug)) {
sel <- site==sug[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=2:5, labels=c(2:4, ""))
box()
mtext(format(sug)[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], fit2$fitted[sel2]^2, col=j+1)
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
sug <- sort(unique(secchig))
windows()
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sug)) {
sel <- site==sug[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=2:5, labels=c(2:4, ""))
box()
mtext(format(sug)[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], predgen[sel2]^2, col=j+1)
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
windows()
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sug)) {
sel <- secchig==sug[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=2:5, labels=c(2:4, ""))
box()
mtext(format(sug)[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], predgen[sel2]^2, col=j+1)
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
sug
windows(w=9, h=6.5)
par(mfrow=c(1, 3), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sug)) {
sel <- secchig==sug[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=2:5, labels=c(2:4, ""))
box()
mtext(format(sug)[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], predgen[sel2]^2, col=j+1)
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
range(secchi[sel])
paste(range(secchi[sel]), collapse=" - ")
paste(format(range(secchi[sel])), collapse=" - ")
paste("Secchi:", paste(format(range(secchi[sel])), collapse=" - "))
par(mfrow=c(1, 3), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sug)) {
sel <- secchig==sug[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=2:5, labels=c(2:4, ""))
box()
mtext(paste("Secchi:", paste(format(range(secchi[sel])), collapse=" - ")), side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(mesh[sel2], we[sel2], sut[j], col=j+1)
lines(mesh[sel2], predgen[sel2]^2, col=j+1)
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
windows(w=9, h=6.5)
par(mfrow=c(1, 3), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sug)) {
sel <- secchig==sug[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=2:5, labels=c(2:4, ""))
box()
mtext(paste("Secchi:", paste(format(range(secchi[sel])), collapse=" - ")), side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(jitter(mesh)[sel2], we[sel2], sut[j], col=j+1)
sus <- sort(unique(site[sel2]))
for(k in seq_along(sus)) {
sel3 <- sel2 & site==sus[k]
lines(mesh[sel2], predgen[sel2]^2, col=j+1)
}
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
windows(w=9, h=6.5)
par(mfrow=c(1, 3), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sug)) {
sel <- secchig==sug[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i %in% c(1, 11, 21)) axis(2, outer=TRUE, las=1)
if(i %in% 1:10) axis(1, outer=TRUE, at=2:5, labels=c(2:4, ""))
box()
mtext(paste("Secchi:", paste(format(range(secchi[sel])), collapse=" - ")), side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(jitter(mesh)[sel2], we[sel2], sut[j], col=j+1)
sus <- sort(unique(site[sel2]))
for(k in seq_along(sus)) {
sel3 <- sel2 & site==sus[k]
lines(mesh[sel3], predgen[sel3]^2, col=j+1)
}
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
fit
windows(w=9, h=6.5)
par(mfrow=c(1, 3), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sug)) {
sel <- secchig==sug[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i==1) axis(2, outer=TRUE, las=1)
axis(1, outer=TRUE)
box()
mtext(paste("Secchi:", paste(format(range(secchi[sel])), collapse=" - ")), side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(jitter(mesh)[sel2], we[sel2], sut[j], col=j+1)
sus <- sort(unique(site[sel2]))
for(k in seq_along(sus)) {
sel3 <- sel2 & site==sus[k]
lines(mesh[sel3], predgen[sel3]^2, col=j+1)
}
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
windows(w=9, h=6.5)
par(mfrow=c(1, 3), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sug)) {
sel <- secchig==sug[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i==1) axis(2, outer=TRUE, las=1)
axis(1, outer=TRUE, at=2:5)
box()
mtext(paste("Secchi:", paste(format(range(secchi[sel])), collapse=" - ")), side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(jitter(mesh)[sel2], we[sel2], sut[j], col=j+1)
sus <- sort(unique(site[sel2]))
for(k in seq_along(sus)) {
sel3 <- sel2 & site==sus[k]
lines(mesh[sel3], predgen[sel3]^2, col=j+1)
}
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
newdata <- expand.grid(secchi=unique(secchi), mesh=unique(mesh), typef=unique(typef))
dim(newdata)
head(newdata)
newdata <- expand.grid(secchi=unique(secchi), mesh=unique(mesh), typef=unique(typef))
prednew <- predict(fit, re.form=NA, newdata=newdata)
dim(newdata)
length(prednew)
newdata$secchig <- cut(newdata$secchi, c(0, 1, 2, 4), right=FALSE, labels=FALSE)
sut
typef==1
newdata$secchig <- cut(newdata$secchi, c(0, 1, 2, 4), right=FALSE, labels=FALSE)
newdata$row <- 1:dim(newdata)[1]
newdata <- expand.grid(secchi=unique(secchi), mesh=unique(mesh), typef=unique(typef))
newdata$secchig <- cut(newdata$secchi, c(0, 1, 2, 4), right=FALSE, labels=FALSE)
newdata$row <- 1:dim(newdata)[1]
prednew <- predict(fit, re.form=NA, newdata=newdata)
sug <- sort(unique(secchig))
windows(w=9, h=6.5)
par(mfrow=c(1, 3), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sug)) {
sel <- secchig==sug[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i==1) axis(2, outer=TRUE, las=1)
axis(1, outer=TRUE, at=2:5)
box()
mtext(paste("Secchi:", paste(format(range(secchi[sel])), collapse=" - ")), side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(jitter(mesh)[sel2], we[sel2], sut[j], col=j+1)
sur <- sort(unique(newdata$row[newdata$secchig==sug[i] & newdata$typef==sut[j]))
for(k in seq_along(sur)) {
sel3 <- newdata$secchig==sug[i] & newdata$typef==sut[j] & newdata$row==sur[k]
lines(newdata$mesh[sel3], prednew[sel3]^2, col=j+1)
}
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
windows(w=9, h=6.5)
par(mfrow=c(1, 3), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sug)) {
sel <- secchig==sug[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i==1) axis(2, outer=TRUE, las=1)
axis(1, outer=TRUE, at=2:5)
box()
mtext(paste("Secchi:", paste(format(range(secchi[sel])), collapse=" - ")), side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(jitter(mesh)[sel2], we[sel2], sut[j], col=j+1)
sur <- sort(unique(newdata$row[newdata$secchig==sug[i] & newdata$typef==sut[j]]))
for(k in seq_along(sur)) {
sel3 <- newdata$secchig==sug[i] & newdata$typef==sut[j] & newdata$row==sur[k]
lines(newdata$mesh[sel3], prednew[sel3]^2, col=j+1)
}
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
prednew
i 
j
k
sug <- sort(unique(secchig))
windows(w=9, h=6.5)
par(mfrow=c(1, 3), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
sel <- secchig==sug[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i==1) axis(2, outer=TRUE, las=1)
axis(1, outer=TRUE, at=2:5)
box()
mtext(paste("Secchi:", paste(format(range(secchi[sel])), collapse=" - ")), side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
sel2 <- sel & type==sut[j]
text(jitter(mesh)[sel2], we[sel2], sut[j], col=j+1)
sur <- sort(unique(newdata$row[newdata$secchig==sug[i] & newdata$typef==sut[j]]))
sur
sel3 <- newdata$secchig==sug[i] & newdata$typef==sut[j] & newdata$row==sur[k]
lines(newdata$mesh[sel3], prednew[sel3]^2, col=j+1)
sel3
newdata$secchig==sug[i]
newdata$typef==sut[j]
newdata$row==sur[k]
newdata <- expand.grid(secchi=unique(secchi), mesh=unique(mesh), typef=unique(typef))
newdata$secchig <- cut(newdata$secchi, c(0, 1, 2, 4), right=FALSE, labels=FALSE)
prednew <- predict(fit, re.form=NA, newdata=newdata)
sug <- sort(unique(secchig))
windows(w=9, h=6.5)
par(mfrow=c(1, 3), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sug)) {
sel <- secchig==sug[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i==1) axis(2, outer=TRUE, las=1)
axis(1, outer=TRUE, at=2:5)
box()
mtext(paste("Secchi:", paste(format(range(secchi[sel])), collapse=" - ")), side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(jitter(mesh)[sel2], we[sel2], sut[j], col=j+1)
sus <- sort(unique(newdata$secchi[newdata$secchig==sug[i] & newdata$typef==sut[j]]))
for(k in seq_along(sus)) {
sel3 <- newdata$secchig==sug[i] & newdata$typef==sut[j] & newdata$secchi==sus[k]
lines(newdata$mesh[sel3], prednew[sel3]^2, col=j+1)
}
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
sug <- sort(unique(secchig))
windows(w=9, h=6.5)
par(mfrow=c(1, 3), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sug)) {
sel <- secchig==sug[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i==1) axis(2, outer=TRUE, las=1)
axis(1, outer=TRUE, at=2:5)
box()
mtext(paste("Secchi:", paste(format(range(secchi[sel])), collapse=" - ")), side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(jitter(mesh)[sel2], we[sel2], sut[j], col=j+1)
sus <- sort(unique(newdata$secchi[newdata$secchig==sug[i] & newdata$typef==sut[j]]))
for(k in seq_along(sus)) {
sel3 <- newdata$secchig==sug[i] & newdata$typef==sut[j] & newdata$secchi==sus[k]
lines(spline(newdata$mesh[sel3], prednew[sel3]^2), col=j+1)
}
}
}
mtext("Mesh", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
formulae[aic-min(aic) < 2]
cleanup()
graphics.off()
# C:\JVA\Consult\Kraus\Gill net walleye\Gill Net Compare.r
library(lme4)
# read in and prepare the data
dat <- read.csv("C:/JVA/Consult/Kraus/Gill net walleye/GLIMMIX_alldata_commonmeshes (1).txt", sep="",
header=FALSE, col.names=c("year", "type", "mesh", "we", "holes", "catch", "secchi", "site", "serial"))
dat$sitef <- as.factor(dat$site)
dat$typef <- as.factor(dat$type)
dat$other <- dat$catch - dat$we
dat$secchig <- cut(dat$secchi, c(0, 1, 2, 4), right=FALSE, labels=FALSE)
dat <- dat[order(dat$year, dat$site, dat$type, dat$mesh), ]
# need to check on an error here ... one case with catch=7 and we=8
dat[dat$other < -0.5, ]
    # year type mesh we holes catch secchi site serial sitef typef other
# 535 2012    3  3.5  8  3933     7      1   23    834    23     3    -1
# site is a random effect representing both spatial (location) and temporal (year) variability
# mesh is a covariate
# type is a factor
obs <- interaction(dat$year, dat$site, dat$type, dat$mesh)
dat[obs %in% obs[duplicated(obs)], ]
# for now, subset site<30, sites greater than 29 were fished by OMNR, and their data were structured differently
# and ignore record with we > catch
sub <- dat[dat$site < 29.5 & dat$other > -0.5, ]
attach(sub)
obs <- interaction(year, site, type, mesh)
sub[obs %in% obs[duplicated(obs)], ]
sy <- paste(format(site), year, sep="-")
tm <- paste(type, format(10*mesh), sep="-")
# design
mytable(sy, tm)
# covariate
tapply(secchi, list(sy, tm), mean)
# response
tapply(we, list(sy, tm), mean)
# fit a mixed effects model with all two-way interactions of fixed effects (other, secchi, mesh, type) and site as a random effect
terms <- c("sqrt(other)", "secchi", "poly(mesh, 2)", "typef", 
"sqrt(other)*secchi", "sqrt(other)*poly(mesh, 2)", "sqrt(other)*typef", "secchi*poly(mesh, 2)", "secchi*typef", "poly(mesh, 2)*typef")
all <- allcombs(length(terms))
colnames(all) <- terms
del1 <- all[, "sqrt(other)*secchi"]==1 & (all[, "sqrt(other)"]==0 | all[, "secchi"]==0)
del2 <- all[, "sqrt(other)*poly(mesh, 2)"]==1 & (all[, "sqrt(other)"]==0 | all[, "poly(mesh, 2)"]==0)
del3 <- all[, "sqrt(other)*typef"]==1 & (all[, "sqrt(other)"]==0 | all[, "typef"]==0)
del4 <- all[, "secchi*poly(mesh, 2)"]==1 & (all[, "secchi"]==0 | all[, "poly(mesh, 2)"]==0)
del5 <- all[, "secchi*typef"]==1 & (all[, "secchi"]==0 | all[, "typef"]==0)
del6 <- all[, "poly(mesh, 2)*typef"]==1 & (all[, "poly(mesh, 2)"]==0 | all[, "typef"]==0)
all2 <- all[!del1 & !del2 & !del3 & !del4 & !del5 & !del6, ]
formulae <- paste("sqrt(we) ~", apply(all2==1, 1, function(row) paste(terms[row], collapse=" + ")), " + (1 | sitef)")
formulae[1] <- "sqrt(we) ~ 1 + (1 | sitef)"
fits <- lapply(formulae, lmer)
aic <- sapply(fits, AIC)
look <- data.frame(formulae, aic, daic=aic-min(aic))
look[order(look$daic), ][1:10, ]
formulae[aic-min(aic) < 2]
# the simplest version of the best models (daic < 2) was
fit <- lmer(sqrt(we) ~ secchi + poly(mesh, 2) + typef + secchi*poly(mesh, 2) + poly(mesh, 2)*typef  + (1 | sitef))
# create a new data frame with balanced data for each combination of secchi, mesh, and type for plotting predictions
newdata <- expand.grid(secchi=unique(secchi), mesh=unique(mesh), typef=unique(typef))
newdata$secchig <- cut(newdata$secchi, c(0, 1, 2, 4), right=FALSE, labels=FALSE)
prednew <- predict(fit, re.form=NA, newdata=newdata)
windows(w=9, h=6.5)
par(mfrow=c(1, 3), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
sug <- sort(unique(secchig))
for(i in seq_along(sug)) {
sel <- secchig==sug[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i==1) axis(2, outer=TRUE, las=1)
axis(1, outer=TRUE, at=2:5)
box()
mtext(paste("Secchi:", paste(format(range(secchi[sel])), collapse=" - ")), side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(jitter(mesh)[sel2], we[sel2], sut[j], col=j+1)
sus <- sort(unique(newdata$secchi[newdata$secchig==sug[i] & newdata$typef==sut[j]]))
for(k in seq_along(sus)) {
sel3 <- newdata$secchig==sug[i] & newdata$typef==sut[j] & newdata$secchi==sus[k]
lines(spline(newdata$mesh[sel3], prednew[sel3]^2), col=j+1)
}
}
}
mtext("Mesh  (jittered)", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
ls()
cleanup()
# C:\JVA\Consult\Kraus\Gill net walleye\Gill Net Compare.r
library(lme4)
# read in and prepare the data
dat <- read.csv("C:/JVA/Consult/Kraus/Gill net walleye/GLIMMIX_alldata_commonmeshes (1).txt", sep="",
header=FALSE, col.names=c("year", "type", "mesh", "we", "holes", "catch", "secchi", "site", "serial"))
dat$sitef <- as.factor(dat$site)
dat$typef <- as.factor(dat$type)
dat$other <- dat$catch - dat$we
dat$secchig <- cut(dat$secchi, c(0, 1, 2, 4), right=FALSE, labels=FALSE)
dat <- dat[order(dat$year, dat$site, dat$type, dat$mesh), ]
# need to check on an error here ... one case with catch=7 and we=8
dat[dat$other < -0.5, ]
    # year type mesh we holes catch secchi site serial sitef typef other
# 535 2012    3  3.5  8  3933     7      1   23    834    23     3    -1
# site is a random effect representing both spatial (location) and temporal (year) variability
# mesh is a covariate
# type is a factor
obs <- interaction(dat$year, dat$site, dat$type, dat$mesh)
dat[obs %in% obs[duplicated(obs)], ]
# for now, subset site<30, sites greater than 29 were fished by OMNR, and their data were structured differently
# and ignore record with we > catch
sub <- dat[dat$site < 29.5 & dat$other > -0.5, ]
attach(sub)
obs <- interaction(year, site, type, mesh)
sub[obs %in% obs[duplicated(obs)], ]
rm(obs)
sy <- paste(format(site), year, sep="-")
tm <- paste(type, format(10*mesh), sep="-")
# design
mytable(sy, tm)
# covariate
tapply(secchi, list(sy, tm), mean)
# response
tapply(we, list(sy, tm), mean)
rm(sy, tm)
# fit a mixed effects model with all two-way interactions of fixed effects (other, secchi, mesh, type) and site as a random effect
terms <- c("sqrt(other)", "secchi", "poly(mesh, 2)", "typef", 
"sqrt(other)*secchi", "sqrt(other)*poly(mesh, 2)", "sqrt(other)*typef", "secchi*poly(mesh, 2)", "secchi*typef", "poly(mesh, 2)*typef")
all <- allcombs(length(terms))
colnames(all) <- terms
del1 <- all[, "sqrt(other)*secchi"]==1 & (all[, "sqrt(other)"]==0 | all[, "secchi"]==0)
del2 <- all[, "sqrt(other)*poly(mesh, 2)"]==1 & (all[, "sqrt(other)"]==0 | all[, "poly(mesh, 2)"]==0)
del3 <- all[, "sqrt(other)*typef"]==1 & (all[, "sqrt(other)"]==0 | all[, "typef"]==0)
del4 <- all[, "secchi*poly(mesh, 2)"]==1 & (all[, "secchi"]==0 | all[, "poly(mesh, 2)"]==0)
del5 <- all[, "secchi*typef"]==1 & (all[, "secchi"]==0 | all[, "typef"]==0)
del6 <- all[, "poly(mesh, 2)*typef"]==1 & (all[, "poly(mesh, 2)"]==0 | all[, "typef"]==0)
all2 <- all[!del1 & !del2 & !del3 & !del4 & !del5 & !del6, ]
formulae <- paste("sqrt(we) ~", apply(all2==1, 1, function(row) paste(terms[row], collapse=" + ")), " + (1 | sitef)")
formulae[1] <- "sqrt(we) ~ 1 + (1 | sitef)"
fits <- lapply(formulae, lmer)
aic <- sapply(fits, AIC)
look <- data.frame(formulae, aic, daic=aic-min(aic))
look[order(look$daic), ][1:10, ]
formulae[aic-min(aic) < 2]
rm(terms, all, del1, del2, del3, del4, del5, del6)
# the simplest version of the best models (daic < 2) was
fit <- lmer(sqrt(we) ~ secchi + poly(mesh, 2) + typef + secchi*poly(mesh, 2) + poly(mesh, 2)*typef  + (1 | sitef))
# create a new data frame with balanced data for each combination of secchi, mesh, and type for plotting predictions
newdata <- expand.grid(secchi=unique(secchi), mesh=unique(mesh), typef=unique(typef))
newdata$secchig <- cut(newdata$secchi, c(0, 1, 2, 4), right=FALSE, labels=FALSE)
prednew <- predict(fit, re.form=NA, newdata=newdata)
windows(w=9, h=6.5)
par(mfrow=c(1, 3), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
sug <- sort(unique(secchig))
for(i in seq_along(sug)) {
sel <- secchig==sug[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i==1) axis(2, outer=TRUE, las=1)
axis(1, outer=TRUE, at=2:5)
box()
mtext(paste("Secchi:", paste(format(range(secchi[sel])), collapse=" - ")), side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(jitter(mesh)[sel2], we[sel2], sut[j], col=j+1)
sus <- sort(unique(newdata$secchi[newdata$secchig==sug[i] & newdata$typef==sut[j]]))
for(k in seq_along(sus)) {
sel3 <- newdata$secchig==sug[i] & newdata$typef==sut[j] & newdata$secchi==sus[k]
lines(spline(newdata$mesh[sel3], prednew[sel3]^2), col=j+1)
}
}
}
mtext("Mesh  (jittered)", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
ls()
rm(terms, all, del1, del2, del3, del4, del5, del6, all2, formulae, fits, aic)
ls()
rm(sug, i, sel, sut, j, sel2, sus, k, sel3)
ls()
cleanup()
# C:\JVA\Consult\Kraus\Gill net walleye\Gill Net Compare.r
library(lme4)
# read in and prepare the data
dat <- read.csv("C:/JVA/Consult/Kraus/Gill net walleye/GLIMMIX_alldata_commonmeshes (1).txt", sep="",
header=FALSE, col.names=c("year", "type", "mesh", "we", "holes", "catch", "secchi", "site", "serial"))
dat$sitef <- as.factor(dat$site)
dat$typef <- as.factor(dat$type)
dat$other <- dat$catch - dat$we
dat$secchig <- cut(dat$secchi, c(0, 1, 2, 4), right=FALSE, labels=FALSE)
dat <- dat[order(dat$year, dat$site, dat$type, dat$mesh), ]
# need to check on an error here ... one case with catch=7 and we=8
dat[dat$other < -0.5, ]
    # year type mesh we holes catch secchi site serial sitef typef other
# 535 2012    3  3.5  8  3933     7      1   23    834    23     3    -1
# site is a random effect representing both spatial (location) and temporal (year) variability
# mesh is a covariate
# type is a factor
obs <- interaction(dat$year, dat$site, dat$type, dat$mesh)
dat[obs %in% obs[duplicated(obs)], ]
# for now, subset site<30, sites greater than 29 were fished by OMNR, and their data were structured differently
# and ignore record with we > catch
sub <- dat[dat$site < 29.5 & dat$other > -0.5, ]
attach(sub)
obs <- interaction(year, site, type, mesh)
sub[obs %in% obs[duplicated(obs)], ]
rm(obs)
sy <- paste(format(site), year, sep="-")
tm <- paste(type, format(10*mesh), sep="-")
# design
mytable(sy, tm)
# covariate
tapply(secchi, list(sy, tm), mean)
# response
tapply(we, list(sy, tm), mean)
rm(sy, tm)
# fit a mixed effects model with all two-way interactions of fixed effects (other, secchi, mesh, type) and site as a random effect
terms <- c("sqrt(other)", "secchi", "poly(mesh, 2)", "typef", 
"sqrt(other)*secchi", "sqrt(other)*poly(mesh, 2)", "sqrt(other)*typef", "secchi*poly(mesh, 2)", "secchi*typef", "poly(mesh, 2)*typef")
all <- allcombs(length(terms))
colnames(all) <- terms
del1 <- all[, "sqrt(other)*secchi"]==1 & (all[, "sqrt(other)"]==0 | all[, "secchi"]==0)
del2 <- all[, "sqrt(other)*poly(mesh, 2)"]==1 & (all[, "sqrt(other)"]==0 | all[, "poly(mesh, 2)"]==0)
del3 <- all[, "sqrt(other)*typef"]==1 & (all[, "sqrt(other)"]==0 | all[, "typef"]==0)
del4 <- all[, "secchi*poly(mesh, 2)"]==1 & (all[, "secchi"]==0 | all[, "poly(mesh, 2)"]==0)
del5 <- all[, "secchi*typef"]==1 & (all[, "secchi"]==0 | all[, "typef"]==0)
del6 <- all[, "poly(mesh, 2)*typef"]==1 & (all[, "poly(mesh, 2)"]==0 | all[, "typef"]==0)
all2 <- all[!del1 & !del2 & !del3 & !del4 & !del5 & !del6, ]
formulae <- paste("sqrt(we) ~", apply(all2==1, 1, function(row) paste(terms[row], collapse=" + ")), " + (1 | sitef)")
formulae[1] <- "sqrt(we) ~ 1 + (1 | sitef)"
fits <- lapply(formulae, lmer)
aic <- sapply(fits, AIC)
aicresults <- data.frame(formulae, aic, daic=aic-min(aic))
aicresults[order(aicresults$daic), ][1:10, ]
formulae[aic-min(aic) < 2]
rm(terms, all, del1, del2, del3, del4, del5, del6, all2, formulae, fits, aic)
# the simplest version of the best models (daic < 2) was
fit <- lmer(sqrt(we) ~ secchi + poly(mesh, 2) + typef + secchi*poly(mesh, 2) + poly(mesh, 2)*typef  + (1 | sitef))
# create a new data frame with balanced data for each combination of secchi, mesh, and type for plotting predictions
newdata <- expand.grid(secchi=unique(secchi), mesh=unique(mesh), typef=unique(typef))
newdata$secchig <- cut(newdata$secchi, c(0, 1, 2, 4), right=FALSE, labels=FALSE)
prednew <- predict(fit, re.form=NA, newdata=newdata)
windows(w=9, h=6.5)
par(mfrow=c(1, 3), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
sug <- sort(unique(secchig))
for(i in seq_along(sug)) {
sel <- secchig==sug[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i==1) axis(2, outer=TRUE, las=1)
axis(1, outer=TRUE, at=2:5)
box()
mtext(paste("Secchi:", paste(format(range(secchi[sel])), collapse=" - ")), side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(jitter(mesh)[sel2], we[sel2], sut[j], col=j+1)
sus <- sort(unique(newdata$secchi[newdata$secchig==sug[i] & newdata$typef==sut[j]]))
for(k in seq_along(sus)) {
sel3 <- newdata$secchig==sug[i] & newdata$typef==sut[j] & newdata$secchi==sus[k]
lines(spline(newdata$mesh[sel3], prednew[sel3]^2), col=j+1)
}
}
}
mtext("Mesh  (jittered)", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
rm(sug, i, sel, sut, j, sel2, sus, k, sel3)
ls()
q()
# C:\JVA\Consult\Kraus\Gill net walleye\Gill Net Compare.r
library(lme4)
# some needed functions
mytable <- function(...) table(..., useNA="ifany")
allcombs <- function(num, from=0, to=num) {
m <- as.matrix(expand.grid(rep(list(0:1), times=num))) 
n.items <- rowSums(m) 
m[n.items >= from & n.items <= to, ] 
}
# read in and prepare the data
dat <- read.csv("C:/JVA/Consult/Kraus/Gill net walleye/GLIMMIX_alldata_commonmeshes (1).txt", sep="",
header=FALSE, col.names=c("year", "type", "mesh", "we", "holes", "catch", "secchi", "site", "serial"))
dat$sitef <- as.factor(dat$site)
dat$typef <- as.factor(dat$type)
dat$other <- dat$catch - dat$we
dat$secchig <- cut(dat$secchi, c(0, 1, 2, 4), right=FALSE, labels=FALSE)
dat <- dat[order(dat$year, dat$site, dat$type, dat$mesh), ]
# need to check on an error here ... one case with catch=7 and we=8
dat[dat$other < -0.5, ]
    # year type mesh we holes catch secchi site serial sitef typef other
# 535 2012    3  3.5  8  3933     7      1   23    834    23     3    -1
# site is a random effect representing both spatial (location) and temporal (year) variability
# mesh is a covariate
# type is a factor
obs <- interaction(dat$year, dat$site, dat$type, dat$mesh)
dat[obs %in% obs[duplicated(obs)], ]
# for now, subset site<30, sites greater than 29 were fished by OMNR, and their data were structured differently
# and ignore record with we > catch
sub <- dat[dat$site < 29.5 & dat$other > -0.5, ]
attach(sub)
obs <- interaction(year, site, type, mesh)
sub[obs %in% obs[duplicated(obs)], ]
rm(obs)
sy <- paste(format(site), year, sep="-")
tm <- paste(type, format(10*mesh), sep="-")
# design
mytable(sy, tm)
# covariate
tapply(secchi, list(sy, tm), mean)
# response
tapply(we, list(sy, tm), mean)
rm(sy, tm)
# fit a mixed effects model with all two-way interactions of fixed effects (other, secchi, mesh, type) and site as a random effect
terms <- c("sqrt(other)", "secchi", "poly(mesh, 2)", "typef", 
"sqrt(other)*secchi", "sqrt(other)*poly(mesh, 2)", "sqrt(other)*typef", "secchi*poly(mesh, 2)", "secchi*typef", "poly(mesh, 2)*typef")
all <- allcombs(length(terms))
colnames(all) <- terms
del1 <- all[, "sqrt(other)*secchi"]==1 & (all[, "sqrt(other)"]==0 | all[, "secchi"]==0)
del2 <- all[, "sqrt(other)*poly(mesh, 2)"]==1 & (all[, "sqrt(other)"]==0 | all[, "poly(mesh, 2)"]==0)
del3 <- all[, "sqrt(other)*typef"]==1 & (all[, "sqrt(other)"]==0 | all[, "typef"]==0)
del4 <- all[, "secchi*poly(mesh, 2)"]==1 & (all[, "secchi"]==0 | all[, "poly(mesh, 2)"]==0)
del5 <- all[, "secchi*typef"]==1 & (all[, "secchi"]==0 | all[, "typef"]==0)
del6 <- all[, "poly(mesh, 2)*typef"]==1 & (all[, "poly(mesh, 2)"]==0 | all[, "typef"]==0)
all2 <- all[!del1 & !del2 & !del3 & !del4 & !del5 & !del6, ]
formulae <- paste("sqrt(we) ~", apply(all2==1, 1, function(row) paste(terms[row], collapse=" + ")), " + (1 | sitef)")
formulae[1] <- "sqrt(we) ~ 1 + (1 | sitef)"
fits <- lapply(formulae, lmer)
aic <- sapply(fits, AIC)
aicresults <- data.frame(formulae, aic, daic=aic-min(aic))
aicresults[order(aicresults$daic), ][1:10, ]
formulae[aic-min(aic) < 2]
rm(terms, all, del1, del2, del3, del4, del5, del6, all2, formulae, fits, aic)
# the simplest version of the best models (daic < 2) was
fit <- lmer(sqrt(we) ~ secchi + poly(mesh, 2) + typef + secchi*poly(mesh, 2) + poly(mesh, 2)*typef  + (1 | sitef))
# create a new data frame with balanced data for each combination of secchi, mesh, and type for plotting predictions
newdata <- expand.grid(secchi=unique(secchi), mesh=unique(mesh), typef=unique(typef))
newdata$secchig <- cut(newdata$secchi, c(0, 1, 2, 4), right=FALSE, labels=FALSE)
prednew <- predict(fit, re.form=NA, newdata=newdata)
windows(w=9, h=6.5)
par(mfrow=c(1, 3), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
sug <- sort(unique(secchig))
for(i in seq_along(sug)) {
sel <- secchig==sug[i]
plot(mesh, we, type="n", xlab="", ylab="", axes=FALSE)
if(i==1) axis(2, outer=TRUE, las=1)
axis(1, outer=TRUE, at=2:5)
box()
mtext(paste("Secchi:", paste(format(range(secchi[sel])), collapse=" - ")), side=3, line=-1.5, cex=0.8, adj=0.05)
sut <- sort(unique(type[sel]))
for(j in seq_along(sut)) {
sel2 <- sel & type==sut[j]
text(jitter(mesh)[sel2], we[sel2], sut[j], col=j+1)
sus <- sort(unique(newdata$secchi[newdata$secchig==sug[i] & newdata$typef==sut[j]]))
for(k in seq_along(sus)) {
sel3 <- newdata$secchig==sug[i] & newdata$typef==sut[j] & newdata$secchi==sus[k]
lines(spline(newdata$mesh[sel3], prednew[sel3]^2), col=j+1)
}
}
}
mtext("Mesh  (jittered)", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
rm(sug, i, sel, sut, j, sel2, sus, k, sel3)
aicresults[1:10, ]
# fit a mixed effects model with all two-way interactions of fixed effects (other, secchi, mesh, type) and site as a random effect
terms <- c("sqrt(other)", "secchi", "poly(mesh, 2)", "typef", 
"sqrt(other)*secchi", "sqrt(other)*poly(mesh, 2)", "sqrt(other)*typef", "secchi*poly(mesh, 2)", "secchi*typef", "poly(mesh, 2)*typef")
all <- allcombs(length(terms))
colnames(all) <- terms
del1 <- all[, "sqrt(other)*secchi"]==1 & (all[, "sqrt(other)"]==0 | all[, "secchi"]==0)
del2 <- all[, "sqrt(other)*poly(mesh, 2)"]==1 & (all[, "sqrt(other)"]==0 | all[, "poly(mesh, 2)"]==0)
del3 <- all[, "sqrt(other)*typef"]==1 & (all[, "sqrt(other)"]==0 | all[, "typef"]==0)
del4 <- all[, "secchi*poly(mesh, 2)"]==1 & (all[, "secchi"]==0 | all[, "poly(mesh, 2)"]==0)
del5 <- all[, "secchi*typef"]==1 & (all[, "secchi"]==0 | all[, "typef"]==0)
del6 <- all[, "poly(mesh, 2)*typef"]==1 & (all[, "poly(mesh, 2)"]==0 | all[, "typef"]==0)
all2 <- all[!del1 & !del2 & !del3 & !del4 & !del5 & !del6, ]
formulae <- paste0("sqrt(we)~", apply(all2==1, 1, function(row) paste(terms[row], collapse="+")), "+(1|sitef)")
formulae[1] <- "sqrt(we)~1+(1|sitef)"
fits <- lapply(formulae, lmer)
aic <- sapply(fits, AIC)
aicresults <- data.frame(formulae, aic, daic=aic-min(aic))
aicresults <- aicresults[order(aicresults$daic), ]
aicresults[1:10, ]
formulae[aic-min(aic) < 2]
# fit a mixed effects model with all two-way interactions of fixed effects (other, secchi, mesh, type) and site as a random effect
terms <- c("sqrt(other)", "secchi", "poly(mesh,2)", "typef", 
"sqrt(other)*secchi", "sqrt(other)*poly(mesh,2)", "sqrt(other)*typef", "secchi*poly(mesh,2)", "secchi*typef", "poly(mesh,2)*typef")
all <- allcombs(length(terms))
colnames(all) <- terms
del1 <- all[, "sqrt(other)*secchi"]==1 & (all[, "sqrt(other)"]==0 | all[, "secchi"]==0)
del2 <- all[, "sqrt(other)*poly(mesh,2)"]==1 & (all[, "sqrt(other)"]==0 | all[, "poly(mesh,2)"]==0)
del3 <- all[, "sqrt(other)*typef"]==1 & (all[, "sqrt(other)"]==0 | all[, "typef"]==0)
del4 <- all[, "secchi*poly(mesh,2)"]==1 & (all[, "secchi"]==0 | all[, "poly(mesh,2)"]==0)
del5 <- all[, "secchi*typef"]==1 & (all[, "secchi"]==0 | all[, "typef"]==0)
del6 <- all[, "poly(mesh,2)*typef"]==1 & (all[, "poly(mesh,2)"]==0 | all[, "typef"]==0)
all2 <- all[!del1 & !del2 & !del3 & !del4 & !del5 & !del6, ]
formulae <- paste0("sqrt(we)~", apply(all2==1, 1, function(row) paste(terms[row], collapse="+")), "+(1|sitef)")
formulae[1] <- "sqrt(we)~1+(1|sitef)"
fits <- lapply(formulae, lmer)
aic <- sapply(fits, AIC)
aicresults <- data.frame(formulae, aic, daic=aic-min(aic))
aicresults <- aicresults[order(aicresults$daic), ]
aicresults[1:10, ]
formulae[aic-min(aic) < 2]
type
cleanup()
graphics.off()
search()
detach()
?cheat
wb <- loadWorkbook("C:/JVA/Consult/Yule/Lake Kivu/Kivu Sa data 26 nov.xls")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
dim(dat)
head(dat)
wb <- loadWorkbook("C:/JVA/Consult/Yule/Lake Kivu/Kivu Sa data 26 nov.xls")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, endCol=9)
dim(dat)
head(dat)
head(dat)
plotdf(dat)
attach(dat)
a <- as.numeric(Sa)
table(is.na(Sa))
table(is.na(a))
dat[is.na(a), ]
stringin("*", Sa)
stringin
stringin("\*", Sa)
stringin("\\*", Sa)
length(stringin("\\*", Sa))
table(is.na(a))
head(dat)
a <- as.numeric(GPS.Lat.end.N.S)
table(is.na(a))
dat[is.na(a), ]
length(stringin("\\*", ))
a <- as.numeric(GPS.Lat.end.N.S)
length(stringin("\\*", GPS.Lat.end.N.S))
length(stringin("\\*", GPS.Long.end.N.S))
length(stringin("\\*", GPS.Lon.end.N.S))
head(dat)
length(stringin("\\*", GPS.Long..center.E.W))
head
wb <- loadWorkbook("C:/JVA/Consult/Yule/Lake Kivu/Kivu Sa data 26 nov.xls")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, endCol=9)
dat$GPS.Lat.end.N.S <- as.numeric(dat$GPS.Lat.end.N.S)
dat$GPS.Long..center.E.W <- as.numeric(dat$GPS.Long..center.E.W)
dat$Sa <- as.numeric(dat$Sa)
wb <- loadWorkbook("C:/JVA/Consult/Yule/Lake Kivu/Kivu Sa data 26 nov.xls")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, endCol=9)
dat$GPS.Lat.end.N.S <- as.numeric(dat$GPS.Lat.end.N.S)
dat$GPS.Long..center.E.W <- as.numeric(dat$GPS.Long..center.E.W)
dat$Sa <- as.numeric(dat$Sa)
search()
detach()
attach(dat)
plotdf(dat)
.SavedPlots <- NULL
dat$lat <- as.numeric(dat$GPS.Lat.end.N.S)
dat$lon <- as.numeric(dat$GPS.Long..center.E.W)
detach(dat)
attach(dat)
plot(lon, lat)
plot(lon)
plot(lat)
odd <- subdex(dat, lon<0 | lat>0)
sum(odd)
dat[odd, ]
dat[3550:3560, ]
dat[3590:3600, ]
search()
detach()
wb <- loadWorkbook("C:/JVA/Consult/Yule/Lake Kivu/Kivu Sa data 26 nov.xls")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, endCol=9)
dat$lat <- as.numeric(dat$GPS.Lat.end.N.S)
dat$lon <- as.numeric(dat$GPS.Long..center.E.W)
odd <- subdex(dat, lon<0 | lat>0)
newlat <- ifelse(odd, dat$long, dat$lat)
newlon <- ifelse(odd, dat$lat, dat$long)
dat$lat <- newlat
dat$lon <- newlon
rm(odd, newlat, newlon)
odd
wb <- loadWorkbook("C:/JVA/Consult/Yule/Lake Kivu/Kivu Sa data 26 nov.xls")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, endCol=9)
dat$lat <- as.numeric(dat$GPS.Lat.end.N.S)
dat$lon <- as.numeric(dat$GPS.Long..center.E.W)
odd <- subdex(dat, lon<0 | lat>0)
odd
ifelse(odd, dat$long, dat$lat)
ifelse(odd, dat$lon, dat$lat)
dat$lat <- as.numeric(dat$GPS.Lat.end.N.S)
dat$lon <- as.numeric(dat$GPS.Long..center.E.W)
odd <- subdex(dat, lon<0 | lat>0)
newlat <- ifelse(odd, dat$lon, dat$lat)
newlon <- ifelse(odd, dat$lat, dat$lon)
dat$lat <- newlat
dat$lon <- newlon
rm(odd, newlat, newlon)
dat$Sa <- as.numeric(dat$Sa)
plotdf(dat)
wb <- loadWorkbook("C:/JVA/Consult/Yule/Lake Kivu/Kivu Sa data 26 nov.xls")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, endCol=9)
dat$GPS.Lat.end.N.S <- as.numeric(dat$GPS.Lat.end.N.S)
dat$GPS.Long..center.E.W <- as.numeric(dat$GPS.Long..center.E.W)
odd <- subdex(dat, GPS.Long..center.E.W<0 | GPS.Lat.end.N.S>0)
dat$lat <- ifelse(odd, dat$GPS.Long..center.E.W, dat$GPS.Lat.end.N.S)
dat$lon <- ifelse(odd, dat$lat, dat$GPS.Long..center.E.W)
rm(odd)
dat$Sa <- as.numeric(dat$Sa)
plotdf(dat)
wb <- loadWorkbook("C:/JVA/Consult/Yule/Lake Kivu/Kivu Sa data 26 nov.xls")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, endCol=9)
dat$GPS.Lat.end.N.S <- as.numeric(dat$GPS.Lat.end.N.S)
dat$GPS.Long..center.E.W <- as.numeric(dat$GPS.Long..center.E.W)
odd <- subdex(dat, GPS.Long..center.E.W<0 | GPS.Lat.end.N.S>0)
dat$lat <- ifelse(odd, dat$GPS.Long..center.E.W, dat$GPS.Lat.end.N.S)
dat$lon <- ifelse(odd, dat$GPS.Lat.end.N.S, dat$GPS.Long..center.E.W)
rm(odd)
dat$Sa <- as.numeric(dat$Sa)
plotdf(dat)
.SavedPlots <- NULL
plot(lon, lat)
attach(dat)
plot(lon, lat)
map()
points(lon, lat)
points(lon, lat, col="red", cex=3)
map(xlim=range(lon), ylim=range(lat))
points(lon, lat)
map(xlim=range(lon, na.rm=TRUE), ylim=range(lat, na.rm=TRUE))
points(lon, lat)
map("Rwanda")
map("Italy")
worldHires
?map
map(region="Italy")
map(region="Rwanda")
map(region="Rwanda")
#map(xlim=range(lon, na.rm=TRUE), ylim=range(lat, na.rm=TRUE))
points(lon, lat)
utils:::menuInstallPkgs()
library(rworldmap)
?getmap
?getMap
utils:::menuInstallPkgs()
library(rworldmap)
library(rworldxtra)
newmap <- getMap("high")
plot(newmap, xlim=range(lon, na.rm=TRUE), ylim=range(lat, na.rm=TRUE))
plot(newmap, xlim=range(lon, na.rm=TRUE)+c(-1, 1), ylim=range(lat, na.rm=TRUE)+c(-1, 1))
points(lon, lat)
lines(newmap, col="red")
class(newmap)
locator()
map(region="Rwanda")
par("usr")
library(RgoogleMaps) 
map(region="Rwanda")
pusr <- par("usr")
windows()
MyMap <- GetMap.bbox(pusr[1:2], pusr[3:4], maptype="terrain", destfile="junk.png") #, zoom=11)
PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col="red", cex=circsize, lwd=3)
PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col="red", cex=2, lwd=3)
windows()
MyMap <- GetMap.bbox(pusr[1:2], pusr[3:4], maptype="terrain", destfile="junk.png") #, zoom=11)
PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0)
MyMap <- GetMap.bbox(pusr[1:2], pusr[3:4], maptype="terrain", destfile="junk.png", zoom=9) #, zoom=11)
PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0)
MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=9) #, zoom=11)
PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0)
MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=8) #, zoom=11)
PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0)
MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0)
?GetMap.bbox
mytable(season, depth, region, year, month)
head(dat)
mytable(Depth, Region)
unique(Depth)
dat$Depth[dat$Depth=="0-60 "] <- "0-60"
dat$Depth[dat$Depth=="15-30 "] <- "15-30"
detach(dat)
attach(dat)
unique(Depth)
mytable(Depth, Region)
col <- as.numeric(as.factor(Region)) + 1
windows()
MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
col <- as.numeric(as.factor(Region)) + 1
txt <- substring(Region, 1, 1)
windows()
MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, pch=txt, col=col)
mlat <- tapply(lat, Region, mean)
mlon <- tapply(lon, Region, mean)
tapply(lat, Region, mean)
?PlotOnStaticMap
windows()
MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), col=col)
col <- as.numeric(as.factor(Region)) + 1
mlat <- tapply(lat, Region, mean, na.rm=TRUE)
mlon <- tapply(lon, Region, mean, na.rm=TRUE)
windows()
MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), col=col, add=TRUE, font=2, cex=2)
MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), col=2:6, add=TRUE, font=2, cex=2)
MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), add=TRUE, cex=2)
mytable(Depth, Region)
mytable(Depth, Region)[c(2, 1, 4:6, 3), c(2, 3, 1, 4, 5)]
mytable(Year, Month, Season)
mytable(paste(Year, Month), Season)
month
months
month.abbr
monthabbr
monthabb
month.bb
month.abb
?month.abb
month.name
dat$mm <- recode(dat$Month, month.name, 1:12)
detach(dat)
attach(dat)
mytable(paste(Year, mm), Season)
mytable(paste(Year, format(mm)), Season)
mytable(format(mm), Season, Year)
mytable(format(mm), paste(Year, Season))
mytable(paste(Year, format(mm), Season), paste(Depth, Region))
mytable(paste(Year, format(mm), Season), paste(Region, Depth))
mytable(paste(Region, Depth), paste(Year, format(mm), Season))
factor(Region, levels=c("Inshore", "North", "East", "South", "West"))
head(dat)
mytable(Depth, Region)[c(2, 1, 4:6, 3), c(2, 3, 1, 4, 5)]
library(RgoogleMaps) 
wb <- loadWorkbook("C:/JVA/Consult/Yule/Lake Kivu/Kivu Sa data 26 nov.xls")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, endCol=9)
dat$mm <- factor(recode(dat$Month, month.name, 1:12))
dat$reg <- factor(dat$Region, levels=c("Inshore", "North", "East", "South", "West"))
dat$GPS.Lat.end.N.S <- as.numeric(dat$GPS.Lat.end.N.S)
dat$GPS.Long..center.E.W <- as.numeric(dat$GPS.Long..center.E.W)
odd <- subdex(dat, GPS.Long..center.E.W<0 | GPS.Lat.end.N.S>0)
dat$lat <- ifelse(odd, dat$GPS.Long..center.E.W, dat$GPS.Lat.end.N.S)
dat$lon <- ifelse(odd, dat$GPS.Lat.end.N.S, dat$GPS.Long..center.E.W)
rm(odd)
dat$Depth[dat$Depth=="0-60 "] <- "0-60"
dat$Depth[dat$Depth=="15-30 "] <- "15-30"
dat$dep <- factor(dat$Depth, levels=c("0-50", "0-15", "15-30", "30-45", "45-60", "0-60"))
dat$Sa <- as.numeric(dat$Sa)
detach(dat)
library(RgoogleMaps) 
wb <- loadWorkbook("C:/JVA/Consult/Yule/Lake Kivu/Kivu Sa data 26 nov.xls")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, endCol=9)
dat$mm <- factor(recode(dat$Month, month.name, 1:12))
dat$reg <- factor(dat$Region, levels=c("Inshore", "North", "East", "South", "West"))
dat$GPS.Lat.end.N.S <- as.numeric(dat$GPS.Lat.end.N.S)
dat$GPS.Long..center.E.W <- as.numeric(dat$GPS.Long..center.E.W)
odd <- subdex(dat, GPS.Long..center.E.W<0 | GPS.Lat.end.N.S>0)
dat$lat <- ifelse(odd, dat$GPS.Long..center.E.W, dat$GPS.Lat.end.N.S)
dat$lon <- ifelse(odd, dat$GPS.Lat.end.N.S, dat$GPS.Long..center.E.W)
rm(odd)
dat$Depth[dat$Depth=="0-60 "] <- "0-60"
dat$Depth[dat$Depth=="15-30 "] <- "15-30"
dat$dep <- factor(dat$Depth, levels=c("0-50", "0-15", "15-30", "30-45", "45-60", "0-60"))
dat$Sa <- as.numeric(dat$Sa)
search()
attach(dat)
mytable(dep, reg)[c(2, 1, 4:6, 3), c(2, 3, 1, 4, 5)]
mytable(mm, paste(Year, Season))
mytable(paste(reg, dep), paste(Year, mm, Season))
dep
?factor
dat$reg <- factor(dat$Region, levels=c("Inshore", "North", "East", "South", "West"), ordered=TRUE)
table(dat$reg)
search()
detach()
wb <- loadWorkbook("C:/JVA/Consult/Yule/Lake Kivu/Kivu Sa data 26 nov.xls")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, endCol=9)
dat$mm <- factor(recode(dat$Month, month.name, 1:12))
dat$reg <- factor(dat$Region, levels=c("Inshore", "North", "East", "South", "West"), ordered=TRUE)
dat$GPS.Lat.end.N.S <- as.numeric(dat$GPS.Lat.end.N.S)
dat$GPS.Long..center.E.W <- as.numeric(dat$GPS.Long..center.E.W)
odd <- subdex(dat, GPS.Long..center.E.W<0 | GPS.Lat.end.N.S>0)
dat$lat <- ifelse(odd, dat$GPS.Long..center.E.W, dat$GPS.Lat.end.N.S)
dat$lon <- ifelse(odd, dat$GPS.Lat.end.N.S, dat$GPS.Long..center.E.W)
rm(odd)
dat$Depth[dat$Depth=="0-60 "] <- "0-60"
dat$Depth[dat$Depth=="15-30 "] <- "15-30"
dat$dep <- factor(dat$Depth, levels=c("0-50", "0-15", "15-30", "30-45", "45-60", "0-60"), ordered=TRUE)
dat$Sa <- as.numeric(dat$Sa)
attach(dat)
mytable(dep, reg)[c(2, 1, 4:6, 3), c(2, 3, 1, 4, 5)]
mytable(mm, paste(Year, Season))
mytable(paste(reg, dep), paste(Year, mm, Season))
mytable(dep, reg)
factor(dat$Depth, levels=c("0-50", "0-15", "15-30", "30-45", "45-60", "0-60")
)
table(factor(dat$Depth, levels=c("0-50", "0-15", "15-30", "30-45", "45-60", "0-60")))
search()
detach()
wb <- loadWorkbook("C:/JVA/Consult/Yule/Lake Kivu/Kivu Sa data 26 nov.xls")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, endCol=9)
dat$mm <- factor(recode(dat$Month, month.name, 1:12))
dat$reg <- factor(dat$Region, levels=c("Inshore", "North", "East", "South", "West"))
dat$GPS.Lat.end.N.S <- as.numeric(dat$GPS.Lat.end.N.S)
dat$GPS.Long..center.E.W <- as.numeric(dat$GPS.Long..center.E.W)
odd <- subdex(dat, GPS.Long..center.E.W<0 | GPS.Lat.end.N.S>0)
dat$lat <- ifelse(odd, dat$GPS.Long..center.E.W, dat$GPS.Lat.end.N.S)
dat$lon <- ifelse(odd, dat$GPS.Lat.end.N.S, dat$GPS.Long..center.E.W)
rm(odd)
dat$Depth[dat$Depth=="0-60 "] <- "0-60"
dat$Depth[dat$Depth=="15-30 "] <- "15-30"
dat$dep <- factor(dat$Depth, levels=c("0-50", "0-15", "15-30", "30-45", "45-60", "0-60"))
dat$Sa <- as.numeric(dat$Sa)
mytable(dep, reg)
mytable(mm, paste(Year, Season))
mytable(paste(reg, dep), paste(Year, mm, Season))
attach(dat)
mytable(dep, reg)
mytable(mm, paste(Year, Season))
mytable(paste(reg, dep), paste(Year, mm, Season))
table(paste(reg, dep))
table(interaction(reg, dep))
mytable(interaction(reg, dep), interaction(Year, mm, Season))
dim(mytable(interaction(reg, dep), interaction(Year, mm, Season)))
mytable(interaction(Year, mm, Season), interaction(reg, dep))
mytable(interaction(Year, mm, Season), interaction(reg, dep))
?interaction
mytable(interaction(Year, mm, Season, drop=TRUE), interaction(reg, dep, drop=TRUE))
mytable(interaction(reg, dep, drop=TRUE), interaction(Year, mm, Season, drop=TRUE))
mytable(interaction(reg, dep, drop=TRUE)
q()
q()
q()
cleanup()
# C:\JVA\Consult\Yule\Lake Kivu\anova.r
library(RgoogleMaps) 
library(lme4)
wb <- loadWorkbook("C:/JVA/Consult/Yule/Lake Kivu/Kivu Sa data 26 nov.xls")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, endCol=9)
dat$mm <- factor(recode(dat$Month, month.name, 1:12))
dat$reg <- factor(dat$Region, levels=c("Inshore", "North", "East", "South", "West"))
dat$GPS.Lat.end.N.S <- as.numeric(dat$GPS.Lat.end.N.S)
dat$GPS.Long..center.E.W <- as.numeric(dat$GPS.Long..center.E.W)
odd <- subdex(dat, GPS.Long..center.E.W<0 | GPS.Lat.end.N.S>0)
dat$lat <- ifelse(odd, dat$GPS.Long..center.E.W, dat$GPS.Lat.end.N.S)
dat$lon <- ifelse(odd, dat$GPS.Lat.end.N.S, dat$GPS.Long..center.E.W)
rm(odd)
dat$Depth[dat$Depth=="0-60 "] <- "0-60"
dat$Depth[dat$Depth=="15-30 "] <- "15-30"
dat$dep <- factor(dat$Depth, levels=c("0-50", "0-15", "15-30", "30-45", "45-60", "0-60"))
dat$Sa <- as.numeric(dat$Sa)
dat$seas <- factor(dat$Season)
dat$survey <- interaction(Year, mm, drop=TRUE, lex.order=TRUE)
plotdf(dat)
attach(dat)
mytable(dep, reg)
mytable(mm, paste(Year, Season))
mytable(interaction(reg, dep, drop=TRUE, lex.order=TRUE), interaction(Year, mm, Season, drop=TRUE, lex.order=TRUE))
# Interval seems to be a unique descriptor for the values in each "survey"
id <- interaction(reg, dep, Year, mm, Season, Interval, drop=TRUE)
sum(duplicated(id))
col <- as.numeric(as.factor(Region)) + 1
mlat <- tapply(lat, Region, mean, na.rm=TRUE)
mlon <- tapply(lon, Region, mean, na.rm=TRUE)
windows()
MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), add=TRUE, cex=2)
# subset the data for analysis
sub <- dat[Depth %in% c("0-15", "15-30", "30-45", "45-60") & Region %in% c("North", "East", "South", "West") & !is.na(Sa), ]
detach(dat)
attach(sub)
mytable(interaction(reg, dep, drop=TRUE, lex.order=TRUE), interaction(Year, mm, Season, drop=TRUE, lex.order=TRUE))
search()
detach()
graphics.off()
cleanup()
# C:\JVA\Consult\Yule\Lake Kivu\anova.r
library(RgoogleMaps) 
library(lme4)
wb <- loadWorkbook("C:/JVA/Consult/Yule/Lake Kivu/Kivu Sa data 26 nov.xls")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, endCol=9)
dat$mm <- factor(recode(dat$Month, month.name, 1:12))
dat$reg <- factor(dat$Region, levels=c("Inshore", "North", "East", "South", "West"))
dat$GPS.Lat.end.N.S <- as.numeric(dat$GPS.Lat.end.N.S)
dat$GPS.Long..center.E.W <- as.numeric(dat$GPS.Long..center.E.W)
odd <- subdex(dat, GPS.Long..center.E.W<0 | GPS.Lat.end.N.S>0)
dat$lat <- ifelse(odd, dat$GPS.Long..center.E.W, dat$GPS.Lat.end.N.S)
dat$lon <- ifelse(odd, dat$GPS.Lat.end.N.S, dat$GPS.Long..center.E.W)
rm(odd)
dat$Depth[dat$Depth=="0-60 "] <- "0-60"
dat$Depth[dat$Depth=="15-30 "] <- "15-30"
dat$dep <- factor(dat$Depth, levels=c("0-50", "0-15", "15-30", "30-45", "45-60", "0-60"))
dat$Sa <- as.numeric(dat$Sa)
dat$seas <- factor(dat$Season)
dat$survey <- interaction(dat$Year, dat$mm, drop=TRUE, lex.order=TRUE)
plotdf(dat)
attach(dat)
mytable(dep, reg)
mytable(mm, paste(Year, Season))
mytable(interaction(reg, dep, drop=TRUE, lex.order=TRUE), interaction(Year, mm, Season, drop=TRUE, lex.order=TRUE))
# Interval seems to be a unique descriptor for the values in each "survey"
id <- interaction(reg, dep, Year, mm, Season, Interval, drop=TRUE)
sum(duplicated(id))
col <- as.numeric(as.factor(Region)) + 1
mlat <- tapply(lat, Region, mean, na.rm=TRUE)
mlon <- tapply(lon, Region, mean, na.rm=TRUE)
windows()
MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), add=TRUE, cex=2)
# subset the data for analysis
sub <- dat[Depth %in% c("0-15", "15-30", "30-45", "45-60") & Region %in% c("North", "East", "South", "West") & !is.na(Sa), ]
detach(dat)
attach(sub)
mytable(interaction(reg, dep, drop=TRUE, lex.order=TRUE), interaction(Year, mm, Season, drop=TRUE, lex.order=TRUE))
mytable(interaction(reg, dep, drop=TRUE, lex.order=TRUE), interaction(survey, seas, drop=TRUE, lex.order=TRUE))
fit1 <- aov(log(Sa + 0.001) ~ (seas + reg + dep + survey)^2)
fit2 <- lmer(log(Sa + 0.001) ~ (seas + reg + dep)^2 + (1 | survey))
names(fit2)
names(summary(fit2))
lapply(summary(fit2), print)
ls()
anova(fit2)
anova(fit1, fit2)
fit3 <- lmer(log(Sa + 0.001) ~ (seas + reg + dep)^2 + (1 + seas | survey))
anova(fit3)
anova(fit2, fit3)
fit3 <- lmer(log(Sa + 0.001) ~ (seas + reg + dep)^2 + (1 + seas + reg | survey))
fit2 <- lmer(log(Sa + 0.001) ~ (seas + reg + dep)^2 + (1 | survey))
fit3 <- lmer(log(Sa + 0.001) ~ (seas + reg + dep)^2 + (1 + seas | survey))
fit4 <- lmer(log(Sa + 0.001) ~ (seas + reg + dep)^2 + (1 + reg | survey))
fit5 <- lmer(log(Sa + 0.001) ~ (seas + reg + dep)^2 + (1 + dep | survey))
anova(fit2, fit3, fit4, fit5)
fit6 <- lmer(log(Sa + 0.001) ~ (seas + reg + dep)^2 + (1 + reg + dep | survey))
# fit a mixed effects model with all two-way interactions of fixed effects (other, secchi, mesh, type) and survey as a random effect
terms <- c("seas", "reg", "dep", "seas*reg", "seas*dep", "reg*dep")
all <- allcombs(length(terms))
colnames(all) <- terms
del1 <- all[, "seas*reg"]==1 & (all[, "seas"]==0 | all[, "reg"]==0)
del2 <- all[, "seas*dep"]==1 & (all[, "seas"]==0 | all[, "dep"]==0)
del3 <- all[, "reg*dep"]==1 & (all[, "reg"]==0 | all[, "dep"]==0)
all2 <- all[!del1 & !del2 & !del3, ]
dim(all2)
formulae <- paste0("log(Sa + 0.001)~", apply(all2==1, 1, function(row) paste(terms[row], collapse="+")), "+(1|survey)")
formulae[1] <- "log(Sa + 0.001)~1+(1|survey)"
fits <- lapply(formulae, lmer)
aic <- sapply(fits, AIC)
aicresults <- data.frame(formulae, aic, daic=aic-min(aic))
aicresults <- aicresults[order(aicresults$daic), ]
aicresults[1:10, ]
formulae[aic-min(aic) < 2]
mytable(interaction(reg, dep, drop=TRUE, lex.order=TRUE), interaction(survey, seas, drop=TRUE, lex.order=TRUE))
head(sub)
subm <- aggregate(Sa ~ reg + dep + seas + survey, data=sub)
subm <- aggregate(Sa ~ reg + dep + seas + survey, data=sub, median)
subm
dim(subm)
dim(sub)
aggregate(!is.na(Sa) ~ reg + dep + seas + survey, data=sub, sum)
aggregate(n=!is.na(Sa) ~ reg + dep + seas + survey, data=sub, sum)
a <- aggregate(!is.na(Sa) ~ reg + dep + seas + survey, data=sub, sum)
dim(a)
a[, 5]
subm <- aggregate(Sa ~ reg + dep + seas + survey, data=sub, median)
subm$n <- aggregate(!is.na(Sa) ~ reg + dep + seas + survey, data=sub, sum)[, 5]
head(subm)
aov(Sa ~ (seas + reg + dep)^2, data=subm, weight=n)
fit <- aov(Sa ~ (seas + reg + dep)^2, data=subm, weight=n)
summary(fit)
fit <- aov(Sa ~ seas*reg*dep, data=subm, weight=n)
summary(fit)
step(fit)
fit2 <- step(fit)
summary(fit2)
boxcox(fit)
fit <- aov(Sa + 1 ~ seas*reg*dep, data=subm, weight=n)
boxcox(fit)
boxcox(fit)
hist(Sa)
search()
detach(sub)
hist(subm$Sa)
plot(subm$Sa)
plot(fit)
sort(subm$Sa
)
log(Sa + 0.001)
log(subm$Sa + 0.001)
sort(log(subm$Sa + 0.001))
fit <- aov(log(Sa + 0.001) + 7 ~ seas*reg*dep, data=subm, weight=n)
boxcox(fit)
plot(fit)
fit <- aov(log(Sa + 0.001) ~ seas*reg*dep, data=subm, weight=n)
fit2 <- step(fit)
summary(fit2)
fit <- aov(log(Sa + 0.001) ~ seas*reg*dep, data=subm, weight=n)
fit2 <- step(fit, trace=FALSE)
summary(fit2)
attach(subm)
mytable(interaction(reg, dep, drop=TRUE, lex.order=TRUE), interaction(survey, seas, drop=TRUE, lex.order=TRUE))
head(subm)
unique(dep)
axislogk
prettylog
?prettylog
vals <- rlnorm(100, 6)
summary(vals)
prettylog(vals, 1, 0)
prettylog(vals, 1)
prettylog(vals, c(1, 2, 5))
sur <- unique(reg)
sud <- unique(dep)
nd <- as.numeric(dep)
windows(w=9, h=6.5)
par(mfrow=c(1, 3), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sur)) {
sel <- reg==sur[i]
plot(nd, log(Sa + 0.001), type="n", xlab="", ylab="", axes=FALSE)
pl <- prettylog(Sa)
axis(2, outer=TRUE, las=1, at=log(pl + 0.001), labels=pl)
axis(1, outer=TRUE, at=seq_along(sud), labels=sud)
box()
mtext(sur[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sus <- sort(unique(seas[sel]))
for(j in seq_along(sus)) {
sel2 <- sel & seas==sus[j]
text(nd[sel2], log(Sa + 0.001)[sel2], sus[j], col=j+1)
}
}
mtext("Mesh  (jittered)", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
windows()
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sur)) {
sel <- reg==sur[i]
plot(nd, log(Sa + 0.001), type="n", xlab="", ylab="", axes=FALSE)
pl <- prettylog(Sa)
axis(2, outer=TRUE, las=1, at=log(pl + 0.001), labels=pl)
axis(1, outer=TRUE, at=seq_along(sud), labels=sud)
box()
mtext(sur[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sus <- sort(unique(seas[sel]))
for(j in seq_along(sus)) {
sel2 <- sel & seas==sus[j]
text(nd[sel2], log(Sa + 0.001)[sel2], sus[j], col=j+1)
}
}
mtext("Mesh  (jittered)", side=1, outer=TRUE, line=2.5)
mtext("Walleye catch", side=2, outer=TRUE, line=2.5)
sur <- unique(reg)
sud <- unique(dep)
nd <- as.numeric(dep)
windows()
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sur)) {
sel <- reg==sur[i]
plot(nd, log(Sa + 0.001), type="n", xlab="", ylab="", axes=FALSE)
pl <- prettylog(Sa)
axis(2, outer=TRUE, las=1, at=log(pl + 0.001), labels=pl)
axis(1, outer=TRUE, at=seq_along(sud), labels=sud)
box()
mtext(sur[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sus <- sort(unique(seas[sel]))
for(j in seq_along(sus)) {
sel2 <- sel & seas==sus[j]
text(nd[sel2], log(Sa + 0.001)[sel2], substring(sus[j]), 1, 1), col=j+1)
}
}
mtext("Depth layer", side=1, outer=TRUE, line=2.5)
mtext("Sa", side=2, outer=TRUE, line=2.5)
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sur)) {
sel <- reg==sur[i]
plot(nd, log(Sa + 0.001), type="n", xlab="", ylab="", axes=FALSE)
pl <- prettylog(Sa)
axis(2, outer=TRUE, las=1, at=log(pl + 0.001), labels=pl)
axis(1, outer=TRUE, at=seq_along(sud), labels=sud)
box()
mtext(sur[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sus <- sort(unique(seas[sel]))
for(j in seq_along(sus)) {
sel2 <- sel & seas==sus[j]
text(nd[sel2], log(Sa + 0.001)[sel2], substring(sus[j], 1, 1), col=j+1)
}
}
mtext("Depth layer", side=1, outer=TRUE, line=2.5)
mtext("Sa", side=2, outer=TRUE, line=2.5)
prettylog(Sa)
prettylog
prettylog(Sa, lead=1, extra=0))
prettylog(Sa, lead=1, extra=0)
sur <- unique(reg)
sud <- unique(dep)
nd <- as.numeric(dep)
pl <- prettylog(Sa, lead=1, extra=0)
windows()
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in seq_along(sur)) {
sel <- reg==sur[i]
plot(nd, log(Sa + 0.001), type="n", xlab="", ylab="", axes=FALSE)
axis(2, outer=TRUE, las=1, at=log(pl + 0.001), labels=pl)
axis(1, outer=TRUE, at=seq_along(sud), labels=sud)
box()
mtext(sur[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sus <- sort(unique(seas[sel]))
for(j in seq_along(sus)) {
sel2 <- sel & seas==sus[j]
text(nd[sel2], log(Sa + 0.001)[sel2], substring(sus[j], 1, 1), col=j+1)
}
}
mtext("Depth layer", side=1, outer=TRUE, line=2.5)
mtext("Sa", side=2, outer=TRUE, line=2.5)
blindcolz
sur <- unique(reg)
sud <- unique(dep)
nd <- as.numeric(dep)
pl <- prettylog(Sa, lead=1, extra=0)
windows()
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in c(1, 2, 4, 3)) {
sel <- reg==sur[i]
plot(nd, log(Sa + 0.001), type="n", xlab="", ylab="", axes=FALSE)
axis(2, outer=TRUE, las=1, at=log(pl + 0.001), labels=pl)
axis(1, outer=TRUE, at=seq_along(sud), labels=sud)
box()
mtext(sur[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sus <- sort(unique(seas[sel]))
for(j in seq_along(sus)) {
sel2 <- sel & seas==sus[j]
text(nd[sel2], log(Sa + 0.001)[sel2], substring(sus[j], 1, 1), col=blindcolz[j+1])
}
}
mtext("Depth layer", side=1, outer=TRUE, line=2.5)
mtext("Sa", side=2, outer=TRUE, line=2.5)
windows()
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in c(1, 2, 4, 3)) {
sel <- reg==sur[i]
plot(nd, log(Sa + 0.001), type="n", xlab="", ylab="", axes=FALSE)
axis(2, outer=TRUE, las=1, at=log(pl + 0.001), labels=pl)
axis(1, outer=TRUE, at=seq_along(sud), labels=sud)
box()
mtext(sur[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sus <- sort(unique(seas[sel]))
for(j in seq_along(sus)) {
sel2 <- sel & seas==sus[j]
text(nd[sel2], log(Sa + 0.001)[sel2], substring(sus[j], 1, 1), col=blindcolz[j+1])
lines(nd[sel2], fit2$fitted[sel2], col=blindcolz[j+1])
}
}
mtext("Depth layer", side=1, outer=TRUE, line=2.5)
mtext("Sa", side=2, outer=TRUE, line=2.5)
head(subm)
search()
detach()
subm <- aggregate(Sa ~ reg + dep + seas + survey, data=sub, median)
subm$n <- aggregate(!is.na(Sa) ~ reg + seas + survey + dep, data=sub, sum)[, 5]
attach(subm)
fit <- aov(log(Sa + 0.001) ~ seas*reg*dep, data=subm, weight=n)
fit2 <- step(fit, trace=FALSE)
summary(fit2)
sur <- unique(reg)
sud <- unique(dep)
nd <- as.numeric(dep)
pl <- prettylog(Sa, lead=1, extra=0)
windows()
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in c(1, 2, 4, 3)) {
sel <- reg==sur[i]
plot(nd, log(Sa + 0.001), type="n", xlab="", ylab="", axes=FALSE)
axis(2, outer=TRUE, las=1, at=log(pl + 0.001), labels=pl)
axis(1, outer=TRUE, at=seq_along(sud), labels=sud)
box()
mtext(sur[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sus <- sort(unique(seas[sel]))
for(j in seq_along(sus)) {
sel2 <- sel & seas==sus[j]
text(nd[sel2], log(Sa + 0.001)[sel2], substring(sus[j], 1, 1), col=blindcolz[j+1])
lines(nd[sel2], fit2$fitted[sel2], col=blindcolz[j+1])
}
}
mtext("Depth layer", side=1, outer=TRUE, line=2.5)
mtext("Sa", side=2, outer=TRUE, line=2.5)
i j
i
jh
j
sel2 <- sel & seas==sus[j]
subm[sel2, ]
subm <- aggregate(Sa ~ reg + dep + seas + survey, data=sub, median)
subm$n <- aggregate(!is.na(Sa) ~ reg + seas + survey + dep, data=sub, sum)[, 5]
subm
subm <- aggregate(Sa ~ reg + seas + survey + dep, data=sub, median)
subm$n <- aggregate(!is.na(Sa) ~ reg + seas + survey + dep, data=sub, sum)[, 5]
subm
search()
detach()
attach(subm)
fit <- aov(log(Sa + 0.001) ~ seas*reg*dep, data=subm, weight=n)
fit2 <- step(fit, trace=FALSE)
summary(fit2)
sur <- unique(reg)
sud <- unique(dep)
nd <- as.numeric(dep)
pl <- prettylog(Sa, lead=1, extra=0)
windows()
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in c(1, 2, 4, 3)) {
sel <- reg==sur[i]
plot(nd, log(Sa + 0.001), type="n", xlab="", ylab="", axes=FALSE)
axis(2, outer=TRUE, las=1, at=log(pl + 0.001), labels=pl)
axis(1, outer=TRUE, at=seq_along(sud), labels=sud)
box()
mtext(sur[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sus <- sort(unique(seas[sel]))
for(j in seq_along(sus)) {
sel2 <- sel & seas==sus[j]
text(nd[sel2], log(Sa + 0.001)[sel2], substring(sus[j], 1, 1), col=blindcolz[j+1])
lines(nd[sel2], fit2$fitted[sel2], col=blindcolz[j+1])
}
}
mtext("Depth layer", side=1, outer=TRUE, line=2.5)
mtext("Sa", side=2, outer=TRUE, line=2.5)
summary(fit2)
sur <- unique(reg)
sud <- unique(dep)
nd <- as.numeric(dep)
pl <- prettylog(Sa, lead=1, extra=0)
windows()
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in c(1, 2, 4, 3)) {
sel <- reg==sur[i]
plot(nd, log(Sa + 0.001), type="n", xlab="", ylab="", axes=FALSE)
axis(2, outer=TRUE, las=1, at=log(pl + 0.001), labels=pl)
axis(1, outer=TRUE, at=seq_along(sud), labels=sud)
box()
mtext(sur[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sus <- sort(unique(seas[sel]))
for(j in seq_along(sus)) {
sel2 <- sel & seas==sus[j]
text(nd[sel2], log(Sa + 0.001)[sel2], substring(sus[j], 1, 1), col=blindcolz[j+1])
lines(nd[sel2], fit2$fitted[sel2], col=blindcolz[j+1], lwd=3)
for(k in 1:4) {
sel3 <- reg==sur[k] & seas==sus[j]
lines(nd[sel3], fit2$fitted[sel3], col=blindcolz[j+1])
}
}
}
mtext("Depth layer", side=1, outer=TRUE, line=2.5)
mtext("Sa", side=2, outer=TRUE, line=2.5)
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in c(1, 2, 4, 3)) {
sel <- reg==sur[i]
plot(nd, log(Sa + 0.001), type="n", xlab="", ylab="", axes=FALSE)
axis(2, outer=TRUE, las=1, at=log(pl + 0.001), labels=pl)
axis(1, outer=TRUE, at=seq_along(sud), labels=sud)
box()
mtext(sur[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sus <- sort(unique(seas[sel]))
for(j in seq_along(sus)) {
sel2 <- sel & seas==sus[j]
text(nd[sel2], log(Sa + 0.001)[sel2], substring(sus[j], 1, 1), col=blindcolz[j+1])
lines(nd[sel2], fit2$fitted[sel2], col=blindcolz[j+1], lwd=3)
for(k in 1:4) {
sel3 <- reg==sur[k] & seas==sus[j]
lines(nd[sel3], fit2$fitted[sel3], col=blindcolz[j+1], lty=3)
}
}
}
mtext("Depth layer", side=1, outer=TRUE, line=2.5)
mtext("Sa", side=2, outer=TRUE, line=2.5)
summary(fit2)
fit <- aov(log(Sa + 0.001) ~ dep*reg*seas, data=subm, weight=n)
fit2 <- step(fit, trace=FALSE)
summary(fit2)
sur <- unique(reg)
sud <- unique(dep)
nd <- as.numeric(dep)
pl <- prettylog(Sa, lead=1, extra=0)
windows()
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in c(1, 2, 4, 3)) {
sel <- reg==sur[i]
plot(nd, log(Sa + 0.001), type="n", xlab="", ylab="", axes=FALSE)
axis(2, outer=TRUE, las=1, at=log(pl + 0.001), labels=pl)
axis(1, outer=TRUE, at=seq_along(sud), labels=sud)
box()
mtext(sur[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sus <- sort(unique(seas[sel]))
for(j in seq_along(sus)) {
sel2 <- sel & seas==sus[j]
text(nd[sel2], log(Sa + 0.001)[sel2], substring(sus[j], 1, 1), col=blindcolz[j+1])
lines(nd[sel2], fit2$fitted[sel2], col=blindcolz[j+1], lwd=3)
for(k in 1:4) {
sel3 <- reg==sur[k] & seas==sus[j]
lines(nd[sel3], fit2$fitted[sel3], col=blindcolz[j+1], lty=3)
}
}
}
mtext("Depth layer", side=1, outer=TRUE, line=2.5)
mtext("Sa", side=2, outer=TRUE, line=2.5)
summary(fit2)
seq_along(sud)
sud
nd
sur <- unique(reg)
sud <- unique(dep)
nd <- as.numeric(dep)
pl <- prettylog(Sa, lead=1, extra=0)
windows()
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in c(1, 2, 4, 3)) {
sel <- reg==sur[i]
plot(nd, log(Sa + 0.001), type="n", xlab="", ylab="", axes=FALSE)
axis(2, outer=TRUE, las=1, at=log(pl + 0.001), labels=pl)
axis(1, outer=TRUE, at=sort(unique(nd)), labels=sud)
box()
mtext(sur[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sus <- sort(unique(seas[sel]))
for(j in seq_along(sus)) {
sel2 <- sel & seas==sus[j]
text(nd[sel2], log(Sa + 0.001)[sel2], substring(sus[j], 1, 1), col=blindcolz[j+1])
lines(nd[sel2], fit2$fitted[sel2], col=blindcolz[j+1], lwd=3)
for(k in 1:4) {
sel3 <- reg==sur[k] & seas==sus[j]
lines(nd[sel3], fit2$fitted[sel3], col=blindcolz[j+1], lty=3)
}
}
}
mtext("Depth layer", side=1, outer=TRUE, line=2.5)
mtext("Sa", side=2, outer=TRUE, line=2.5)
fit2
?cheat
?startrtf
System.Date
?date
Sys.Date
Sys.Date()
head(subm)
dim(subm)
summary(fit2)
search()
detach()
# C:\JVA\Consult\Yule\Lake Kivu\anova.r
library(RgoogleMaps) 
library(lme4)
wb <- loadWorkbook("C:/JVA/Consult/Yule/Lake Kivu/Kivu Sa data 26 nov.xls")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, endCol=9)
dat$mm <- factor(recode(dat$Month, month.name, 1:12))
dat$reg <- factor(dat$Region, levels=c("Inshore", "North", "East", "South", "West"))
dat$GPS.Lat.end.N.S <- as.numeric(dat$GPS.Lat.end.N.S)
dat$GPS.Long..center.E.W <- as.numeric(dat$GPS.Long..center.E.W)
odd <- subdex(dat, GPS.Long..center.E.W<0 | GPS.Lat.end.N.S>0)
dat$lat <- ifelse(odd, dat$GPS.Long..center.E.W, dat$GPS.Lat.end.N.S)
dat$lon <- ifelse(odd, dat$GPS.Lat.end.N.S, dat$GPS.Long..center.E.W)
rm(odd)
dat$Depth[dat$Depth=="0-60 "] <- "0-60"
dat$Depth[dat$Depth=="15-30 "] <- "15-30"
dat$dep <- factor(dat$Depth, levels=c("0-50", "0-15", "15-30", "30-45", "45-60", "0-60"))
dat$Sa <- as.numeric(dat$Sa)
dat$seas <- factor(dat$Season)
dat$survey <- interaction(dat$Year, dat$mm, drop=TRUE, lex.order=TRUE)
plotdf(dat)
attach(dat)
mytable(dep, reg)
mytable(mm, paste(Year, Season))
mytable(interaction(reg, dep, drop=TRUE, lex.order=TRUE), interaction(Year, mm, Season, drop=TRUE, lex.order=TRUE))
# Interval seems to be a unique descriptor for the values in each "survey"
id <- interaction(reg, dep, Year, mm, Season, Interval, drop=TRUE)
sum(duplicated(id))
col <- as.numeric(as.factor(Region)) + 1
mlat <- tapply(lat, Region, mean, na.rm=TRUE)
mlon <- tapply(lon, Region, mean, na.rm=TRUE)
# windows()
# MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
# PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
# TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), add=TRUE, cex=2)
# subset the data for analysis
doc <- startrtf(file="KivuANOVA", dir="C:/JVA/Consult/Yule/Lake Kivu")
heading("Exploring Allison's Lake Kivu Data")
heading(paste("Jean V. Adams", "Sys.Date()", sep=" - "), 2)
para("I selected a subset of data, including only four depth layers (0-15, 15-30, 30-45, and 45-60),",
" four regions (North, East, West, and South), and records with non-missing Sa values.")
sub <- dat[Depth %in% c("0-15", "15-30", "30-45", "45-60") & Region %in% c("North", "East", "South", "West") & !is.na(Sa), ]
detach(dat)
attach(sub)
fig <- function() {
MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), add=TRUE, cex=2)
}
figu("Subsetted Lake Kivu data used for initial ANOVA.")
detach(sub)
subm <- aggregate(Sa ~ reg + seas + survey + dep, data=sub, median)
subm$n <- aggregate(!is.na(Sa) ~ reg + seas + survey + dep, data=sub, sum)[, 5]
para("I summarized the subsetted data by calculating the median Sa for each unique combination of",
" survey (year and month), region, season (wet and dry) and depth layer.",
"  This resulted in a data set with ", dim(subm)[1], " rows.",
"  I also kept track of the total number of raw observations that went into calculating the median Sa of each row.",
"  This number was used as a weighting variable in the analysis of variance (ANOVA), giving more weight to rows with more precise medians.")
attach(subm)
para("I fit an ANOVA with natural log transformed median Sa as the response, log(median Sa + 0.001), and depth layer, region, and season as",
" categorical variables.",
"  I naively included all two-way and three-way interactions, and then used a stepwise procedure to simplify the model",
" based on Akaike's information criterion (AIC).",
"  The best model selected included all three main effects as well as the depth layer by season interaction (Table ", tabcount, ").",
"  Depth layer had the most pronounce effect, with biomass highest from 15-30 regardless of season or region (Figure ", figcount, ").",
"  Biomass was higher in the wet season than in the dry season for all but the deepest depth layer.",
"  I did not test for it formally, but biomass appears to be greater for West and South (which were similar) than for North and East (also similar).")
fit <- aov(log(Sa + 0.001) ~ dep*reg*seas, data=subm, weight=n)
fit2 <- step(fit, trace=FALSE)
tab <- summary(fit2)
tabl("ANOVA table of so-called best model selected by AIC.")
sur <- unique(reg)
sud <- unique(dep)
nd <- as.numeric(dep)
pl <- prettylog(Sa, lead=1, extra=0)
fig <- function() {
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in c(1, 2, 4, 3)) {
sel <- reg==sur[i]
plot(nd, log(Sa + 0.001), type="n", xlab="", ylab="", axes=FALSE)
axis(2, outer=TRUE, las=1, at=log(pl + 0.001), labels=pl)
axis(1, outer=TRUE, at=sort(unique(nd)), labels=sud)
box()
mtext(sur[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sus <- sort(unique(seas[sel]))
for(j in seq_along(sus)) {
sel2 <- sel & seas==sus[j]
text(nd[sel2], log(Sa + 0.001)[sel2], substring(sus[j], 1, 1), col=blindcolz[j+1])
lines(nd[sel2], fit2$fitted[sel2], col=blindcolz[j+1], lwd=3)
for(k in 1:4) {
sel3 <- reg==sur[k] & seas==sus[j]
lines(nd[sel3], fit2$fitted[sel3], col=blindcolz[j+1], lty=3)
}
}
}
mtext("Depth layer", side=1, outer=TRUE, line=2.5)
mtext("Sa", side=2, outer=TRUE, line=2.5)
}
figu("Observed (poitns) and predicted (lines) fish biomass (log scale Sa) in Lake Kivu versus depth layer by region (the four panels) and",
" season (the two colors).  The bold lines in each panel represent the prediction for that region;",
" dashed lines show the predictions from the other regions for comparison.")
tab
as.matrix(tab)
library(broom)
tidy(tab)
tid(summary(fit2))
tidy(summary(fit2))
?tidy
class(tab)
summary(fit2))
summary(fit2)
summary(fit2)[[1]]
class(summary(fit2))
class(as.matrix(summary(fit2)))
?summary.aov
summary(fit2)[1]
unlist(summary(fit2))
matrix(unlist(summary(fit2)), ncol=5)
summary(fit2)[[1]][1, 3]
summary(fit2)[[1]][1:5, 3]
summary(fit2)[[1]][1:5, 1:5]
summary(fit2)[[1]][1:5, 1:4]
summary(fit2)[[1]][1:5, 3:4]
summary(fit2)[[1]][, 3:4]
summary(fit2)[[1]][, 1:4]
summary(fit2)[[1]][, 1:5]
summary(fit2)[[1]][, 4:5]
summary(fit2)[[1]][, 5]
tab1 <- summary(fit2)[[1]]
tab <- cbind(tab1[, 1:4], "Pr(>F)"=tab1[, 5])
tab
tab1 <- summary(fit2)[[1]]
tab <- cbind(tab1[, 1:4], "Pr(>F)"=tab1[, 5])
tabl("ANOVA table of so-called best model selected by AIC.")
endrtf()
cleanup()
graphics.off()
search()
detach(3)
search()
# C:\JVA\Consult\Yule\Lake Kivu\anova.r
library(RgoogleMaps) 
library(broom)
wb <- loadWorkbook("C:/JVA/Consult/Yule/Lake Kivu/Kivu Sa data 26 nov.xls")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, endCol=9)
dat$mm <- factor(recode(dat$Month, month.name, 1:12))
dat$reg <- factor(dat$Region, levels=c("Inshore", "North", "East", "South", "West"))
dat$GPS.Lat.end.N.S <- as.numeric(dat$GPS.Lat.end.N.S)
dat$GPS.Long..center.E.W <- as.numeric(dat$GPS.Long..center.E.W)
odd <- subdex(dat, GPS.Long..center.E.W<0 | GPS.Lat.end.N.S>0)
dat$lat <- ifelse(odd, dat$GPS.Long..center.E.W, dat$GPS.Lat.end.N.S)
dat$lon <- ifelse(odd, dat$GPS.Lat.end.N.S, dat$GPS.Long..center.E.W)
rm(odd)
dat$Depth[dat$Depth=="0-60 "] <- "0-60"
dat$Depth[dat$Depth=="15-30 "] <- "15-30"
dat$dep <- factor(dat$Depth, levels=c("0-50", "0-15", "15-30", "30-45", "45-60", "0-60"))
dat$Sa <- as.numeric(dat$Sa)
dat$seas <- factor(dat$Season)
dat$survey <- interaction(dat$Year, dat$mm, drop=TRUE, lex.order=TRUE)
plotdf(dat)
attach(dat)
mytable(dep, reg)
mytable(mm, paste(Year, Season))
mytable(interaction(reg, dep, drop=TRUE, lex.order=TRUE), interaction(Year, mm, Season, drop=TRUE, lex.order=TRUE))
# Interval seems to be a unique descriptor for the values in each "survey"
id <- interaction(reg, dep, Year, mm, Season, Interval, drop=TRUE)
sum(duplicated(id))
col <- as.numeric(as.factor(Region)) + 1
mlat <- tapply(lat, Region, mean, na.rm=TRUE)
mlon <- tapply(lon, Region, mean, na.rm=TRUE)
# windows()
# MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
# PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
# TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), add=TRUE, cex=2)
# subset the data for analysis
doc <- startrtf(file="KivuANOVA", dir="C:/JVA/Consult/Yule/Lake Kivu")
heading("Exploring Allison's Lake Kivu Data")
heading(paste("Jean V. Adams", "Sys.Date()", sep=" - "), 2)
para("I selected a subset of data, including only four depth layers (0-15, 15-30, 30-45, and 45-60),",
" four regions (North, East, West, and South), and records with non-missing Sa values.")
sub <- dat[Depth %in% c("0-15", "15-30", "30-45", "45-60") & Region %in% c("North", "East", "South", "West") & !is.na(Sa), ]
detach(dat)
attach(sub)
fig <- function() {
MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), add=TRUE, cex=2)
}
figu("Subsetted Lake Kivu data used for initial ANOVA.")
detach(sub)
subm <- aggregate(Sa ~ reg + seas + survey + dep, data=sub, median)
subm$n <- aggregate(!is.na(Sa) ~ reg + seas + survey + dep, data=sub, sum)[, 5]
para("I summarized the subsetted data by calculating the median Sa for each unique combination of",
" survey (year and month), region, season (wet and dry) and depth layer.",
"  This resulted in a data set with ", dim(subm)[1], " rows.",
"  I also kept track of the total number of raw observations that went into calculating the median Sa of each row.",
"  This number was used as a weighting variable in the analysis of variance (ANOVA), giving more weight to rows with more precise medians.")
attach(subm)
para("I fit an ANOVA with natural log transformed median Sa as the response, log(median Sa + 0.001), and depth layer, region, and season as",
" categorical variables.",
"  I naively included all two-way and three-way interactions, and then used a stepwise procedure to simplify the model",
" based on Akaike's information criterion (AIC).",
"  The best model selected included all three main effects as well as the depth layer by season interaction (Table ", tabcount, ").",
"  Depth layer had the most pronounce effect, with biomass highest from 15-30 regardless of season or region (Figure ", figcount, ").",
"  Biomass was higher in the wet season than in the dry season for all but the deepest depth layer.",
"  I did not test for it formally, but biomass appears to be greater for West and South (which were similar) than for North and East (also similar).")
fit <- aov(log(Sa + 0.001) ~ dep*reg*seas, data=subm, weight=n)
fit2 <- step(fit, trace=FALSE)
tab1 <- summary(fit2)[[1]]
tab <- cbind(tab1[, 1:4], "Pr(>F)"=tab1[, 5])
tabl("ANOVA table of so-called best model selected by AIC.")
sur <- unique(reg)
sud <- unique(dep)
nd <- as.numeric(dep)
pl <- prettylog(Sa, lead=1, extra=0)
fig <- function() {
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in c(1, 2, 4, 3)) {
sel <- reg==sur[i]
plot(nd, log(Sa + 0.001), type="n", xlab="", ylab="", axes=FALSE)
axis(2, outer=TRUE, las=1, at=log(pl + 0.001), labels=pl)
axis(1, outer=TRUE, at=sort(unique(nd)), labels=sud)
box()
mtext(sur[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sus <- sort(unique(seas[sel]))
for(j in seq_along(sus)) {
sel2 <- sel & seas==sus[j]
text(nd[sel2], log(Sa + 0.001)[sel2], substring(sus[j], 1, 1), col=blindcolz[j+1])
lines(nd[sel2], fit2$fitted[sel2], col=blindcolz[j+1], lwd=3)
for(k in 1:4) {
sel3 <- reg==sur[k] & seas==sus[j]
lines(nd[sel3], fit2$fitted[sel3], col=blindcolz[j+1], lty=3)
}
}
}
mtext("Depth layer", side=1, outer=TRUE, line=2.5)
mtext("Sa", side=2, outer=TRUE, line=2.5)
}
figu("Observed (poitns) and predicted (lines) fish biomass (log scale Sa) in Lake Kivu versus depth layer by region (the four panels) and",
" season (the two colors).  The bold lines in each panel represent the prediction for that region;",
" dashed lines show the predictions from the other regions for comparison.")
detach(subm)
endrtf()
?endrtf
tabl
# C:\JVA\Consult\Yule\CiscoMorpho\CiscoMorph.r
# bring in functions
source("C:/JVA/Consult/Yule/CiscoMorpho/CiscoMorphFunctions.r")
library(fpc)
library(rpart)
library(rpart.plot)
library(seriation)
wb <- loadWorkbook("C:/JVA/Consult/Yule/CiscoMorpho/Cisco size-corrected residuals FINAL.xls")
dat1 <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
dat1$LS <- paste(substring(dat1$LAKE, 1, 1), dat1$SITE, sep=" - ")
wb <- loadWorkbook("C:/JVA/Consult/Yule/CiscoMorpho/FISH MORPHOMETRICS with total lengths RAW Truss measurements.xlsx")
datraw <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
wb <- loadWorkbook("C:/JVA/Consult/Yule/CiscoMorpho/Re-measured photos for Jean.xlsx")
remeas <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
dat2 <- cbind(dat1, datraw[match(dat1$ID, datraw$ID.), paste0("L", 1:31)])
ltrussvars <- paste0("L", 1:31)
rtrussvars <- paste0("r", 1:31)
# replace truss lengths for 21 fish photos that were remeasured
dat2[match(remeas$ID., dat2$ID), ltrussvars] <- remeas[, ltrussvars]
doc <- startrtf(file="CiscoMorph", dir="C:/JVA/Consult/Yule/CiscoMorpho")
heading("Exploring Dan's Cisco Morphometrics Data")
heading("Jean V. Adams - 10 July 2014", 2)
para("There was one row in the cisco morphometrics data with missing truss measurements (Table ", jvamiscenv$tabcount, ").",
"  This row was eliminated from further analysis.")
tab <- dat2[is.na(dat2$L1), c("OBS", "ID", "SEX", "AGE", "LAKE", "SITE", "LS", "TL", ltrussvars[1:5])]
tabl("Records with missing truss measurements.", row.names=FALSE)
sethdat <- dat2[!is.na(dat2$L1), ]
para("There were a few rows in the cisco morphometrics data with duplicate IDs.",
"  Most of the measurements were pretty close, but a few were a bit further off (Table ", jvamiscenv$tabcount, ").",
"  Dan checked into these, and could only find photos for OBSs 563 and 675,",
" so all of the other observations were removed prior to analysis.")
a <- sethdat[sethdat$ID %in% sethdat$ID[duplicated(sethdat$ID)], ]
b <- a[c(1, 3, 5, 7, 9), rtrussvars] - a[c(2, 4, 6, 8, 10), rtrussvars]
#plot(sort(abs(unlist(b))))
tab <- a[, c(1:7, 7+c(9, 16, 28, 29))]
tab[, 8:11] <- format(round(tab[, 8:11], 2))
tabl("Records with duplicate IDs.  Truss measurements are given for those measures that were off by more than 0.3.", row.names=FALSE)
sethdat <- sethdat[!(sethdat$OBS %in% tab$OBS[!(tab$OBS %in% c(563, 675))]), ]
para("Prior to analysis, the size component was removed from the morphometric measures.",
"  Truss measurements (in mm) were natural log transformed, and the first principal component",
" (based on the covariance matrix) of these measures was used as general measure of size (Figure ", jvamiscenv$figcount, ").")
# log transform the lengths
ldat <- log(sethdat[, ltrussvars])
# use the first principal component as size
size <- princomp(ldat, cor=FALSE, scores=TRUE)$scores[, 1]
fig <- function() {
par(mar=c(4, 4, 1, 1))
plot(sethdat$TL, size, xlab="Total length of fish  (mm)", ylab="General measure of size  (PC1)", las=1)
}
figu("Relation between fish total length and derived general measure of fish size based on the first",
" principal component score of the log transformed truss measurements.", h=4, w=4)
# regress size (x) on each of the log transformed lengths (y) to get a residual
rdat <- sapply(ldat, function(y) lm(y ~ size)$resid)
dimnames(rdat)[[2]] <- rtrussvars
dat <- cbind(sethdat[, c("OBS", "ID", "SEX", "AGE", "LAKE", "SITE", "LS", "TL", ltrussvars)], size, rdat)
# write.csv(dat, "C:/JVA/Consult/Yule/CiscoMorpho/Cisco morpho with Jean residuals.csv", row.names=FALSE)
if(FALSE) {
# compare new resids to Seth's resids
windows()
plot(rdat[, 15], sethdat[, rtrussvars][, 15])
lm(sethdat[, rtrussvars][, 15] ~ rdat[, 15])
# compare new resids to Seth's resids
windows()
plot(rdat[, 25], sethdat[, rtrussvars][, 25])
lm(sethdat[, rtrussvars][, 25] ~ rdat[, 25])
}
rm(wb, dat1, datraw, dat2, sethdat, a, b, ldat, size, rdat)
para("There were also ", sum(is.na(dat$SEX)), " records where sex was missing (Table ", tabcount, ").")
a <- table(dat$LS[is.na(dat$SEX)])
tab <- data.frame(LakeSite=names(a), Nrecords=as.numeric(a))
tabl("Number of records, by lake and site, with nothing entered for sex.", row.names=FALSE)
para("And ", sum(!is.na(dat$SEX) & !(dat$SEX %in% 1:2)), " records where sex was not equal to 1 or 2 (Table ", tabcount, ").")
tab <- dat[!is.na(dat$SEX) & !(dat$SEX %in% 1:2), 1:10]
tab[, 8:10] <- round(tab[, 8:10], 2)
tabl("Records with sex not equal to 1 or 2.", row.names=FALSE)
para("For analyses conducted for individual sexes, I used only those records with sex equal to 1 (males) or 2 (females) .",
"  In all cases (both sexes, just males, and just females),",
" I scaled the data (subtracting the mean and dividing by the standard deviation),",
" so that all of the truss measurements would have the same mean and variance.",
"  This ensures that each truss measure will be given the same amount of weight in a cluster analysis.")
# subset the data
submf.all <- dat[!duplicated(dat$ID), ]
para("I looked at the length distribution and sex composition at all sites (Figures ", figcount, " and ", figcount+1, ").",
"  Only those fish greater than or equal to 300 mm were used in the tables, figures, and analyses that follow Figure ", figcount, ".")
susl <- sort(unique(dat$LS))
tlmed <- tapply(submf.all$TL, submf.all$LS, median)
ord <- order(tlmed)
fig <- function() {
par(mfrow=c(length(susl), 1), mar=c(0, 0, 0, 0), oma=c(4, 1, 1, 0))
for(i in ord) {
sel <- submf.all$LS == susl[i]
hist(submf.all$TL[sel], breaks=seq(200, 550, 10), axes=FALSE, col="gray", xlab="", ylab="", main="")
mtext(susl[i], side=3, line=-1, adj=0.05, cex=0.7)
abline(v=seq(200, 550, 50))
abline(v=tlmed[i], col="cyan", lwd=2)
}
axis(1, outer=TRUE, lwd=0, lwd.ticks=1)
mtext("Total length  (mm)", side=1, outer=TRUE, line=2.5)
mtext("Frequency", side=2, outer=TRUE, line=-0.5)
}
figu("Length frequency distribution of all fish by lake and site, sites ordered by median length (vertical cyan lines).", newpage="port")
# further subset the data, only fish >= 300 mm
submf <- submf.all[submf.all$TL >= 300, ]
subm <- dat[!duplicated(dat$ID) & !is.na(dat$SEX) & dat$SEX==1, ]
subf <- dat[!duplicated(dat$ID) & !is.na(dat$SEX) & dat$SEX==2, ]
# rescale the data
subscmf <- scale(submf[, rtrussvars])
subscm <- scale(subm[, rtrussvars])
subscf <- scale(subf[, rtrussvars])
if(FALSE) {
# error check truss measurements
submftruss <- data.frame(t(submf[, ltrussvars]))
names(submftruss) <- submf$ID
fc1 <- lapply(submftruss, buildfish)
fc2 <- lapply(submftruss, buildfish, upfirst=FALSE)
fc1[sapply(fc1, function(x) any(is.na(x)))]
fc2[sapply(fc2, function(x) any(is.na(x)))]
buildfish(submf[submf$ID==106439, ltrussvars])
buildfish(submf[submf$ID==106439, ltrussvars], upfirst=FALSE)
sort(signif(submf[submf$ID==106439, ltrussvars], 3))
# error in ID 106439, L5=54.9, L10=182, L11=122 ... L10 too big??
# this error seems to be fixed with the remeasuring
t1 <- t(sapply(fc1, fc2truss))
t2 <- t(sapply(fc2, fc2truss))
r1 <- submf[, ltrussvars] - t1[, ltrussvars]
r2 <- submf[, ltrussvars] - t2[, ltrussvars]
mse1 <- sqrt(apply(r1^2, 1, sum))
mse2 <- sqrt(apply(r2^2, 1, sum))
mse <- pmax(mse1, mse2, na.rm=TRUE)
sel <- mse > 20
round(r1[sel, ])
round(r2[sel, ])
t1[sel, ]
t2[sel, ]
submf[sel, ]
remeas[remeas$ID. %in% submf$ID[sel], ]
count <- 0
for(i in 1:30) {
for(j in (i+1):31) {
if(count %% 9 == 0) {
windows()
par(mfrow=c(3, 3), mar=c(4, 4, 1, 1), cex=0.5)
}
count <- count + 1
plotblank(submf[, ltrussvars[i]], submf[, ltrussvars[j]], xlab=ltrussvars[i], ylab=ltrussvars[j])
text(submf[, ltrussvars[i]], submf[, ltrussvars[j]], seq(submf$ID))
}}
# these are rows selected as outliers from the plots
a <- c(586, 146, 117, 66, 255, 164, 215, 14, 374, 74, 97, 226, 239, 39, 571, 193, 738, 305, 219, 75)
mse[a]
b <- sort(unique(c(seq(sel)[sel], a)))
btruss <- data.frame(t(submf[b, ltrussvars]/submf$TL))
names(btruss) <- submf$ID[b]
fc <- lapply(btruss, function(x) fishpts(x)[[2]])
fc1 <- lapply(btruss, function(x) buildfish(x))
fc2 <- lapply(btruss, function(x) buildfish(x, upfirst=FALSE))
fishpord <- c(1:4, 6, 8, 10, 12, 14, 13, 11, 9, 7, 5, 1)
fishpord2 <- c(1:14, 1)
xyr <- apply(do.call(rbind, fc), 2, range)
windows(h=9, w=6.5)
par(mar=c(0, 0, 1, 0), mfrow=c(9, 3))
for(i in 1:length(fc)) {
eqscplot(1, 1, type="n", xlim=xyr[, 1], ylim=xyr[, 2], axes=FALSE, xlab="", ylab="", main=submf$ID[b][i])
lines(fc[[i]][fishpord, ], type="o")
lines(fc1[[i]][fishpord2, ], type="o", col="red")
lines(fc2[[i]][fishpord2, ], type="o", col="blue")
}
allison <- c(106414, 106439, 106509, 106517, 106518, 106540, 106220, 106250, 106262, 106268, 106297, 87077,
87081, 87089, 87126, 87143, 8105018, 28, 102661, 102003, 102945)
btruss <- data.frame(t(submf[submf$ID %in% allison, ltrussvars]/submf$TL))
names(btruss) <- submf$ID[submf$ID %in% allison]
fc <- lapply(btruss, function(x) fishpts(x)[[2]])
fc1 <- lapply(btruss, function(x) buildfish(x))
fc2 <- lapply(btruss, function(x) buildfish(x, upfirst=FALSE))
xyr <- apply(do.call(rbind, fc), 2, range)
windows(h=9, w=6.5)
par(mar=c(0, 0, 1, 0), mfrow=c(7, 3))
for(i in 1:length(fc)) {
if(i==6) frame()
j <- match(allison[-6][i], names(btruss))
eqscplot(1, 1, type="n", xlim=xyr[, 1], ylim=xyr[, 2], axes=FALSE, xlab="", ylab="", main=allison[-6][i])
lines(fc[[j]][fishpord, ], type="o")
lines(fc1[[j]][fishpord2, ], type="o", col="red")
lines(fc2[[j]][fishpord2, ], type="o", col="blue")
}
}
subb <- rbind(subm, subf)
pmale <- tapply(subb$SEX==1, subb$LS, mean)
ord <- order(pmale)
fig <- function() {
par(mar=c(4, 11, 1, 1), xaxs="i")
barplot(rbind(pmale[ord], 1-pmale[ord]), horiz=TRUE, las=1, xlim=c(0, 1), col=c("blue", "red"), xlab="Proportion males", ylab="")
box()
abline(v=seq(0.2, 0.8, 0.2))
}
figu("Sex composition by lake and site, sites ordered by the proportion of males (blue).", h=4, w=4)
ks <- 1:14
pamcl <- pamk(data=subscmf, krange=ks, criterion="asw", usepam=TRUE, scaling=FALSE, diss=FALSE)
group <- pamcl$pamobject$clustering
para("I used the PAM (partitioning around medioids) method for clustering.",
"  I let the number of clusters range from 1 to 14 (since there were 14 sites).",
"  The recommended number of clusters for data from both sexes combined",
" based on the optimum average silhouette width was ", pamcl$nc, " (Figure ", figcount, ").")
fig.nclusters <- function(title) {
plot(ks[-1], pamcl$crit[-1], las=1, type="b", 
xlab="No. of clusters", ylab="Average silhouette width", main=title)
abline(v=pamcl$nc, lty=2)
sel <- ks==pamcl$nc
points(ks[sel], pamcl$crit[sel], pch=16, cex=1.5)
}
fig <- function() fig.nclusters(title="14 Sites, Both Sexes")
figu("Recommended number of clusters based on the optimum average silhouette width, 14 sites and both sexes combined.", h=4, w=4)
# look at the proportion of fish in each lake/site assigned to each cluster group
tab.prop <- function(grp, df) {
tot <- tapply(!is.na(grp), list(df$LS, grp), sum)
tot[is.na(tot)] <- 0
prop <- tot/apply(tot, 1, sum)
ord <- seriate(prop, method="PCA")
g <- prop[get_order(ord, 1), get_order(ord, 2)]
dimnames(g)[[2]] <- paste0("G", dimnames(g)[[2]])
list(g=g, gord=get_order(ord, 2))
}
both <- tab.prop(group, submf)
g <- both$g
tab <- data.frame(LakeSite=dimnames(g)[[1]], format(round(g, 4)))
tabl("Proportion of fish assigned to cluster groups in each lake and site, 14 sites and both sexes combined.", row.names=FALSE)
colz <- colr(1:pamcl$nc, "brown", "orange")
fig.bargrp <- function() {
par(mar=c(4, 8, 1, 1),  xaxs="i")
barplot(t(g)[, dim(g)[1]:1], horiz=TRUE, las=1, xlim=c(0, 1), col=colz[both$gord], xlab="Proportion of fish", ylab="")
box()
}
fig <- function() fig.bargrp()
figu("Proportion of fish assigned to cluster groups in each lake and site, 14 sites and both sexes combined.", h=4, w=4)
rm(tlmed, ord, subb, pmale, g)
para("I divided the truss measurements by the fish total length and calculated the median of these values for each cluster group.",
"  Then I built a representative fish diagram of each cluster group based on these values (Figure ", figcount, ").")
fishpord <- c(1:4, 6, 8, 10, 12, 14, 13, 11, 9, 7, 5, 1)
#fishpord <- c(1:14, 1)
medun <- t(apply(submf[, ltrussvars]/submf$TL, 2, tapply, group, median, na.rm=TRUE))
fc <- lapply(data.frame(medun), function(x) fishpts(x)[[2]])
#fc <- lapply(data.frame(medun), function(x) buildfish(x))
xyr <- apply(do.call(rbind, fc), 2, range)
fig.gfish <- function() {
par(mar=c(0, 0, 1, 0))
eqscplot(1, 1, type="n", xlim=xyr[, 1], ylim=xyr[, 2], axes=FALSE, xlab="", ylab="")
for(i in 1:length(fc)) {
co <- fc[[i]]
lines(co[fishpord, ], col=colz[i], type="o")
}
mtext(c("Head", "Tail"), side=3, adj=c(0.05, 0.95), line=-1)
legend("top", paste("Group", 1:pamcl$nc), col=colz, lty=1, bty="n", lwd=3, horiz=TRUE)
}
fig <- function() fig.gfish()
figu("Diagram of fish based on median truss measurements (scaled by total length) for each cluster group, 14 sites and both sexes combined.",
"  Fish are lined up by their noses.", h=3, w=6.5)
if(pamcl$nc == 2) {
para("I calculated the median of each of the scaled measurements for each group.",
"  Then I looked at the difference between those medians to see which truss measurements",
" were the most different between the groups (Figure ", figcount, ").")
# median measures per group
med <- t(apply(subscmf, 2, tapply, group, median))
med2 <- data.frame(med, mdif = med[, 1] - med[, 2])
med3 <- med2[order(med2$mdif), ]
amdif <- abs(med2$mdif)
fig.grpdif <- function(title) {
plot(1:dim(med2)[1], med2$mdif, ylim=c(-1, 1)*max(amdif), las=1,
xlab="Truss  (r#)", ylab="Difference between scaled measures of group 1 and 2", main=title)
abline(h=0)
segments(1:dim(med2)[1], med2$mdif, 1:dim(med2)[1], 0)
}
fig <- function() fig.grpdif(title="14 Sites, Both Sexes")
figu("Difference in truss measurements between the cluster groups, 14 sites and both sexes combined, 14 sites and both sexes combined.", 
h=4, w=4)
}
para("I also looked at how the clustering would have proceeded if we had started with a single cluster of fish at each site.",
"  For this, I used agglomerative hierarchical clustering with the centroid method and the squared Euclidean distances (Figure ",
figcount, ".)")
cent <- apply(subscmf, 2, tapply, submf$LS, mean)
hc1 <- hclust(dist(cent)^2, method="centroid", members=table(submf$LS))
fig.dendro <- function(title) {
par(mar=c(1, 4, 1, 1))
plot(hc1, xlab="", sub="", , main=title)
}
fig <- function() fig.dendro(title="14 Sites, Both Sexes")
figu("Centroid cluster analysis starting with a single cluster at each site, 14 sites and both sexes combined.", h=4, w=4)
pamcl <- pamk(data=subscm, krange=ks, criterion="asw", usepam=TRUE, scaling=FALSE, diss=FALSE)
group <- pamcl$pamobject$clustering
para("The recommended number of clusters for males at 13 sites was ", pamcl$nc, " (Figure ", figcount, ").")
fig <- function() fig.nclusters(title="13 Sites, Males")
figu("Recommended number of clusters based on the optimum average silhouette width, males at 13 sites.", h=4, w=4)
both <- tab.prop(group, subm)
g <- both$g
tab <- data.frame(LakeSite=dimnames(g)[[1]], format(round(g, 4)))
tabl("Proportion of fish assigned to cluster groups in each lake and site, males at 13 sites.", row.names=FALSE)
colz <- colr(1:pamcl$nc, "brown", "orange")
fig <- function() fig.bargrp()
figu("Proportion of fish assigned to cluster groups in each lake and site, males at 13 sites.", h=4, w=4)
medun <- t(apply(subm[, ltrussvars]/subm$TL, 2, tapply, group, median, na.rm=TRUE))
fc <- lapply(data.frame(medun), function(x) fishpts(x)[[2]])
#fc <- lapply(data.frame(medun), function(x) buildfish(x))
xyr <- apply(do.call(rbind, fc), 2, range)
fig <- function() fig.gfish()
figu("Diagram of fish based on median truss measurements (scaled by total length) for each cluster group, males at 13 sites.",
"  Fish are lined up by their noses.", h=3, w=6.5)
if(pamcl$nc == 2) {
# median measures per group
med <- t(apply(subscm, 2, tapply, group, median))
med2 <- data.frame(med, mdif = med[, 1] - med[, 2])
med3 <- med2[order(med2$mdif), ]
amdif <- abs(med2$mdif)
fig <- function() fig.grpdif(title="13 Sites, Males")
figu("Difference in truss measurements between the cluster groups, males at 13 sites.", h=4, w=4)
}
cent <- apply(subscm, 2, tapply, subm$LS, mean)
hc1 <- hclust(dist(cent)^2, method="centroid", members=table(subm$LS))
fig <- function() fig.dendro(title="13 Sites, Males")
figu("Centroid cluster analysis starting with a single cluster at each site, males at 13 sites.", h=4, w=4)
pamcl <- pamk(data=subscf, krange=ks, criterion="asw", usepam=TRUE, scaling=FALSE, diss=FALSE)
group <- pamcl$pamobject$clustering
para("The recommended number of clusters for females at 13 sites was ", pamcl$nc, " (Figure ", figcount, ").")
fig <- function() fig.nclusters(title="13 Sites, Females")
figu("Recommended number of clusters based on the optimum average silhouette width, females at 13 sites.", h=4, w=4)
both <- tab.prop(group, subf)
g <- both$g
tab <- data.frame(LakeSite=dimnames(g)[[1]], format(round(g, 4)))
tabl("Proportion of fish assigned to cluster groups in each lake and site, females at 13 sites.", row.names=FALSE)
colz <- colr(1:pamcl$nc, "brown", "orange")
fig <- function() fig.bargrp()
figu("Proportion of fish assigned to cluster groups in each lake and site, females at 13 sites.", h=4, w=4)
medun <- t(apply(subf[, ltrussvars]/subf$TL, 2, tapply, group, median, na.rm=TRUE))
fc <- lapply(data.frame(medun), function(x) fishpts(x)[[2]])
#fc <- lapply(data.frame(medun), function(x) buildfish(x))
xyr <- apply(do.call(rbind, fc), 2, range)
fig <- function() fig.gfish()
figu("Diagram of fish based on median truss measurements (scaled by total length) for each cluster group, females at 13 sites.",
"  Fish are lined up by their noses.", h=3, w=6.5)
if(pamcl$nc == 2) {
# median measures per group
med <- t(apply(subscf, 2, tapply, group, median))
med2 <- data.frame(med, mdif = med[, 1] - med[, 2])
med3 <- med2[order(med2$mdif), ]
amdif <- abs(med2$mdif)
fig <- function() fig.grpdif(title="13 Sites, Females")
figu("Difference in residual (log transformed, size corrected, and scaled) truss measurements between the cluster groups,",
" females at 13 sites.", h=4, w=4)
}
cent <- apply(subscf, 2, tapply, subf$LS, mean)
hc1 <- hclust(dist(cent)^2, method="centroid", members=table(subf$LS))
fig <- function() fig.dendro(title="13 Sites, Females")
figu("Centroid cluster analysis starting with a single cluster at each site, females at 13 sites.", h=4, w=4)
medun.ms <- t(apply(subm[, ltrussvars]/subm$TL, 2, tapply, subm$LS, median, na.rm=TRUE))
medun.fs <- t(apply(subf[, ltrussvars]/subf$TL, 2, tapply, subf$LS, median, na.rm=TRUE))
medun.mu <- t(apply(subm[, ltrussvars], 2, tapply, subm$LS, median, na.rm=TRUE))
medun.fu <- t(apply(subf[, ltrussvars], 2, tapply, subf$LS, median, na.rm=TRUE))
fc.ms <- lapply(data.frame(medun.ms), function(x) fishpts(x)[[2]])
fc.fs <- lapply(data.frame(medun.fs), function(x) fishpts(x)[[2]])
fc.mu <- lapply(data.frame(medun.mu), function(x) fishpts(x)[[2]])
fc.fu <- lapply(data.frame(medun.fu), function(x) fishpts(x)[[2]])
# fc.ms <- lapply(data.frame(medun.ms), function(x) buildfish(x))
# fc.fs <- lapply(data.frame(medun.fs), function(x) buildfish(x))
# fc.mu <- lapply(data.frame(medun.mu), function(x) buildfish(x))
# fc.fu <- lapply(data.frame(medun.fu), function(x) buildfish(x))
xyr.s <- apply(rbind(do.call(rbind, fc.ms), do.call(rbind, fc.fs)), 2, range)
xyr.u <- apply(rbind(do.call(rbind, fc.mu), do.call(rbind, fc.fu)), 2, range)
suls <- dimnames(medun.ms)[[2]]
fig <- function() {
par(mfrow=c(4, 2), mar=c(0, 0, 1, 0), oma=c(0, 0, 2, 0))
for(i in c(2, 4, 7, 8)) {
eqscplot(1, 1, type="n", xlim=xyr.s[, 1], ylim=xyr.s[, 2], axes=FALSE, xlab="", ylab="")
lines(fc.ms[[i]][fishpord, ], col="blue", type="o")
lines(fc.fs[[i]][fishpord, ], col="red", type="o")
mtext(paste("     ", suls[i]), side=3, adj=0, line=-2)
eqscplot(1, 1, type="n", xlim=xyr.u[, 1], ylim=xyr.u[, 2], axes=FALSE, xlab="", ylab="")
lines(fc.mu[[i]][fishpord, ], col="blue", type="o")
lines(fc.fu[[i]][fishpord, ], col="red", type="o")
}
mtext(c("Scaled", "Unscaled"), side=3, adj=c(0.2, 0.8), outer=TRUE)
legend("top", c("Male", "Female"), col=c("blue", "red"), lty=1, bty="n")
}
figu("Comparison of median fish shapes of males and females at four selected sites,",
" using both scaled (by total length, left diagrams) and unscaled (right diagrams) truss measurements.",
"  Fish are lined up by their noses.", newpage="port")
endrtf()
rm(med, med2, med3, amdif, cent, hc1, pamcl, g, medun, fc, xyr)
if(FALSE) {
# print the points for one fish to overlay on photo
co <- fishpts(dat[dat$ID==500, ltrussvars])[[2]]
# co <- buildfish(dat[dat$ID==500, ltrussvars])
xyr <- apply(co, 2, range)
windows()
eqscplot(1, 1, type="n", xlim=xyr[, 1], ylim=xyr[, 2], axes=FALSE, xlab="", ylab="")
points(co[fishpord, ], col="red", pch=16)
}
cleanup()
graphics.off()
search()
# C:\JVA\Consult\Yule\Lake Kivu\anova.r
library(RgoogleMaps) 
library(broom)
wb <- loadWorkbook("C:/JVA/Consult/Yule/Lake Kivu/Kivu Sa data 26 nov.xls")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, endCol=9)
dat$mm <- factor(recode(dat$Month, month.name, 1:12))
dat$reg <- factor(dat$Region, levels=c("Inshore", "North", "East", "South", "West"))
dat$GPS.Lat.end.N.S <- as.numeric(dat$GPS.Lat.end.N.S)
dat$GPS.Long..center.E.W <- as.numeric(dat$GPS.Long..center.E.W)
odd <- subdex(dat, GPS.Long..center.E.W<0 | GPS.Lat.end.N.S>0)
dat$lat <- ifelse(odd, dat$GPS.Long..center.E.W, dat$GPS.Lat.end.N.S)
dat$lon <- ifelse(odd, dat$GPS.Lat.end.N.S, dat$GPS.Long..center.E.W)
rm(odd)
dat$Depth[dat$Depth=="0-60 "] <- "0-60"
dat$Depth[dat$Depth=="15-30 "] <- "15-30"
dat$dep <- factor(dat$Depth, levels=c("0-50", "0-15", "15-30", "30-45", "45-60", "0-60"))
dat$Sa <- as.numeric(dat$Sa)
dat$seas <- factor(dat$Season)
dat$survey <- interaction(dat$Year, dat$mm, drop=TRUE, lex.order=TRUE)
plotdf(dat)
attach(dat)
mytable(dep, reg)
mytable(mm, paste(Year, Season))
mytable(interaction(reg, dep, drop=TRUE, lex.order=TRUE), interaction(Year, mm, Season, drop=TRUE, lex.order=TRUE))
# Interval seems to be a unique descriptor for the values in each "survey"
id <- interaction(reg, dep, Year, mm, Season, Interval, drop=TRUE)
sum(duplicated(id))
col <- as.numeric(as.factor(Region)) + 1
mlat <- tapply(lat, Region, mean, na.rm=TRUE)
mlon <- tapply(lon, Region, mean, na.rm=TRUE)
# windows()
# MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
# PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
# TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), add=TRUE, cex=2)
# subset the data for analysis
doc <- startrtf(file="KivuANOVA", dir="C:/JVA/Consult/Yule/Lake Kivu")
heading("Exploring Allison's Lake Kivu Data")
heading(paste("Jean V. Adams", "Sys.Date()", sep=" - "), 2)
para("I selected a subset of data, including only four depth layers (0-15, 15-30, 30-45, and 45-60),",
" four regions (North, East, West, and South), and records with non-missing Sa values.")
sub <- dat[Depth %in% c("0-15", "15-30", "30-45", "45-60") & Region %in% c("North", "East", "South", "West") & !is.na(Sa), ]
detach(dat)
attach(sub)
fig <- function() {
MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), add=TRUE, cex=2)
}
figu("Subsetted Lake Kivu data used for initial ANOVA.")
detach(sub)
subm <- aggregate(Sa ~ reg + seas + survey + dep, data=sub, median)
subm$n <- aggregate(!is.na(Sa) ~ reg + seas + survey + dep, data=sub, sum)[, 5]
para("I summarized the subsetted data by calculating the median Sa for each unique combination of",
" survey (year and month), region, season (wet and dry) and depth layer.",
"  This resulted in a data set with ", dim(subm)[1], " rows.",
"  I also kept track of the total number of raw observations that went into calculating the median Sa of each row.",
"  This number was used as a weighting variable in the analysis of variance (ANOVA), giving more weight to rows with more precise medians.")
attach(subm)
para("I fit an ANOVA with natural log transformed median Sa as the response, log(median Sa + 0.001), and depth layer, region, and season as",
" categorical variables.",
"  I naively included all two-way and three-way interactions, and then used a stepwise procedure to simplify the model",
" based on Akaike's information criterion (AIC).",
"  The best model selected included all three main effects as well as the depth layer by season interaction (Table ", tabcount, ").",
"  Depth layer had the most pronounce effect, with biomass highest from 15-30 regardless of season or region (Figure ", figcount, ").",
"  Biomass was higher in the wet season than in the dry season for all but the deepest depth layer.",
"  I did not test for it formally, but biomass appears to be greater for West and South (which were similar) than for North and East (also similar).")
fit <- aov(log(Sa + 0.001) ~ dep*reg*seas, data=subm, weight=n)
fit2 <- step(fit, trace=FALSE)
tab1 <- summary(fit2)[[1]]
tab <- cbind(tab1[, 1:4], "Pr(>F)"=tab1[, 5])
tabl("ANOVA table of so-called best model selected by AIC.")
sur <- unique(reg)
sud <- unique(dep)
nd <- as.numeric(dep)
pl <- prettylog(Sa, lead=1, extra=0)
fig <- function() {
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in c(1, 2, 4, 3)) {
sel <- reg==sur[i]
plot(nd, log(Sa + 0.001), type="n", xlab="", ylab="", axes=FALSE)
axis(2, outer=TRUE, las=1, at=log(pl + 0.001), labels=pl)
axis(1, outer=TRUE, at=sort(unique(nd)), labels=sud)
box()
mtext(sur[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sus <- sort(unique(seas[sel]))
for(j in seq_along(sus)) {
sel2 <- sel & seas==sus[j]
text(nd[sel2], log(Sa + 0.001)[sel2], substring(sus[j], 1, 1), col=blindcolz[j+1])
lines(nd[sel2], fit2$fitted[sel2], col=blindcolz[j+1], lwd=3)
for(k in 1:4) {
sel3 <- reg==sur[k] & seas==sus[j]
lines(nd[sel3], fit2$fitted[sel3], col=blindcolz[j+1], lty=3)
}
}
}
mtext("Depth layer", side=1, outer=TRUE, line=2.5)
mtext("Sa", side=2, outer=TRUE, line=2.5)
}
figu("Observed (poitns) and predicted (lines) fish biomass (log scale Sa) in Lake Kivu versus depth layer by region (the four panels) and",
" season (the two colors).  The bold lines in each panel represent the prediction for that region;",
" dashed lines show the predictions from the other regions for comparison.")
detach(subm)
endrtf()
q()
# C:\JVA\Consult\Yule\Lake Kivu\anova.r
library(RgoogleMaps) 
library(broom)
wb <- loadWorkbook("C:/JVA/Consult/Yule/Lake Kivu/Kivu Sa data 26 nov.xls")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, endCol=9)
dat$mm <- factor(recode(dat$Month, month.name, 1:12))
dat$reg <- factor(dat$Region, levels=c("Inshore", "North", "East", "South", "West"))
dat$GPS.Lat.end.N.S <- as.numeric(dat$GPS.Lat.end.N.S)
dat$GPS.Long..center.E.W <- as.numeric(dat$GPS.Long..center.E.W)
odd <- subdex(dat, GPS.Long..center.E.W<0 | GPS.Lat.end.N.S>0)
dat$lat <- ifelse(odd, dat$GPS.Long..center.E.W, dat$GPS.Lat.end.N.S)
dat$lon <- ifelse(odd, dat$GPS.Lat.end.N.S, dat$GPS.Long..center.E.W)
rm(odd)
dat$Depth[dat$Depth=="0-60 "] <- "0-60"
dat$Depth[dat$Depth=="15-30 "] <- "15-30"
dat$dep <- factor(dat$Depth, levels=c("0-50", "0-15", "15-30", "30-45", "45-60", "0-60"))
dat$Sa <- as.numeric(dat$Sa)
dat$seas <- factor(dat$Season)
dat$survey <- interaction(dat$Year, dat$mm, drop=TRUE, lex.order=TRUE)
plotdf(dat)
attach(dat)
mytable(dep, reg)
mytable(mm, paste(Year, Season))
mytable(interaction(reg, dep, drop=TRUE, lex.order=TRUE), interaction(Year, mm, Season, drop=TRUE, lex.order=TRUE))
# Interval seems to be a unique descriptor for the values in each "survey"
id <- interaction(reg, dep, Year, mm, Season, Interval, drop=TRUE)
sum(duplicated(id))
col <- as.numeric(as.factor(Region)) + 1
mlat <- tapply(lat, Region, mean, na.rm=TRUE)
mlon <- tapply(lon, Region, mean, na.rm=TRUE)
# windows()
# MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
# PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
# TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), add=TRUE, cex=2)
# subset the data for analysis
doc <- startrtf(file="KivuANOVA", dir="C:/JVA/Consult/Yule/Lake Kivu")
heading("Exploring Allison's Lake Kivu Data")
heading(paste("Jean V. Adams", "Sys.Date()", sep=" - "), 2)
para("I selected a subset of data, including only four depth layers (0-15, 15-30, 30-45, and 45-60),",
" four regions (North, East, West, and South), and records with non-missing Sa values.")
sub <- dat[Depth %in% c("0-15", "15-30", "30-45", "45-60") & Region %in% c("North", "East", "South", "West") & !is.na(Sa), ]
detach(dat)
if(FALSE) {
attach(sub)
fig <- function() {
MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), add=TRUE, cex=2)
}
figu("Subsetted Lake Kivu data used for initial ANOVA.")
detach(sub)
}
subm <- aggregate(Sa ~ reg + seas + survey + dep, data=sub, median)
subm$n <- aggregate(!is.na(Sa) ~ reg + seas + survey + dep, data=sub, sum)[, 5]
para("I summarized the subsetted data by calculating the median Sa for each unique combination of",
" survey (year and month), region, season (wet and dry) and depth layer.",
"  This resulted in a data set with ", dim(subm)[1], " rows.",
"  I also kept track of the total number of raw observations that went into calculating the median Sa of each row.",
"  This number was used as a weighting variable in the analysis of variance (ANOVA), giving more weight to rows with more precise medians.")
attach(subm)
para("I fit an ANOVA with natural log transformed median Sa as the response, log(median Sa + 0.001), and depth layer, region, and season as",
" categorical variables.",
"  I naively included all two-way and three-way interactions, and then used a stepwise procedure to simplify the model",
" based on Akaike's information criterion (AIC).",
"  The best model selected included all three main effects as well as the depth layer by season interaction (Table ", tabcount, ").",
"  Depth layer had the most pronounce effect, with biomass highest from 15-30 regardless of season or region (Figure ", figcount, ").",
"  Biomass was higher in the wet season than in the dry season for all but the deepest depth layer.",
"  I did not test for it formally, but biomass appears to be greater for West and South (which were similar) than for North and East (also similar).")
fit <- aov(log(Sa + 0.001) ~ dep*reg*seas, data=subm, weight=n)
fit2 <- step(fit, trace=FALSE)
if(FALSE) {
tab1 <- summary(fit2)[[1]]
tab <- cbind(tab1[, 1:4], "Pr(>F)"=tab1[, 5])
tabl("ANOVA table of so-called best model selected by AIC.")
}
sur <- unique(reg)
sud <- unique(dep)
nd <- as.numeric(dep)
pl <- prettylog(Sa, lead=1, extra=0)
fig <- function() {
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in c(1, 2, 4, 3)) {
sel <- reg==sur[i]
plot(nd, log(Sa + 0.001), type="n", xlab="", ylab="", axes=FALSE)
axis(2, outer=TRUE, las=1, at=log(pl + 0.001), labels=pl)
axis(1, outer=TRUE, at=sort(unique(nd)), labels=sud)
box()
mtext(sur[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sus <- sort(unique(seas[sel]))
for(j in seq_along(sus)) {
sel2 <- sel & seas==sus[j]
text(nd[sel2], log(Sa + 0.001)[sel2], substring(sus[j], 1, 1), col=blindcolz[j+1])
lines(nd[sel2], fit2$fitted[sel2], col=blindcolz[j+1], lwd=3)
for(k in 1:4) {
sel3 <- reg==sur[k] & seas==sus[j]
lines(nd[sel3], fit2$fitted[sel3], col=blindcolz[j+1], lty=3)
}
}
}
mtext("Depth layer", side=1, outer=TRUE, line=2.5)
mtext("Sa", side=2, outer=TRUE, line=2.5)
}
if(FALSE) {
figu("Observed (poitns) and predicted (lines) fish biomass (log scale Sa) in Lake Kivu versus depth layer by region (the four panels) and",
" season (the two colors).  The bold lines in each panel represent the prediction for that region;",
" dashed lines show the predictions from the other regions for comparison.")
}
detach(subm)
endrtf()
# C:\JVA\Consult\Yule\Lake Kivu\anova.r
library(RgoogleMaps) 
library(broom)
wb <- loadWorkbook("C:/JVA/Consult/Yule/Lake Kivu/Kivu Sa data 26 nov.xls")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, endCol=9)
dat$mm <- factor(recode(dat$Month, month.name, 1:12))
dat$reg <- factor(dat$Region, levels=c("Inshore", "North", "East", "South", "West"))
dat$GPS.Lat.end.N.S <- as.numeric(dat$GPS.Lat.end.N.S)
dat$GPS.Long..center.E.W <- as.numeric(dat$GPS.Long..center.E.W)
odd <- subdex(dat, GPS.Long..center.E.W<0 | GPS.Lat.end.N.S>0)
dat$lat <- ifelse(odd, dat$GPS.Long..center.E.W, dat$GPS.Lat.end.N.S)
dat$lon <- ifelse(odd, dat$GPS.Lat.end.N.S, dat$GPS.Long..center.E.W)
rm(odd)
dat$Depth[dat$Depth=="0-60 "] <- "0-60"
dat$Depth[dat$Depth=="15-30 "] <- "15-30"
dat$dep <- factor(dat$Depth, levels=c("0-50", "0-15", "15-30", "30-45", "45-60", "0-60"))
dat$Sa <- as.numeric(dat$Sa)
dat$seas <- factor(dat$Season)
dat$survey <- interaction(dat$Year, dat$mm, drop=TRUE, lex.order=TRUE)
plotdf(dat)
attach(dat)
mytable(dep, reg)
mytable(mm, paste(Year, Season))
mytable(interaction(reg, dep, drop=TRUE, lex.order=TRUE), interaction(Year, mm, Season, drop=TRUE, lex.order=TRUE))
# Interval seems to be a unique descriptor for the values in each "survey"
id <- interaction(reg, dep, Year, mm, Season, Interval, drop=TRUE)
sum(duplicated(id))
col <- as.numeric(as.factor(Region)) + 1
mlat <- tapply(lat, Region, mean, na.rm=TRUE)
mlon <- tapply(lon, Region, mean, na.rm=TRUE)
# windows()
# MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
# PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
# TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), add=TRUE, cex=2)
# subset the data for analysis
doc <- startrtf(file="KivuANOVA", dir="C:/JVA/Consult/Yule/Lake Kivu")
heading("Exploring Allison's Lake Kivu Data")
#heading(paste("Jean V. Adams", "Sys.Date()", sep=" - "), 2)
para("I selected a subset of data, including only four depth layers (0-15, 15-30, 30-45, and 45-60),",
" four regions (North, East, West, and South), and records with non-missing Sa values.")
endrtf()
paste("Jean V. Adams", "Sys.Date()", sep=" - ")
paste("Jean V. Adams", Sys.Date(), sep=" - ")
doc <- startrtf(file="KivuANOVA", dir="C:/JVA/Consult/Yule/Lake Kivu")
heading("Exploring Allison's Lake Kivu Data")
heading(paste("Jean V. Adams", Sys.Date(), sep=" - "), 2)
para("I selected a subset of data, including only four depth layers (0-15, 15-30, 30-45, and 45-60),",
" four regions (North, East, West, and South), and records with non-missing Sa values.")
endrtf()
cleanup()
search()(
search()
detach()
graphics.off()
# C:\JVA\Consult\Yule\Lake Kivu\anova.r
library(RgoogleMaps) 
library(broom)
wb <- loadWorkbook("C:/JVA/Consult/Yule/Lake Kivu/Kivu Sa data 26 nov.xls")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, endCol=9)
dat$mm <- factor(recode(dat$Month, month.name, 1:12))
dat$reg <- factor(dat$Region, levels=c("Inshore", "North", "East", "South", "West"))
dat$GPS.Lat.end.N.S <- as.numeric(dat$GPS.Lat.end.N.S)
dat$GPS.Long..center.E.W <- as.numeric(dat$GPS.Long..center.E.W)
odd <- subdex(dat, GPS.Long..center.E.W<0 | GPS.Lat.end.N.S>0)
dat$lat <- ifelse(odd, dat$GPS.Long..center.E.W, dat$GPS.Lat.end.N.S)
dat$lon <- ifelse(odd, dat$GPS.Lat.end.N.S, dat$GPS.Long..center.E.W)
rm(odd)
dat$Depth[dat$Depth=="0-60 "] <- "0-60"
dat$Depth[dat$Depth=="15-30 "] <- "15-30"
dat$dep <- factor(dat$Depth, levels=c("0-50", "0-15", "15-30", "30-45", "45-60", "0-60"))
dat$Sa <- as.numeric(dat$Sa)
dat$seas <- factor(dat$Season)
dat$survey <- interaction(dat$Year, dat$mm, drop=TRUE, lex.order=TRUE)
plotdf(dat)
attach(dat)
mytable(dep, reg)
mytable(mm, paste(Year, Season))
mytable(interaction(reg, dep, drop=TRUE, lex.order=TRUE), interaction(Year, mm, Season, drop=TRUE, lex.order=TRUE))
# Interval seems to be a unique descriptor for the values in each "survey"
id <- interaction(reg, dep, Year, mm, Season, Interval, drop=TRUE)
sum(duplicated(id))
col <- as.numeric(as.factor(Region)) + 1
mlat <- tapply(lat, Region, mean, na.rm=TRUE)
mlon <- tapply(lon, Region, mean, na.rm=TRUE)
# windows()
# MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
# PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
# TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), add=TRUE, cex=2)
# subset the data for analysis
doc <- startrtf(file="KivuANOVA", dir="C:/JVA/Consult/Yule/Lake Kivu")
heading("Exploring Allison's Lake Kivu Data")
heading(paste("Jean V. Adams", Sys.Date(), sep=" - "), 2)
para("I selected a subset of data, including only four depth layers (0-15, 15-30, 30-45, and 45-60),",
" four regions (North, East, West, and South), and records with non-missing Sa values.")
sub <- dat[Depth %in% c("0-15", "15-30", "30-45", "45-60") & Region %in% c("North", "East", "South", "West") & !is.na(Sa), ]
detach(dat)
attach(sub)
fig <- function() {
MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), add=TRUE, cex=2)
}
figu("Subsetted Lake Kivu data used for initial ANOVA.")
detach(sub)
subm <- aggregate(Sa ~ reg + seas + survey + dep, data=sub, median)
subm$n <- aggregate(!is.na(Sa) ~ reg + seas + survey + dep, data=sub, sum)[, 5]
para("I summarized the subsetted data by calculating the median Sa for each unique combination of",
" survey (year and month), region, season (wet and dry) and depth layer.",
"  This resulted in a data set with ", dim(subm)[1], " rows.",
"  I also kept track of the total number of raw observations that went into calculating the median Sa of each row.",
"  This number was used as a weighting variable in the analysis of variance (ANOVA), giving more weight to rows with more precise medians.")
attach(subm)
para("I fit an ANOVA with natural log transformed median Sa as the response, log(median Sa + 0.001), and depth layer, region, and season as",
" categorical variables.",
"  I naively included all two-way and three-way interactions, and then used a stepwise procedure to simplify the model",
" based on Akaike's information criterion (AIC).",
"  The best model selected included all three main effects as well as the depth layer by season interaction (Table ", tabcount, ").",
"  Depth layer had the most pronounce effect, with biomass highest from 15-30 regardless of season or region (Figure ", figcount, ").",
"  Biomass was higher in the wet season than in the dry season for all but the deepest depth layer.",
"  I did not test for it formally, but biomass appears to be greater for West and South (which were similar) than for North and East (also similar).")
fit <- aov(log(Sa + 0.001) ~ dep*reg*seas, data=subm, weight=n)
fit2 <- step(fit, trace=FALSE)
tab1 <- summary(fit2)[[1]]
tab <- cbind(tab1[, 1:4], "Pr(>F)"=tab1[, 5])
tabl("ANOVA table of so-called best model selected by AIC.")
sur <- unique(reg)
sud <- unique(dep)
nd <- as.numeric(dep)
pl <- prettylog(Sa, lead=1, extra=0)
fig <- function() {
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in c(1, 2, 4, 3)) {
sel <- reg==sur[i]
plot(nd, log(Sa + 0.001), type="n", xlab="", ylab="", axes=FALSE)
axis(2, outer=TRUE, las=1, at=log(pl + 0.001), labels=pl)
axis(1, outer=TRUE, at=sort(unique(nd)), labels=sud)
box()
mtext(sur[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sus <- sort(unique(seas[sel]))
for(j in seq_along(sus)) {
sel2 <- sel & seas==sus[j]
text(nd[sel2], log(Sa + 0.001)[sel2], substring(sus[j], 1, 1), col=blindcolz[j+1])
lines(nd[sel2], fit2$fitted[sel2], col=blindcolz[j+1], lwd=3)
for(k in 1:4) {
sel3 <- reg==sur[k] & seas==sus[j]
lines(nd[sel3], fit2$fitted[sel3], col=blindcolz[j+1], lty=3)
}
}
}
mtext("Depth layer", side=1, outer=TRUE, line=2.5)
mtext("Sa", side=2, outer=TRUE, line=2.5)
}
figu("Observed (poitns) and predicted (lines) fish biomass (log scale Sa) in Lake Kivu versus depth layer by region (the four panels) and",
" season (the two colors).  The bold lines in each panel represent the prediction for that region;",
" dashed lines show the predictions from the other regions for comparison.")
detach(subm)
endrtf()
?tabl
tabl
search()
ls()
rm(sur, sud, nd, pl, i, sel, sus, j, sel2, k, sel3)
ls()
# C:\JVA\Consult\Yule\Lake Kivu\anova.r
library(RgoogleMaps) 
library(broom)
wb <- loadWorkbook("C:/JVA/Consult/Yule/Lake Kivu/Kivu Sa data 26 nov.xls")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, endCol=9)
rm(wb)
dat$mm <- factor(recode(dat$Month, month.name, 1:12))
dat$reg <- factor(dat$Region, levels=c("Inshore", "North", "East", "South", "West"))
dat$GPS.Lat.end.N.S <- as.numeric(dat$GPS.Lat.end.N.S)
dat$GPS.Long..center.E.W <- as.numeric(dat$GPS.Long..center.E.W)
odd <- subdex(dat, GPS.Long..center.E.W<0 | GPS.Lat.end.N.S>0)
dat$lat <- ifelse(odd, dat$GPS.Long..center.E.W, dat$GPS.Lat.end.N.S)
dat$lon <- ifelse(odd, dat$GPS.Lat.end.N.S, dat$GPS.Long..center.E.W)
rm(odd)
dat$Depth[dat$Depth=="0-60 "] <- "0-60"
dat$Depth[dat$Depth=="15-30 "] <- "15-30"
dat$dep <- factor(dat$Depth, levels=c("0-50", "0-15", "15-30", "30-45", "45-60", "0-60"))
dat$Sa <- as.numeric(dat$Sa)
dat$seas <- factor(dat$Season)
dat$survey <- interaction(dat$Year, dat$mm, drop=TRUE, lex.order=TRUE)
#plotdf(dat)
attach(dat)
mytable(dep, reg)
mytable(mm, paste(Year, Season))
mytable(interaction(reg, dep, drop=TRUE, lex.order=TRUE), interaction(Year, mm, Season, drop=TRUE, lex.order=TRUE))
# Interval seems to be a unique descriptor for the values in each "survey"
id <- interaction(reg, dep, Year, mm, Season, Interval, drop=TRUE)
sum(duplicated(id))
rm(id)
col <- as.numeric(as.factor(Region)) + 1
mlat <- tapply(lat, Region, mean, na.rm=TRUE)
mlon <- tapply(lon, Region, mean, na.rm=TRUE)
# windows()
# MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
# PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
# TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), add=TRUE, cex=2)
# subset the data for analysis
doc <- startrtf(file="KivuANOVA", dir="C:/JVA/Consult/Yule/Lake Kivu")
heading("Exploring Allison's Lake Kivu Data")
heading(paste("Jean V. Adams", Sys.Date(), sep=" - "), 2)
para("I selected a subset of data, including only four depth layers (0-15, 15-30, 30-45, and 45-60),",
" four regions (North, East, West, and South), and records with non-missing Sa values.")
"  A map of the subsetted data showing the regions is shown in Figure ", jvamiscenv$figcount, ".",
sub <- dat[Depth %in% c("0-15", "15-30", "30-45", "45-60") & Region %in% c("North", "East", "South", "West") & !is.na(Sa), ]
detach(dat)
attach(sub)
fig <- function() {
MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), add=TRUE, cex=2)
}
figu("Subsetted Lake Kivu data used for initial ANOVA.")
detach(sub)
rm(col, mlat, mlon)
subm <- aggregate(Sa ~ reg + seas + survey + dep, data=sub, median)
subm$n <- aggregate(!is.na(Sa) ~ reg + seas + survey + dep, data=sub, sum)[, 5]
para("I summarized the subsetted data by calculating the median Sa for each unique combination of",
" survey (year and month), region, season (wet and dry) and depth layer.",
"  This resulted in a data set with ", dim(subm)[1], " rows.",
"  I also kept track of the total number of raw observations that went into calculating the median Sa of each row.",
"  This number was used as a weighting variable in the analysis of variance (ANOVA), giving more weight to rows with more precise medians.")
attach(subm)
para("I fit an ANOVA with natural log transformed median Sa as the response, log(median Sa + 0.001), and depth layer, region, and season as",
" categorical variables.",
"  I naively included all two-way and three-way interactions, and then used a stepwise procedure to simplify the model",
" based on Akaike's information criterion (AIC).",
"  The best model selected included all three main effects as well as the depth layer by season interaction (Table ", jvamiscenv$tabcount, ").",
"  Depth layer had the most pronounce effect, with biomass highest from 15-30 regardless of season or region (Figure ", jvamiscenv$figcount, ").",
"  Biomass was higher in the wet season than in the dry season for all but the deepest depth layer.",
"  I did not test for it formally, but biomass appears to be greater for West and South (which were similar) than for North and East (also similar).")
fit <- aov(log(Sa + 0.001) ~ dep*reg*seas, data=subm, weight=n)
fit2 <- step(fit, trace=FALSE)
tab1 <- summary(fit2)[[1]]
tab <- cbind(tab1[, 1:4], "Pr(>F)"=tab1[, 5])
tabl("ANOVA table of so-called best model selected by AIC.")
rm(tab1)
sur <- unique(reg)
sud <- unique(dep)
nd <- as.numeric(dep)
pl <- prettylog(Sa, lead=1, extra=0)
fig <- function() {
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in c(1, 2, 4, 3)) {
sel <- reg==sur[i]
plot(nd, log(Sa + 0.001), type="n", xlab="", ylab="", axes=FALSE)
axis(2, outer=TRUE, las=1, at=log(pl + 0.001), labels=pl)
axis(1, outer=TRUE, at=sort(unique(nd)), labels=sud)
box()
mtext(sur[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sus <- sort(unique(seas[sel]))
for(j in seq_along(sus)) {
sel2 <- sel & seas==sus[j]
text(nd[sel2], log(Sa + 0.001)[sel2], substring(sus[j], 1, 1), col=blindcolz[j+1])
lines(nd[sel2], fit2$fitted[sel2], col=blindcolz[j+1], lwd=3)
for(k in 1:4) {
sel3 <- reg==sur[k] & seas==sus[j]
lines(nd[sel3], fit2$fitted[sel3], col=blindcolz[j+1], lty=3)
}
}
}
mtext("Depth layer", side=1, outer=TRUE, line=2.5)
mtext("Sa", side=2, outer=TRUE, line=2.5)
}
figu("Observed (poitns) and predicted (lines) fish biomass (log scale Sa) in Lake Kivu versus depth layer by region (the four panels) and",
" season (the two colors).  The bold lines in each panel represent the prediction for that region;",
" dashed lines show the predictions from the other regions for comparison.")
rm(sur, sud, nd, pl, i, sel, sus, j, sel2, k, sel3)
detach(subm)
endrtf()
graphics.off()
cleanup()
search()
# C:\JVA\Consult\Yule\Lake Kivu\anova.r
library(RgoogleMaps) 
library(broom)
wb <- loadWorkbook("C:/JVA/Consult/Yule/Lake Kivu/Kivu Sa data 26 nov.xls")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, endCol=9)
rm(wb)
dat$mm <- factor(recode(dat$Month, month.name, 1:12))
dat$reg <- factor(dat$Region, levels=c("Inshore", "North", "East", "South", "West"))
dat$GPS.Lat.end.N.S <- as.numeric(dat$GPS.Lat.end.N.S)
dat$GPS.Long..center.E.W <- as.numeric(dat$GPS.Long..center.E.W)
odd <- subdex(dat, GPS.Long..center.E.W<0 | GPS.Lat.end.N.S>0)
dat$lat <- ifelse(odd, dat$GPS.Long..center.E.W, dat$GPS.Lat.end.N.S)
dat$lon <- ifelse(odd, dat$GPS.Lat.end.N.S, dat$GPS.Long..center.E.W)
rm(odd)
dat$Depth[dat$Depth=="0-60 "] <- "0-60"
dat$Depth[dat$Depth=="15-30 "] <- "15-30"
dat$dep <- factor(dat$Depth, levels=c("0-50", "0-15", "15-30", "30-45", "45-60", "0-60"))
dat$Sa <- as.numeric(dat$Sa)
dat$seas <- factor(dat$Season)
dat$survey <- interaction(dat$Year, dat$mm, drop=TRUE, lex.order=TRUE)
#plotdf(dat)
attach(dat)
mytable(dep, reg)
mytable(mm, paste(Year, Season))
mytable(interaction(reg, dep, drop=TRUE, lex.order=TRUE), interaction(Year, mm, Season, drop=TRUE, lex.order=TRUE))
# Interval seems to be a unique descriptor for the values in each "survey"
id <- interaction(reg, dep, Year, mm, Season, Interval, drop=TRUE)
sum(duplicated(id))
rm(id)
col <- as.numeric(as.factor(Region)) + 1
mlat <- tapply(lat, Region, mean, na.rm=TRUE)
mlon <- tapply(lon, Region, mean, na.rm=TRUE)
# windows()
# MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
# PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
# TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), add=TRUE, cex=2)
# subset the data for analysis
doc <- startrtf(file="KivuANOVA", dir="C:/JVA/Consult/Yule/Lake Kivu")
heading("Exploring Allison's Lake Kivu Data")
heading(paste("Jean V. Adams", Sys.Date(), sep=" - "), 2)
para("I selected a subset of data, including only four depth layers (0-15, 15-30, 30-45, and 45-60),",
" four regions (North, East, West, and South), and records with non-missing Sa values.",
"  A map of the subsetted data showing the regions is shown in Figure ", jvamiscenv$figcount, ".")
sub <- dat[Depth %in% c("0-15", "15-30", "30-45", "45-60") & Region %in% c("North", "East", "South", "West") & !is.na(Sa), ]
detach(dat)
attach(sub)
fig <- function() {
MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), add=TRUE, cex=2)
}
figu("Subsetted Lake Kivu data used for initial ANOVA.")
detach(sub)
rm(col, mlat, mlon)
subm <- aggregate(Sa ~ reg + seas + survey + dep, data=sub, median)
subm$n <- aggregate(!is.na(Sa) ~ reg + seas + survey + dep, data=sub, sum)[, 5]
para("I summarized the subsetted data by calculating the median Sa for each unique combination of",
" survey (year and month), region, season (wet and dry) and depth layer.",
"  This resulted in a data set with ", dim(subm)[1], " rows.",
"  I also kept track of the total number of raw observations that went into calculating the median Sa of each row.",
"  This number was used as a weighting variable in the analysis of variance (ANOVA), giving more weight to rows with more precise medians.")
attach(subm)
para("I fit an ANOVA with natural log transformed median Sa as the response, log(median Sa + 0.001), and depth layer, region, and season as",
" categorical variables.",
"  I naively included all two-way and three-way interactions, and then used a stepwise procedure to simplify the model",
" based on Akaike's information criterion (AIC).",
"  The best model selected included all three main effects as well as the depth layer by season interaction (Table ", jvamiscenv$tabcount, ").",
"  Depth layer had the most pronounce effect, with biomass highest from 15-30 regardless of season or region (Figure ", jvamiscenv$figcount, ").",
"  Biomass was higher in the wet season than in the dry season for all but the deepest depth layer.",
"  I did not test for it formally, but biomass appears to be greater for West and South (which were similar) than for North and East (also similar).")
fit <- aov(log(Sa + 0.001) ~ dep*reg*seas, data=subm, weight=n)
fit2 <- step(fit, trace=FALSE)
tab1 <- summary(fit2)[[1]]
tab <- cbind(tab1[, 1:4], "Pr(>F)"=tab1[, 5])
tabl("ANOVA table of so-called best model selected by AIC.")
rm(tab1)
sur <- unique(reg)
sud <- unique(dep)
nd <- as.numeric(dep)
pl <- prettylog(Sa, lead=1, extra=0)
fig <- function() {
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in c(1, 2, 4, 3)) {
sel <- reg==sur[i]
plot(nd, log(Sa + 0.001), type="n", xlab="", ylab="", axes=FALSE)
axis(2, outer=TRUE, las=1, at=log(pl + 0.001), labels=pl)
axis(1, outer=TRUE, at=sort(unique(nd)), labels=sud)
box()
mtext(sur[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sus <- sort(unique(seas[sel]))
for(j in seq_along(sus)) {
sel2 <- sel & seas==sus[j]
text(nd[sel2], log(Sa + 0.001)[sel2], substring(sus[j], 1, 1), col=blindcolz[j+1])
lines(nd[sel2], fit2$fitted[sel2], col=blindcolz[j+1], lwd=3)
for(k in 1:4) {
sel3 <- reg==sur[k] & seas==sus[j]
lines(nd[sel3], fit2$fitted[sel3], col=blindcolz[j+1], lty=3)
}
}
}
mtext("Depth layer", side=1, outer=TRUE, line=2.5)
mtext("Sa", side=2, outer=TRUE, line=2.5)
}
figu("Observed (poitns) and predicted (lines) fish biomass (log scale Sa) in Lake Kivu versus depth layer by region (the four panels) and",
" season (the two colors).  The bold lines in each panel represent the prediction for that region;",
" dashed lines show the predictions from the other regions for comparison.")
rm(sur, sud, nd, pl, i, sel, sus, j, sel2, k, sel3)
detach(subm)
endrtf()
ls()
# C:\JVA\Consult\Yule\Lake Kivu\anova.r
library(RgoogleMaps) 
library(broom)
wb <- loadWorkbook("C:/JVA/Consult/Yule/Lake Kivu/Kivu Sa data 26 nov.xls")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, endCol=9)
rm(wb)
dat$mm <- factor(recode(dat$Month, month.name, 1:12))
dat$reg <- factor(dat$Region, levels=c("Inshore", "North", "East", "South", "West"))
dat$GPS.Lat.end.N.S <- as.numeric(dat$GPS.Lat.end.N.S)
dat$GPS.Long..center.E.W <- as.numeric(dat$GPS.Long..center.E.W)
odd <- subdex(dat, GPS.Long..center.E.W<0 | GPS.Lat.end.N.S>0)
dat$lat <- ifelse(odd, dat$GPS.Long..center.E.W, dat$GPS.Lat.end.N.S)
dat$lon <- ifelse(odd, dat$GPS.Lat.end.N.S, dat$GPS.Long..center.E.W)
rm(odd)
dat$Depth[dat$Depth=="0-60 "] <- "0-60"
dat$Depth[dat$Depth=="15-30 "] <- "15-30"
dat$dep <- factor(dat$Depth, levels=c("0-50", "0-15", "15-30", "30-45", "45-60", "0-60"))
dat$Sa <- as.numeric(dat$Sa)
dat$seas <- factor(dat$Season)
dat$survey <- interaction(dat$Year, dat$mm, drop=TRUE, lex.order=TRUE)
#plotdf(dat)
attach(dat)
mytable(dep, reg)
mytable(mm, paste(Year, Season))
mytable(interaction(reg, dep, drop=TRUE, lex.order=TRUE), interaction(Year, mm, Season, drop=TRUE, lex.order=TRUE))
# Interval seems to be a unique descriptor for the values in each "survey"
id <- interaction(reg, dep, Year, mm, Season, Interval, drop=TRUE)
sum(duplicated(id))
rm(id)
# col <- as.numeric(reg) + 1
# mlat <- tapply(lat, Region, mean, na.rm=TRUE)
# mlon <- tapply(lon, Region, mean, na.rm=TRUE)
# windows()
# MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
# PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
# TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), add=TRUE, cex=2)
# subset the data for analysis
doc <- startrtf(file="KivuANOVA", dir="C:/JVA/Consult/Yule/Lake Kivu")
heading("Exploring Allison's Lake Kivu Data")
heading(paste("Jean V. Adams", Sys.Date(), sep=" - "), 2)
para("I selected a subset of data, including only four depth layers (0-15, 15-30, 30-45, and 45-60),",
" four regions (North, East, West, and South), and records with non-missing Sa values.",
"  A map of the subsetted data showing the regions is shown in Figure ", jvamiscenv$figcount, ".")
sub <- dat[Depth %in% c("0-15", "15-30", "30-45", "45-60") & Region %in% c("North", "East", "South", "West") & !is.na(Sa), ]
detach(dat)
attach(sub)
col <- as.numeric(reg) + 1
mlat <- tapply(lat, Region, mean, na.rm=TRUE)
mlon <- tapply(lon, Region, mean, na.rm=TRUE)
fig <- function() {
MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), add=TRUE, cex=2)
}
figu("Subsetted Lake Kivu data used for initial ANOVA.", h=7, w=6.5)
detach(sub)
rm(col, mlat, mlon)
subm <- aggregate(Sa ~ reg + seas + survey + dep, data=sub, median)
subm$n <- aggregate(!is.na(Sa) ~ reg + seas + survey + dep, data=sub, sum)[, 5]
para("I summarized the subsetted data by calculating the median Sa for each unique combination of",
" survey (year and month), region, season (wet and dry) and depth layer.",
"  This resulted in a data set with ", dim(subm)[1], " rows.",
"  I also kept track of the total number of raw observations that went into calculating the median Sa of each row.",
"  This number was used as a weighting variable in the analysis of variance (ANOVA), giving more weight to rows with more precise medians.")
attach(subm)
para("I fit an ANOVA with natural log transformed median Sa as the response, log(median Sa + 0.001), and depth layer, region, and season as",
" categorical variables.",
"  I naively included all two-way and three-way interactions, and then used a stepwise procedure to simplify the model",
" based on Akaike's information criterion (AIC).",
"  The best model selected included all three main effects as well as the depth layer by season interaction (Table ", jvamiscenv$tabcount, ").",
"  Depth layer had the most pronounce effect, with biomass highest from 15-30 regardless of season or region (Figure ", jvamiscenv$figcount, ").",
"  Biomass was higher in the wet season than in the dry season for all but the deepest depth layer.",
"  I did not test for it formally, but biomass appears to be greater for West and South (which were similar) than for North and East (also similar).")
fit <- aov(log(Sa + 0.001) ~ dep*reg*seas, data=subm, weight=n)
fit2 <- step(fit, trace=FALSE)
tab1 <- summary(fit2)[[1]]
tab <- cbind(tab1[, 1:4], "Pr(>F)"=tab1[, 5])
tabl("ANOVA table of so-called best model selected by AIC.")
rm(tab1)
sur <- unique(reg)
sud <- unique(dep)
nd <- as.numeric(dep)
pl <- prettylog(Sa, lead=1, extra=0)
fig <- function() {
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in c(1, 2, 4, 3)) {
sel <- reg==sur[i]
plot(nd, log(Sa + 0.001), type="n", xlab="", ylab="", axes=FALSE)
axis(2, outer=TRUE, las=1, at=log(pl + 0.001), labels=pl)
axis(1, outer=TRUE, at=sort(unique(nd)), labels=sud)
box()
mtext(sur[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sus <- sort(unique(seas[sel]))
for(j in seq_along(sus)) {
sel2 <- sel & seas==sus[j]
text(nd[sel2], log(Sa + 0.001)[sel2], substring(sus[j], 1, 1), col=blindcolz[j+1])
lines(nd[sel2], fit2$fitted[sel2], col=blindcolz[j+1], lwd=3)
for(k in 1:4) {
sel3 <- reg==sur[k] & seas==sus[j]
lines(nd[sel3], fit2$fitted[sel3], col=blindcolz[j+1], lty=3)
}
}
}
mtext("Depth layer", side=1, outer=TRUE, line=2.5)
mtext("Sa", side=2, outer=TRUE, line=2.5)
}
figu("Observed (poitns) and predicted (lines) fish biomass (log scale Sa) in Lake Kivu versus depth layer by region (the four panels) and",
" season (the two colors).  The bold lines in each panel represent the prediction for that region;",
" dashed lines show the predictions from the other regions for comparison.", h=4.5, w=5)
rm(sur, sud, nd, pl)
detach(subm)
endrtf()
tab
search()
ls(5)
prettytable
prettytable(tab)
a <- prettytable(tab)
class(a)
a[, 5]
class(a[, 5])
round(a[, 5], 4)
fit <- aov(log(Sa + 0.001) ~ dep*reg*seas, data=subm, weight=n)
fit2 <- step(fit, trace=FALSE)
tab1 <- summary(fit2)[[1]]
tab <- prettytable(cbind(tab1[, 1:4], "Pr(>F)"=tab1[, 5]))
tab[, 5] <- round(tab[, 5], 4)
tab
sum(tab[, 1])
dim(tab)
rbind(tab, Total=c(sum(tab[, 1], sum(tab[, 2], NA, NA, NA))
)
c(sum(tab[, 1], sum(tab[, 2], NA, NA, NA)
rbind(tab, Total=c(sum(tab[, 1]), sum(tab[, 2]), NA, NA, NA))
# C:\JVA\Consult\Yule\Lake Kivu\anova.r
library(RgoogleMaps) 
library(broom)
wb <- loadWorkbook("C:/JVA/Consult/Yule/Lake Kivu/Kivu Sa data 26 nov.xls")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, endCol=9)
rm(wb)
dat$mm <- factor(recode(dat$Month, month.name, 1:12))
dat$reg <- factor(dat$Region, levels=c("Inshore", "North", "East", "South", "West"))
dat$GPS.Lat.end.N.S <- as.numeric(dat$GPS.Lat.end.N.S)
dat$GPS.Long..center.E.W <- as.numeric(dat$GPS.Long..center.E.W)
odd <- subdex(dat, GPS.Long..center.E.W<0 | GPS.Lat.end.N.S>0)
dat$lat <- ifelse(odd, dat$GPS.Long..center.E.W, dat$GPS.Lat.end.N.S)
dat$lon <- ifelse(odd, dat$GPS.Lat.end.N.S, dat$GPS.Long..center.E.W)
rm(odd)
dat$Depth[dat$Depth=="0-60 "] <- "0-60"
dat$Depth[dat$Depth=="15-30 "] <- "15-30"
dat$dep <- factor(dat$Depth, levels=c("0-50", "0-15", "15-30", "30-45", "45-60", "0-60"))
dat$Sa <- as.numeric(dat$Sa)
dat$seas <- factor(dat$Season)
dat$survey <- interaction(dat$Year, dat$mm, drop=TRUE, lex.order=TRUE)
#plotdf(dat)
attach(dat)
mytable(dep, reg)
mytable(mm, paste(Year, Season))
mytable(interaction(reg, dep, drop=TRUE, lex.order=TRUE), interaction(Year, mm, Season, drop=TRUE, lex.order=TRUE))
# Interval seems to be a unique descriptor for the values in each "survey"
id <- interaction(reg, dep, Year, mm, Season, Interval, drop=TRUE)
sum(duplicated(id))
rm(id)
# col <- as.numeric(reg) + 1
# mlat <- tapply(lat, Region, mean, na.rm=TRUE)
# mlon <- tapply(lon, Region, mean, na.rm=TRUE)
# windows()
# MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
# PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
# TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), add=TRUE, cex=2)
# subset the data for analysis
doc <- startrtf(file="KivuANOVA", dir="C:/JVA/Consult/Yule/Lake Kivu")
heading("Exploring Allison's Lake Kivu Data")
heading(paste("Jean V. Adams", Sys.Date(), sep=" - "), 2)
para("I selected a subset of data, including only four depth layers (0-15, 15-30, 30-45, and 45-60),",
" four regions (North, East, West, and South), and records with non-missing Sa values.",
"  A map of the subsetted data showing the regions is shown in Figure ", jvamiscenv$figcount, ".")
sub <- dat[Depth %in% c("0-15", "15-30", "30-45", "45-60") & Region %in% c("North", "East", "South", "West") & !is.na(Sa), ]
detach(dat)
attach(sub)
col <- as.numeric(reg) + 1
mlat <- tapply(lat, Region, mean, na.rm=TRUE)
mlon <- tapply(lon, Region, mean, na.rm=TRUE)
fig <- function() {
MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), add=TRUE, cex=2)
}
figu("Subsetted Lake Kivu data used for initial ANOVA.", h=7, w=6.5)
detach(sub)
rm(col, mlat, mlon)
subm <- aggregate(Sa ~ reg + seas + survey + dep, data=sub, median)
subm$n <- aggregate(!is.na(Sa) ~ reg + seas + survey + dep, data=sub, sum)[, 5]
para("I summarized the subsetted data by calculating the median Sa for each unique combination of",
" survey (year and month), region, season (wet and dry) and depth layer.",
"  This resulted in a data set with ", dim(subm)[1], " rows.",
"  I also kept track of the total number of raw observations that went into calculating the median Sa of each row.",
"  This number was used as a weighting variable in the analysis of variance (ANOVA), giving more weight to rows with more precise medians.")
attach(subm)
para("I fit an ANOVA with natural log transformed median Sa as the response, log(median Sa + 0.001), and depth layer, region, and season as",
" categorical variables.",
"  I naively included all two-way and three-way interactions, and then used a stepwise procedure to simplify the model",
" based on Akaike's information criterion (AIC).",
"  The best model selected included all three main effects as well as the depth layer by season interaction (Table ", jvamiscenv$tabcount, ").",
"  Depth layer had the most pronounce effect, with biomass highest from 15-30 regardless of season or region (Figure ", jvamiscenv$figcount, ").",
"  Biomass was higher in the wet season than in the dry season for all but the deepest depth layer.",
"  I did not test for it formally, but biomass appears to be greater for West and South (which were similar) than for North and East (also similar).")
fit <- aov(log(Sa + 0.001) ~ dep*reg*seas, data=subm, weight=n)
fit2 <- step(fit, trace=FALSE)
tab1 <- summary(fit2)[[1]]
tab <- prettytable(cbind(tab1[, 1:4], "Pr(>F)"=tab1[, 5]))
tab[, 5] <- round(tab[, 5], 4)
tab <- rbind(tab, Total=c(sum(tab[, 1]), sum(tab[, 2]), NA, NA, NA))
tabl("ANOVA table of the best model selected by AIC.")
rm(tab1)
sur <- unique(reg)
sud <- unique(dep)
nd <- as.numeric(dep)
pl <- prettylog(Sa, lead=1, extra=0)
fig <- function() {
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in c(1, 2, 4, 3)) {
sel <- reg==sur[i]
plot(nd, log(Sa + 0.001), type="n", xlab="", ylab="", axes=FALSE)
axis(2, outer=TRUE, las=1, at=log(pl + 0.001), labels=pl)
axis(1, outer=TRUE, at=sort(unique(nd)), labels=sud)
box()
mtext(sur[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sus <- sort(unique(seas[sel]))
for(j in seq_along(sus)) {
sel2 <- sel & seas==sus[j]
text(nd[sel2], log(Sa + 0.001)[sel2], substring(sus[j], 1, 1), col=blindcolz[j+1])
lines(nd[sel2], fit2$fitted[sel2], col=blindcolz[j+1], lwd=3)
for(k in 1:4) {
sel3 <- reg==sur[k] & seas==sus[j]
lines(nd[sel3], fit2$fitted[sel3], col=blindcolz[j+1], lty=3)
}
}
}
mtext("Depth layer", side=1, outer=TRUE, line=2.5)
mtext("Sa", side=2, outer=TRUE, line=2.5)
}
figu("Observed (points) and predicted (lines) fish biomass (log scale Sa) in Lake Kivu versus depth layer by region (the four panels) and",
" season (the two colors).  The bold lines in each panel represent the prediction for that region;",
" dashed lines show the predictions from the other regions for comparison.", h=6.5, w=6.5)
rm(sur, sud, nd, pl)
detach(subm)
endrtf()
attach(sub)
tab <- mytable(interaction(reg, dep, drop=TRUE, lex.order=TRUE), interaction(survey, Season, drop=TRUE, lex.order=TRUE))
tab
dim(subm)
# C:\JVA\Consult\Yule\Lake Kivu\anova.r
library(RgoogleMaps) 
library(broom)
wb <- loadWorkbook("C:/JVA/Consult/Yule/Lake Kivu/Kivu Sa data 26 nov.xls")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, endCol=9)
rm(wb)
dat$mm <- factor(recode(dat$Month, month.name, 1:12))
dat$reg <- factor(dat$Region, levels=c("Inshore", "North", "East", "South", "West"))
dat$GPS.Lat.end.N.S <- as.numeric(dat$GPS.Lat.end.N.S)
dat$GPS.Long..center.E.W <- as.numeric(dat$GPS.Long..center.E.W)
odd <- subdex(dat, GPS.Long..center.E.W<0 | GPS.Lat.end.N.S>0)
dat$lat <- ifelse(odd, dat$GPS.Long..center.E.W, dat$GPS.Lat.end.N.S)
dat$lon <- ifelse(odd, dat$GPS.Lat.end.N.S, dat$GPS.Long..center.E.W)
rm(odd)
dat$Depth[dat$Depth=="0-60 "] <- "0-60"
dat$Depth[dat$Depth=="15-30 "] <- "15-30"
dat$dep <- factor(dat$Depth, levels=c("0-50", "0-15", "15-30", "30-45", "45-60", "0-60"))
dat$Sa <- as.numeric(dat$Sa)
dat$seas <- factor(dat$Season)
dat$survey <- interaction(dat$Year, dat$mm, drop=TRUE, lex.order=TRUE)
#plotdf(dat)
attach(dat)
mytable(dep, reg)
mytable(mm, paste(Year, Season))
mytable(interaction(reg, dep, drop=TRUE, lex.order=TRUE), interaction(Year, mm, Season, drop=TRUE, lex.order=TRUE))
# Interval seems to be a unique descriptor for the values in each "survey"
id <- interaction(reg, dep, Year, mm, Season, Interval, drop=TRUE)
sum(duplicated(id))
rm(id)
# col <- as.numeric(reg) + 1
# mlat <- tapply(lat, Region, mean, na.rm=TRUE)
# mlon <- tapply(lon, Region, mean, na.rm=TRUE)
# windows()
# MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
# PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
# TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), add=TRUE, cex=2)
# subset the data for analysis
doc <- startrtf(file="KivuANOVA", dir="C:/JVA/Consult/Yule/Lake Kivu")
heading("Exploring Allison's Lake Kivu Data")
heading(paste("Jean V. Adams", Sys.Date(), sep=" - "), 2)
para("I selected a subset of data, including only four depth layers (0-15, 15-30, 30-45, and 45-60),",
" four regions (North, East, West, and South), and records with non-missing Sa values (Figure ", jvamiscenv$figcount, ").")
sub <- dat[Depth %in% c("0-15", "15-30", "30-45", "45-60") & Region %in% c("North", "East", "South", "West") & !is.na(Sa), ]
detach(dat)
attach(sub)
col <- as.numeric(reg) + 1
mlat <- tapply(lat, Region, mean, na.rm=TRUE)
mlon <- tapply(lon, Region, mean, na.rm=TRUE)
fig <- function() {
MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), add=TRUE, cex=2)
}
figu("Subsetted Lake Kivu data used for initial ANOVA.", h=7, w=6.5)
detach(sub)
rm(col, mlat, mlon)
subm <- aggregate(Sa ~ reg + seas + survey + dep, data=sub, median)
subm$n <- aggregate(!is.na(Sa) ~ reg + seas + survey + dep, data=sub, sum)[, 5]
para("I summarized the subsetted data by calculating the median Sa for each unique combination of",
" survey (year and month), region, season (wet and dry) and depth layer.",
"  This resulted in a data set with ", dim(subm)[1], " rows.",
"  I also kept track of the total number of raw observations that went into calculating the median Sa of each row (Table ", jvamiscenv$tabcount, ").",
"  This number was used as a weighting variable in the analysis of variance (ANOVA), giving more weight to rows with more precise medians.")
tab <- with(sub, mytable(interaction(reg, dep, drop=TRUE, lex.order=TRUE), interaction(survey, Season, drop=TRUE, lex.order=TRUE)))
tabl("Number of Sa values for each combination of region by depth (rows) versus year, month, and season (columns) in the subsetted data.")
attach(subm)
para("I fit an ANOVA with natural log transformed median Sa as the response, log(median Sa + 0.001), and depth layer, region, and season as",
" categorical variables.",
"  I naively included all two-way and three-way interactions, and then used a stepwise procedure to simplify the model",
" based on Akaike's information criterion (AIC).",
"  The best model selected included all three main effects as well as the depth layer by season interaction (Table ", jvamiscenv$tabcount, ").",
"  Depth layer had the most pronounce effect, with biomass highest from 15-30 regardless of season or region (Figure ", jvamiscenv$figcount, ").",
"  Biomass was higher in the wet season than in the dry season for all but the deepest depth layer.",
"  I did not test for it formally, but biomass appears to be greater for West and South (which were similar) than for North and East (also similar).")
fit <- aov(log(Sa + 0.001) ~ dep*reg*seas, data=subm, weight=n)
fit2 <- step(fit, trace=FALSE)
tab1 <- summary(fit2)[[1]]
tab <- prettytable(cbind(tab1[, 1:4], "Pr(>F)"=tab1[, 5]))
tab[, 5] <- round(tab[, 5], 4)
tab <- rbind(tab, Total=c(sum(tab[, 1]), sum(tab[, 2]), NA, NA, NA))
tabl("ANOVA table of the best model selected by AIC.")
rm(tab1)
sur <- unique(reg)
sud <- unique(dep)
nd <- as.numeric(dep)
pl <- prettylog(Sa, lead=1, extra=0)
fig <- function() {
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in c(1, 2, 4, 3)) {
sel <- reg==sur[i]
plot(nd, log(Sa + 0.001), type="n", xlab="", ylab="", axes=FALSE)
axis(2, outer=TRUE, las=1, at=log(pl + 0.001), labels=pl)
axis(1, outer=TRUE, at=sort(unique(nd)), labels=sud)
box()
mtext(sur[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sus <- sort(unique(seas[sel]))
for(j in seq_along(sus)) {
sel2 <- sel & seas==sus[j]
text(nd[sel2], log(Sa + 0.001)[sel2], substring(sus[j], 1, 1), col=blindcolz[j+1])
lines(nd[sel2], fit2$fitted[sel2], col=blindcolz[j+1], lwd=3)
for(k in 1:4) {
sel3 <- reg==sur[k] & seas==sus[j]
lines(nd[sel3], fit2$fitted[sel3], col=blindcolz[j+1], lty=3)
}
}
}
mtext("Depth layer", side=1, outer=TRUE, line=2.5)
mtext("Sa", side=2, outer=TRUE, line=2.5)
}
figu("Observed (points) and predicted (lines) fish biomass (log scale Sa) in Lake Kivu versus depth layer by region (the four panels) and",
" season (the two colors).  The bold lines in each panel represent the prediction for that region;",
" dashed lines show the predictions from the other regions for comparison.", h=6.5, w=6.5)
rm(sur, sud, nd, pl)
detach(subm)
endrtf()
search()
detach()
tab
format(tab)
?startrtf
today
tab <- matrix(rnorm(20), ncol=5, dimnames=list(paste("Row", 1:4), paste("Column", 1:5)))
tab
tab <- prettytable(cbind(tab1[, 1:4], "Pr(>F)"=tab1[, 5]))
q()
tab <- matrix(rnorm(20), ncol=5, dimnames=list(paste("Row", 1:4), paste("Column", 1:5)))
tab <- prettytable(tab)
tab
prettytable(tab)
prettytable
tab <- as.data.frame(matrix(rnorm(20), ncol=5, dimnames=list(paste("Row", 1:4), paste("Column", 1:5))))
tab <- prettytable(tab)
tab
round(tab, 2)
today <- Sys.Date()
doc <- startrtf(file=paste("Example" today), dir="C:/JVA/Example")
heading("Example")
heading(paste("Jean V. Adams", today, sep=" - "), 2)
para("This is how you reference a table (Table ", jvamiscenv$tabcount, ").",
"  And this is how you reference a figure (Figure ", jvamiscenv$figcount, ").")
tab <- as.data.frame(matrix(rnorm(20), ncol=5, dimnames=list(paste("Row", 1:4), paste("Column", 1:5))))
tab <- prettytable(tab)
tab <- round(tab, 2)
tabl("A silly table.")
fig <- function() {
plot(1:10, 1:10)
}
figu("A silly plot.", h=4, w=4)
endrtf()
today <- Sys.Date()
doc <- startrtf(file=paste("Example", today), dir="C:/JVA/Example")
heading("Example")
heading(paste("Jean V. Adams", today, sep=" - "), 2)
para("This is how you reference a table (Table ", jvamiscenv$tabcount, ").",
"  And this is how you reference a figure (Figure ", jvamiscenv$figcount, ").")
tab <- as.data.frame(matrix(rnorm(20), ncol=5, dimnames=list(paste("Row", 1:4), paste("Column", 1:5))))
tab <- prettytable(tab)
tab <- round(tab, 2)
tabl("A silly table.")
fig <- function() {
plot(1:10, 1:10)
}
figu("A silly plot.", h=4, w=4)
endrtf()
today <- Sys.Date()
doc <- startrtf(file=paste("Example", today), dir="C:/JVA")
heading("Example")
heading(paste("Jean V. Adams", today, sep=" - "), 2)
para("This is how you reference a table (Table ", jvamiscenv$tabcount, ").",
"  And this is how you reference a figure (Figure ", jvamiscenv$figcount, ").")
tab <- as.data.frame(matrix(rnorm(20), ncol=5, dimnames=list(paste("Row", 1:4), paste("Column", 1:5))))
tab <- prettytable(tab)
tab <- round(tab, 2)
tabl("A silly table.")
fig <- function() {
plot(1:10, 1:10)
}
figu("A silly plot.", h=4, w=4)
endrtf()
today <- Sys.Date()
doc <- startrtf(file=paste("Example", today), dir="C:/JVA")
heading("Example")
heading(paste("Jean V. Adams", today, sep=" - "), 2)
para("This is how you reference a table (Table ", jvamiscenv$tabcount, ").",
"  And this is how you reference a figure (Figure ", jvamiscenv$figcount, ").")
tab <- as.data.frame(matrix(rnorm(20), ncol=5, dimnames=list(paste("Row", 1:4), paste("Column", 1:5))))
tab <- prettytable(tab)
tab <- format(round(tab, 2))
tabl("A silly table.")
fig <- function() {
plot(1:10, 1:10)
}
figu("A silly plot.", h=4, w=4)
endrtf()
para("This is how you reference a table (Table ", jvamiscenv$tabcount, ").",
"  And this is how you reference a figure (Figure ", jvamiscenv$figcount, ").")
today <- Sys.Date()
doc <- startrtf(file=paste("Example", today), dir="C:/JVA")
heading("Example")
heading(paste("Jean V. Adams", today, sep=" - "), 2)
para("This is how you reference a table (Table ", jvamiscenv$tabcount, ").")
tab <- as.data.frame(matrix(rnorm(20), ncol=5, dimnames=list(paste("Row", 1:4), paste("Column", 1:5))))
tab <- prettytable(tab)
tab <- format(round(tab, 2))
tabl("A silly table.")
para("And this is how you reference a figure (Figure ", jvamiscenv$figcount, ").")
fig <- function() {
plot(1:10, 1:10)
}
figu("A silly plot.", h=4, w=4)
endrtf()
today <- Sys.Date()
doc <- startrtf(file=paste("Example", today), dir="C:/JVA")
heading("Example")
heading(paste("Jean V. Adams", today, sep=" - "), 2)
para("This is how you reference a table (Table ", jvamiscenv$tabcount, ").")
tab <- as.data.frame(matrix(rnorm(20), ncol=5, dimnames=list(paste("Row", 1:4), paste("Column", 1:5))))
tab <- prettytable(tab)
tab <- format(round(tab, 2))
tabl("A silly table.")
para("And this is how you reference a figure (Figure ", jvamiscenv$figcount, ").")
fig <- function() {
plot(1:10, 1:10)
}
figu("A silly plot.", h=4, w=4)
endrtf()
today <- Sys.Date()
doc <- startrtf(file=paste("Example", today), dir="C:/JVA")
heading("Example")
heading(paste("Jean V. Adams", today, sep=" - "), 2)
para("This is how you reference a table (Table ", jvamiscenv$tabcount, ").")
tab <- as.data.frame(matrix(rnorm(20), ncol=5, dimnames=list(paste("Row", 1:4), paste("Column", 1:5))))
tab <- prettytable(tab)
tab <- format(round(tab, 2))
tabl("A silly table.")
para("And this is how you reference a figure (Figure ", jvamiscenv$figcount, ").")
fig <- function() {
par(mar=c(4, 4, 1, 1))
plot(1:10, 1:10, xlab="X", ylab="Y")
}
figu("A silly plot.", h=4, w=4)
endrtf()
mtcars
m <- as.matrix(mtcars)
prettytable(m)
mclass <- sapply(m, class)
nc <- mclass %in% c("numeric", "integer")
sum(nc)
mclass
mclass <- if(class(m)=="matrix") apply(m, 2, class) else sapply(m, class)
mclass
nc <- mclass %in% c("numeric", "integer")
if(sum(nc) > 0 ) {
for(i in (1:dim(m)[2])[nc]) {
m[, i] <- signif(m[, i], sigdig)
}
}
sigdig=3
mclass <- if(class(m)=="matrix") apply(m, 2, class) else sapply(m, class)
nc <- mclass %in% c("numeric", "integer")
if(sum(nc) > 0 ) {
for(i in (1:dim(m)[2])[nc]) {
m[, i] <- signif(m[, i], sigdig)
}
}
m
prettytable <- function(m, sigdig=3) {
mclass <- if(class(m)=="matrix") apply(m, 2, class) else sapply(m, class)
nc <- mclass %in% c("numeric", "integer")
if(sum(nc) > 0 ) {
for(i in (1:dim(m)[2])[nc]) {
m[, i] <- signif(m[, i], sigdig)
}
}
m
}
today <- Sys.Date()
doc <- startrtf(file=paste("Example", today), dir="C:/JVA")
heading("Example")
heading(paste("Jean V. Adams", today, sep=" - "), 2)
para("This is how you reference a table (Table ", jvamiscenv$tabcount, ").")
tab <- matrix(rnorm(20), ncol=5, dimnames=list(paste("Row", 1:4), paste("Column", 1:5)))
tab <- prettytable(tab)
tab <- format(round(tab, 2))
tabl("A silly table.")
para("And this is how you reference a figure (Figure ", jvamiscenv$figcount, ").")
fig <- function() {
par(mar=c(4, 4, 1, 1))
plot(1:10, 1:10, xlab="X", ylab="Y")
}
figu("A silly plot.", h=4, w=4)
endrtf()
?cheat
# C:\JVA\Consult\Yule\Lake Kivu\anova.r
library(RgoogleMaps) 
library(broom)
wb <- loadWorkbook("C:/JVA/Consult/Yule/Lake Kivu/Kivu Sa data 26 nov.xls")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1, endCol=9)
rm(wb)
dat$mm <- factor(recode(dat$Month, month.name, 1:12))
dat$reg <- factor(dat$Region, levels=c("Inshore", "North", "East", "South", "West"))
dat$GPS.Lat.end.N.S <- as.numeric(dat$GPS.Lat.end.N.S)
dat$GPS.Long..center.E.W <- as.numeric(dat$GPS.Long..center.E.W)
odd <- subdex(dat, GPS.Long..center.E.W<0 | GPS.Lat.end.N.S>0)
dat$lat <- ifelse(odd, dat$GPS.Long..center.E.W, dat$GPS.Lat.end.N.S)
dat$lon <- ifelse(odd, dat$GPS.Lat.end.N.S, dat$GPS.Long..center.E.W)
rm(odd)
dat$Depth[dat$Depth=="0-60 "] <- "0-60"
dat$Depth[dat$Depth=="15-30 "] <- "15-30"
dat$dep <- factor(dat$Depth, levels=c("0-50", "0-15", "15-30", "30-45", "45-60", "0-60"))
dat$Sa <- as.numeric(dat$Sa)
dat$seas <- factor(dat$Season)
dat$survey <- interaction(dat$Year, dat$mm, drop=TRUE, lex.order=TRUE)
#plotdf(dat)
attach(dat)
mytable(dep, reg)
mytable(mm, paste(Year, Season))
mytable(interaction(reg, dep, drop=TRUE, lex.order=TRUE), interaction(Year, mm, Season, drop=TRUE, lex.order=TRUE))
# Interval seems to be a unique descriptor for the values in each "survey"
id <- interaction(reg, dep, Year, mm, Season, Interval, drop=TRUE)
sum(duplicated(id))
rm(id)
# col <- as.numeric(reg) + 1
# mlat <- tapply(lat, Region, mean, na.rm=TRUE)
# mlon <- tapply(lon, Region, mean, na.rm=TRUE)
# windows()
# MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
# PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
# TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), add=TRUE, cex=2)
# subset the data for analysis
doc <- startrtf(file="KivuANOVA", dir="C:/JVA/Consult/Yule/Lake Kivu")
heading("Exploring Allison's Lake Kivu Data")
heading(paste("Jean V. Adams", Sys.Date(), sep=" - "), 2)
para("I selected a subset of data, including only four depth layers (0-15, 15-30, 30-45, and 45-60),",
" four regions (north, east, west, and south), and records with non-missing Sa values.",
"  There is some overlap in the regions (Figure ", jvamiscenv$figcount, ").")
sub <- dat[Depth %in% c("0-15", "15-30", "30-45", "45-60") & Region %in% c("North", "East", "South", "West") & !is.na(Sa), ]
detach(dat)
attach(sub)
col <- as.numeric(reg) + 1
mlat <- tapply(lat, Region, mean, na.rm=TRUE)
mlon <- tapply(lon, Region, mean, na.rm=TRUE)
fig <- function() {
MyMap <- GetMap.bbox(range(lon, na.rm=TRUE), range(lat, na.rm=TRUE), maptype="terrain", destfile="junk.png", zoom=10) #, zoom=11)
PlotOnStaticMap(MyMap, lat=lat, lon=lon, verbose=0, col=col)
TextOnStaticMap(MyMap, lat=mlat, lon=mlon, labels=names(mlat), add=TRUE, cex=2)
}
figu("Subsetted Lake Kivu data used for initial ANOVA.", h=7, w=6.5)
detach(sub)
rm(col, mlat, mlon)
subm <- aggregate(Sa ~ reg + seas + survey + dep, data=sub, median)
subm$n <- aggregate(!is.na(Sa) ~ reg + seas + survey + dep, data=sub, sum)[, 5]
para("I summarized the subsetted data by calculating the median Sa for each unique combination of",
" survey (year and month), region, season (wet and dry) and depth layer.",
"  This resulted in a data set with ", dim(subm)[1], " records.",
"  I also kept track of the total number of raw observations that went into calculating the median Sa of each record (Table ", jvamiscenv$tabcount, ").",
"  This number was used as a weighting variable in the analysis of variance (ANOVA), giving more weight to records with more precise medians.")
tab <- with(sub, mytable(interaction(reg, dep, drop=TRUE, lex.order=TRUE), interaction(survey, Season, drop=TRUE, lex.order=TRUE)))
tabl("Number of Sa values for each combination of region by depth layer (rows) versus year, month, and season (columns) in the subsetted data.")
attach(subm)
para("I fit an ANOVA with natural log transformed median Sa as the response, log(median Sa + 0.001), and depth layer, region, and season as",
" categorical variables.",
"  I naively included all two-way and three-way interactions, and then used a stepwise procedure to simplify the model",
" based on Akaike's information criterion (AIC).",
"  The best model selected included all three main effects as well as the depth layer by season interaction (Table ", jvamiscenv$tabcount, ").")
fit <- aov(log(Sa + 0.001) ~ dep*reg*seas, data=subm, weight=n)
fit2 <- step(fit, trace=FALSE)
tab1 <- summary(fit2)[[1]]
tab <- prettytable(cbind(tab1[, 1:4], "Pr(>F)"=tab1[, 5]))
tab[, 5] <- round(tab[, 5], 4)
tab <- format(rbind(tab, Total=c(sum(tab[, 1]), sum(tab[, 2]), NA, NA, NA)))
tabl("ANOVA table of the best model selected by AIC.")
rm(tab1)
para("Depth layer had the greatest effect on Sa, with biomass highest in the 15-30 depth layer regardless of season or region (Figure ", jvamiscenv$figcount, ").",
"  Biomass was higher in the wet season than in the dry season for all but the deepest depth layer.",
"  I did not test for it formally, but biomass appears to be greater for West and South (which were similar) than for North and East (also similar).")
sur <- unique(reg)
sud <- unique(dep)
nd <- as.numeric(dep)
pl <- prettylog(Sa, lead=1, extra=0)
fig <- function() {
par(mfrow=c(2, 2), mar=c(0, 0, 0, 0), oma=c(4, 4, 1, 1))
for(i in c(1, 2, 4, 3)) {
sel <- reg==sur[i]
plot(nd, log(Sa + 0.001), xlim=range(nd)+c(-0.5, 0.5), type="n", xlab="", ylab="", axes=FALSE)
axis(2, outer=TRUE, las=1, at=log(pl + 0.001), labels=pl)
axis(1, outer=TRUE, at=sort(unique(nd)), labels=sud)
box()
mtext(sur[i], side=3, line=-1.5, cex=0.8, adj=0.05)
sus <- sort(unique(seas[sel]))
for(j in seq_along(sus)) {
sel2 <- sel & seas==sus[j]
text(nd[sel2], log(Sa + 0.001)[sel2], substring(sus[j], 1, 1), col=blindcolz[j+1])
lines(nd[sel2], fit2$fitted[sel2], col=blindcolz[j+1], lwd=3)
for(k in 1:4) {
sel3 <- reg==sur[k] & seas==sus[j]
lines(nd[sel3], fit2$fitted[sel3], col=blindcolz[j+1], lty=3)
}
}
}
mtext("Depth layer", side=1, outer=TRUE, line=2.5)
mtext("Sa", side=2, outer=TRUE, line=2.5)
}
figu("Observed (points) and predicted (lines) fish biomass (Sa on the log scale) versus depth layer by region (the four panels) and",
" season (the two colors) in Lake Kivu.  The bold lines in each panel represent the prediction for that region;",
" dashed lines show the predictions from the other regions for comparison.", h=6.5, w=6.5)
rm(sur, sud, nd, pl)
detach(subm)
endrtf()
?cheat
pkgup("jvamisc")
q()
