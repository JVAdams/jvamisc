utils:::menuInstallPkgs()
.libPaths()
q()
a <- scan()
matrix(a, ncol=4, byrow=TRUE)
df <- as.data.frame(matrix(a, ncol=4, byrow=TRUE))
names(df) <- c("term", "rate", "apy", "min")
df
attach(df)
plot(term, rate)
plot(term, rate, las=1)
par(new=TRUE)
plot(term, apy, pch=3, axes=FALSE)
plot(term, rate, las=1)
abline(lsfit(term, rate))
1000*(1.70^5)
1000*(1. 017^5)
1000*(1.017^5)
3*300*12
10800*(1.017^5)
q()
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
system.file("examples", package="shiny")
runExample("01_hello") # a histogram
runExample("02_text")
runExample("03_reactivity")
runExample("04_mpg")
runExample("05_sliders")
runExample("06_tabsets")
runExample("07_widgets")
runExample("08_html")
runExample("09_upload")
runExample("10_download")
runExample("11_timer")
h1("My title")
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
shiny::runApp('App-1')
library("devtools")
devtools::install_github("JVAdams/jvamisc")
find_rtools()
??find_rtools
utils:::menuInstallPkgs()
find_rtools()
library(devtools)
find_rtools()
library("devtools")
devtools::install_github("JVAdams/jvamisc")
top <- 3
top[2] <- 4
top
q()
library(jvamisc)
?coordtri
# define coordinates of base of triangle
AB <- rbind(A=c(-2, 4), B=c(2, -4))
# determine coordinates of top of triangle, given base coordinates and side lengths
C <- coordtri(cleft=AB[1, ], cright=AB[2, ], lleft=12, lright=10)
# plot results
coordplot(rbind(C, AB))
q()
library(jvamisc)
fishdist <- c(5, 5, 5, 6, 8, 6, 10, 8, 12, 8, 10, 8, 8)
length(fishdist)
?coordtri
library(jvamisc)
fishdist <- c(5, 5, 5, 6, 8, 6, 10, 8, 12, 8, 10, 8, 8)
# first triangle (head)
c2 <- c(0, 0)
c1 <- c(fishdist[1], 0)
c8 <- coordtri(cleft=c2, cright=c1, lleft=fishdist[3], lright=fishdist[2])
coordplot(rbind(c2, c1, c8))
c8
c2
c1
coordtri(cleft=c2, cright=c1, lleft=fishdist[3], lright=fishdist[2])
fishdist[3]
fishdist[2]
coordtri
cleft=c2
cright=c1
lleft=fishdist[3]
lright=fishdist[2]
    cbot <- rbind(cleft, cright)
    lbot <- dist(cbot)
cbot
lbot
    cbot2 <- coordmove(cbot, cleft, c(0, 0))
cbot2
    ang <- atan(cleft[2]/cleft[1])
ang
cleft[2]/cleft[1]
cleft
cbot2
coordtri <- function(cleft, cright, lleft, lright) {
# find third coordinate of triangle
# cleft, cright = coordinate of left, right base of triangle
# lleft, lright = length of left, right segment of triangle
cbot <- rbind(cleft, cright)
lbot <- dist(cbot)
# move so that cleft is at origin (0, 0)
cbot2 <- coordmove(cbot, cleft, c(0, 0))
# rotate so that cright2 is at (0, dist(cleft2, cright2))
cbot3 <- cbot2
if(abs(cbot[2, 2]) < 0.0000001) {
cbot3[2, 1] <- abs(cbot3[2, 1])
} else {
ang <- atan(cbot2[2, 2]/cbot2[2, 1])
cbot3 <- coordturn(cbot2, c(0, 0), ang)
}
# calculate location of triangle top
ctop3 <- matrix(numeric(2), ncol=2)
ctop3[, 1] <- (lbot^2 + lleft^2 - lright^2) / (2*lbot)
ctop3[, 2] <- sqrt(lleft^2 - ctop3[, 1]^2)
# backrotate
ctop2 <- coordturn(ctop3, c(0, 0), -ang)
# backmove
ctop <- coordmove(ctop2, c(0, 0), cleft)
as.numeric(ctop)
}
fishdist <- c(5, 5, 5, 6, 8, 6, 10, 8, 12, 8, 10, 8, 8)
# first triangle (head)
c2 <- c(0, 0)
c1 <- c(fishdist[1], 0)
c8 <- coordtri(cleft=c2, cright=c1, lleft=fishdist[3], lright=fishdist[2])
coordplot(rbind(c2, c1, c8))
c8
cleft=c2
cright=c1
lleft=fishdist[3]
lright=fishdist[2]
# find third coordinate of triangle
# cleft, cright = coordinate of left, right base of triangle
# lleft, lright = length of left, right segment of triangle
cbot <- rbind(cleft, cright)
lbot <- dist(cbot)
# move so that cleft is at origin (0, 0)
cbot2 <- coordmove(cbot, cleft, c(0, 0))
# rotate so that cright2 is at (0, dist(cleft2, cright2))
cbot3 <- cbot2
cbot2
abs(cbot[2, 2])
cbot3 <- cbot2
if(abs(cbot[2, 2]) < 0.0000001) {
cbot3[2, 1] <- abs(cbot3[2, 1])
} else {
ang <- atan(cbot2[2, 2]/cbot2[2, 1])
cbot3 <- coordturn(cbot2, c(0, 0), ang)
}
cbot3
ctop3 <- matrix(numeric(2), ncol=2)
ctop3[, 1] <- (lbot^2 + lleft^2 - lright^2) / (2*lbot)
ctop3[, 2] <- sqrt(lleft^2 - ctop3[, 1]^2)
ctop3
?integer
as.integer(0.00001)
1e-16
1e-16 < 8
coordtri <- function(cleft, cright, lleft, lright) {
# find third coordinate of triangle
# cleft, cright = coordinate of left, right base of triangle
# lleft, lright = length of left, right segment of triangle
cbot <- rbind(cleft, cright)
lbot <- dist(cbot)
# move so that cleft is at origin (0, 0)
cbot2 <- coordmove(cbot, cleft, c(0, 0))
# rotate so that cright2 is at (0, dist(cleft2, cright2))
if(abs(cbot[2, 2]) < 1e-12) {
if(cbot[2, 1] < -1e-12) {
ang <- pi
} else {
ang <- 0
}
} else {
ang <- atan(cbot2[2, 2]/cbot2[2, 1])
}
cbot3 <- coordturn(cbot2, c(0, 0), ang)
}
# calculate location of triangle top
ctop3 <- matrix(numeric(2), ncol=2)
ctop3[, 1] <- (lbot^2 + lleft^2 - lright^2) / (2*lbot)
ctop3[, 2] <- sqrt(lleft^2 - ctop3[, 1]^2)
# backrotate
ctop2 <- coordturn(ctop3, c(0, 0), -ang)
# backmove
ctop <- coordmove(ctop2, c(0, 0), cleft)
as.numeric(ctop)
}
coordtri <- function(cleft, cright, lleft, lright) {
# find third coordinate of triangle
# cleft, cright = coordinate of left, right base of triangle
# lleft, lright = length of left, right segment of triangle
cbot <- rbind(cleft, cright)
lbot <- dist(cbot)
# move so that cleft is at origin (0, 0)
cbot2 <- coordmove(cbot, cleft, c(0, 0))
# rotate so that cright2 is at (0, dist(cleft2, cright2))
if(abs(cbot[2, 2]) < 1e-12) {
if(cbot[2, 1] < -1e-12) {
ang <- pi
} else {
ang <- 0
}
} else {
ang <- atan(cbot2[2, 2]/cbot2[2, 1])
}
cbot3 <- coordturn(cbot2, c(0, 0), ang)
# calculate location of triangle top
ctop3 <- matrix(numeric(2), ncol=2)
ctop3[, 1] <- (lbot^2 + lleft^2 - lright^2) / (2*lbot)
ctop3[, 2] <- sqrt(lleft^2 - ctop3[, 1]^2)
# backrotate
ctop2 <- coordturn(ctop3, c(0, 0), -ang)
# backmove
ctop <- coordmove(ctop2, c(0, 0), cleft)
as.numeric(ctop)
}
# first triangle (head)
c2 <- c(0, 0)
c1 <- c(fishdist[1], 0)
c8 <- coordtri(cleft=c2, cright=c1, lleft=fishdist[3], lright=fishdist[2])
coordplot(rbind(c2, c1, c8))
fishdist <- c(5, 5, 5, 6, 8, 6, 10, 8, 12, 8, 10, 8, 8)
# first triangle (head)
c2 <- c(0, 0)
c1 <- c(fishdist[1], 0)
c8 <- coordtri(cleft=c2, cright=c1, lleft=fishdist[3], lright=fishdist[2])
#coordplot(rbind(c2, c1, c8))
# first square
c3 <- coordtri(cleft=c2, cright=c8, lleft=fishdist[4], lright=fishdist[5])
c7 <- coordtri(cleft=c3, cright=c8, lleft=fishdist[7], lright=fishdist[6])
# second square
c4 <- coordtri(cleft=c3, cright=c7, lleft=fishdist[8], lright=fishdist[9])
c6 <- coordtri(cleft=c4, cright=c7, lleft=fishdist[11], lright=fishdist[10])
# last triangle (tail)
c5 <- coordtri(cleft=c4, cright=c6, lleft=fishdist[11], lright=fishdist[13])
coordplot(rbind(c1, c2, c3, c4, c5, c6, c7, c8))
?cheat
library(devtools)
setwd("C:/JVA/GitHub/jvamisc")
document()
q()
