windows()
par(mfrow=c(2, 2))
l1 <- lookseries(epa, "tempc", "domglf")
l2 <- lookseries(epa, "tempc", "domgll")
l3 <- lookseries(epa, "tempc", "domglu")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(0.1, 5, 0.1, 5))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-3, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
windows()
par(mfrow=c(2, 2))
l1 <- lookseries(epa, "tempc", "domglf")
l2 <- lookseries(epa, "tempc", "domgll")
l3 <- lookseries(epa, "tempc", "domglu")
windows(h=8.5, w=6.5)
par(mfrow=c(2, 2))
l1 <- lookseries(epa, "tempc", "domglf")
l2 <- lookseries(epa, "tempc", "domgll")
l3 <- lookseries(epa, "tempc", "domglu")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(0.1, 2, 0.1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-3, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
windows(h=8.5, w=6.5)
par(mfrow=c(2, 2))
l1 <- lookseries(epa, "tempc", "domglf")
l2 <- lookseries(epa, "tempc", "domgll")
l3 <- lookseries(epa, "tempc", "domglu")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-3, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
windows(h=8.5, w=6.5)
par(mfrow=c(2, 2))
l1 <- lookseries(epa, "tempc", "domglf")
l2 <- lookseries(epa, "tempc", "domgll")
l3 <- lookseries(epa, "tempc", "domglu")
locator()
head(epa)
head(dnr)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Analysis of Temporal Trends in St. Clair River Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth of a minute (0.01'),",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- 
windows(h=8.5, w=6.5)
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
fig()
fig()
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (dommglf), lab (domgll), and unspecified (domglu).", 
h=8.5, w=6.5, newpage="port")
para("Four sites from the St. Clair River were selected for futher analysis, and are identified by the letters A-D,",
"from north to south for convenience (Table ", tabcount, ").")
sitez <- data.frame(
rlong = c(-82.42, -82.49, -82.49, -82.51), 
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
site = c("A", "B", "C", "D"))
tab <- sitez
tab
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = c("A", "B", "C", "D"))
tab <- sitez
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth of a degree (0.01').")
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
picksite <- "A"
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
attach(df)
windows(h=6, w=9)
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1)
plot(date, tempc, type="o", xlab="", ylab="Temperature  (C)")
plot(date, domglf, type="o", ylim=range(domglf, domgll, domglu, na.rm=TRUE), xlab="", ylab="DO  (mg/L)")
points(date, domgll, pch=2, type="o", col=blindcolz[2])
points(date, domglu, pch=3, type="o", col=blindcolz[3])
mtext("Date", side=1, outer=TRUE)
search()
find("long")
ls()
rm(long)
plot(date, tempc, type="o", na.action=na.omit, xlab="", ylab="Temperature  (C)")
?plot.default
selt <- !is.na(tempc)
seld1 <- !is.na(domglf)
seld2 <- !is.na(domgll)
seld3 <- !is.na(domglu)
windows(h=6, w=9)
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1)
plot(date[selt], tempc[selt], type="o", xlab="", ylab="Temperature  (C)")
plot(date[seld1], domglf[seld1], type="o", ylim=range(domglf, domgll, domglu, na.rm=TRUE), xlab="", ylab="DO  (mg/L)")
points(date[seld2], domgll[seld2], pch=2, type="o", col=blindcolz[2])
points(date[seld3], domglu[seld3], pch=3, type="o", col=blindcolz[3])
mtext("Date", side=1, outer=TRUE)
windows(h=6, w=9)
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1)
plot(date[selt], tempc[selt], type="o", xlab="", ylab="Temperature  (C)")
plot(date[seld1], domglf[seld1], type="o", ylim=range(domglf, domgll, domglu, na.rm=TRUE), xlab="", ylab="DO  (mg/L)")
#points(date[seld2], domgll[seld2], pch=2, type="o", col=blindcolz[2])
#points(date[seld3], domglu[seld3], pch=3, type="o", col=blindcolz[3])
mtext("Date", side=1, outer=TRUE)
aprday <- doy(date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
fitt <- loess(tempc ~ aprday, degree=2)
pt <- predict(fitt, newdata=df)
#fitd <- loess(c(domglf, domgll, domglu) ~ rep(aprday, 3), degree=2)
fitd <- loess(domglf ~ aprday, degree=2)
pd <- predict(fitd, newdata=df)
fitt <- loess(tempc ~ aprday, degree=2)
pt <- predict(fitt, newdata=df)
#fitd <- loess(c(domglf, domgll, domglu) ~ rep(aprday, 3), degree=2)
fitd <- loess(domglf ~ aprday, degree=2)
pd <- predict(fitd, newdata=df)
ord <- order(aprday)
windows(w=6.5, h=8.5)
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1)
plot(aprday, tempc, xaxt="n", xlab="", ylab="Temperature  (C)")
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(aprday[ord], pt[ord])
plot(aprday, domglf, ylim=range(domglf, domgll, domglu, na.rm=TRUE), xaxt="n", xlab="", ylab="DO  (mg/L)")
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
# points(aprday, domgll, pch=2, col=blindcolz[2])
# points(aprday, domglu, pch=3, col=blindcolz[3])
lines(aprday[ord], pd[ord])
mtext("Day of year", side=1, outer=TRUE)
windows(h=6.5, w=9)
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1)
plot(date, rt, type="o", xlab="", ylab="Temperature, seasonal trend removed  (C)")
plot(date, rd, type="o", ylim=range(fitd$resid, na.rm=TRUE), xlab="", ylab="DO, seasonal trend removed  (mg/L)")
mtext("Date", side=1, outer=TRUE)
rt
fitt <- loess(tempc ~ aprday, degree=2)
pt <- predict(fitt, newdata=df)
rt <- pt - tempc
#fitd <- loess(c(domglf, domgll, domglu) ~ rep(aprday, 3), degree=2)
fitd <- loess(domglf ~ aprday, degree=2)
pd <- predict(fitd, newdata=df)
rd <- pd - domglf
ord <- order(aprday)
rt
windows(h=6.5, w=9)
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1)
plot(date, rt, type="o", xlab="", ylab="Temperature, seasonal trend removed  (C)")
plot(date, rd, type="o", ylim=range(fitd$resid, na.rm=TRUE), xlab="", ylab="DO, seasonal trend removed  (mg/L)")
mtext("Date", side=1, outer=TRUE)
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1)
plot(date[selt], rt[selt], type="o", xlab="", ylab="Temperature, seasonal trend removed  (C)")
plot(date[seld1], rd[seld1], type="o", ylim=range(fitd$resid, na.rm=TRUE), xlab="", ylab="DO, seasonal trend removed  (mg/L)")
mtext("Date", side=1, outer=TRUE)
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1)
plot(date[selt], rt[selt], type="o", xlab="", ylab="Temperature, seasonal trend removed  (C)")
abline(h=0, lwd=2, col="gray")
lines(loess.smooth(date, rt))
plot(date[seld1], rd[seld1], type="o", ylim=range(fitd$resid, na.rm=TRUE), xlab="", ylab="DO, seasonal trend removed  (mg/L)")
abline(h=0, lwd=2, col="gray")
lines(loess.smooth(date, rd))
mtext("Date", side=1, outer=TRUE)
windows(h=6.5, w=9)
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1)
plot(date[selt], rt[selt], type="h", xlab="", ylab="Temperature, seasonal trend removed  (C)")
windows(h=6.5, w=9)
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1)
plot(date[selt], rt[selt], type="h", xlab="", ylab="Delta temperature  (C)")
plot(date[seld1], rd[seld1], type="h", ylim=range(fitd$resid, na.rm=TRUE), xlab="", ylab="Delta DO  (mg/L)")
mtext("Date", side=1, outer=TRUE)
selt <- !is.na(tempc)
seld1 <- !is.na(domglf)
seld2 <- !is.na(domgll)
seld3 <- !is.na(domglu)
windows(h=6, w=9)
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1)
plot(date[selt], tempc[selt], type="o", xlim=range(date), xlab="", ylab="Temperature  (C)")
plot(date[seld1], domglf[seld1], type="o", xlim=range(date), ylim=range(domglf, domgll, domglu, na.rm=TRUE), xlab="", ylab="DO  (mg/L)")
#points(date[seld2], domgll[seld2], pch=2, type="o", col=blindcolz[2])
#points(date[seld3], domglu[seld3], pch=3, type="o", col=blindcolz[3])
mtext("Date", side=1, outer=TRUE)
aprday <- doy(date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
fitt <- loess(tempc ~ aprday, degree=2)
pt <- predict(fitt, newdata=df)
rt <- pt - tempc
#fitd <- loess(c(domglf, domgll, domglu) ~ rep(aprday, 3), degree=2)
fitd <- loess(domglf ~ aprday, degree=2)
pd <- predict(fitd, newdata=df)
rd <- pd - domglf
ord <- order(aprday)
windows(w=6.5, h=8.5)
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1)
plot(aprday, tempc, xaxt="n", xlab="", ylab="Temperature  (C)")
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(aprday[ord], pt[ord])
plot(aprday, domglf, ylim=range(domglf, domgll, domglu, na.rm=TRUE), xaxt="n", xlab="", ylab="DO  (mg/L)")
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
# points(aprday, domgll, pch=2, col=blindcolz[2])
# points(aprday, domglu, pch=3, col=blindcolz[3])
lines(aprday[ord], pd[ord])
mtext("Day of year", side=1, outer=TRUE)
windows(h=6.5, w=9)
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1)
plot(date[selt], rt[selt], type="o", xlim=range(date), xlab="", ylab="Temperature, seasonal trend removed  (C)")
abline(h=0, lwd=2, col="gray")
lines(loess.smooth(date, rt))
plot(date[seld1], rd[seld1], type="o", xlim=range(date), ylim=range(fitd$resid, na.rm=TRUE), xlab="", ylab="DO, seasonal trend removed  (mg/L)")
abline(h=0, lwd=2, col="gray")
lines(loess.smooth(date, rd))
mtext("Date", side=1, outer=TRUE)
windows(h=6.5, w=9)
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1)
plot(date[selt], rt[selt], type="h", xlim=range(date), xlab="", ylab="Delta temperature  (C)")
plot(date[seld1], rd[seld1], type="h", xlim=range(date), ylim=range(fitd$resid, na.rm=TRUE), xlab="", ylab="Delta DO  (mg/L)")
mtext("Date", side=1, outer=TRUE)
fit <- gam(tempc ~ s(aprday) + as.factor(year))
summary(fit)
windows()
plot(fit)
plot(fit, TRUE)
?plot.gam
plot(fit, all.terms=TRUE)
median(aprday)
m1
cbind(month.abb, m1, m15)
predict(fit, newdata=data.frame(aprday=123, year=1999:2012))
predict(fit, newdata=data.frame(aprday=123, year=1998:2012))
search()
detach()
search()
picksite <- "A"
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- tempc
ylab <- "Temperature  (C)"
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- df$date[sel]
x2 <- aprday[sel]
yr <- df$year[sel]
y <- y[sel]
# raw data
windows(h=6, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="o", xlab=Date, ylab=ylab)
# seasonal pattern
fit <- gam(tempc ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$yhat <- predict(fit, newdata=new)
picksite <- "A"
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df$tempc
ylab <- "Temperature  (C)"
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- df$date[sel]
x2 <- aprday[sel]
yr <- df$year[sel]
y <- y[sel]
# raw data
windows(h=6, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="o", xlab=Date, ylab=ylab)
# seasonal pattern
fit <- gam(tempc ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$yhat <- predict(fit, newdata=new)
picksite <- "A"
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df$tempc
ylab <- "Temperature  (C)"
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- df$date[sel]
x2 <- aprday[sel]
yr <- df$year[sel]
y <- y[sel]
# raw data
windows(h=6, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="o", xlab=Date, ylab=ylab)
# seasonal pattern
fit <- gam(tempc ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$yhat <- predict(fit, newdata=new)
picksite <- "A"
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df$tempc
ylab <- "Temperature  (C)"
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- df$date[sel]
x2 <- aprday[sel]
yr <- df$year[sel]
y <- y[sel]
# raw data
windows(h=6, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="o", xlab="Date", ylab=ylab)
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$yhat <- predict(fit, newdata=new)
head(new)
aprday
sort(aprday)
tapply(new$yhat, new$x2, mean)
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$yhat <- predict(fit, newdata=new)
windows(w=6.5, h=8.5)
par(mar=c(4, 4, 1, 1), las=1)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=ylab)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
head(new)
as.Date(paste(new$yr, "04-01"))
as.Date(paste0(new$yr, "-04-01"))
as.Date(paste0(new$yr, "-04-01")) + new$x2
as.Date(paste0(new$yr, "-04-01")) + new$x2new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
windows(w=6.5, h=8.5)
par(mar=c(4, 4, 1, 1), las=1)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=ylab)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
# raw data
suy <- sort(unique(new$yr))
windows(h=6, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="n", xlab="Date", ylab=ylab)
for(i in seq(suy)) {
sel <- new$yr==suy[i]
lines(new$date[sel], new$yhat[sel], lwd=3, col="lightgray")
}
lines(x1, y, type="o")
x1[1:10]
new$date[1:10]
plot(new$date[sel], new$yhat[sel])
class(x1)
class(new$date)
as.Date(x1)
class(as.Date(x1))
graphics.off()
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
y <- y[sel]
# raw data
windows(h=6, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="o", xlab="Date", ylab=ylab)
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
windows(w=6.5, h=8.5)
par(mar=c(4, 4, 1, 1), las=1)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=ylab)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
# raw data
suy <- sort(unique(new$yr))
windows(h=6, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="n", xlab="Date", ylab=ylab)
for(i in seq(suy)) {
sel <- new$yr==suy[i]
lines(new$date[sel], new$yhat[sel], lwd=3, col="lightgray")
}
lines(x1, y, type="o")
picksite <- "A"
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df$tempc
ylab <- "Temperature  (C)"
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
y <- y[sel]
# raw data
windows(h=6, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="o", xlab="Date", ylab=ylab)
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
windows(w=6.5, h=8.5)
par(mar=c(4, 4, 1, 1), las=1)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=ylab)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
# raw data
suy <- sort(unique(new$yr))
windows(h=6, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="n", xlab="Date", ylab=ylab)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
lines(x1, y, type="o")
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="n", xlab="Date", ylab=ylab)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
head(new)
# trend over time
windows(h=3, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(suy, tapply(new$yhat, new$yr, median), type="o", xlab="Date", ylab=ylab)
graphics.off()
picksite <- "A"
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df$tempc
ylab <- "Temperature  (C)"
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
y <- y[sel]
# raw data
windows(h=3, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="o", xlab="Date", ylab=ylab)
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
windows(w=6.5, h=6.5)
par(mar=c(4, 4, 1, 1), las=1)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=ylab)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
# raw data with predicted lines
suy <- sort(unique(new$yr))
windows(h=3, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="n", xlab="Date", ylab=ylab)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
# trend over time
windows(h=3, w=9)
par(mar=c(4, 4, 1, 1), las=1)
plot(suy, tapply(new$yhat, new$yr, median), type="o", xlab="Date", ylab=ylab)
figu
dataprep <- function(picksite, yvar, yvarname) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
suy <- sort(unique(new$yr))
list(x1, x2, y, yvarname, m1, m15, new)
}
run1 <- dataprep(picksite=="A", yvar="tempc", yvarname="Temperature  (C)")
picksite=="A"
yvar="tempc"
yvarname="Temperature  (C)"
run1 <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)")
run1
length(run1)
names(run1)
rm(x1, x2, x, y, new, yvar, yvarname, m1, m15)
dataprep <- function(picksite, yvar, yvarname) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
suy <- sort(unique(new$yr))
list(x1=x1, x2=x2, y=y, yvarname=yvarname, m1=m1, m15=m15, new=new)
}
run1 <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)")
names(run1)
attach(run1)
figu("Raw data.", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern.", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw data with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time.", FIG=figtrend, h=3, w=9, newpage="land")
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(suy, tapply(new$yhat, new$yr, median), type="o", xlab="Date", ylab=yvarname)
}
figu("Raw data.", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern.", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw data with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time.", FIG=figtrend, h=3, w=9, newpage="land")
cleanup()
graphics.off()
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
#source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
head(epa)
head(dnr)
rm(long)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Analysis of Temporal Trends in St. Clair River Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth of a degree (0.01'),",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (dommglf), lab (domgll), and unspecified (domglu).", 
h=8.5, w=6.5, newpage="port")
para("Four sites from the St. Clair River were selected for futher analysis, and are identified by the letters A-D,",
"from north to south for convenience (Table ", tabcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = c("A", "B", "C", "D"))
tab <- sitez
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth of a degree (0.01').")
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
dataprep <- function(picksite, yvar, yvarname) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
suy <- sort(unique(new$yr))
list(x1=x1, x2=x2, y=y, yvarname=yvarname, m1=m1, m15=m15, new=new)
}
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(suy, tapply(new$yhat, new$yr, median), type="o", xlab="Date", ylab=yvarname)
}
run1 <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)")
attach(run1)
figu("Raw data.", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern.", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw data with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time.", FIG=figtrend, h=3, w=9, newpage="land")
detach(run1)
run1 <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)")
attach(run1)
figu("Raw data.", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern.", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw data with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time.", FIG=figtrend, h=3, w=9, newpage="land")
detach(run1)
endrtf()
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
#source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
head(epa)
head(dnr)
rm(long)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Analysis of Temporal Trends in St. Clair River Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth of a degree (0.01'),",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (dommglf), lab (domgll), and unspecified (domglu).", 
h=8.5, w=6.5, newpage="port")
para("Four sites from the St. Clair River were selected for futher analysis, and are identified by the letters A-D,",
"from north to south for convenience (Table ", tabcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = c("A", "B", "C", "D"))
tab <- sitez
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth of a degree (0.01').")
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
dataprep <- function(picksite, yvar, yvarname) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
suy <- sort(unique(new$yr))
list(x1=x1, x2=x2, y=y, yvarname=yvarname, m1=m1, m15=m15, new=new)
}
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(suy, tapply(new$yhat, new$yr, median), type="o", xlab="Date", ylab=yvarname)
}
run1 <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)")
attach(run1)
figu("Raw data.", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern.", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw data with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time.", FIG=figtrend, h=3, w=9, newpage="land")
detach(run1)
run1 <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)")
attach(run1)
figu("Raw data.", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern.", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw data with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time.", FIG=figtrend, h=3, w=9, newpage="land")
detach(run1)
endrtf()
dataprep <- function(picksite, yvar, yvarname) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
suy <- sort(unique(new$yr))
list(y=y, x1=x1, x2=x2, yvarname=yvarname, m1=m1, m15=m15, new=new, suy=suy)
}
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(suy, tapply(new$yhat, new$yr, median), type="o", xlab="Date", ylab=yvarname)
}
run1 <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)")
attach(run1)
figu("Raw data.", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern.", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw data with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time.", FIG=figtrend, h=3, w=9, newpage="land")
detach(run1)
run1 <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)")
attach(run1)
figu("Raw data.", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern.", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw data with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time.", FIG=figtrend, h=3, w=9, newpage="land")
detach(run1)
endrtf()
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
#source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
head(epa)
head(dnr)
rm(long)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Analysis of Temporal Trends in St. Clair River Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth of a degree (0.01'),",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (dommglf), lab (domgll), and unspecified (domglu).", 
h=8.5, w=6.5, newpage="port")
para("Four sites from the St. Clair River were selected for futher analysis, and are identified by the letters A-D,",
"from north to south for convenience (Table ", tabcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = c("A", "B", "C", "D"))
tab <- sitez
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth of a degree (0.01').")
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
dataprep <- function(picksite, yvar, yvarname) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
suy <- sort(unique(new$yr))
list(y=y, x1=x1, x2=x2, yvarname=yvarname, m1=m1, m15=m15, new=new, suy=suy)
}
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(suy, tapply(new$yhat, new$yr, median), type="o", xlab="Date", ylab=yvarname)
}
run1 <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)")
attach(run1)
figu("Raw data.", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern.", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw data with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time.", FIG=figtrend, h=3, w=9, newpage="land")
detach(run1)
run1 <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)")
attach(run1)
figu("Raw data.", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern.", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw data with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time.", FIG=figtrend, h=3, w=9, newpage="land")
detach(run1)
endrtf()
format(sitez)
tabl
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="B", yvar="tempc", yvarname="Temperature  (C)")
run.bd <- dataprep(picksite="B", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="C", yvar="tempc", yvarname="Temperature  (C)")
run.cd <- dataprep(picksite="C", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)")
run.dd1 <- dataprep(picksite="D", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="D", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
doit <- function(mylist) {
attach(mylist)
figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", FIG=figtrend, h=3, w=9, newpage="land")
detach(mylist)
}
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=min(yr):max(yr))
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
suy <- sort(unique(new$yr))
list(y=y, x1=x1, x2=x2, yvarname=yvarname, m1=m1, m15=m15, new=new, suy=suy)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="B", yvar="tempc", yvarname="Temperature  (C)")
run.bd <- dataprep(picksite="B", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="C", yvar="tempc", yvarname="Temperature  (C)")
run.cd <- dataprep(picksite="C", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)")
run.dd1 <- dataprep(picksite="D", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="D", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(y=y, x1=x1, x2=x2, yvarname=yvarname, m1=m1, m15=m15, new=new, suy=suy)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="B", yvar="tempc", yvarname="Temperature  (C)")
run.bd <- dataprep(picksite="B", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="C", yvar="tempc", yvarname="Temperature  (C)")
run.cd <- dataprep(picksite="C", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)")
run.dd1 <- dataprep(picksite="D", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="D", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
doit <- function(mylist) {
attach(mylist)
figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", FIG=figtrend, h=3, w=9, newpage="land")
detach(mylist)
}
doit(run.at)
doit(run.ad)
doit(run.bt)
doit(run.bd)
doit(run.ct)
doit(run.cd)
doit(run.dt)
doit(run.dd1)
doit(run.dd2)
doit(run.dd3)
search()
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
doit <- function(mylist) {
attach(mylist)
figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", FIG=figtrend, h=3, w=9, newpage="land")
detach(mylist)
}
doit(run.at)
doit(run.ad)
doit(run.bt)
doit(run.bd)
doit(run.ct)
doit(run.cd)
doit(run.dt)
doit(run.dd1)
doit(run.dd2)
doit(run.dd3)
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, m1=m1, m15=m15, new=new, suy=suy)
}
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
detach(mylist)
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="B", yvar="tempc", yvarname="Temperature  (C)")
run.bd <- dataprep(picksite="B", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="C", yvar="tempc", yvarname="Temperature  (C)")
run.cd <- dataprep(picksite="C", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)")
run.dd1 <- dataprep(picksite="D", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="D", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
doit(run.at)
attach(run.at)
search()
detach(mylist)
paste("Raw ", desc, " data from site ", picksite, ".")
dex
desc
ls(2)
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="B", yvar="tempc", yvarname="Temperature  (C)")
run.bd <- dataprep(picksite="B", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="C", yvar="tempc", yvarname="Temperature  (C)")
run.cd <- dataprep(picksite="C", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)")
run.dd1 <- dataprep(picksite="D", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="D", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="B", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="B", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="C", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="C", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="D", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="D", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
doit(run.at)
search()
detach()
doit(run.at)
doit(run.ad)
doit(run.bt)
doit(run.bd)
doit(run.ct)
doit(run.cd)
doit(run.dt)
doit(run.dd1)
doit(run.dd2)
doit(run.dd3)
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
#source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
head(epa)
head(dnr)
rm(long)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Analysis of Temporal Trends in St. Clair River Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth of a degree (0.01'),",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (dommglf), lab (domgll), and unspecified (domglu).", 
h=8, w=6.5, newpage="port")
para("Four sites from the St. Clair River were selected for futher analysis, and are identified by the letters A-D,",
" from north to south for convenience (Table ", tabcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = c("A", "B", "C", "D"))
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth of a degree (0.01').", row.names=FALSE)
para("For each of the four sites, the seasonal pattern in temperature and DO was removed in order to reveal the underlying trend",
" over time.  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.  The results are shown in the following figures."
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(suy, tapply(new$yhat, new$yr, median), type="o", xlab="Date", ylab=yvarname)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="B", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="B", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="C", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="C", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="D", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="D", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
doit <- function(mylist) {
attach(mylist)
figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", FIG=figtrend, h=3, w=9, newpage="land")
detach(mylist)
}
doit(run.at)
doit(run.ad)
doit(run.bt)
doit(run.bd)
doit(run.ct)
doit(run.cd)
doit(run.dt)
doit(run.dd1)
doit(run.dd2)
doit(run.dd3)
endrtf()
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
#source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
head(epa)
head(dnr)
rm(long)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Analysis of Temporal Trends in St. Clair River Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth of a degree (0.01'),",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (dommglf), lab (domgll), and unspecified (domglu).", 
h=8, w=6.5, newpage="port")
para("Four sites from the St. Clair River were selected for futher analysis, and are identified by the letters A-D,",
" from north to south for convenience (Table ", tabcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = c("A", "B", "C", "D"))
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth of a degree (0.01').", row.names=FALSE)
para("For each of the four sites, the seasonal pattern in temperature and DO was removed in order to reveal the underlying trend",
" over time.  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.  The results are shown in the following figures.")
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1)
plot(suy, tapply(new$yhat, new$yr, median), type="o", xlab="Date", ylab=yvarname)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="B", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="B", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="C", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="C", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="D", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="D", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
doit <- function(mylist) {
attach(mylist)
figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6.5, w=6.5, newpage="port")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", FIG=figtrend, h=3, w=9, newpage="land")
detach(mylist)
}
doit(run.at)
doit(run.ad)
doit(run.bt)
doit(run.bd)
doit(run.ct)
doit(run.cd)
doit(run.dt)
doit(run.dd1)
doit(run.dd2)
doit(run.dd3)
endrtf()
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
#source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
head(epa)
head(dnr)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Temporal Trends in St. Clair River Water Quality Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth (0.01) of a degree,",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (dommglf), lab (domgll), and unspecified (domglu).", 
h=8, w=6.5, newpage="port")
para("Four sites from the St. Clair River were selected for futher analysis, and are identified by the letters A-D,",
" from north to south for convenience (Table ", tabcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = c("A", "B", "C", "D"))
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth (0.01) of a degree.", row.names=FALSE)
para("For each of the four sites, the seasonal pattern in temperature and DO was removed in order to reveal the underlying trend",
" over time.  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.  The results are shown in the following figures.")
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.5)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.5)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.5)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.5)
plot(suy, tapply(new$yhat, new$yr, median), type="o", xlab="Date", ylab=yvarname)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="B", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="B", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="C", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="C", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="D", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="D", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
doit <- function(mylist) {
attach(mylist)
#figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=3, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6.5, w=6.5, newpage="land")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=3, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", FIG=figtrend, h=3, w=9)
detach(mylist)
}
doit(run.at)
doit(run.ad)
doit(run.bt)
doit(run.bd)
doit(run.ct)
doit(run.cd)
doit(run.dt)
doit(run.dd1)
doit(run.dd2)
doit(run.dd3)
endrtf()
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
#source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
head(epa)
head(dnr)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Temporal Trends in St. Clair River Water Quality Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth (0.01) of a degree,",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (dommglf), lab (domgll), and unspecified (domglu).", 
h=8, w=6.5, newpage="port")
para("Four sites from the St. Clair River were selected for futher analysis, and are identified by the letters A-D,",
" from north to south for convenience (Table ", tabcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = c("A", "B", "C", "D"))
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth (0.01) of a degree.", row.names=FALSE)
para("For each of the four sites, the seasonal pattern in temperature and DO was removed in order to reveal the underlying trend",
" over time.  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.  The results are shown in the following figures.")
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(suy, tapply(new$yhat, new$yr, median), type="o", xlab="Date", ylab=yvarname)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="B", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="B", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="C", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="C", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="D", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="D", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
doit <- function(mylist) {
attach(mylist)
#figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=2.5, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6, w=6.5, newpage="land")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=2.5, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", FIG=figtrend, h=2.5, w=9)
detach(mylist)
}
doit(run.at)
doit(run.ad)
doit(run.bt)
doit(run.bd)
doit(run.ct)
doit(run.cd)
doit(run.dt)
doit(run.dd1)
doit(run.dd2)
doit(run.dd3)
endrtf()
biglist <- list(run.at, run.ad, run.bt, run.bd, run.ct, run.cd, run.dt, run.dd1, run.dd2, run.dd3)
do.call
lapply(biglist, "$suy")
biglist[[1]]
biglist[[1]]["suy"]
biglist[[1]][["suy"]]
lapply(biglist, "[[", "suy")
unlist(lapply(biglist, "[[", "suy"))
range(unlist(lapply(biglist[c(1, 3, 5, 7)], "[[", "yvar")))
lapply(biglist, "[[", "suy")
lapply(biglist, "[[", "yvar")
lapply(biglist, "[[", "y")
range(unlist(lapply(biglist[c(1, 3, 5, 7)], "[[", "y")))
range(unlist(lapply(biglist[c(2, 4, 6, 8:10)], "[[", "y")))
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
trng <- range(unlist(lapply(biglist[c(1, 3, 5, 7)], "[[", "y")))
drng <- range(unlist(lapply(biglist[c(2, 4, 6, 8:10)], "[[", "y")))
windows()
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(run.at$suy, tapply(run.at$new$yhat, run.at$new$yr, median), xlim=yrrng, ylim=trng, type="o", xlab="Date", ylab=yvarname)
plot(run.at$suy, tapply(run.at$new$yhat, run.at$new$yr, median), xlim=yrrng, ylim=trng, type="o", xlab="Year", ylab="Temperature  (C)")
plot(run.at$suy, tapply(run.at$new$yhat, run.at$new$yr, median), pch="A", xlim=yrrng, ylim=trng, type="o", xlab="Year", ylab="Temperature  (C)")
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(run.at$suy, tapply(run.at$new$yhat, run.at$new$yr, median), pch="A", xlim=yrrng, ylim=trng, type="o", xlab="Year", ylab="Temperature  (C)")
points(run.bt$suy, tapply(run.bt$new$yhat, run.bt$new$yr, median), pch="B", type="o")
points(run.ct$suy, tapply(run.ct$new$yhat, run.ct$new$yr, median), pch="C", type="o")
points(run.dt$suy, tapply(run.dt$new$yhat, run.dt$new$yr, median), pch="D", type="o")
locator()
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(run.at$suy, tapply(run.at$new$yhat, run.at$new$yr, median), pch="A", xlim=yrrng, ylim=c(10, 17), type="o", xlab="Year", ylab="Temperature  (C)")
points(run.bt$suy, tapply(run.bt$new$yhat, run.bt$new$yr, median), pch="B", type="o")
points(run.ct$suy, tapply(run.ct$new$yhat, run.ct$new$yr, median), pch="C", type="o")
points(run.dt$suy, tapply(run.dt$new$yhat, run.dt$new$yr, median), pch="D", type="o")
locator()
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(run.at$suy, tapply(run.at$new$yhat, run.at$new$yr, median), pch="A", xlim=yrrng, ylim=c(10.5, 17), type="o", xlab="Year", ylab="Temperature  (C)")
points(run.bt$suy, tapply(run.bt$new$yhat, run.bt$new$yr, median), pch="B", type="o")
points(run.ct$suy, tapply(run.ct$new$yhat, run.ct$new$yr, median), pch="C", type="o")
points(run.dt$suy, tapply(run.dt$new$yhat, run.dt$new$yr, median), pch="D", type="o")
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(run.at$suy, tapply(run.at$new$yhat, run.at$new$yr, median), pch="A", xlim=yrrng, ylim=c(10.5, 17), type="o", xlab="Year", ylab="Temperature  (C)")
points(run.bt$suy, tapply(run.bt$new$yhat, run.bt$new$yr, median), pch="B", type="o", col=blindcolz[2])
points(run.ct$suy, tapply(run.ct$new$yhat, run.ct$new$yr, median), pch="C", type="o", col=blindcolz[3])
points(run.dt$suy, tapply(run.dt$new$yhat, run.dt$new$yr, median), pch="D", type="o", col=blindcolz[4])
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(run.at$suy, tapply(run.at$new$yhat, run.at$new$yr, median), pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(10.5, 17), xlab="Year", ylab="Temperature  (C)")
points(run.bt$suy, tapply(run.bt$new$yhat, run.bt$new$yr, median), pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, tapply(run.ct$new$yhat, run.ct$new$yr, median), pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, tapply(run.dt$new$yhat, run.dt$new$yr, median), pch="D", type="o", col=blindcolz[5])
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(run.at$suy, tapply(run.at$new$yhat, run.at$new$yr, median), pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(10.5, 17), xlab="Year", ylab="Temperature  (C)")
points(run.bt$suy, tapply(run.bt$new$yhat, run.bt$new$yr, median), pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, tapply(run.ct$new$yhat, run.ct$new$yr, median), pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, tapply(run.dt$new$yhat, run.dt$new$yr, median), pch="D", type="o", col=blindcolz[6])
windows()
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(run.ad$suy, tapply(run.ad$new$yhat, run.ad$new$yr, median), pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=drng, xlab="Year", ylab="Temperature  (C)")
points(run.bd$suy, tapply(run.bd$new$yhat, run.bd$new$yr, median), pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, tapply(run.cd$new$yhat, run.cd$new$yr, median), pch="C", type="o", col=blindcolz[4])
points(run.dd$suy, tapply(run.dd$new$yhat, run.dd$new$yr, median), pch="D", type="o", col=blindcolz[6])
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(run.ad$suy, tapply(run.ad$new$yhat, run.ad$new$yr, median), pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=drng, xlab="Year", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, tapply(run.bd$new$yhat, run.bd$new$yr, median), pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, tapply(run.cd$new$yhat, run.cd$new$yr, median), pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, tapply(run.dd1$new$yhat, run.dd1$new$yr, median), pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, tapply(run.dd2$new$yhat, run.dd2$new$yr, median), pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, tapply(run.dd3$new$yhat, run.dd3$new$yr, median), pch="D", type="o", col=blindcolz[8])
locator()
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(run.ad$suy, tapply(run.ad$new$yhat, run.ad$new$yr, median), pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(7, 12), xlab="Year", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, tapply(run.bd$new$yhat, run.bd$new$yr, median), pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, tapply(run.cd$new$yhat, run.cd$new$yr, median), pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, tapply(run.dd1$new$yhat, run.dd1$new$yr, median), pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, tapply(run.dd2$new$yhat, run.dd2$new$yr, median), pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, tapply(run.dd3$new$yhat, run.dd3$new$yr, median), pch="D", type="o", col=blindcolz[8])
windows()
par(mfrow=c(2, 1), mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(run.at$suy, tapply(run.at$new$yhat, run.at$new$yr, median), pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(10.5, 17), xlab="Year", ylab="Temperature  (C)")
points(run.bt$suy, tapply(run.bt$new$yhat, run.bt$new$yr, median), pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, tapply(run.ct$new$yhat, run.ct$new$yr, median), pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, tapply(run.dt$new$yhat, run.dt$new$yr, median), pch="D", type="o", col=blindcolz[6])
plot(run.ad$suy, tapply(run.ad$new$yhat, run.ad$new$yr, median), pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(7, 12), xlab="Year", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, tapply(run.bd$new$yhat, run.bd$new$yr, median), pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, tapply(run.cd$new$yhat, run.cd$new$yr, median), pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, tapply(run.dd1$new$yhat, run.dd1$new$yr, median), pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, tapply(run.dd2$new$yhat, run.dd2$new$yr, median), pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, tapply(run.dd3$new$yhat, run.dd3$new$yr, median), pch="D", type="o", col=blindcolz[8])
windows()
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(2, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, tapply(run.at$new$yhat, run.at$new$yr, median), pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(10.5, 17), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, tapply(run.bt$new$yhat, run.bt$new$yr, median), pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, tapply(run.ct$new$yhat, run.ct$new$yr, median), pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, tapply(run.dt$new$yhat, run.dt$new$yr, median), pch="D", type="o", col=blindcolz[6])
plot(run.ad$suy, tapply(run.ad$new$yhat, run.ad$new$yr, median), pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(7, 12), xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, tapply(run.bd$new$yhat, run.bd$new$yr, median), pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, tapply(run.cd$new$yhat, run.cd$new$yr, median), pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, tapply(run.dd1$new$yhat, run.dd1$new$yr, median), pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, tapply(run.dd2$new$yhat, run.dd2$new$yr, median), pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, tapply(run.dd3$new$yhat, run.dd3$new$yr, median), pch="D", type="o", col=blindcolz[8])
mtext("Year", side=1, outer=TRUE)
mtext("Year", side=1, outer=TRUE, cex=1.2)
windows()
par(mfrow=c(2, 1), mar=c(3, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, tapply(run.at$new$yhat, run.at$new$yr, median), pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(10.5, 17), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, tapply(run.bt$new$yhat, run.bt$new$yr, median), pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, tapply(run.ct$new$yhat, run.ct$new$yr, median), pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, tapply(run.dt$new$yhat, run.dt$new$yr, median), pch="D", type="o", col=blindcolz[6])
plot(run.ad$suy, tapply(run.ad$new$yhat, run.ad$new$yr, median), pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(7, 12), xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, tapply(run.bd$new$yhat, run.bd$new$yr, median), pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, tapply(run.cd$new$yhat, run.cd$new$yr, median), pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, tapply(run.dd1$new$yhat, run.dd1$new$yr, median), pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, tapply(run.dd2$new$yhat, run.dd2$new$yr, median), pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, tapply(run.dd3$new$yhat, run.dd3$new$yr, median), pch="D", type="o", col=blindcolz[8])
mtext("Year", side=1, outer=TRUE, cex=1.2)
windows()
par(mfrow=c(2, 1), mar=c(2.5, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, tapply(run.at$new$yhat, run.at$new$yr, median), pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(10.5, 17), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, tapply(run.bt$new$yhat, run.bt$new$yr, median), pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, tapply(run.ct$new$yhat, run.ct$new$yr, median), pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, tapply(run.dt$new$yhat, run.dt$new$yr, median), pch="D", type="o", col=blindcolz[6])
plot(run.ad$suy, tapply(run.ad$new$yhat, run.ad$new$yr, median), pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(7, 12), xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, tapply(run.bd$new$yhat, run.bd$new$yr, median), pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, tapply(run.cd$new$yhat, run.cd$new$yr, median), pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, tapply(run.dd1$new$yhat, run.dd1$new$yr, median), pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, tapply(run.dd2$new$yhat, run.dd2$new$yr, median), pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, tapply(run.dd3$new$yhat, run.dd3$new$yr, median), pch="D", type="o", col=blindcolz[8])
mtext("Year", side=1, outer=TRUE, cex=1.2)
suy
yrng
yrrng
paste(yrrng, collapse="-")
head(epasub)
xxx <- doy(epasub$date, "04-01")
windows()
hist(xxx)
hist(xxx, nclass=25)
m1
doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
new
run.at$new
head(run.at$new)
a <- run.at$new
a[a$x2==123]
a[a$x2==123, ]
a$newhat[a$x2==123]
a$yhat[a$x2==123]
head(a)
xxx
table(round(xxx))
sort(table(round(xxx)))
doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
191-183
suy
locator()
locator()
fig <- function() {
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
par(mfrow=c(2, 1), mar=c(2.5, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(10.5, 17), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="D", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(7, 12), xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="D", type="o", col=blindcolz[8])
mtext("Year", side=1, outer=TRUE, cex=1.2)
}
fig()
fig()
windows()
fig()
locator()
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
par(mfrow=c(2, 1), mar=c(2.5, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(10.5, 17), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="D", type="o", col=blindcolz[6])
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
par(mfrow=c(2, 1), mar=c(2.5, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(10.5, 17), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="D", type="o", col=blindcolz[6])
run.bt$suy
run.bt$new$yhat[run.bt$new$x2==123]
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123])
par(mfrow=c(2, 1), mar=c(2.5, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(10.5, 25), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="D", type="o", col=blindcolz[6])
par(mfrow=c(2, 1), mar=c(2.5, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(17, 30), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="D", type="o", col=blindcolz[6])
locator()
par(mfrow=c(2, 1), mar=c(2.5, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18.5, 26.5), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="D", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(7, 12), xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="D", type="o", col=blindcolz[8])
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
par(mfrow=c(2, 1), mar=c(2.5, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18.5, 26.5), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="D", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(5, 11), xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="D", type="o", col=blindcolz[8])
mtext("Year", side=1, outer=TRUE, cex=1.2)
locator()
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
par(mfrow=c(2, 1), mar=c(2.5, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18.5, 26.5), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="D", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 10.5), xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="D", type="o", col=blindcolz[8])
mtext("Year", side=1, outer=TRUE, cex=1.2)
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
par(mfrow=c(2, 1), mar=c(2.5, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18, 26.5), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="D", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 11), xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="D", type="o", col=blindcolz[8])
mtext("Year", side=1, outer=TRUE, cex=1.2)
locator()
locator()
1998-1974
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
#source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
head(epa)
head(dnr)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Temporal Trends in St. Clair River Water Quality Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth (0.01) of a degree,",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (dommglf), lab (domgll), and unspecified (domglu).", 
h=8, w=6.5, newpage="port")
para("Four sites from the St. Clair River were selected for futher analysis, and are identified by the letters A-D,",
" from north to south for convenience (Table ", tabcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = c("A", "B", "C", "D"))
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth (0.01) of a degree.", row.names=FALSE)
para("For each of the four sites, the seasonal patterns in temperature and DO were removed in order to reveal the underlying trend",
" over time.  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.",
"  The predicted value on 1 August of each year was used to represent the trend over time.",
"  The same pattern over time would be generated regardless of the selected date.",
"  Sampling years are largely confounded with sampling locations, with sites B and C sampled",
" during 1963-1973, sites A and D sampled during 1998-2012, and over a 20-year gap in sampling in between (Figure ", figcount, ".")
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="B", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="B", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="C", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="C", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="D", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="D", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
biglist <- list(run.at, run.ad, run.bt, run.bd, run.ct, run.cd, run.dt, run.dd1, run.dd2, run.dd3)
fig <- function() {
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
par(mfrow=c(2, 1), mar=c(2.5, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18, 26.5), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="D", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 11), xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="D", type="o", col=blindcolz[8])
mtext("Year", side=1, outer=TRUE, cex=1.2)
}
figu("Trend over time in EPA temperature and dissolved oxygen data from sites A-D, ", paste(yrrng, collapse="-"), ".", 
"  Values are predictions for 1 August of each year.", h=6, w=9, newpage="land")
para("The remaining figures show the raw data, the seasonal pattern, and the result of the seaonal detrending for each site and response",
" variable.")
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(suy, new$yhat[new$x2==123], type="o", xlab="Year", ylab=yvarname)
}
doit <- function(mylist) {
attach(mylist)
#figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=2.5, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6, w=6.5, newpage="land")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=2.5, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", 
"  Values are predictions for 1 August of each year.", FIG=figtrend, h=2.5, w=9)
detach(mylist)
}
lapply(biglist, doit)
endrtf()
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
#source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
head(epa)
head(dnr)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Temporal Trends in St. Clair River Water Quality Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth (0.01) of a degree,",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (dommglf), lab (domgll), and unspecified (domglu).", 
h=5, w=5)
para("Four sites from the St. Clair River were selected for futher analysis, and are identified by the letters A-D,",
" from north to south for convenience (Table ", tabcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = c("A", "B", "C", "D"))
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth (0.01) of a degree.", row.names=FALSE)
para("For each of the four sites, the seasonal patterns in temperature and DO were removed in order to reveal the underlying trend",
" over time.  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.",
"  The predicted value on 1 August of each year was used to represent the trend over time.",
"  The same pattern over time would be generated regardless of the selected date.",
"  Sampling years are largely confounded with sampling locations, with sites B and C sampled",
" during 1963-1973, sites A and D sampled during 1998-2012, and over a 20-year gap in sampling in between (Figure ", figcount, ".")
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="B", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="B", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="C", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="C", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="D", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="D", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
biglist <- list(run.at, run.ad, run.bt, run.bd, run.ct, run.cd, run.dt, run.dd1, run.dd2, run.dd3)
fig <- function() {
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
par(mfrow=c(2, 1), mar=c(2.5, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18, 26.5), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="D", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 11), xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="D", type="o", col=blindcolz[8])
mtext("Year", side=1, outer=TRUE, cex=1.2)
}
figu("Trend over time in EPA temperature and dissolved oxygen data from sites A-D, ", paste(yrrng, collapse="-"), ".", 
"  Values are predictions for 1 August of each year.", h=5.5, w=9, newpage="land")
para("The remaining figures show the raw data, the seasonal pattern, and the result of the seaonal detrending for each site and response",
" variable.")
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(suy, new$yhat[new$x2==123], type="o", xlab="Year", ylab=yvarname)
}
doit <- function(mylist) {
attach(mylist)
#figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=2.5, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6, w=6.5, newpage="land")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=2.5, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", 
"  Values are predictions for 1 August of each year.", FIG=figtrend, h=2.5, w=9)
detach(mylist)
invisible()
}
lapply(biglist, doit)
endrtf()
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
#source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
head(epa)
head(dnr)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Temporal Trends in St. Clair River Water Quality Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth (0.01) of a degree,",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (domglf), lab (domgll), and unspecified (domglu).", 
h=6.4, w=6.4)
para("Four sites from the St. Clair River were selected for further analysis, and are identified by the letters A-D,",
" from north to south for convenience (Table ", tabcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = c("A", "B", "C", "D"))
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth (0.01) of a degree.", row.names=FALSE)
para("For each of the four sites, the seasonal patterns in temperature and DO were removed in order to reveal the underlying trend",
" over time.  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.",
"  The predicted value on 1 August of each year was used to represent the trend over time.",
"  The same pattern over time would be generated regardless of the selected date.",
"  Sampling years are largely confounded with sampling locations, with sites B and C sampled",
" during 1963-1973, sites A and D sampled during 1998-2012, and over a 20-year gap in sampling in between (Figure ", figcount, ".")
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="B", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="B", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="C", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="C", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="D", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="D", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
biglist <- list(run.at, run.ad, run.bt, run.bd, run.ct, run.cd, run.dt, run.dd1, run.dd2, run.dd3)
fig <- function() {
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
par(mfrow=c(2, 1), mar=c(2.5, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18, 26.5), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="D", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 11), xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="D", type="o", col=blindcolz[8])
mtext("Year", side=1, outer=TRUE, cex=1.2)
}
figu("Trend over time in EPA temperature and dissolved oxygen data from sites A-D, ", paste(yrrng, collapse="-"), ".", 
"  Values are predictions for 1 August of each year.", h=5.5, w=9, newpage="land")
para("The remaining figures show the raw data, the seasonal pattern, and the result of the seasonal detrending for each site and response",
" variable.")
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(suy, new$yhat[new$x2==123], type="o", xlab="Year", ylab=yvarname)
}
doit <- function(mylist) {
attach(mylist)
#figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=2.5, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6, w=6.5, newpage="land")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=2.5, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", 
"  Values are predictions for 1 August of each year.", FIG=figtrend, h=2.5, w=9)
detach(mylist)
invisible()
}
lapply(biglist, doit)
endrtf()
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
#source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
head(epa)
head(dnr)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Temporal Trends in St. Clair River Water Quality Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth (0.01) of a degree,",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (domglf), lab (domgll), and unspecified (domglu).", 
h=6.4, w=6.4)
para("Four sites from the St. Clair River were selected for further analysis, and are identified by the letters A-D,",
" from north to south for convenience (Table ", tabcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = c("A", "B", "C", "D"))
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth (0.01) of a degree.", row.names=FALSE)
para("For each of the four sites, seasonal patterns in temperature and DO were removed to reveal underlying trends over time.",
"  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.",
"  The predicted value on 1 August of each year was used to represent the trend over time.",
"  The same pattern over time would be generated regardless of the selected date.")
para("Sampling years are largely confounded with sampling locations, with sites B and C sampled",
" during 1963-1973, sites A and D sampled during 1998-2012, and over a 20-year gap in sampling in between (Figure ", figcount, ").")
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="B", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="B", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="C", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="C", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="D", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="D", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
biglist <- list(run.at, run.ad, run.bt, run.bd, run.ct, run.cd, run.dt, run.dd1, run.dd2, run.dd3)
fig <- function() {
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
par(mfrow=c(2, 1), mar=c(2.5, 4, 1, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18, 26.5), xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="D", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 11), xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="B", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="C", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="D", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="D", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="D", type="o", col=blindcolz[8])
mtext("Year", side=1, outer=TRUE, cex=1.2)
}
figu("Trend over time in EPA temperature and dissolved oxygen data from sites A-D, ", paste(yrrng, collapse="-"), ".", 
"  Values are predictions for 1 August of each year.", h=5.5, w=9, newpage="land")
para("The remaining figures show the raw data, the seasonal pattern, and the results of the seasonal detrending for each site and response",
" variable.")
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(suy, new$yhat[new$x2==123], type="o", xlab="Year", ylab=yvarname)
}
doit <- function(mylist) {
attach(mylist)
#figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=2.5, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6, w=6.5, newpage="land")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=2.5, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", 
"  Values are predictions for 1 August of each year.", FIG=figtrend, h=2.5, w=9)
detach(mylist)
invisible()
}
lapply(biglist, doit)
endrtf()
invisible(lapply(biglist, doit))
q()
pkgin("jvamisc")
ls()
cleanup()
pkgman("jvamisc")
q()
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
# just keep the epa and dnr objects from the TempDO program
objs <- NA
mobj <- NA
objs <- ls()
mobj <- match(c("epa", "dnr", "objs", "mobj"), objs)
if(any(is.na(mobj))) {
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
rm(list=objs[-mobj])
}
rm(objs, mobj)
head(epa)
head(dnr)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Temporal Trends in St. Clair River Water Quality Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth (0.01) of a degree,",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (domglf), lab (domgll), and unspecified (domglu).", 
h=6.4, w=6.4)
sites4 <- c("A", "D", "F", "G")
para("Four sites from the St. Clair River were selected for further analysis, and are identified by the letters ", 
paste(sites4, collapse=", "), " based on patches of historic larval sea lamprey sampling locations (Table ", 
tabcount, " and Figure ", figcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = sites4)
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth (0.01) of a degree.", row.names=FALSE)
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
source("C:/JVA/GLFC/People/Hinderer/larval.r")
mycolz <- rep(blindcolz[7:2], 5)
ord <- order(-latm.[selc.short])
stz <- LETTERS[1:length(ord)]
stsl <- stz %in% sites4
fig <- function() {
par(mar=c(0, 0, 0, 0))
map(xlim=c(-82.892, -82.352), ylim=c(42.498, 43.034), type="n", mar=c(0, 0, 0, 0))
lines(map5, col="lightgray")
points(allloc$long[selc.long], allloc$lat[selc.long], pch=16, col=mycolz[as.numeric(as.factor(allloc$clust[selc.long]))])
text(lonm.[selc.short][ord]-0.03, latm.[selc.short][ord], stz, cex=1.5, font=2)
text(lonm.[selc.short][ord][!stsl]-0.03 + 0.001, latm.[selc.short][ord][!stsl]-0.0005, stz[!stsl], cex=1.5, font=2, col="gray")
points(epasub$long, epasub$lat, pch=4, lwd=2, cex=3)
}
figu("Patches (< 5 km in diameter) of sampling locations (colored circles) in the St. Clair River with",
" relatively frequent larval sea lamprey survey histories during 1975-2013.  EPA sampling locations in the St. Clair River",
" with more than five years of data for both water temperature and dissolved oxygen (DO) are marked with Xes.",
h=8, w=6.5, newpage="port")
para("For each of the four sites, seasonal patterns in temperature and DO were removed to reveal underlying trends over time.",
"  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.",
"  The predicted value on 1 August of each year was used to represent the trend over time.",
"  The same pattern over time would be generated regardless of the selected date.")
para("Sampling years are largely confounded with sampling locations, with sites D and F sampled",
" during 1963-1973, sites A and G sampled during 1998-2012, and over a 20-year gap in sampling in between (Figure ", figcount, ").")
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="F", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="F", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="G", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="G", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="G", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="G", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
biglist <- list(run.at, run.ad, run.bt, run.bd, run.ct, run.cd, run.dt, run.dd1, run.dd2, run.dd3)
fig <- function() {
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
par(mfrow=c(3, 1), mar=c(0, 4, 0, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18, 26.5), xaxt="n", xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="G", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 11), xaxt="n", xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="G", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="G", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="G", type="o", col=blindcolz[8])
plotblank(xlim=yrrng, ylim=sqrt(range(smry$rat, na.rm=TRUE)), yaxt="n", ylab="Larval density  (#/m2)")
pl <- prettylog(smry$rat, 1, extra=4)
pl <- c(0, 0.01, 0.05, 0.1, 0.2, 0.3)
axis(2, at=sqrt(pl), labels=pl)
for(i in seq(sites4)) {
sell <- smry$cletr==sites4[i]
points(smry$year[sell], sqrt(smry$rat[sell]), pch=sites4[i], type="o", col=blindcolz[i+1])
}
mtext("Year", side=1, outer=TRUE, cex=1.2)
}
figu("Trend over time in EPA temperature, EPA dissolved oxygen, and FWS/DFO larval sea lamprey data from sites ", 
paste(sites4, collapse=", "), ", ", paste(yrrng, collapse="-"), ".", 
"  Water quality values are predictions for 1 August of each year.", h=5.5, w=9, newpage="land")
para("The remaining figures show the raw data, the seasonal pattern, and the results of the seasonal detrending for each site and response",
" variable.")
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(suy, new$yhat[new$x2==123], type="o", xlab="Year", ylab=yvarname)
}
doit <- function(mylist) {
attach(mylist)
#figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=2.5, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6, w=6.5, newpage="land")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=2.5, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", 
"  Values are predictions for 1 August of each year.", FIG=figtrend, h=2.5, w=9)
detach(mylist)
}
invisible(lapply(biglist, doit))
endrtf()
ls()
cleanup()
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
# just keep the epa and dnr objects from the TempDO program
objs <- NA
mobj <- NA
objs <- ls()
mobj <- match(c("epa", "dnr", "objs", "mobj"), objs)
any(is.na(mobj))
mobj
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
mobj <- match(c("epa", "dnr", "objs", "mobj"), objs)
objs[-mobj]
mobj
objs <- ls()
mobj <- match(c("epa", "dnr", "objs", "mobj"), objs)
objs[-mobj]
rm(list=objs[-mobj])
ls()
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
# just keep the epa and dnr objects from the TempDO program
objs <- NA
mobj <- NA
objs <- ls()
mobj <- match(c("epa", "dnr", "objs", "mobj"), objs)
if(any(is.na(mobj))) {
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
objs <- ls()
mobj <- match(c("epa", "dnr", "objs", "mobj"), objs)
rm(list=objs[-mobj])
}
rm(objs, mobj)
head(epa)
head(dnr)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Temporal Trends in St. Clair River Water Quality Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth (0.01) of a degree,",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (domglf), lab (domgll), and unspecified (domglu).", 
h=6.4, w=6.4)
sites4 <- c("A", "D", "F", "G")
para("Four sites from the St. Clair River were selected for further analysis, and are identified by the letters ", 
paste(sites4, collapse=", "), " based on patches of historic larval sea lamprey sampling locations (Table ", 
tabcount, " and Figure ", figcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = sites4)
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth (0.01) of a degree.", row.names=FALSE)
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
source("C:/JVA/GLFC/People/Hinderer/larval.r")
mycolz <- rep(blindcolz[7:2], 5)
ord <- order(-latm.[selc.short])
stz <- LETTERS[1:length(ord)]
stsl <- stz %in% sites4
fig <- function() {
par(mar=c(0, 0, 0, 0))
map(xlim=c(-82.892, -82.352), ylim=c(42.498, 43.034), type="n", mar=c(0, 0, 0, 0))
lines(map5, col="lightgray")
points(allloc$long[selc.long], allloc$lat[selc.long], pch=16, col=mycolz[as.numeric(as.factor(allloc$clust[selc.long]))])
text(lonm.[selc.short][ord]-0.03, latm.[selc.short][ord], stz, cex=1.5, font=2)
text(lonm.[selc.short][ord][!stsl]-0.03 + 0.001, latm.[selc.short][ord][!stsl]-0.0005, stz[!stsl], cex=1.5, font=2, col="gray")
points(epasub$long, epasub$lat, pch=4, lwd=2, cex=3)
}
figu("Patches (< 5 km in diameter) of sampling locations (colored circles) in the St. Clair River with",
" relatively frequent larval sea lamprey survey histories during 1975-2013.  EPA sampling locations in the St. Clair River",
" with more than five years of data for both water temperature and dissolved oxygen (DO) are marked with Xes.",
h=8, w=6.5, newpage="port")
para("For each of the four sites, seasonal patterns in temperature and DO were removed to reveal underlying trends over time.",
"  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.",
"  The predicted value on 1 August of each year was used to represent the trend over time.",
"  The same pattern over time would be generated regardless of the selected date.")
para("Sampling years are largely confounded with sampling locations, with sites D and F sampled",
" during 1963-1973, sites A and G sampled during 1998-2012, and over a 20-year gap in sampling in between (Figure ", figcount, ").")
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="F", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="F", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="G", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="G", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="G", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="G", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
biglist <- list(run.at, run.ad, run.bt, run.bd, run.ct, run.cd, run.dt, run.dd1, run.dd2, run.dd3)
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
fig <- function() {
par(mfrow=c(3, 1), mar=c(0, 4, 0, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18, 26.5), xaxt="n", xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="G", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 11), xaxt="n", xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="G", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="G", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="G", type="o", col=blindcolz[8])
plotblank(xlim=yrrng, ylim=sqrt(range(smry$rat, na.rm=TRUE)), yaxt="n", ylab="Larval density  (#/m2)")
pl <- prettylog(smry$rat, 1, extra=4)
pl <- c(0, 0.01, 0.05, 0.1, 0.2, 0.3)
axis(2, at=sqrt(pl), labels=pl)
for(i in seq(sites4)) {
sell <- smry$cletr==sites4[i]
points(smry$year[sell], sqrt(smry$rat[sell]), pch=sites4[i], type="o", col=blindcolz[i+1])
}
mtext("Year", side=1, outer=TRUE, cex=1.2)
}
figu("Trend over time in EPA temperature, EPA dissolved oxygen, and FWS/DFO larval sea lamprey data from sites ", 
paste(sites4, collapse=", "), ", ", paste(yrrng, collapse="-"), ".", 
"  Water quality values are predictions for 1 August of each year.", h=5.5, w=9, newpage="land")
para("The remaining figures show the raw data, the seasonal pattern, and the results of the seasonal detrending for each site and response",
" variable.")
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(suy, new$yhat[new$x2==123], type="o", xlab="Year", ylab=yvarname)
}
doit <- function(mylist) {
attach(mylist)
#figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=2.5, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6, w=6.5, newpage="land")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=2.5, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", 
"  Values are predictions for 1 August of each year.", FIG=figtrend, h=2.5, w=9)
detach(mylist)
}
invisible(lapply(biglist, doit))
endrtf()
cleanup()
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
# just keep the epa and dnr objects from the TempDO program
objs <- NA
mobj <- NA
objs <- ls()
mobj <- match(c("epa", "dnr", "objs", "mobj", "dir"), objs)
if(any(is.na(mobj))) {
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
objs <- ls()
mobj <- match(c("epa", "dnr", "objs", "mobj"), objs)
rm(list=objs[-mobj])
}
rm(objs, mobj)
head(epa)
head(dnr)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Temporal Trends in St. Clair River Water Quality Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth (0.01) of a degree,",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (domglf), lab (domgll), and unspecified (domglu).", 
h=6.4, w=6.4)
sites4 <- c("A", "D", "F", "G")
para("Four sites from the St. Clair River were selected for further analysis, and are identified by the letters ", 
paste(sites4, collapse=", "), " based on patches of historic larval sea lamprey sampling locations (Table ", 
tabcount, " and Figure ", figcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = sites4)
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth (0.01) of a degree.", row.names=FALSE)
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
source("C:/JVA/GLFC/People/Hinderer/larval.r")
mycolz <- rep(blindcolz[7:2], 5)
ord <- order(-latm.[selc.short])
stz <- LETTERS[1:length(ord)]
stsl <- stz %in% sites4
fig <- function() {
par(mar=c(0, 0, 0, 0))
map(xlim=c(-82.892, -82.352), ylim=c(42.498, 43.034), type="n", mar=c(0, 0, 0, 0))
lines(map5, col="lightgray")
points(allloc$long[selc.long], allloc$lat[selc.long], pch=16, col=mycolz[as.numeric(as.factor(allloc$clust[selc.long]))])
text(lonm.[selc.short][ord]-0.03, latm.[selc.short][ord], stz, cex=1.5, font=2)
text(lonm.[selc.short][ord][!stsl]-0.03 + 0.001, latm.[selc.short][ord][!stsl]-0.0005, stz[!stsl], cex=1.5, font=2, col="gray")
points(epasub$long, epasub$lat, pch=4, lwd=2, cex=3)
}
figu("Patches (< 5 km in diameter) of sampling locations (colored circles) in the St. Clair River with",
" relatively frequent larval sea lamprey survey histories during 1975-2013.  EPA sampling locations in the St. Clair River",
" with more than five years of data for both water temperature and dissolved oxygen (DO) are marked with Xes.",
h=8, w=6.5, newpage="port")
para("For each of the four sites, seasonal patterns in temperature and DO were removed to reveal underlying trends over time.",
"  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.",
"  The predicted value on 1 August of each year was used to represent the trend over time.",
"  The same pattern over time would be generated regardless of the selected date.")
para("Sampling years are largely confounded with sampling locations, with sites D and F sampled",
" during 1963-1973, sites A and G sampled during 1998-2012, and over a 20-year gap in sampling in between (Figure ", figcount, ").")
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="F", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="F", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="G", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="G", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="G", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="G", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
biglist <- list(run.at, run.ad, run.bt, run.bd, run.ct, run.cd, run.dt, run.dd1, run.dd2, run.dd3)
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
fig <- function() {
par(mfrow=c(3, 1), mar=c(0, 4, 0, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18, 26.5), xaxt="n", xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="G", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 11), xaxt="n", xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="G", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="G", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="G", type="o", col=blindcolz[8])
plotblank(xlim=yrrng, ylim=sqrt(range(smry$rat, na.rm=TRUE)), yaxt="n", ylab="Larval density  (#/m2)")
pl <- prettylog(smry$rat, 1, extra=4)
pl <- c(0, 0.01, 0.05, 0.1, 0.2, 0.3)
axis(2, at=sqrt(pl), labels=pl)
for(i in seq(sites4)) {
sell <- smry$cletr==sites4[i]
points(smry$year[sell], sqrt(smry$rat[sell]), pch=sites4[i], type="o", col=blindcolz[i+1])
}
mtext("Year", side=1, outer=TRUE, cex=1.2)
}
figu("Trend over time in EPA temperature, EPA dissolved oxygen, and FWS/DFO larval sea lamprey data from sites ", 
paste(sites4, collapse=", "), ", ", paste(yrrng, collapse="-"), ".", 
"  Water quality values are predictions for 1 August of each year.", h=5.5, w=9, newpage="land")
para("The remaining figures show the raw data, the seasonal pattern, and the results of the seasonal detrending for each site and response",
" variable.")
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(suy, new$yhat[new$x2==123], type="o", xlab="Year", ylab=yvarname)
}
doit <- function(mylist) {
attach(mylist)
#figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=2.5, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6, w=6.5, newpage="land")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=2.5, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", 
"  Values are predictions for 1 August of each year.", FIG=figtrend, h=2.5, w=9)
detach(mylist)
}
invisible(lapply(biglist, doit))
endrtf()
# just keep the epa and dnr objects from the TempDO program
objs <- NA
mobj <- NA
objs <- ls()
need <- c("epa", "dnr", "objs", "mobj", "dir")
mobj <- match(need, objs)
if(any(is.na(mobj))) {
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
objs <- ls()
mobj <- match(need, objs)
rm(list=objs[-mobj])
}
rm(objs, mobj)
search()
detach()
cleanup()
# just keep the epa and dnr objects from the TempDO program
objs <- NA
mobj <- NA
objs <- ls()
need <- c("epa", "dnr", "objs", "mobj", "dir")
mobj <- match(need, objs)
if(any(is.na(mobj))) {
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
objs <- ls()
mobj <- match(need, objs)
rm(list=objs[-mobj])
}
rm(objs, mobj)
# just keep the epa and dnr objects from the TempDO program
objs <- NA
mobj <- NA
objs <- ls()
need <- c("epa", "dnr", "objs", "mobj", "dir")
mobj <- match(need, objs)
if(any(is.na(mobj))) {
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
objs <- ls()
mobj <- match(need, objs)
rm(list=objs[-mobj])
}
rm(objs, mobj)
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
# just keep the epa and dnr objects from the TempDO program
objs <- NA
mobj <- NA
objs <- ls()
need <- c("epa", "dnr", "objs", "mobj", "dir")
mobj <- match(need, objs)
if(any(is.na(mobj))) {
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
objs <- ls()
mobj <- match(need, objs)
rm(list=objs[-mobj])
}
rm(objs, mobj)
head(epa)
head(dnr)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Temporal Trends in St. Clair River Water Quality Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth (0.01) of a degree,",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (domglf), lab (domgll), and unspecified (domglu).", 
h=6.4, w=6.4)
sites4 <- c("A", "D", "F", "G")
para("Four sites from the St. Clair River were selected for further analysis, and are identified by the letters ", 
paste(sites4, collapse=", "), " based on patches of historic larval sea lamprey sampling locations (Table ", 
tabcount, " and Figure ", figcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = sites4)
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth (0.01) of a degree.", row.names=FALSE)
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
source("C:/JVA/GLFC/People/Hinderer/larval.r")
mycolz <- rep(blindcolz[7:2], 5)
ord <- order(-latm.[selc.short])
stz <- LETTERS[1:length(ord)]
stsl <- stz %in% sites4
fig <- function() {
par(mar=c(0, 0, 0, 0))
map(xlim=c(-82.892, -82.352), ylim=c(42.498, 43.034), type="n", mar=c(0, 0, 0, 0))
lines(map5, col="lightgray")
points(allloc$long[selc.long], allloc$lat[selc.long], pch=16, col=mycolz[as.numeric(as.factor(allloc$clust[selc.long]))])
text(lonm.[selc.short][ord]-0.03, latm.[selc.short][ord], stz, cex=1.5, font=2)
text(lonm.[selc.short][ord][!stsl]-0.03 + 0.001, latm.[selc.short][ord][!stsl]-0.0005, stz[!stsl], cex=1.5, font=2, col="gray")
points(epasub$long, epasub$lat, pch=4, lwd=2, cex=3)
}
figu("Patches (< 5 km in diameter) of sampling locations (colored circles) in the St. Clair River with",
" relatively frequent larval sea lamprey survey histories during 1975-2013.  EPA sampling locations in the St. Clair River",
" with more than five years of data for both water temperature and dissolved oxygen (DO) are marked with Xes.",
h=8, w=6.5, newpage="port")
para("For each of the four sites, seasonal patterns in temperature and DO were removed to reveal underlying trends over time.",
"  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.",
"  The predicted value on 1 August of each year was used to represent the trend over time.",
"  The same pattern over time would be generated regardless of the selected date.")
para("Sampling years are largely confounded with sampling locations, with sites D and F sampled",
" during 1963-1973, sites A and G sampled during 1998-2012, and over a 20-year gap in sampling in between (Figure ", figcount, ").")
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="F", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="F", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="G", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="G", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="G", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="G", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
biglist <- list(run.at, run.ad, run.bt, run.bd, run.ct, run.cd, run.dt, run.dd1, run.dd2, run.dd3)
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
fig <- function() {
par(mfrow=c(3, 1), mar=c(0, 4, 0, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18, 26.5), xaxt="n", xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="G", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 11), xaxt="n", xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="G", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="G", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="G", type="o", col=blindcolz[8])
plotblank(xlim=yrrng, ylim=sqrt(range(smry$rat, na.rm=TRUE)), yaxt="n", ylab="Larval density  (#/m2)")
pl <- prettylog(smry$rat, 1, extra=4)
pl <- c(0, 0.01, 0.05, 0.1, 0.2, 0.3)
axis(2, at=sqrt(pl), labels=pl)
for(i in seq(sites4)) {
sell <- smry$cletr==sites4[i]
points(smry$year[sell], sqrt(smry$rat[sell]), pch=sites4[i], type="o", col=blindcolz[i+1])
}
mtext("Year", side=1, outer=TRUE, cex=1.2)
}
figu("Trend over time in EPA temperature, EPA dissolved oxygen, and FWS/DFO larval sea lamprey data from sites ", 
paste(sites4, collapse=", "), ", ", paste(yrrng, collapse="-"), ".", 
"  Water quality values are predictions for 1 August of each year.", h=5.5, w=9, newpage="land")
para("The remaining figures show the raw data, the seasonal pattern, and the results of the seasonal detrending for each site and response",
" variable.")
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(suy, new$yhat[new$x2==123], type="o", xlab="Year", ylab=yvarname)
}
doit <- function(mylist) {
attach(mylist)
#figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=2.5, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6, w=6.5, newpage="land")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=2.5, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", 
"  Values are predictions for 1 August of each year.", FIG=figtrend, h=2.5, w=9)
detach(mylist)
}
invisible(lapply(biglist, doit))
endrtf()
cleanup()
# just keep the epa and dnr objects from the TempDO program
objs <- NA
mobj <- NA
objs <- ls()
need <- c("epa", "dnr", "objs", "mobj", "dir", "longr", "latr")
mobj <- match(need, objs)
if(any(is.na(mobj))) {
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
objs <- ls()
mobj <- match(need, objs)
rm(list=objs[-mobj])
}
rm(objs, mobj)
# just keep the epa and dnr objects from the TempDO program
objs <- NA
mobj <- NA
objs <- ls()
need <- c("epa", "dnr", "objs", "mobj", "dir", "longr", "latr")
mobj <- match(need, objs)
if(any(is.na(mobj))) {
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
objs <- ls()
mobj <- match(need, objs)
rm(list=objs[-mobj])
}
rm(objs, mobj)
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
# just keep the epa and dnr objects from the TempDO program
objs <- NA
mobj <- NA
objs <- ls()
need <- c("epa", "dnr", "objs", "mobj", "dir", "longr", "latr")
mobj <- match(need, objs)
if(any(is.na(mobj))) {
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
objs <- ls()
mobj <- match(need, objs)
rm(list=objs[-mobj])
}
rm(objs, mobj)
head(epa)
head(dnr)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Temporal Trends in St. Clair River Water Quality Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 17 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth (0.01) of a degree,",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (domglf), lab (domgll), and unspecified (domglu).", 
h=6.4, w=6.4)
sites4 <- c("A", "D", "F", "G")
para("Four sites from the St. Clair River were selected for further analysis, and are identified by the letters ", 
paste(sites4, collapse=", "), " based on patches of historic larval sea lamprey sampling locations (Table ", 
tabcount, " and Figure ", figcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = sites4)
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth (0.01) of a degree.", row.names=FALSE)
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
source("C:/JVA/GLFC/People/Hinderer/larval.r")
mycolz <- rep(blindcolz[7:2], 5)
ord <- order(-latm.[selc.short])
stz <- LETTERS[1:length(ord)]
stsl <- stz %in% sites4
fig <- function() {
par(mar=c(0, 0, 0, 0))
map(xlim=c(-82.892, -82.352), ylim=c(42.498, 43.034), type="n", mar=c(0, 0, 0, 0))
lines(map5, col="lightgray")
points(allloc$long[selc.long], allloc$lat[selc.long], pch=16, col=mycolz[as.numeric(as.factor(allloc$clust[selc.long]))])
text(lonm.[selc.short][ord]-0.03, latm.[selc.short][ord], stz, cex=1.5, font=2)
text(lonm.[selc.short][ord][!stsl]-0.03 + 0.001, latm.[selc.short][ord][!stsl]-0.0005, stz[!stsl], cex=1.5, font=2, col="gray")
points(epasub$long, epasub$lat, pch=4, lwd=2, cex=3)
}
figu("Patches (< 5 km in diameter) of sampling locations (colored circles) in the St. Clair River with",
" relatively frequent larval sea lamprey survey histories during 1975-2013.  EPA sampling locations in the St. Clair River",
" with more than five years of data for both water temperature and dissolved oxygen (DO) are marked with Xes.",
h=8, w=6.5, newpage="port")
para("For each of the four sites, seasonal patterns in temperature and DO were removed to reveal underlying trends over time.",
"  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.",
"  The predicted value on 1 August of each year was used to represent the trend over time.",
"  The same pattern over time would be generated regardless of the selected date.")
para("Sampling years are largely confounded with sampling locations, with sites D and F sampled",
" during 1963-1973, sites A and G sampled during 1998-2012, and over a 20-year gap in sampling in between (Figure ", figcount, ").")
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="F", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="F", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="G", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="G", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="G", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="G", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
biglist <- list(run.at, run.ad, run.bt, run.bd, run.ct, run.cd, run.dt, run.dd1, run.dd2, run.dd3)
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
fig <- function() {
par(mfrow=c(3, 1), mar=c(0, 4, 0, 1), oma=c(1, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18, 26.5), xaxt="n", xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="G", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 11), xaxt="n", xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="G", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="G", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="G", type="o", col=blindcolz[8])
plotblank(xlim=yrrng, ylim=sqrt(range(smry$rat, na.rm=TRUE)), yaxt="n", ylab="Larval density  (#/m2)")
pl <- prettylog(smry$rat, 1, extra=4)
pl <- c(0, 0.01, 0.05, 0.1, 0.2, 0.3)
axis(2, at=sqrt(pl), labels=pl)
for(i in seq(sites4)) {
sell <- smry$cletr==sites4[i]
points(smry$year[sell], sqrt(smry$rat[sell]), pch=sites4[i], type="o", col=blindcolz[i+1])
}
mtext("Year", side=1, outer=TRUE, cex=1.2)
}
figu("Trend over time in EPA temperature, EPA dissolved oxygen, and FWS/DFO larval sea lamprey data from sites ", 
paste(sites4, collapse=", "), ", ", paste(yrrng, collapse="-"), ".", 
"  Water quality values are predictions for 1 August of each year.", h=5.5, w=9, newpage="land")
para("The remaining figures show the raw data, the seasonal pattern, and the results of the seasonal detrending for each site and response",
" variable.")
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(suy, new$yhat[new$x2==123], type="o", xlab="Year", ylab=yvarname)
}
doit <- function(mylist) {
attach(mylist)
#figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=2.5, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6, w=6.5, newpage="land")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=2.5, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", 
"  Values are predictions for 1 August of each year.", FIG=figtrend, h=2.5, w=9)
detach(mylist)
}
invisible(lapply(biglist, doit))
endrtf()
par(mfrow=c(3, 1), mar=c(0, 4, 0, 1), oma=c(4, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18, 26.5), xaxt="n", xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="G", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 11), xaxt="n", xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="G", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="G", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="G", type="o", col=blindcolz[8])
plotblank(xlim=yrrng, ylim=sqrt(range(smry$rat, na.rm=TRUE)), axes=FALSE, ylab="Larval density  (#/m2)")
axis(1, outer=TRUE)
pl <- prettylog(smry$rat, 1, extra=4)
pl <- c(0, 0.01, 0.05, 0.1, 0.2, 0.3)
axis(2, at=sqrt(pl), labels=pl)
for(i in seq(sites4)) {
sell <- smry$cletr==sites4[i]
points(smry$year[sell], sqrt(smry$rat[sell]), pch=sites4[i], type="o", col=blindcolz[i+1])
}
mtext("Year", side=1, outer=TRUE, line=3, cex=1.2)
windows()
par(mfrow=c(3, 1), mar=c(0, 4, 0, 1), oma=c(4, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18, 26.5), xaxt="n", xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="G", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 11), xaxt="n", xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="G", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="G", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="G", type="o", col=blindcolz[8])
plotblank(xlim=yrrng, ylim=sqrt(range(smry$rat, na.rm=TRUE)), axes=FALSE, ylab="Larval density  (#/m2)")
axis(1, outer=TRUE)
pl <- prettylog(smry$rat, 1, extra=4)
pl <- c(0, 0.01, 0.05, 0.1, 0.2, 0.3)
axis(2, at=sqrt(pl), labels=pl)
for(i in seq(sites4)) {
sell <- smry$cletr==sites4[i]
points(smry$year[sell], sqrt(smry$rat[sell]), pch=sites4[i], type="o", col=blindcolz[i+1])
}
mtext("Year", side=1, outer=TRUE, line=3, cex=1.2)
locator()
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
# just keep the epa and dnr objects from the TempDO program
objs <- NA
mobj <- NA
objs <- ls()
need <- c("epa", "dnr", "objs", "mobj", "dir", "longr", "latr")
mobj <- match(need, objs)
if(any(is.na(mobj))) {
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
objs <- ls()
mobj <- match(need, objs)
rm(list=objs[-mobj])
}
rm(objs, mobj)
head(epa)
head(dnr)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Temporal Trends in St. Clair River Water Quality Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 18 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth (0.01) of a degree,",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (domglf), lab (domgll), and unspecified (domglu).", 
h=6.4, w=6.4)
sites4 <- c("A", "D", "F", "G")
para("Four sites from the St. Clair River were selected for further analysis, and are identified by the letters ", 
paste(sites4, collapse=", "), " based on patches of historic larval sea lamprey sampling locations (Table ", 
tabcount, " and Figure ", figcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = sites4)
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth (0.01) of a degree.", row.names=FALSE)
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
source("C:/JVA/GLFC/People/Hinderer/larval.r")
mycolz <- rep(blindcolz[7:2], 5)
ord <- order(-latm.[selc.short])
stz <- LETTERS[1:length(ord)]
stsl <- stz %in% sites4
fig <- function() {
par(mar=c(0, 0, 0, 0))
map(xlim=c(-82.892, -82.352), ylim=c(42.498, 43.034), type="n", mar=c(0, 0, 0, 0))
lines(map5, col="lightgray")
points(allloc$long[selc.long], allloc$lat[selc.long], pch=16, col=mycolz[as.numeric(as.factor(allloc$clust[selc.long]))])
text(lonm.[selc.short][ord]-0.03, latm.[selc.short][ord], stz, cex=1.5, font=2)
text(lonm.[selc.short][ord][!stsl]-0.03 + 0.001, latm.[selc.short][ord][!stsl]-0.0005, stz[!stsl], cex=1.5, font=2, col="gray")
points(epasub$long, epasub$lat, pch=4, lwd=2, cex=3)
}
figu("Patches (< 5 km in diameter) of sampling locations (colored circles) in the St. Clair River with",
" relatively frequent larval sea lamprey survey histories during 1975-2013.  Each EPA sampling location in the St. Clair River",
" with more than five years of data for both water temperature and dissolved oxygen (DO) is marked with an X.",
h=8, w=6.5, newpage="port")
para("For each of the four sites, seasonal patterns in temperature and DO were removed to reveal underlying trends over time.",
"  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.",
"  The predicted value on 1 August of each year was used to represent the trend over time.",
"  (The selected date is arbitrary, any date would give the same pattern over time.)")
para("Sampling years are largely confounded with sampling locations for the water quality data, with sites D and F sampled",
" during 1963-1973, sites A and G sampled during 1998-2012, and over a 20-year gap in sampling in between (Figure ", figcount, ").",
"  Larval sea lamprey data (at least as far as I know) is unavailable prior to 1975.")
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="F", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="F", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="G", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="G", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="G", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="G", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
biglist <- list(run.at, run.ad, run.bt, run.bd, run.ct, run.cd, run.dt, run.dd1, run.dd2, run.dd3)
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
fig <- function() {
par(mfrow=c(3, 1), mar=c(0, 4, 0, 1), oma=c(4, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18, 26.5), xaxt="n", xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="G", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 11), xaxt="n", xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="G", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="G", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="G", type="o", col=blindcolz[8])
plotblank(xlim=yrrng, ylim=sqrt(range(smry$rat, na.rm=TRUE)), axes=FALSE, ylab="Larval density  (#/m2)")
axis(1, outer=TRUE)
pl <- prettylog(smry$rat, 1, extra=4)
pl <- c(0, 0.01, 0.05, 0.1, 0.2, 0.3)
axis(2, at=sqrt(pl), labels=pl)
box()
for(i in seq(sites4)) {
sell <- smry$cletr==sites4[i]
points(smry$year[sell], sqrt(smry$rat[sell]), pch=sites4[i], type="o", col=blindcolz[c(2, 3, 4, 6)][i])
}
mtext("Year", side=1, outer=TRUE, line=3, cex=1.2)
}
figu("Trend over time in EPA temperature, EPA dissolved oxygen, and FWS/DFO larval sea lamprey data from sites ", 
paste(sites4, collapse=", "), ", ", paste(yrrng, collapse="-"), ".", 
"  Water quality values are predictions for 1 August of each year.", h=5.5, w=9, newpage="land")
para("The remaining figures show the raw data, the seasonal pattern, and the results of the seasonal detrending for each site and response",
" variable.")
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(suy, new$yhat[new$x2==123], type="o", xlab="Year", ylab=yvarname)
}
doit <- function(mylist) {
attach(mylist)
#figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=2.5, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=6, w=6.5, newpage="land")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=2.5, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", 
"  Values are predictions for 1 August of each year.", FIG=figtrend, h=2.5, w=9)
detach(mylist)
}
invisible(lapply(biglist, doit))
endrtf()
cleanup()
q()
# C:\JVA\GLFC\People\Hinderer\Temporal.r
# best temporal data on the St. Clair River comes from the EPA (DO and water temperature).
# DNR has one long time series of temperature data on the SCR, but no DO.
# just keep the epa and dnr objects from the TempDO program
objs <- NA
mobj <- NA
objs <- ls()
need <- c("epa", "dnr", "objs", "mobj", "dir", "longr", "latr")
mobj <- match(need, objs)
if(any(is.na(mobj))) {
source("C:/JVA/GLFC/People/Hinderer/TempDO v5.r")
objs <- ls()
mobj <- match(need, objs)
rm(list=objs[-mobj])
}
rm(objs, mobj)
head(epa)
head(dnr)
doc <- startrtf(file="Temporal.doc", dir=dir)
heading("Temporal Trends in St. Clair River Water Quality Data")
heading("For Julie Hinderer", 2)
heading("Jean V. Adams - 18 Nov 2014", 2)
para("Based on initial explorations of the water quality data gathered from various sources,",
" only EPA had repeated sampling of both water temperature (temp.) and dissolved oxygen (DO) at a single site over time.",
"  I rounded off the latitude and longitude of each sample location to the nearest hundredth (0.01) of a degree,",
" and counted the number of years with both temp. and DO data.",
"  All those sites with more than five years of data were identified (Figure ", figcount, ").")
lookseries <- function(df, var1, var2, roundto=2, cut=5) {
x <- round(df$long, roundto)
y <- round(df$lat, roundto)
z <- df$year
v1 <- df[, var1]
v2 <- df[, var2]
mv1 <- aggregate(v1 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv2 <- aggregate(v2 ~ x + y + z, FUN=mean, na.rm=TRUE)
mv <- merge(mv1, mv2)
mv$dummy <- 1
mv <- mv[!is.na(mv$v1) & !is.na(mv$v2), ]
m2 <- aggregate(dummy ~ x + y, FUN=sum, data=mv)
m3 <- m2[m2$dummy > cut, ]
map(xlim=longr, ylim=latr, type="n", mar=c(1, 2, 1, 2))
lines(map5, col="lightgray")
points(m3$x, m3$y, pch=21, bg="red")
mtext(paste0(var1, "&\n", var2), side=3, line=-5, adj=0, cex=1.2)
par(xpd=NA)
text(m3$x, m3$y, m3$dummy, cex=m3$dummy/5, pos=4)
par(xpd=FALSE)
print(m3)
list(mv, m3)
}
fig <- function() {
par(mfrow=c(2, 2))
l1 <<- lookseries(epa, "tempc", "domglf")
l2 <<- lookseries(epa, "tempc", "domgll")
l3 <<- lookseries(epa, "tempc", "domglu")
}
figu("EPA sampling locations with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Numbers on map indicate number of years of data at that location.",
"  A separate map is drawn for each type of DO measurement, field (domglf), lab (domgll), and unspecified (domglu).", 
h=6.4, w=6.4)
sites4 <- c("A", "D", "F", "G")
para("Four sites from the St. Clair River were selected for further analysis, and are identified by the letters ", 
paste(sites4, collapse=", "), " based on patches of historic larval sea lamprey sampling locations (Table ", 
tabcount, " and Figure ", figcount, ").")
sitez <- data.frame(
rlat  = c( 43.00,  42.82,  42.71,  42.65), 
rlong = c(-82.42, -82.49, -82.49, -82.51), 
site = sites4)
tab <- format(sitez[, c(3, 1, 2)])
tabl("EPA sampling locations in the St. Clair River with more than five years of data for both water temperature and dissolved oxygen (DO).",
"  Latitude and longitude rounded to the nearest hundredth (0.01) of a degree.", row.names=FALSE)
epa$rlat <- round(epa$lat, 2)
epa$rlong <- round(epa$long, 2)
epasub <- merge(epa, sitez)
source("C:/JVA/GLFC/People/Hinderer/larval.r")
mycolz <- rep(blindcolz[7:2], 5)
ord <- order(-latm.[selc.short])
stz <- LETTERS[1:length(ord)]
stsl <- stz %in% sites4
fig <- function() {
par(mar=c(0, 0, 0, 0))
map(xlim=c(-82.892, -82.352), ylim=c(42.498, 43.034), type="n", mar=c(0, 0, 0, 0))
lines(map5, col="lightgray")
points(allloc$long[selc.long], allloc$lat[selc.long], pch=16, col=mycolz[as.numeric(as.factor(allloc$clust[selc.long]))])
text(lonm.[selc.short][ord]-0.03, latm.[selc.short][ord], stz, cex=1.5, font=2)
text(lonm.[selc.short][ord][!stsl]-0.03 + 0.001, latm.[selc.short][ord][!stsl]-0.0005, stz[!stsl], cex=1.5, font=2, col="gray")
points(epasub$long, epasub$lat, pch=4, lwd=2, cex=3)
}
figu("Patches (< 5 km in diameter) of sampling locations (colored circles) in the St. Clair River with",
" relatively frequent larval sea lamprey survey histories during 1975-2013.  Each EPA sampling location in the St. Clair River",
" with more than five years of data for both water temperature and dissolved oxygen (DO) is marked with an X.",
h=8, w=6.5, newpage="port")
para("For each of the four sites, seasonal patterns in temperature and DO were removed to reveal underlying trends over time.",
"  A generalized additive model (gam) was fit to the data, with either temperature or DO as the response,",
" year as a categorical variable, and a smooth term for the day of the year.",
"  The predicted value on 1 August of each year was used to represent the trend over time.",
"  (The selected date is arbitrary, any date would give the same pattern over time.)")
para("Sampling years are largely confounded with sampling locations for the water quality data, with sites D and F sampled",
" during 1963-1973, sites A and G sampled during 1998-2012, and over a 20-year gap in sampling in between (Figure ", figcount, ").",
"  Larval sea lamprey data (at least as far as I know) is unavailable prior to 1975.")
dataprep <- function(picksite, yvar, yvarname, desc) {
df <- epasub[epasub$site==picksite, ]
df <- df[order(df$date), ]
y <- df[, yvar]
aprday <- doy(df$date, "04-01")
m1 <- doy(as.Date(paste("2000", 1:12, "01", sep="-")), "04-01")
m15 <- doy(as.Date(paste("2000", 1:12, "15", sep="-")), "04-01")
sel <- !is.na(df$date) & !is.na(y)
x1 <- as.Date(df$date[sel])
x2 <- aprday[sel]
yr <- df$year[sel]
suy <- sort(unique(yr))
y <- y[sel]
# seasonal pattern
fit <- gam(y ~ s(x2) + as.factor(yr))
new <- expand.grid(x2=ceiling(min(x2)):floor(max(x2)), yr=suy)
new$date <- as.Date(paste0(new$yr, "-04-01")) + new$x2
new$yhat <- predict(fit, newdata=new)
list(picksite=picksite, y=y, x1=x1, x2=x2, yvarname=yvarname, desc=desc, m1=m1, m15=m15, new=new, suy=suy)
}
run.at <- dataprep(picksite="A", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.ad <- dataprep(picksite="A", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.bt <- dataprep(picksite="D", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.bd <- dataprep(picksite="D", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.ct <- dataprep(picksite="F", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.cd <- dataprep(picksite="F", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
run.dt <- dataprep(picksite="G", yvar="tempc", yvarname="Temperature  (C)", desc="EPA temperature")
run.dd1 <- dataprep(picksite="G", yvar="domglf", yvarname="DO - field  (mg/L)", desc="EPA field DO")
run.dd2 <- dataprep(picksite="G", yvar="domgll", yvarname="DO - lab  (mg/L)", desc="EPA lab DO")
run.dd3 <- dataprep(picksite="G", yvar="domglu", yvarname="DO - unspecified  (mg/L)", desc="EPA DO")
biglist <- list(run.at, run.ad, run.bt, run.bd, run.ct, run.cd, run.dt, run.dd1, run.dd2, run.dd3)
yrrng <- range(unlist(lapply(biglist, "[[", "suy")))
fig <- function() {
par(mfrow=c(3, 1), mar=c(0, 4, 0, 1), oma=c(4, 0, 0, 0), las=1, cex=1.2)
plot(run.at$suy, run.at$new$yhat[run.at$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(18, 26.5), xaxt="n", xlab="", ylab="Temperature  (C)")
points(run.bt$suy, run.bt$new$yhat[run.bt$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.ct$suy, run.ct$new$yhat[run.ct$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dt$suy, run.dt$new$yhat[run.dt$new$x2==123], pch="G", type="o", col=blindcolz[6])
plot(run.ad$suy, run.ad$new$yhat[run.ad$new$x2==123], pch="A", type="o", col=blindcolz[2], 
xlim=yrrng, ylim=c(4, 11), xaxt="n", xlab="", ylab="Dissolved oxygen  (mg/L)")
points(run.bd$suy, run.bd$new$yhat[run.bd$new$x2==123], pch="D", type="o", col=blindcolz[3])
points(run.cd$suy, run.cd$new$yhat[run.cd$new$x2==123], pch="F", type="o", col=blindcolz[4])
points(run.dd1$suy, run.dd1$new$yhat[run.dd1$new$x2==123], pch="G", type="o", col=blindcolz[6])
points(run.dd2$suy, run.dd2$new$yhat[run.dd2$new$x2==123], pch="G", type="o", col=blindcolz[7])
points(run.dd3$suy, run.dd3$new$yhat[run.dd3$new$x2==123], pch="G", type="o", col=blindcolz[8])
plotblank(xlim=yrrng, ylim=sqrt(range(smry$rat, na.rm=TRUE)), axes=FALSE, ylab="Larval density  (#/m2)")
axis(1, outer=TRUE)
pl <- prettylog(smry$rat, 1, extra=4)
pl <- c(0, 0.01, 0.05, 0.1, 0.2, 0.3)
axis(2, at=sqrt(pl), labels=pl)
box()
for(i in seq(sites4)) {
sell <- smry$cletr==sites4[i]
points(smry$year[sell], sqrt(smry$rat[sell]), pch=sites4[i], type="o", col=blindcolz[c(2, 3, 4, 6)][i])
}
mtext("Year", side=1, outer=TRUE, line=3, cex=1.2)
}
figu("Trend over time in EPA temperature, EPA dissolved oxygen, and FWS/DFO larval sea lamprey data from sites ", 
paste(sites4, collapse=", "), ", ", paste(yrrng, collapse="-"), ".", 
"  Water quality values are predictions for 1 August of each year.", h=5.5, w=9, newpage="land")
para("The remaining figures show the raw data, the seasonal pattern, and the results of the seasonal detrending for each site and response",
" variable.")
figraw <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="o", xlab="Date", ylab=yvarname)
}
figseas <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x2, y, xaxt="n", xlab="Day of year", ylab=yvarname)
axis(1, at=m1, labels=FALSE)
axis(1, at=m15, labels=month.abb, tick=FALSE)
lines(sort(unique(new$x2)), tapply(new$yhat, new$x2, median))
}
figboth <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(x1, y, type="n", xlab="Date", ylab=yvarname)
for(i in seq(suy)) {
just <- new$yr==suy[i]
lines(new$date[just], new$yhat[just], lwd=3, col="lightgray")
}
points(x1, y, lwd=2)
}
figtrend <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.2)
plot(suy, new$yhat[new$x2==123], type="o", xlab="Year", ylab=yvarname)
}
doit <- function(mylist) {
attach(mylist)
#figu("Raw ", desc, " data from site ", picksite, ".", FIG=figraw, h=2.5, w=9, newpage="land")
figu("Seasonal pattern in ", desc, " data from site ", picksite, ".", FIG=figseas, h=5, w=5, newpage="land")
figu("Raw ", desc, " data from site ", picksite, " with predicted lines.", FIG=figboth, h=2.5, w=9, newpage="land")
figu("Trend over time in ", desc, " data from site ", picksite, ".", 
"  Values are predictions for 1 August of each year.", FIG=figtrend, h=2.5, w=9)
detach(mylist)
}
invisible(lapply(biglist, doit))
endrtf()
cleanup()
x <- c(0.02, 0.29)
x
1/x
.29/.2
.29/.02
50/3.45
q()
library(LW1949)
?LW
??LW
>LW1949
?LW1949
fitLW
dat <- read.csv("C:/JVA/Lamprey/ChemControl/Toxicity/Nomo3Digi.csv")
A <- c((12:25)/10, 3:10)
ya <- log(dat$y[dat$group==1])
plot(log(A), ya)
abline(lsfit(log(A), ya))
summary(lm(log(A) ~ ya))
sel <- c(1, length(A))
summary(lm(log(A[sel]) ~ ya[sel]))
datdat$y[dat$group==1]
dat$y[dat$group==1]
plot(log(A), ya)
plot(A, exp(ya))
plot(A, exp(ya), log="xy")
plot(A, exp(ya))
A
plot(log(A), ya)
plot(log(A), log(ya))
plot(log(A), exp(ya))
dat <- read.csv("C:/JVA/Lamprey/ChemControl/Toxicity/Nomo3Digi.csv")
A <- c((12:25)/10, 3:10)
ya <- log(dat$y[dat$group==1])
plot(log(A), exp(ya))
abline(lsfit(log(A), exp(ya)))
summary(lm(log(A) ~ exp(ya)))
sel <- c(1, length(A))
summary(lm(log(A[sel]) ~ exp(ya)[sel]))
B <- c(1.01, 1.015, (102:105)/100, (11:15)/10, 2:5, 10, 20, 50, 100, 500, 1000)
yb <- log(dat$y[dat$group==2])
plot(log(B), exp(yb))
length(B)
length(yb)
dat <- read.csv("C:/JVA/Lamprey/ChemControl/Toxicity/Nomo3Digi.csv")
B <- c(1.01, 1.015, (102:105)/100, (11:15)/10, 2:5, 10, 20, 50, 100, 500, 1000)
yb <- log(dat$y[dat$group==2])
plot(log(B), exp(yb))
plot(log(B), (yb))
plot(log(B), exp(yb))
plot((B), exp(yb))
plot(log(B), exp(yb))
plot(log(B), exp(exp(yb)))
plot(log(B), exp(yb))
plot(log10(B), exp(yb))
plot(log(B), exp(yb))
plot(log(B), 10^(yb))
plot(log(B), 20^(yb))
plot(log(B), 50^(yb))
plot(log(B), 100^(yb))
B <- c(1.01, 1.015, (102:105)/100, (11:15)/10, 2:5, 10, 20, 50, 100, 500, 1000)
yb <- log(dat$y[dat$group==2])
plot(log(B), 100^yb)
abline(lsfit(log(B), 100^yb))
summary(lm(log(B) ~ 100^yb))
sel <- c(1, length(B))
summary(lm(log(B[sel]) ~ (100^yb)[sel]))
B <- c(1.01, 1.015, (102:105)/100, (11:15)/10, 2:5, 10, 20, 50, 100, 500, 1000)
yb <- log(dat$y[dat$group==2])
plot(log(B), 100^yb)
abline(lsfit(log(B), 100^yb))
summary(lm(log(B) ~ I(100^yb)))
sel <- c(1, length(B))
summary(lm(log(B[sel]) ~ (100^yb)[sel]))
C <- c((3:1)*100, 50, (3:1)*10, 5:2, (19:12)/10)
yc <- log(dat$y1[dat$group==3])
plot(log(C), yc)
C <- c((3:1)*100, 50, (3:1)*10, 5:2, (19:12)/10)
yc <- log(dat$y[dat$group==3])
plot(log(C), yc)
length(C)
length(yc)
dat <- read.csv("C:/JVA/Lamprey/ChemControl/Toxicity/Nomo3Digi.csv")
C <- c((3:1)*100, 50, (3:1)*10, 5:2, (19:12)/10)
yc <- log(dat$y[dat$group==3])
plot(log(C), yc)
plot(log(C), exp(yc))
plot(log(C), yc)
plot(log(C), log(yc))
plot(log(C), log(log(yc)))
plot(log(C), log(yc))
plot(C, log(yc))
plot(sqrt(C), log(yc))
plot(C^.1, log(yc))
plot(C^.01, log(yc))
plot(C^.001, log(yc))
plot(C^.00001, log(yc))
plot(C^.00000000000001, log(yc))
plot(1/C, log(yc))
plot(1/C, yc)
plot(log(C), log(yc))
q()
library(rgdal)
stations <- readOGR(".","stations")
print(proj4string(stations))
library(sp)
coordinates(xy) <- c("X", "Y")
proj4string(xy) <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")  ## for example
res <- spTransform(xy, CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
res
as(res, "SpatialPoints")
x<-as(res, "SpatialPoints")
xx<-as.data.frame(x)
cleanup()
q()
library(sp)
{
xy <- structure(list(ID = 1:120, X = c(-102.6, -101.9, -97.1, -97, 
-95.7, -99.1, -100.1, -97.2, -97, -99.3, -96, -95.2, -98.8, -98.1, 
-99.6, -97.8, -96.1, -98.3, -95.6, -96.8, -101.2, -101.1, -97.2, 
-111.1, -111.2, -116, -117.6, -103.7, -107.1, -102.3, -105.6, 
-105.3, -108.5, -103.2, -94.1, -101.9, -94.7, -101.1, -97.9, 
-111.4, -111.2, -110.5, -111.3, -107.3, -102.3, -104.7, -106.7, 
-101.8, -106, -103, -107.9, -103.7, -103.8, -109.2, -108.9, -109.5, 
-102.1, -104.6, -105.6, -101.7, -104, -108.3, -107.1, -103.9, 
-105.2, -105.7, -104.7, -106.7, -108.8, -107.7, -102.2, -107.8, 
-109.4, -106.1, -106.4, -104.2, -101.1, -99.9, -99.7, -101.3, 
-113.3, -119.4, -113.8, -114.7, -112.8, -110.3, -113.6, -111.1, 
-116.3, -118.5, -118.9, -117.4, -111.7, -114.1, -114.8, -113.8, 
-115.8, -108.4, -109.1, -115.6, -114.2, -114, -113.4, -113.7, 
-114.5, -112.9, -116.4, -113.1, -114.4, -117.5, -118, -113.8, 
-112.8, -110.7, -113.6, -114.1, -114, -114.9, -112.7, -112.1), 
    Y = c(52.88, 52.08, 50.93, 52.35, 51.03, 49.55, 51.1, 49, 
    50.63, 53.15, 50.47, 49.62, 50.42, 49.18, 50.15, 53.97, 50.18, 
    49.95, 49.02, 49.53, 52.12, 53.97, 49.92, 58.77, 56.65, 58.38, 
    57.75, 58.18, 57.35, 55.53, 57.25, 55.15, 59.57, 56.23, 58.73, 
    54.77, 56.35, 56.87, 55.8, 52.07, 50.72, 49.12, 51.58, 49.72, 
    50.9, 49.38, 50.47, 51.52, 51.27, 49.22, 50.98, 50.55, 51.25, 
    51.52, 49.68, 50.9, 49.62, 52.82, 50.33, 50.13, 53.33, 52.77, 
    51.48, 51.98, 52.42, 53.22, 50.43, 52.17, 52.37, 50.27, 51.2, 
    49.37, 53.13, 53.92, 49, 49.82, 50.43, 49.92, 49.42, 49.18, 
    54.72, 55.2, 53.28, 54.13, 53.03, 54.42, 53.32, 53.88, 55.42, 
    56.08, 55.18, 56.23, 53.42, 53.88, 55.28, 55.97, 54.15, 55.83, 
    54.05, 51.2, 49.47, 51.12, 49, 49.93, 49.63, 51.47, 53.58, 
    50.88, 50.55, 53.4, 52.93, 52.45, 49.63, 50.02, 49.13, 51.78, 
    49.52, 52.42, 52.33, 50.05)), .Names = c("ID", "X", "Y"), row.names = c(NA, 
-120L), class = "data.frame")
}
coordinates(xy) <- c("X", "Y")
proj4string(xy) <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")  ## for example
res <- spTransform(xy, CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs"))
res
as(res, "SpatialPoints")
x <- as(res, "SpatialPoints")
xx <- as.data.frame(x)
head(xy)
xy
xy$coordinates
{
xy <- structure(list(ID = 1:120, X = c(-102.6, -101.9, -97.1, -97, 
-95.7, -99.1, -100.1, -97.2, -97, -99.3, -96, -95.2, -98.8, -98.1, 
-99.6, -97.8, -96.1, -98.3, -95.6, -96.8, -101.2, -101.1, -97.2, 
-111.1, -111.2, -116, -117.6, -103.7, -107.1, -102.3, -105.6, 
-105.3, -108.5, -103.2, -94.1, -101.9, -94.7, -101.1, -97.9, 
-111.4, -111.2, -110.5, -111.3, -107.3, -102.3, -104.7, -106.7, 
-101.8, -106, -103, -107.9, -103.7, -103.8, -109.2, -108.9, -109.5, 
-102.1, -104.6, -105.6, -101.7, -104, -108.3, -107.1, -103.9, 
-105.2, -105.7, -104.7, -106.7, -108.8, -107.7, -102.2, -107.8, 
-109.4, -106.1, -106.4, -104.2, -101.1, -99.9, -99.7, -101.3, 
-113.3, -119.4, -113.8, -114.7, -112.8, -110.3, -113.6, -111.1, 
-116.3, -118.5, -118.9, -117.4, -111.7, -114.1, -114.8, -113.8, 
-115.8, -108.4, -109.1, -115.6, -114.2, -114, -113.4, -113.7, 
-114.5, -112.9, -116.4, -113.1, -114.4, -117.5, -118, -113.8, 
-112.8, -110.7, -113.6, -114.1, -114, -114.9, -112.7, -112.1), 
    Y = c(52.88, 52.08, 50.93, 52.35, 51.03, 49.55, 51.1, 49, 
    50.63, 53.15, 50.47, 49.62, 50.42, 49.18, 50.15, 53.97, 50.18, 
    49.95, 49.02, 49.53, 52.12, 53.97, 49.92, 58.77, 56.65, 58.38, 
    57.75, 58.18, 57.35, 55.53, 57.25, 55.15, 59.57, 56.23, 58.73, 
    54.77, 56.35, 56.87, 55.8, 52.07, 50.72, 49.12, 51.58, 49.72, 
    50.9, 49.38, 50.47, 51.52, 51.27, 49.22, 50.98, 50.55, 51.25, 
    51.52, 49.68, 50.9, 49.62, 52.82, 50.33, 50.13, 53.33, 52.77, 
    51.48, 51.98, 52.42, 53.22, 50.43, 52.17, 52.37, 50.27, 51.2, 
    49.37, 53.13, 53.92, 49, 49.82, 50.43, 49.92, 49.42, 49.18, 
    54.72, 55.2, 53.28, 54.13, 53.03, 54.42, 53.32, 53.88, 55.42, 
    56.08, 55.18, 56.23, 53.42, 53.88, 55.28, 55.97, 54.15, 55.83, 
    54.05, 51.2, 49.47, 51.12, 49, 49.93, 49.63, 51.47, 53.58, 
    50.88, 50.55, 53.4, 52.93, 52.45, 49.63, 50.02, 49.13, 51.78, 
    49.52, 52.42, 52.33, 50.05)), .Names = c("ID", "X", "Y"), row.names = c(NA, 
-120L), class = "data.frame")
}
head(xy)
{
xy <- structure(list(ID = 1:120, X = c(-102.6, -101.9, -97.1, -97, 
-95.7, -99.1, -100.1, -97.2, -97, -99.3, -96, -95.2, -98.8, -98.1, 
-99.6, -97.8, -96.1, -98.3, -95.6, -96.8, -101.2, -101.1, -97.2, 
-111.1, -111.2, -116, -117.6, -103.7, -107.1, -102.3, -105.6, 
-105.3, -108.5, -103.2, -94.1, -101.9, -94.7, -101.1, -97.9, 
-111.4, -111.2, -110.5, -111.3, -107.3, -102.3, -104.7, -106.7, 
-101.8, -106, -103, -107.9, -103.7, -103.8, -109.2, -108.9, -109.5, 
-102.1, -104.6, -105.6, -101.7, -104, -108.3, -107.1, -103.9, 
-105.2, -105.7, -104.7, -106.7, -108.8, -107.7, -102.2, -107.8, 
-109.4, -106.1, -106.4, -104.2, -101.1, -99.9, -99.7, -101.3, 
-113.3, -119.4, -113.8, -114.7, -112.8, -110.3, -113.6, -111.1, 
-116.3, -118.5, -118.9, -117.4, -111.7, -114.1, -114.8, -113.8, 
-115.8, -108.4, -109.1, -115.6, -114.2, -114, -113.4, -113.7, 
-114.5, -112.9, -116.4, -113.1, -114.4, -117.5, -118, -113.8, 
-112.8, -110.7, -113.6, -114.1, -114, -114.9, -112.7, -112.1), 
    Y = c(52.88, 52.08, 50.93, 52.35, 51.03, 49.55, 51.1, 49, 
    50.63, 53.15, 50.47, 49.62, 50.42, 49.18, 50.15, 53.97, 50.18, 
    49.95, 49.02, 49.53, 52.12, 53.97, 49.92, 58.77, 56.65, 58.38, 
    57.75, 58.18, 57.35, 55.53, 57.25, 55.15, 59.57, 56.23, 58.73, 
    54.77, 56.35, 56.87, 55.8, 52.07, 50.72, 49.12, 51.58, 49.72, 
    50.9, 49.38, 50.47, 51.52, 51.27, 49.22, 50.98, 50.55, 51.25, 
    51.52, 49.68, 50.9, 49.62, 52.82, 50.33, 50.13, 53.33, 52.77, 
    51.48, 51.98, 52.42, 53.22, 50.43, 52.17, 52.37, 50.27, 51.2, 
    49.37, 53.13, 53.92, 49, 49.82, 50.43, 49.92, 49.42, 49.18, 
    54.72, 55.2, 53.28, 54.13, 53.03, 54.42, 53.32, 53.88, 55.42, 
    56.08, 55.18, 56.23, 53.42, 53.88, 55.28, 55.97, 54.15, 55.83, 
    54.05, 51.2, 49.47, 51.12, 49, 49.93, 49.63, 51.47, 53.58, 
    50.88, 50.55, 53.4, 52.93, 52.45, 49.63, 50.02, 49.13, 51.78, 
    49.52, 52.42, 52.33, 50.05)), .Names = c("ID", "X", "Y"), row.names = c(NA, 
-120L), class = "data.frame")
}
utm <- project(as.matrix(xy[, c("X", "Y")]), "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
??project
library(rgdal)
utm <- project(as.matrix(xy[, c("X", "Y")]), "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
utm
search()
detach()
detach()
search()
library(rgdal)
{
xy <- structure(list(ID = 1:120, X = c(-102.6, -101.9, -97.1, -97, 
-95.7, -99.1, -100.1, -97.2, -97, -99.3, -96, -95.2, -98.8, -98.1, 
-99.6, -97.8, -96.1, -98.3, -95.6, -96.8, -101.2, -101.1, -97.2, 
-111.1, -111.2, -116, -117.6, -103.7, -107.1, -102.3, -105.6, 
-105.3, -108.5, -103.2, -94.1, -101.9, -94.7, -101.1, -97.9, 
-111.4, -111.2, -110.5, -111.3, -107.3, -102.3, -104.7, -106.7, 
-101.8, -106, -103, -107.9, -103.7, -103.8, -109.2, -108.9, -109.5, 
-102.1, -104.6, -105.6, -101.7, -104, -108.3, -107.1, -103.9, 
-105.2, -105.7, -104.7, -106.7, -108.8, -107.7, -102.2, -107.8, 
-109.4, -106.1, -106.4, -104.2, -101.1, -99.9, -99.7, -101.3, 
-113.3, -119.4, -113.8, -114.7, -112.8, -110.3, -113.6, -111.1, 
-116.3, -118.5, -118.9, -117.4, -111.7, -114.1, -114.8, -113.8, 
-115.8, -108.4, -109.1, -115.6, -114.2, -114, -113.4, -113.7, 
-114.5, -112.9, -116.4, -113.1, -114.4, -117.5, -118, -113.8, 
-112.8, -110.7, -113.6, -114.1, -114, -114.9, -112.7, -112.1), 
    Y = c(52.88, 52.08, 50.93, 52.35, 51.03, 49.55, 51.1, 49, 
    50.63, 53.15, 50.47, 49.62, 50.42, 49.18, 50.15, 53.97, 50.18, 
    49.95, 49.02, 49.53, 52.12, 53.97, 49.92, 58.77, 56.65, 58.38, 
    57.75, 58.18, 57.35, 55.53, 57.25, 55.15, 59.57, 56.23, 58.73, 
    54.77, 56.35, 56.87, 55.8, 52.07, 50.72, 49.12, 51.58, 49.72, 
    50.9, 49.38, 50.47, 51.52, 51.27, 49.22, 50.98, 50.55, 51.25, 
    51.52, 49.68, 50.9, 49.62, 52.82, 50.33, 50.13, 53.33, 52.77, 
    51.48, 51.98, 52.42, 53.22, 50.43, 52.17, 52.37, 50.27, 51.2, 
    49.37, 53.13, 53.92, 49, 49.82, 50.43, 49.92, 49.42, 49.18, 
    54.72, 55.2, 53.28, 54.13, 53.03, 54.42, 53.32, 53.88, 55.42, 
    56.08, 55.18, 56.23, 53.42, 53.88, 55.28, 55.97, 54.15, 55.83, 
    54.05, 51.2, 49.47, 51.12, 49, 49.93, 49.63, 51.47, 53.58, 
    50.88, 50.55, 53.4, 52.93, 52.45, 49.63, 50.02, 49.13, 51.78, 
    49.52, 52.42, 52.33, 50.05)), .Names = c("ID", "X", "Y"), row.names = c(NA, 
-120L), class = "data.frame")
}
utm <- project(as.matrix(xy[, c("X", "Y")]), "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
utm
windows()
map(world)
points(xy[, c("X", "Y")])
map("world")
points(xy[, c("X", "Y")])
map("usa")
points(xy[, c("X", "Y")])
map("world", xlim=range(xy$X), ylim=range(xy$Y))
points(xy[, c("X", "Y")])
map("world", xlim=range(xy$X)+c(-1, 1)*2, ylim=range(xy$Y)+c(-1, 1)*2)
points(xy[, c("X", "Y")])
adj <- 5
windows()
map("world", xlim=range(xy$X)+c(-1, 1)*adj, ylim=range(xy$Y)+c(-1, 1)*adj)
points(xy[, c("X", "Y")])
?map
windows()
plot(utm)
library(rgdal)
utm <- project(as.matrix(xy[,c("X","Y")]), "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
windows()
plot(utm)
map("world", xlim=range(xy$X), ylim=range(xy$Y))
points(xy[, c("X", "Y")])
cleanup()
q()
# C:\JVA\Lamprey\ChemControl\Toxicity\Nomo3.r
dat <- read.csv("C:/JVA/Lamprey/ChemControl/Toxicity/Nomo3Digi.csv")
A <- c((12:25)/10, 3:10)
ya <- log(dat$y[dat$group==1])
plot(log(A), exp(ya))
abline(lsfit(log(A), exp(ya)))
summary(lm(log(A) ~ exp(ya)))
sel <- c(1, length(A))
summary(lm(log(A[sel]) ~ exp(ya)[sel]))
B <- c(1.01, 1.015, (102:105)/100, (11:15)/10, 2:5, 10, 20, 50, 100, 500, 1000)
yb <- log(dat$y[dat$group==2])
plot(log(B), 100^yb)
abline(lsfit(log(B), 100^yb))
summary(lm(log(B) ~ I(100^yb)))
sel <- c(1, length(B))
summary(lm(log(B[sel]) ~ (100^yb)[sel]))
C <- c((3:1)*100, 50, (3:1)*10, 5:2, (19:12)/10)
yc <- log(dat$y[dat$group==3])
plot(log(C), yc)
plot((C), yc)
plot(log(C), yc)
plot(log(C), log(yc))
plot(log(C), log(log(yc)))
plot(exp(log(C)), (log(yc)))
plot((log(C)), log(yc))(log(yc)))
log(yc))
log(yc)
plot(log(C), log(log(yc)))
plot(log(C), log(log(yc)+1))
plot(log(C), log(log(yc)+10))
plot(log(C), log(log(yc)+.3))
plot(log(C), log(log(yc)+.4))
plot(log(C), log(log(yc)+.5))
?qnorm
qnorm(0.95)
qnorm(0.05)
S <- c(10, 10, 1.2, 1.2, 2, 2, 6.4, 1.41)
A <- c(1000, 2.9, 1.01, 1.21, 1.10, 16, 2, 2)
R <- c(2.4, 300, 40, 1.2, 300, 1.2, 300, 1.2)
pairs(cbind(S, A, R))
pairs(cbind(log(S), log(A), log(R)))
ls <- log10(S)
la <- log10(A)
lr <- log10(R)
symbols(ls, lr, circles=la)
fit <- gam(la ~ s(ls) + s(lr))
fit <- gam(la ~ s(ls, k=2) + s(lr, k=2))
fit <- gam(la ~ s(ls, k=3) + s(lr, k=3))
fit <- gam(la ~ s(ls, k=4) + s(lr, k=4))
fit <- gam(la ~ s(ls, k=5) + s(lr, k=5))
fit <- gam(la ~ s(ls, k=4) + s(lr, k=4))
plot(fit)
locator()
10^0.69178
symbols(ls, lr, circles=la)
plot(S, R, log="xy")
symbols(S, R, circles=la, add=TRUE)
plot(S, R, log="xy", type="n")
symbols(S, R, circles=la, add=TRUE)
la
plot(a, A)
plot(A, ya)
A <- c((12:25)/10, 3:10)
ya <- log(dat$y[dat$group==1])
plot(A, ya)
plot(dat$group, log(dat$y))
dat <- read.csv("C:/JVA/Lamprey/ChemControl/Toxicity/Nomo3Digi.csv")
A <- c((12:25)/10, 3:10)
ya <- log(dat$y[dat$group==1])
plot(log(A), exp(ya))
abline(lsfit(log(A), exp(ya)))
summary(lm(log(A) ~ exp(ya)))
sel <- c(1, length(A))
summary(lm(log(A[sel]) ~ exp(ya)[sel]))
B <- c(1.01, 1.015, (102:105)/100, (11:15)/10, 2:5, 10, 20, 50, 100, 500, 1000)
yb <- log(dat$y[dat$group==2])
plot(log(B), 100^yb)
abline(lsfit(log(B), 100^yb))
summary(lm(log(B) ~ I(100^yb)))
sel <- c(1, length(B))
summary(lm(log(B[sel]) ~ (100^yb)[sel]))
C <- c((3:1)*100, 50, (3:1)*10, 5:2, (19:12)/10)
yc <- log(dat$y[dat$group==3])
plot(dat$group, log(dat$y))
text(dat$group, log(dat$y), c(A, B, C), pos=4)
plot(dat$group, log(dat$y), xlim=c(0.5, 3.5))
text(dat$group, log(dat$y), c(A, B, C), pos=4)
windows()
par(mar=c(0, 1, 0, 1))
plot(dat$group, log(dat$y), xlim=c(0.5, 3.5))
text(dat$group, log(dat$y), c(A, B, C), pos=4)
cleanup()
### bring in the data ###
#library(tcltk)
library(LW1949)
# allow user to choose raw data file from menu
rawfile <- tk_choose.files(filters=matrix(c("csv", ".csv"), ncol=2))
### bring in the data ###
library(tcltk)
library(LW1949)
# allow user to choose raw data file from menu
rawfile <- tk_choose.files(filters=matrix(c("csv", ".csv"), ncol=2))
# read in the data, fill in the blanks
rawdat <- read.csv(rawfile, as.is=TRUE)
rawdat2 <- data.frame(lapply(rawdat, fill))
# use the input filename to name the output files
filesegs <- strsplit(rawfile, "/")[[1]]
L <- length(filesegs)
filename <- filesegs[L]
dirname <- paste(filesegs[-L], collapse="/")
prefix <- strsplit(filename, ".csv")[[1]]
smryname <- paste0(prefix, "Smry.csv")
pdfname <- paste0(prefix, "Smry.pdf")
pdf(file = paste(dirname, pdfname, sep="/"), paper="letter")
### fit LW and probit models to the data
# unique test IDs
sut <- sort(unique(rawdat2$Test.ID))
# empty list in which to put results
results <- vector("list", length(sut))
for(i in seq(along=sut)) {
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- with(df, paste(Test.ID, Source, Batch, Species, sep=", "))[1]
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
estimate <- c(fLW$params, predlinear(pctalive, fLW$params[1], fLW$params[2]), fLW$LWest["S"])
param <- names(estimate)
method <- rep("Auto Litchfield-Wilcoxon", length(param))
lower95ci <- c(NA, NA, NA, fLW$LWest["lower"], NA, NA)
upper95ci <- c(NA, NA, NA, fLW$LWest["upper"], NA, NA)
smryLW <- data.frame(param, method, estimate, lower95ci, upper95ci)
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
estimate <- c(fp$coef, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), 1:8], smry)
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr)
abline(fp$coef, lty=2)
abline(fLW$params)
legend("topleft", c("LW", "Probit"), lty=c(1, 2), bg="white")
}
graphics.off()
smrydat <- do.call(rbind, results)
write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
?optim
plotDE(mydat, main=descr, xlab="Concentration", ylab="Mortality  (%)")
abline(fp$coef, lty=2)
abline(fLW$params)
i <- 1
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- with(df, paste(Test.ID, Source, Batch, Species, sep=", "))[1]
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
DEdata <- mydat
estimable(DEdata)
dfsub <- DEdata[DEdata$LWkeep, ]
# fit a smooth GAM function to expected and corrected values in Table 1 of Litchfield and Wilcoxon (1949)
gamfit <- gamtable1()
# calculate starting values for the int and slope using simple linear regression
pms <- sum(dfsub$fxcateg==50)
sv <- c(NA, NA)
svchi <- NA
pms
dfpart <- dfsub[dfsub$fxcateg==50, ]
sv <- fitlinear(dfpart, gamfit)
svchi <- assessfit(sv, dfpart, gamfit)
svchi
sv
estparams <- optim(par=sv, fn=assessfit, DEdata=dfsub, fit=gamfit)$par
estparams
assessfit(estparams, DEdata=dfsub, fit=gamfit, simple=FALSE)\
assessfit(estparams, DEdata=dfsub, fit=gamfit, simple=FALSE)
assessfit(sv, DEdata=dfsub, fit=gamfit, simple=FALSE)
fp <- fitprobit(mydat)
fp
fp$coef
assessfit(fp$coef, DEdata=dfsub, fit=gamfit, simple=FALSE)
### fit LW and probit models to the data
# unique test IDs
sut <- sort(unique(rawdat2$Test.ID))
# empty list in which to put results
results <- vector("list", length(sut))
for(i in seq(along=sut)) {
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- with(df, paste(Test.ID, Source, Batch, Species, sep=", "))[1]
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
estimate <- c(fLW$params, predlinear(pctalive, fLW$params[1], fLW$params[2]), fLW$LWest["S"])
param <- names(estimate)
method <- rep("Auto Litchfield-Wilcoxon", length(param))
lower95ci <- c(NA, NA, NA, fLW$LWest["lower"], NA, NA)
upper95ci <- c(NA, NA, NA, fLW$LWest["upper"], NA, NA)
smryLW <- data.frame(param, method, estimate, lower95ci, upper95ci)
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
estimate <- c(fp$coef, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
print(cat("\n\n\n"))
print(descr)
print(smry)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), 1:8], smry)
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr, ylab="Mortality  (%)")
abline(fp$coef, lty=2)
abline(fLW$params)
legend("topleft", c("Litchfield Wilcoxon", "Probit"), lty=c(1, 2), bg="white")
}
graphics.off()
smrydat <- do.call(rbind, results)
write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
### fit LW and probit models to the data
# unique test IDs
sut <- sort(unique(rawdat2$Test.ID))
# empty list in which to put results
results <- vector("list", length(sut))
for(i in seq(along=sut)) {
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- with(df, paste(Test.ID, Source, Batch, Species, sep=", "))[1]
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
estimate <- c(fLW$params, predlinear(pctalive, fLW$params[1], fLW$params[2]), fLW$LWest["S"])
param <- names(estimate)
method <- rep("Auto Litchfield-Wilcoxon", length(param))
lower95ci <- c(NA, NA, NA, fLW$LWest["lower"], NA, NA)
upper95ci <- c(NA, NA, NA, fLW$LWest["upper"], NA, NA)
smryLW <- data.frame(param, method, estimate, lower95ci, upper95ci)
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
estimate <- c(fp$coef, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
print(cat("\n\n\n"))
print(descr)
print(smry)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), 1:8], smry)
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr, ylab="Mortality  (%)")
abline(fp$coef, lty=2)
abline(fLW$params)
legend("topleft", c("Litchfield Wilcoxon", "Probit"), lty=c(1, 2), bg="white")
}
graphics.off()
smrydat <- do.call(rbind, results)
write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
smry
smryLW
print(smryLW, row.names=FALSE)
print(smryLW[, -2], row.names=FALSE)
smryPr
for(i in seq(along=sut)) {
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- with(df, paste(Test.ID, Source, Batch, Species, sep=", "))[1]
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
estimate <- c(fLW$params, predlinear(pctalive, fLW$params[1], fLW$params[2]), fLW$LWest["S"])
param <- names(estimate)
method <- rep("Auto Litchfield-Wilcoxon", length(param))
lower95ci <- c(NA, NA, NA, fLW$LWest["lower"], NA, NA)
upper95ci <- c(NA, NA, NA, fLW$LWest["upper"], NA, NA)
smryLW <- data.frame(param, method, estimate, lower95ci, upper95ci)
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
estimate <- c(fp$coef, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
print(cat("\n\n\n"))
print(descr)
print(cat("\nLitchfield Wicoxon method\n")
print(smryLW[, -2], row.names=FALSE)
print(cat("\nProbit method\n")
print(smryPr[, -2], row.names=FALSE)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), 1:8], smry)
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr, ylab="Mortality  (%)")
abline(fp$coef, lty=2)
abline(fLW$params)
legend("topleft", c("Litchfield Wilcoxon", "Probit"), lty=c(1, 2), bg="white")
}
graphics.off()
smrydat <- do.call(rbind, results)
write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
for(i in seq(along=sut)) {
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- with(df, paste(Test.ID, Source, Batch, Species, sep=", "))[1]
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
estimate <- c(fLW$params, predlinear(pctalive, fLW$params[1], fLW$params[2]), fLW$LWest["S"])
param <- names(estimate)
method <- rep("Auto Litchfield-Wilcoxon", length(param))
lower95ci <- c(NA, NA, NA, fLW$LWest["lower"], NA, NA)
upper95ci <- c(NA, NA, NA, fLW$LWest["upper"], NA, NA)
smryLW <- data.frame(param, method, estimate, lower95ci, upper95ci)
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
estimate <- c(fp$coef, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
print(cat("\n\n\n"))
print(descr)
print(cat("\nLitchfield Wicoxon method\n"))
print(smryLW[, -2], row.names=FALSE)
print(cat("\nProbit method\n"))
print(smryPr[, -2], row.names=FALSE)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), 1:8], smry)
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr, ylab="Mortality  (%)")
abline(fp$coef, lty=2)
abline(fLW$params)
legend("topleft", c("Litchfield Wilcoxon", "Probit"), lty=c(1, 2), bg="white")
}
graphics.off()
smrydat <- do.call(rbind, results)
write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
?print
?cat
for(i in seq(along=sut)) {
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- with(df, paste(Test.ID, Source, Batch, Species, sep=", "))[1]
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
estimate <- c(fLW$params, predlinear(pctalive, fLW$params[1], fLW$params[2]), fLW$LWest["S"])
param <- names(estimate)
method <- rep("Auto Litchfield-Wilcoxon", length(param))
lower95ci <- c(NA, NA, NA, fLW$LWest["lower"], NA, NA)
upper95ci <- c(NA, NA, NA, fLW$LWest["upper"], NA, NA)
smryLW <- data.frame(param, method, estimate, lower95ci, upper95ci)
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
estimate <- c(fp$coef, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
(cat("\n\n\n"))
print(paste0("Test ", i, ":   ", descr))
(cat("\nLitchfield Wicoxon method\n"))
print(smryLW[, -2], row.names=FALSE)
(cat("\nProbit method\n"))
print(smryPr[, -2], row.names=FALSE)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), 1:8], smry)
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr, ylab="Mortality  (%)")
abline(fp$coef, lty=2)
abline(fLW$params)
legend("topleft", c("Litchfield Wilcoxon", "Probit"), lty=c(1, 2), bg="white")
}
graphics.off()
smrydat <- do.call(rbind, results)
write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
for(i in seq(along=sut)) {
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- with(df, paste(Test.ID, Source, Batch, Species, sep=", "))[1]
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
estimate <- c(fLW$params, predlinear(pctalive, fLW$params[1], fLW$params[2]), fLW$LWest["S"])
param <- names(estimate)
method <- rep("Auto Litchfield-Wilcoxon", length(param))
lower95ci <- c(NA, NA, NA, fLW$LWest["lower"], NA, NA)
upper95ci <- c(NA, NA, NA, fLW$LWest["upper"], NA, NA)
smryLW <- data.frame(param, method, estimate, lower95ci, upper95ci)
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
estimate <- c(fp$coef, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
cat("\n\n\n")
cat(paste0("Test ", i, ":   ", descr))
cat("\nLitchfield Wicoxon method\n")
print(smryLW[, -2], row.names=FALSE)
cat("\nProbit method\n")
print(smryPr[, -2], row.names=FALSE)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), 1:8], smry)
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr, ylab="Mortality  (%)")
abline(fp$coef, lty=2)
abline(fLW$params)
legend("topleft", c("Litchfield Wilcoxon", "Probit"), lty=c(1, 2), bg="white")
}
graphics.off()
smrydat <- do.call(rbind, results)
write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
for(i in seq(along=sut)) {
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- with(df, paste(Test.ID, Source, Batch, Species, sep=", "))[1]
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
estimate <- c(fLW$params, predlinear(pctalive, fLW$params[1], fLW$params[2]), fLW$LWest["S"])
param <- names(estimate)
method <- rep("Auto Litchfield-Wilcoxon", length(param))
lower95ci <- c(NA, NA, NA, fLW$LWest["lower"], NA, NA)
upper95ci <- c(NA, NA, NA, fLW$LWest["upper"], NA, NA)
smryLW <- data.frame(param, method, estimate, lower95ci, upper95ci)
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
estimate <- c(fp$coef, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
cat("\n\n")
cat(paste0("Test ", i, ":   ", descr, "\n"))
cat("\nLitchfield Wicoxon method\n")
print(smryLW[, -2], row.names=FALSE)
cat("\nProbit method\n")
print(smryPr[, -2], row.names=FALSE)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), 1:8], smry)
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr, ylab="Mortality  (%)")
abline(fp$coef, lty=2)
abline(fLW$params)
legend("topleft", c("Litchfield Wilcoxon", "Probit"), lty=c(1, 2), bg="white")
}
graphics.off()
smrydat <- do.call(rbind, results)
write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
cleanup()
q()
q()
library(LW1949)
LWP()
cleanup()
xy <- 
structure(list(ID = 1:120, X = c(-102.6, -101.9, -97.1, -97, 
-95.7, -99.1, -100.1, -97.2, -97, -99.3, -96, -95.2, -98.8, -98.1, 
-99.6, -97.8, -96.1, -98.3, -95.6, -96.8, -101.2, -101.1, -97.2, 
-111.1, -111.2, -116, -117.6, -103.7, -107.1, -102.3, -105.6, 
-105.3, -108.5, -103.2, -94.1, -101.9, -94.7, -101.1, -97.9, 
-111.4, -111.2, -110.5, -111.3, -107.3, -102.3, -104.7, -106.7, 
-101.8, -106, -103, -107.9, -103.7, -103.8, -109.2, -108.9, -109.5, 
-102.1, -104.6, -105.6, -101.7, -104, -108.3, -107.1, -103.9, 
-105.2, -105.7, -104.7, -106.7, -108.8, -107.7, -102.2, -107.8, 
-109.4, -106.1, -106.4, -104.2, -101.1, -99.9, -99.7, -101.3, 
-113.3, -119.4, -113.8, -114.7, -112.8, -110.3, -113.6, -111.1, 
-116.3, -118.5, -118.9, -117.4, -111.7, -114.1, -114.8, -113.8, 
-115.8, -108.4, -109.1, -115.6, -114.2, -114, -113.4, -113.7, 
-114.5, -112.9, -116.4, -113.1, -114.4, -117.5, -118, -113.8, 
-112.8, -110.7, -113.6, -114.1, -114, -114.9, -112.7, -112.1), 
    Y = c(52.88, 52.08, 50.93, 52.35, 51.03, 49.55, 51.1, 49, 
    50.63, 53.15, 50.47, 49.62, 50.42, 49.18, 50.15, 53.97, 50.18, 
    49.95, 49.02, 49.53, 52.12, 53.97, 49.92, 58.77, 56.65, 58.38, 
    57.75, 58.18, 57.35, 55.53, 57.25, 55.15, 59.57, 56.23, 58.73, 
    54.77, 56.35, 56.87, 55.8, 52.07, 50.72, 49.12, 51.58, 49.72, 
    50.9, 49.38, 50.47, 51.52, 51.27, 49.22, 50.98, 50.55, 51.25, 
    51.52, 49.68, 50.9, 49.62, 52.82, 50.33, 50.13, 53.33, 52.77, 
    51.48, 51.98, 52.42, 53.22, 50.43, 52.17, 52.37, 50.27, 51.2, 
    49.37, 53.13, 53.92, 49, 49.82, 50.43, 49.92, 49.42, 49.18, 
    54.72, 55.2, 53.28, 54.13, 53.03, 54.42, 53.32, 53.88, 55.42, 
    56.08, 55.18, 56.23, 53.42, 53.88, 55.28, 55.97, 54.15, 55.83, 
    54.05, 51.2, 49.47, 51.12, 49, 49.93, 49.63, 51.47, 53.58, 
    50.88, 50.55, 53.4, 52.93, 52.45, 49.63, 50.02, 49.13, 51.78, 
    49.52, 52.42, 52.33, 50.05)), .Names = c("ID", "X", "Y"), row.names = c(NA, 
-120L), class = "data.frame")
arc <- structure(list(Long = c(662843L, 303344L, 634922L, 634177L, 310679L, 
494213L, 426481L, 629459L, 640032L, 481274L, 712879L, 341099L, 
514207L, 567047L, 459277L, 575434L, 709183L, 552371L, 309914L, 
661364L, 347328L, 362256L, 627057L, 493059L, 486510L, 556726L, 
463097L, 576453L, 371836L, 667253L, 462589L, 482793L, 642357L, 
614686L, 438047L, 314744L, 393704L, 373215L, 570837L, 469155L, 
485882L, 538672L, 475748L, 334217L, 691256L, 525404L, 382909L, 
307134L, 431634L, 647819L, 294333L, 595640L, 587238L, 626271L, 
650049L, 605478L, 709453L, 526955L, 460853L, 309177L, 566596L, 
685513L, 357648L, 574174L, 489798L, 455265L, 523438L, 382373L, 
647731L, 305459L, 693516L, 293105L, 607049L, 429728L, 399064L, 
558985L, 354402L, 431804L, 452858L, 334572L, 353150L, 347255L, 
309997L, 651587L, 377949L, 546719L, 328154L, 495398L, 544308L, 
404778L, 380285L, 472101L, 451486L, 689300L, 641007L, 323389L, 
579680L, 660968L, 624387L, 601305L, 704301L, 708545L, 325927L, 
304077L, 681973L, 370117L, 536414L, 355787L, 686312L, 464761L, 
430765L, 313128L, 370015L, 520058L, 308146L, 700041L, 284328L, 
641445L, 382795L, 419101L), Lat = c(5861664L, 5773823L, 5643796L, 
5801793L, 5656630L, 5488602L, 5661469L, 5428965L, 5610551L, 5888993L, 
5595190L, 5498706L, 5585348L, 5447873L, 5555464L, 5980796L, 5562753L, 
5533326L, 5432936L, 5488765L, 5776730L, 5982225L, 5531237L, 6514448L, 
6278448L, 6471427L, 6401046L, 6449487L, 6358353L, 6156961L, 6345385L, 
6111516L, 6606224L, 6233217L, 6510482L, 6073002L, 6246362L, 6304842L, 
6184398L, 5768919L, 5618707L, 5440930L, 5714384L, 5510039L, 5642229L, 
5469758L, 5592190L, 5711317L, 5680306L, 5453896L, 5651687L, 5600655L, 
5678368L, 5709223L, 5505129L, 5639776L, 5500421L, 5852322L, 5575467L, 
5556498L, 5909447L, 5850231L, 5705197L, 5759364L, 5807763L, 5896953L, 
5586493L, 5781340L, 5804407L, 5572216L, 5675712L, 5472494L, 5887928L, 
5975151L, 5428373L, 5518940L, 5588450L, 5530168L, 5474349L, 5449946L, 
6066019L, 6119675L, 5907208L, 6000473L, 5877156L, 6030491L, 5910972L, 
5970172L, 6141752L, 6216038L, 6116434L, 6231769L, 5919241L, 5974015L, 
6128195L, 6206356L, 6000898L, 6190147L, 5990754L, 5673065L, 5483528L, 
5667392L, 5430185L, 5534421L, 5500543L, 5703751L, 5936934L, 5638482L, 
5603087L, 5916899L, 5864980L, 5814647L, 5499049L, 5540892L, 5445238L, 
5740548L, 5489532L, 5809788L, 5799135L, 5544801L)), .Names = c("Long", 
"Lat"), class = "data.frame", row.names = c(NA, -120L))
library(rgdal)
utm <- project(as.matrix(xy[,c("X","Y")]), "+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs")
windows()
map("world", xlim=range(xy$X), ylim=range(xy$Y))
points(xy[, c("X", "Y")])
windows()
plot(utm)
windows()
plot(arc)
head(xy)
head(utm)
head(arc)
windows()
par(mfrow=(2, 2), mar=c(0, 0, 2, 0))
map("world", type="n", xlim=range(xy$X), ylim=range(xy$Y))
points(xy[, c("X", "Y")])
mtext("xy lat long", side=3)
plot(utm, xlab="", ylab="", main="xy utm", axes=FALSE)
plot(arc, xlab="", ylab="", main="arc utm, axes=FALSE)
par(mfrow=c(2, 2), mar=c(0, 0, 2, 0))
map("world", type="n", xlim=range(xy$X), ylim=range(xy$Y))
points(xy[, c("X", "Y")])
mtext("xy lat long", side=3)
plot(utm, xlab="", ylab="", main="xy utm", axes=FALSE)
plot(arc, xlab="", ylab="", main="arc utm, axes=FALSE)
windows()
par(mfrow=c(2, 2), mar=c(0, 0, 2, 0))
map("world", type="n", xlim=range(xy$X), ylim=range(xy$Y))
points(xy[, c("X", "Y")])
mtext("xy lat long", side=3)
plot(utm, xlab="", ylab="", main="xy utm", axes=FALSE)
plot(arc, xlab="", ylab="", main="arc utm, axes=FALSE)
windows()
par(mfrow=c(2, 2), mar=c(0, 0, 2, 0))
map("world", type="n", xlim=range(xy$X), ylim=range(xy$Y))
points(xy[, c("X", "Y")])
mtext("xy lat long", side=3)
plot(utm, xlab="", ylab="", main="xy utm", axes=FALSE)
plot(arc, xlab="", ylab="", main="arc utm, axes=FALSE)
graphics.off()
windows()
par(mfrow=c(2, 2), mar=c(0, 0, 2, 0))
map("world", type="n", xlim=range(xy$X), ylim=range(xy$Y))
points(xy[, c("X", "Y")])
mtext("xy lat long", side=3)
plot(utm, xlab="", ylab="", main="xy utm", axes=FALSE)
plot(arc, xlab="", ylab="", main="arc utm", axes=FALSE)
par("mar")
par(mfrow=c(2, 2), mar=c(0, 0, 2, 0))
map("world", type="n", xlim=range(xy$X), ylim=range(xy$Y), mar=c(0, 0, 2, 0))
points(xy[, c("X", "Y")])
mtext("xy lat long", side=3)
plot(utm, xlab="", ylab="", main="xy utm", axes=FALSE)
plot(arc, xlab="", ylab="", main="arc utm", axes=FALSE)
par(mfrow=c(2, 2), mar=c(0, 0, 2, 0))
map("world", type="n", xlim=range(xy$X), ylim=range(xy$Y), mar=c(0, 0, 2, 0))
points(xy[, c("X", "Y")])
mtext("xy lat long", side=3, font=2, line=1)
plot(utm, xlab="", ylab="", main="xy utm", axes=FALSE)
plot(arc, xlab="", ylab="", main="arc utm", axes=FALSE)
par(mfrow=c(2, 2))
map("world", type="n", xlim=range(xy$X), ylim=range(xy$Y), mar=c(1, 1, 2, 1))
points(xy[, c("X", "Y")])
mtext("xy lat long", side=3, font=2, line=1)
plot(utm, xlab="", ylab="", main="xy utm", axes=FALSE)
plot(arc, xlab="", ylab="", main="arc utm", axes=FALSE)
cleanup()
q()
svyplot
??svyplot
library(survey)
svyplot
design:::svyplot
showMethods("svyplot")
methods(svyplot)
svyplot.default
survey:::svyplot.default
data(api)
dstrat<-svydesign(id=~1,strata=~stype, weights=~pw, data=apistrat, fpc=~fpc)
svyplot(api00~api99, design=dstrat, style="bubble")
svyplot(api00~api99, design=dstrat, style="bubble", xlim=c(500, 700))
??julian
search()
ls(5)
doy
?doy
??Julian
?doy
plot(101:200, rnorm(100), axes=FALSE)
axis(1, at=doy(as.Date(paste(2000, 1:12, 1, sep="-")))-0.5, labels=FALSE)
axis(1, at=doy(as.Date(paste(2000, 1:12, 15, sep="-"))), labels=month.abb, tick=FALSE)
axis(2)
box()
file.choose
?file.choose
??file.choose
q()
Does not work when ,style="grayhex".
library(survey)
data(api)
dstrat<-svydesign(id=~1,strata=~stype, weights=~pw, data=apistrat, fpc=~fpc)
svyplot(api00~api99, design=dstrat, style="grayhex")
svyplot(api00~api99, design=dstrat, style="grayhex", ylim=c(500, 700))
?gplot.hexbin
gplot.hexbin
cleanup()
q()
utils:::menuInstallLocal()
?LW1949
library(LW1949)
?LW1949
?cheat
pkgin
utils:::menuInstallLocal()
detach()
utils:::menuInstallLocal()
library(LW1949)
cleanup()
q()
# C:\JVA\Consult\Przybyla-Kelly\Rinsing\Rinse v2.r
library(XLConnect)
doc <- startrtf(file=paste0(Sys.Date(), "Rinsing"), dir="C:/JVA/Consult/Przybyla-Kelly/Rinsing")
heading("Visualize Sequential Rinsing Data from Kasia Przybyla-Kelly")
heading(paste0(Sys.Date(), " - Jean V. Adams"), 2)
# read in the data
wb <- loadWorkbook("C:/JVA/Consult/Przybyla-Kelly/Rinsing/Sequential rinsing.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
dat1 <- dat[dat$Rinse==1, ]
dat1$Log_EC1 <- dat1$Log_EC
dat <- merge(dat, dat1[, c("Spiked_1", "Sample", "Log_EC1")], all.x=TRUE)
dat$EC <- 10^(dat$Log_EC)
dat$Log_ECDiff <- dat$Log_EC - dat$Log_EC1
dat$ECProp <- dat$EC/10^(dat$Log_EC1)
para("E. coli data included in the spreadsheet ** Sequential rinsing.xlsx ** are log10 transformed.")
para("E. coli concentrations were taken from a single spiked sample and four field samples (shoreline wrack).",
"  The spiked sample was created from the shoreline wrack of LV beach, homogenized, split into 3 replicates",
" (LV1, LV2, LV3) and each replicate was spiked with same E. coli concentration.",
"  Spiked samples were rinsed 7 times, and E. coli after each rinse was measured.",
"  The field samples included LS1, PL1, PL2, PL3.  All were analysed for E. coli concentrations.",  
"  Each was rinsed multiple times in order to get subsequent E. coli concentrations in a series of sequential rinsing.",  
"  Each sample had a different initial E. coli concentration, and each had different amount of rinses (4-8).")
attach(dat)
tab <- format(tapply(Log_EC, list(paste(Spiked_1, Sample, sep="-"), Rinse), mean))
tabl("E. coli concentrations (log10 transformed) after 1 to 8 rinses from a single spiked sample(LV1, LV2, LV3)",
" and four field samples (shoreline wrack LS1, PL1, PL2, PL3).  Rinses are in columns, samples are in rows.")
sug <- sort(unique(Spiked_1))
sus <- sort(unique(Sample))
suspch <- as.character(c(0:3, 1:3))
ax2 <- prettylog(EC, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.5)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. coli  (concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log10(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("E. coli concentrations versus number of rinses from a single spiked sample (LV1, LV2, LV3, plot characters 1-3)",
" and four field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
ax2 <- prettylog(ECProp, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.5)
plot(Rinse, log10(ECProp), type="n", xlab="Rinses  (number)", ylab="E. coli (proportional change from initial concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], log10(ECProp)[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log10(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("Proportional change in E. coli concentrations from the first rinse versus number of rinses",
" from a single spiked sample (LV1, LV2, LV3, plot characters 1-3)",
" and four field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
endrtf()
detach(dat)
# C:\JVA\Consult\Przybyla-Kelly\Rinsing\Rinse v2.r
library(XLConnect)
doc <- startrtf(file=paste0(Sys.Date(), "Rinsing"), dir="C:/JVA/Consult/Przybyla-Kelly/Rinsing")
heading("Visualize Sequential Rinsing Data from Kasia Przybyla-Kelly")
heading(paste0(Sys.Date(), " - Jean V. Adams"), 2)
# read in the data
wb <- loadWorkbook("C:/JVA/Consult/Przybyla-Kelly/Rinsing/Sequential rinsing.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
rm(wb)
dat$EC <- 10^dat$Log_EC
dat1 <- dat[dat$Rinse==1, ]
dat1$EC1 <- dat1$EC
dat <- merge(dat, dat1[, c("Spiked_1", "Sample", "EC1")], all.x=TRUE)
dat$ECProp <- dat$EC/dat$EC1
para("E. coli data included in the spreadsheet ** Sequential rinsing.xlsx ** are log10 transformed.")
para("E. coli concentrations were taken from a single spiked sample and four field samples (shoreline wrack).",
"  The spiked sample was created from the shoreline wrack of LV beach, homogenized, split into 3 replicates",
" (LV1, LV2, LV3) and each replicate was spiked with same E. coli concentration.",
"  Spiked samples were rinsed 7 times, and E. coli after each rinse was measured.",
"  The field samples included LS1, PL1, PL2, PL3.  All were analysed for E. coli concentrations.",  
"  Each was rinsed multiple times in order to get subsequent E. coli concentrations in a series of sequential rinsing.",  
"  Each sample had a different initial E. coli concentration, and each had different amount of rinses (4-8).")
attach(dat)
tab <- format(tapply(Log_EC, list(paste(Spiked_1, Sample, sep="-"), Rinse), mean))
tabl("E. coli concentrations (log10 transformed) after 1 to 8 rinses from a single spiked sample(LV1, LV2, LV3)",
" and four field samples (shoreline wrack LS1, PL1, PL2, PL3).  Rinses are in columns, samples are in rows.")
sug <- sort(unique(Spiked_1))
sus <- sort(unique(Sample))
suspch <- as.character(c(0:3, 1:3))
ax2 <- prettylog(EC, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.5)
plot(Rinse, Log_EC, type="n", xlab="Rinses  (number)", ylab="E. coli  (concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], Log_EC[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log10(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("E. coli concentrations versus number of rinses from a single spiked sample (LV1, LV2, LV3, plot characters 1-3)",
" and four field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
ax2 <- prettylog(ECProp, c(1, 2, 5))
fig <- function() {
par(mar=c(4, 4, 1, 1), las=1, cex=1.5)
plot(Rinse, log10(ECProp), type="n", xlab="Rinses  (number)", ylab="E. coli (proportional change from initial concentration)", axes=FALSE)
for(i in seq(sug)) {
for(j in seq(sus)) {
sel <- Spiked_1 == sug[i] & Sample == sus[j]
if(sum(sel)>0) {
points(Rinse[sel], log10(ECProp)[sel], pch=suspch[j], col=blindcolz[i+1], type="b", lwd=2, lty=i)
}
}}
axis(1)
axis(2, at=log10(ax2), labels=ax2)
box()
legend("topright", rev(c("Shoreline wrack", "Spiked sample")), col=rev(blindcolz[2:3]), lwd=2, lty=rev(1:2))
}
figu("Proportional change in E. coli concentrations from the first rinse versus number of rinses",
" from a single spiked sample (LV1, LV2, LV3, plot characters 1-3)",
" and four field samples (shoreline wrack LS1, PL1, PL2, PL3, plot characters 0-3).", h=6.5, w=6.5, newpage="port")
endrtf()
detach(dat)
dat
write.csv(dat, "C:/JVA/Consult/Przybyla-Kelly/Rinsing/RinsingData.csv", row.names=FALSE)
cleanup()
q()
?cheat
wb <- loadWorkbook("C:/JVA/GLFC/People/Mullett/pub-SpawnDis/drainvscms-revised.xls")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
dim(dat)
dat
dis <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
wb <- loadWorkbook("C:/JVA/GLFC/People/Mullett/pub-SpawnDis/drainvscms-revised.xls")
dis <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
dis$region <- casefold(dis$region)
names(dis)
#[1] "lake" "region" "stream" "drainage.sqkm" "avgdisch.cms" 
attach(dis)
sul <- sort(unique(lake))
####################### figure ##############################
windows()
plot(avgdisch.cms, drainage.sqkm, type="n", xlab=paste("Average discharge 1986-1999  (m", ALL.ASCII[179.], "/s)", sep=""), 
    ylab=paste("Drainage area  (km" ,sup2(), ")", sep=""))
text(avgdisch.cms, drainage.sqkm, substring(lake, 1, 1), csi=0.15)
for(i in seq(sul)) {
    sel <- lake==sul[i]
    abline(lsfit(avgdisch.cms[sel], drainage.sqkm[sel]), lty=c(4, 2, 3, 1)[i])
    print(sul[i])
    print(cor.test(avgdisch.cms[sel], drainage.sqkm[sel]))
    }
legend(0, 5500, c("Michigan", "Huron", "Superior", "Ontario"), pch="MHSO", lty=c(2, 4, 1, 3), csi=0.15)
UR(prg="discharge.prg")
####################### figure ##############################
windows()
plot(avgdisch.cms, drainage.sqkm, type="n", xlab="Average discharge 1986-1999  (cms)", ylab="Drainage area  (km2)")
text(avgdisch.cms, drainage.sqkm, substring(lake, 1, 1), csi=0.15)
for(i in seq(sul)) {
    sel <- lake==sul[i]
    abline(lsfit(avgdisch.cms[sel], drainage.sqkm[sel]), lty=c(4, 2, 3, 1)[i])
    print(sul[i])
    print(cor.test(avgdisch.cms[sel], drainage.sqkm[sel]))
    }
legend(0, 5500, c("Michigan", "Huron", "Superior", "Ontario"), pch="MHSO", lty=c(2, 4, 1, 3), csi=0.15)
UR(prg="discharge.prg")
par(mar=c(4, 4, 1, 1), las=1
plot(avgdisch.cms, drainage.sqkm, type="n", xlab="Average discharge 1986-1999  (cms)", ylab="Drainage area  (km2)")
text(avgdisch.cms, drainage.sqkm, substring(lake, 1, 1), csi=0.15)
for(i in seq(sul)) {
    sel <- lake==sul[i]
    abline(lsfit(avgdisch.cms[sel], drainage.sqkm[sel]), lty=c(4, 2, 3, 1)[i])
    print(sul[i])
    print(cor.test(avgdisch.cms[sel], drainage.sqkm[sel]))
    }
legend(0, 5500, c("Michigan", "Huron", "Superior", "Ontario"), pch="MHSO", lty=c(2, 4, 1, 3), csi=0.15)
par(mar=c(4, 4, 1, 1), las=1
plot(avgdisch.cms, drainage.sqkm, type="n", xlab="Average discharge 1986-1999  (cms)", ylab="Drainage area  (km2)")
text(avgdisch.cms, drainage.sqkm, substring(lake, 1, 1), csi=0.15)
for(i in seq(sul)) {
    sel <- lake==sul[i]
    abline(lsfit(avgdisch.cms[sel], drainage.sqkm[sel]), lty=c(4, 2, 3, 1)[i])
    print(sul[i])
    print(cor.test(avgdisch.cms[sel], drainage.sqkm[sel]))
    }
legend("topleft", c("Michigan", "Huron", "Superior", "Ontario"), pch=c("M", "H", "S", "O"), lty=c(2, 4, 1, 3), csi=0.15)
legend("topleft", c("Michigan", "Huron", "Superior", "Ontario"), pch=c("M", "H", "S", "O"), lty=c(2, 4, 1, 3))
par(mar=c(4, 4, 1, 1), las=1
plot(avgdisch.cms, drainage.sqkm, type="n", xlab="Average discharge 1986-1999  (cms)", ylab="Drainage area  (km2)")
text(avgdisch.cms, drainage.sqkm, substring(lake, 1, 1), csi=0.15)
for(i in seq(sul)) {
    sel <- lake==sul[i]
    abline(lsfit(avgdisch.cms[sel], drainage.sqkm[sel]), lty=c(4, 2, 3, 1)[i])
    print(sul[i])
    print(cor.test(avgdisch.cms[sel], drainage.sqkm[sel]))
    }
legend("topleft", c("M  Michigan", "H  Huron", "S  Superior", "O  Ontario"), lty=c(2, 4, 1, 3))
par(mar=c(4, 4, 1, 1), las=1
plot(avgdisch.cms, drainage.sqkm, type="n", xlab="Average discharge 1986-1999  (cms)", ylab="Drainage area  (km2)")
text(avgdisch.cms, drainage.sqkm, substring(lake, 1, 1), csi=0.15)
for(i in seq(sul)) {
    sel <- lake==sul[i]
    abline(lsfit(avgdisch.cms[sel], drainage.sqkm[sel]), lty=c(4, 2, 3, 1)[i])
    print(sul[i])
    print(cor.test(avgdisch.cms[sel], drainage.sqkm[sel]))
    }
legend("topleft", c("M  Michigan", "H  Huron", "S  Superior", "O  Ontario"), lty=c(2, 4, 1, 3))
####################### figure ##############################
windows()
par(mar=c(4, 4, 1, 1), las=1
plot(avgdisch.cms, drainage.sqkm, type="n", xlab="Average discharge 1986-1999  (cms)", ylab="Drainage area  (km2)")
text(avgdisch.cms, drainage.sqkm, substring(lake, 1, 1), csi=0.15)
for(i in seq(sul)) {
    sel <- lake==sul[i]
    abline(lsfit(avgdisch.cms[sel], drainage.sqkm[sel]), lty=c(4, 2, 3, 1)[i])
    print(sul[i])
    print(cor.test(avgdisch.cms[sel], drainage.sqkm[sel]))
    }
legend("topleft", c("M  Michigan", "H  Huron", "S  Superior", "O  Ontario"), lty=c(2, 4, 1, 3))
####################### figure ##############################
windows()
par(mar=c(4, 4, 1, 1), las=1)
plot(avgdisch.cms, drainage.sqkm, type="n", xlab="Average discharge 1986-1999  (cms)", ylab="Drainage area  (km2)")
text(avgdisch.cms, drainage.sqkm, substring(lake, 1, 1), csi=0.15)
for(i in seq(sul)) {
    sel <- lake==sul[i]
    abline(lsfit(avgdisch.cms[sel], drainage.sqkm[sel]), lty=c(4, 2, 3, 1)[i])
    print(sul[i])
    print(cor.test(avgdisch.cms[sel], drainage.sqkm[sel]))
    }
legend("topleft", c("M  Michigan", "H  Huron", "S  Superior", "O  Ontario"), lty=c(2, 4, 1, 3))
####################### figure ##############################
windows()
par(mar=c(4, 4, 1, 1), las=1)
plot(avgdisch.cms, drainage.sqkm, type="n", xlab="Average discharge 1986-1999  (cms)", ylab="Drainage area  (km2)")
text(avgdisch.cms, drainage.sqkm, substring(lake, 1, 1))
for(i in seq(sul)) {
    sel <- lake==sul[i]
    abline(lsfit(avgdisch.cms[sel], drainage.sqkm[sel]), lty=c(4, 2, 3, 1)[i])
    print(sul[i])
    print(cor.test(avgdisch.cms[sel], drainage.sqkm[sel]))
    }
legend("topleft", c("M  Michigan", "H  Huron", "S  Superior", "O  Ontario"), lty=c(2, 4, 1, 3))
####################### figure ##############################
windows()
par(mar=c(4, 5, 1, 1), las=1)
plot(avgdisch.cms, drainage.sqkm, type="n", xlab="Average discharge 1986-1999  (cms)", ylab="Drainage area  (km2)\n ")
text(avgdisch.cms, drainage.sqkm, substring(lake, 1, 1))
for(i in seq(sul)) {
    sel <- lake==sul[i]
    abline(lsfit(avgdisch.cms[sel], drainage.sqkm[sel]), lty=c(4, 2, 3, 1)[i])
    print(sul[i])
    print(cor.test(avgdisch.cms[sel], drainage.sqkm[sel]))
    }
legend("topleft", c("M  Michigan", "H  Huron", "S  Superior", "O  Ontario"), lty=c(2, 4, 1, 3))
# log scale
windows()
par(mar=c(4, 5, 1, 1), las=1)
plot(avgdisch.cms, drainage.sqkm, log="xy", type="n", xlab="Average discharge 1986-1999  (cms)", ylab="Drainage area  (km2)\n ")
text(avgdisch.cms, drainage.sqkm, substring(lake, 1, 1))
for(i in seq(sul)) {
    sel <- lake==sul[i]
    p <- predict(lm(drainage.sqkm[sel] ~ avgdisch.cms[sel]))
    lines(avgdisch.cms[sel], p, lty=c(4, 2, 3, 1)[i])
    print(sul[i])
    print(cor.test(avgdisch.cms[sel], drainage.sqkm[sel]))
    }
legend("topleft", c("M  Michigan", "H  Huron", "S  Superior", "O  Ontario"), lty=c(2, 4, 1, 3))
dis
search()
detach()
cleanup()
graphics.off()
# C:\JVA\GLFC\People\Mullett\pub-SpawnDis\discharge v2.r - plots of discharge vs. drainage for Mullett's SLIS II paper
wb <- loadWorkbook("C:/JVA/GLFC/People/Mullett/pub-SpawnDis/drainvscms-revised.xls")
dis <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
dis$region <- casefold(dis$region)
names(dis)
#[1] "lake" "region" "stream" "drainage.sqkm" "avgdisch.cms" 
dis <- dis[order(dis$lake, dis$avgdisch.cms), ]
attach(dis)
sul <- sort(unique(lake))
####################### figure ##############################
windows()
par(mar=c(4, 5, 1, 1), las=1)
plot(avgdisch.cms, drainage.sqkm, type="n", xlab="Average discharge 1986-1999  (cms)", ylab="Drainage area  (km2)\n ")
text(avgdisch.cms, drainage.sqkm, substring(lake, 1, 1))
for(i in seq(sul)) {
    sel <- lake==sul[i]
    abline(lsfit(avgdisch.cms[sel], drainage.sqkm[sel]), lty=c(4, 2, 3, 1)[i])
    print(sul[i])
    print(cor.test(avgdisch.cms[sel], drainage.sqkm[sel]))
    }
legend("topleft", c("M  Michigan", "H  Huron", "S  Superior", "O  Ontario"), lty=c(2, 4, 1, 3))
# log scale
windows()
par(mar=c(4, 5, 1, 1), las=1)
plot(avgdisch.cms, drainage.sqkm, log="xy", type="n", xlab="Average discharge 1986-1999  (cms)", ylab="Drainage area  (km2)\n ")
text(avgdisch.cms, drainage.sqkm, substring(lake, 1, 1))
for(i in seq(sul)) {
    sel <- lake==sul[i]
    p <- predict(lm(drainage.sqkm[sel] ~ avgdisch.cms[sel]))
    lines(avgdisch.cms[sel], p, lty=c(4, 2, 3, 1)[i])
    print(sul[i])
    print(cor.test(avgdisch.cms[sel], drainage.sqkm[sel]))
    }
legend("topleft", c("M  Michigan", "H  Huron", "S  Superior", "O  Ontario"), lty=c(2, 4, 1, 3))
windows()
plot(avgdisch.cms, drainage.sqkm, log="xy", type="n", xlab="Average discharge 1986-1999  (cms)", ylab="Drainage area  (km2)")
text(avgdisch.cms, drainage.sqkm, substring(lake, 1, 1), csi=0.15)
for(i in seq(sul)) {
    sel <- lake==sul[i]
    p <- predict(lm(drainage.sqkm[sel] ~ avgdisch.cms[sel]))
    lines(avgdisch.cms[sel], p, lty=c(4, 2, 3, 1)[i])
    print(sul[i])
    print(cor.test(log(avgdisch.cms[sel]), log(drainage.sqkm[sel])))
    }
legend(2, 3800, c("Michigan", "Huron", "Superior", "Ontario"), pch="MHSO", lty=c(2, 4, 1, 3), csi=0.15)
p
# log scale
windows()
par(mar=c(4, 5, 1, 1), las=1)
plot(avgdisch.cms, drainage.sqkm, log="xy", type="n", xlab="Average discharge 1986-1999  (cms)", ylab="Drainage area  (km2)\n ")
text(avgdisch.cms, drainage.sqkm, substring(lake, 1, 1))
for(i in seq(sul)) {
    sel <- lake==sul[i]
    p <- predict(lm(log(drainage.sqkm)[sel] ~ log(avgdisch.cms)[sel]))
    lines(avgdisch.cms[sel], exp(p), lty=c(4, 2, 3, 1)[i])
    print(sul[i])
    print(cor.test(avgdisch.cms[sel], drainage.sqkm[sel]))
    }
legend("topleft", c("M  Michigan", "H  Huron", "S  Superior", "O  Ontario"), lty=c(2, 4, 1, 3))
windows()
par(mar=c(4, 5, 1, 1), las=1)
plot(avgdisch.cms, drainage.sqkm, type="n", xlab="Average discharge 1986-1999  (cms)", ylab="Drainage area  (km2)\n ")
text(avgdisch.cms, drainage.sqkm, substring(lake, 1, 1))
for(i in seq(sul)) {
    sel <- lake==sul[i]
    p <- predict(lm(log(drainage.sqkm)[sel] ~ log(avgdisch.cms)[sel]))
    lines(avgdisch.cms[sel], exp(p), lty=c(4, 2, 3, 1)[i])
    print(sul[i])
    print(cor.test(avgdisch.cms[sel], drainage.sqkm[sel]))
    }
legend("topleft", c("M  Michigan", "H  Huron", "S  Superior", "O  Ontario"), lty=c(2, 4, 1, 3))
####################### figure ##############################
# log scale
windows()
par(mar=c(4, 5, 1, 1), las=1)
plot(avgdisch.cms, drainage.sqkm, log="xy", type="n", xlab="Average discharge 1986-1999  (cms)", ylab="Drainage area  (km2)\n ")
text(avgdisch.cms, drainage.sqkm, substring(lake, 1, 1))
# for(i in seq(sul)) {
# sel <- lake==sul[i]
# p <- predict(lm(log(drainage.sqkm)[sel] ~ log(avgdisch.cms)[sel]))
# lines(avgdisch.cms[sel], exp(p), lty=c(4, 2, 3, 1)[i])
# print(sul[i])
# print(cor.test(avgdisch.cms[sel], drainage.sqkm[sel]))
# }
legend("topleft", c("M  Michigan", "H  Huron", "S  Superior", "O  Ontario"), lty=c(2, 4, 1, 3))
par(mar=c(4, 5, 1, 1), las=1)
plot(avgdisch.cms, drainage.sqkm, log="xy", type="n", xlab="Average discharge 1986-1999  (cms)", ylab="Drainage area  (km2)\n ")
text(avgdisch.cms, drainage.sqkm, substring(lake, 1, 1))
# for(i in seq(sul)) {
# sel <- lake==sul[i]
# p <- predict(lm(log(drainage.sqkm)[sel] ~ log(avgdisch.cms)[sel]))
# lines(avgdisch.cms[sel], exp(p), lty=c(4, 2, 3, 1)[i])
# print(sul[i])
# print(cor.test(avgdisch.cms[sel], drainage.sqkm[sel]))
# }
# legend("topleft", c("M  Michigan", "H  Huron", "S  Superior", "O  Ontario"), lty=c(2, 4, 1, 3))
dim(dis)
cleanup()
q()
ACF1SIM <- structure(c(0.406666666666667, 0.519, 0.935, 1.331, 1.49666666666667,
0.456666666666667, 0.54, 0.848333333333333, 1.20016666666667,
1.27, 0.526666666666667, 0.556333333333333, 0.883333333333333,
1.34783333333333, 1.44, 0.8, 0.923083333333333, 1.38666666666667,
1.85958333333333, 2.17666666666667, 0.883333333333333, 1.162,
1.655, 2.34658333333333, 2.65666666666667, 0.46, 0.579666666666667,
0.908333333333333, 1.53366666666667, 1.58, 0.74, 0.87475, 1.37333333333333,
1.76875, 1.95, 0.686666666666667, 0.74475, 1.09833333333333,
1.48508333333333, 1.56666666666667, 0.633333333333333, 0.746666666666667,
1.04, 1.448, 1.61666666666667, 0.516666666666667, 0.576166666666667,
0.978333333333333, 1.40191666666667, 1.46666666666667, 0.46,
0.559833333333333, 0.913333333333333, 1.28858333333333, 1.53333333333333,
0.71, 0.8095, 1.26, 1.87658333333333, 2.15, 0.656666666666667,
0.70825, 0.933333333333333, 1.31716666666667, 1.41, 0.67, 0.79075,
1.11333333333333, 1.59508333333333, 1.69, 0.78, 0.81125, 1.18333333333333,
1.58875, 1.73666666666667, 0.813333333333333, 0.9095, 1.32666666666667,
1.87066666666667, 1.93666666666667, 0.763333333333333, 0.80475,
1.15, 1.57908333333333, 1.83666666666667, 0.596666666666667,
0.682833333333333, 1.07833333333333, 1.5515, 1.81666666666667,
0.476666666666667, 0.673166666666667, 1.04, 1.53, 2.11666666666667,
0.706666666666667, 0.79825, 1.11, 1.66875, 1.79333333333333,
0.656666666666667, 0.773166666666667, 1.17166666666667, 1.6275,
1.75, 0.493333333333333, 0.534583333333333, 0.846666666666667,
1.19416666666667, 1.30666666666667, 0.633333333333333, 0.719916666666667,
1.12666666666667, 1.52525, 1.93, 0.383333333333333, 0.45025,
0.843333333333333, 1.18741666666667, 1.26, 0.37, 0.401416666666667,
0.655, 0.998416666666667, 1.11666666666667, 0.366666666666667,
0.584916666666667, 0.895, 1.3, 1.42333333333333, 0.43, 0.483,
0.813333333333333, 1.264, 1.38, 0.45, 0.533, 0.893333333333333,
1.31858333333333, 1.46, 0.706666666666667, 0.747916666666667,
1.09333333333333, 1.58575, 1.69666666666667, 0.41, 0.479166666666667,
0.755, 1.2035, 1.37), .Dim = c(5L, 30L), .Dimnames = list(c("0%",
"2.5%", "50%", "97.5%", "100%"), NULL))
time<-1971:2000
matplot(time, t(ACF1SIM), type="l", ylim=c(0.2,2.5), col=c("darkred","red3","orange","yellow","darkblue"), lty=c(2,3,1,4,6),
lwd=c(2,1.9,2.5,1.9,2), cex.lab=1.4, cex.axis=1.5, ylab="Quantiles")
:\JVA\Consult\Bunnell\Diet overlap\DietOverlap.r
# bring in the data ... you'll need to change the file location
library(XLConnect)
# wb <- loadWorkbook("g:/FoodWebModel/GLRI/diet/Ms_95_10/diet overlap/large_alewife_46m_fall_stb.xlsx")
wb <- loadWorkbook("C:/JVA/Consult/Bunnell/Diet overlap/large_alewife_46m_fall_stb.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
?cheat
loadWorkbook("C:/JVA/Consult/Bunnell/Diet overlap/large_alewife_46m_fall_stb.xlsx")
wb <- loadWorkbook("C:/JVA/Consult/Bunnell/Diet overlap/large_alewife_46m_fall_stb.xlsx")
cleanup()
graphics.off()
# C:\JVA\Consult\Bunnell\Diet overlap\DietOverlap.r
# bring in the data ... you'll need to change the file location
library(XLConnect)
# wb <- loadWorkbook("g:/FoodWebModel/GLRI/diet/Ms_95_10/diet overlap/large_alewife_46m_fall_stb.xlsx")
wb <- loadWorkbook("C:/JVA/Consult/Bunnell/Diet overlap/large_alewife_46m_fall_stb.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
# attach the data, so I can just refer to column names (without dat$ prefix)
attach(dat)
# unique values
sus <- sort(unique(season))
sup <- sort(unique(portno))
sud <- sort(unique(depth))
sut <- sort(unique(species))
# create an empty data frame to store the results in
nrows <- length(sus)*length(sup)*length(sud)*choose(length(sut), 2)
results <- data.frame(season=rep(NA, nrows), portno=NA, depth=NA, species1=NA, species2=NA, overlap=NA)
# use for() loops to calculate overlap between all possible pairs
# (not the most efficient way to code it ... but I think it's the clearest way)
# row counter for filling results
count <- 0
# season, port, depth
for(i in seq(sus)) {
for(j in seq(sup)) {
for(k in seq(sud)) {
# unique pairs of species
for(s1 in seq(sut)[-length(sut)]) {
for(s2 in (s1+1):length(sut)) {
# keep the row counter moving
count <- count + 1
# subset the data by season, port, and depth
sel <- season==sus[i] & portno==sup[j] & depth==sud[k]
# grap diet data from paired species
Pxi <- dietprop[sel & species==sut[s1]]
Pyi <- dietprop[sel & species==sut[s2]]
# calculate overlap if both species had diet data
if(length(Pxi) > 0 & length(Pyi) > 0) {
# make sure the proportions add up to 1 exactly (they currently range from 0.99999 to 1.00001)
Pxi <- Pxi/sum(Pxi)
Pyi <- Pyi/sum(Pyi)
overlap <- 1 - 0.5 * sum(abs(Pxi - Pyi))
} else {
overlap <- NA
}
# fill in the results data frame
results[count, c("season", "portno", "depth", "overlap")] <- c(sus[i], sup[j], sud[k], overlap)
results[count, c("species1", "species2")] <- c(sut[s1], sut[s2])
}}
}}}
# remove un-needed variables
rm(wb, nrows, count, i, j, k, s1, s2, sel, Pxi, Pyi, overlap)
# detach the data
detach(dat)
dim(dat)
dim(results)
head(results)
results[1:100, ]
sus
sup
sud
sut
?seq
seq(sus)
seq_along(sus)
# attach the data, so I can just refer to column names (without dat$ prefix)
attach(dat)
# unique values
sus <- sort(unique(season))
sup <- sort(unique(portno))
sud <- sort(unique(depth))
sut <- sort(unique(species))
# create an empty data frame to store the results in
nrows <- length(sus)*length(sup)*length(sud)*choose(length(sut), 2)
results <- data.frame(season=rep(NA, nrows), portno=NA, depth=NA, species1=NA, species2=NA, overlap=NA)
# use for() loops to calculate overlap between all possible pairs
# (not the most efficient way to code it ... but I think it's the clearest way)
# row counter for filling results
count <- 0
# season, port, depth
for(i in seq_along(sus)) {
for(j in seq_along(sup)) {
for(k in seq_along(sud)) {
# unique pairs of species
for(s1 in seq_along(sut)[-length(sut)]) {
for(s2 in (s1+1):length(sut)) {
# keep the row counter moving
count <- count + 1
# subset the data by season, port, and depth
sel <- season==sus[i] & portno==sup[j] & depth==sud[k]
# grap diet data from paired species
Pxi <- dietprop[sel & species==sut[s1]]
Pyi <- dietprop[sel & species==sut[s2]]
# calculate overlap if both species had diet data
if(length(Pxi) > 0 & length(Pyi) > 0) {
# make sure the proportions add up to 1 exactly (they currently range from 0.99999 to 1.00001)
Pxi <- Pxi/sum(Pxi)
Pyi <- Pyi/sum(Pyi)
overlap <- 1 - 0.5 * sum(abs(Pxi - Pyi))
} else {
overlap <- NA
}
# fill in the results data frame
results[count, c("season", "portno", "depth", "overlap")] <- c(sus[i], sup[j], sud[k], overlap)
results[count, c("species1", "species2")] <- c(sut[s1], sut[s2])
}}
}}}
# remove un-needed variables
rm(wb, nrows, count, i, j, k, s1, s2, sel, Pxi, Pyi, overlap)
# detach the data
detach(dat)
search()
cleanup()
# C:\JVA\Consult\Bunnell\Diet overlap\DietOverlap.r
# bring in the data ... you'll need to change the file location
library(XLConnect)
# wb <- loadWorkbook("g:/FoodWebModel/GLRI/diet/Ms_95_10/diet overlap/large_alewife_46m_fall_stb.xlsx")
wb <- loadWorkbook("C:/JVA/Consult/Bunnell/Diet overlap/large_alewife_46m_fall_stb.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1])
# attach the data, so I can just refer to column names (without dat$ prefix)
attach(dat)
# unique values
sus <- sort(unique(season))
sup <- sort(unique(portno))
sud <- sort(unique(depth))
sut <- sort(unique(species))
# create an empty data frame to store the results in
nrows <- length(sus)*length(sup)*length(sud)*choose(length(sut), 2)
results <- data.frame(season=rep(NA, nrows), portno=NA, depth=NA, species1=NA, species2=NA, overlap=NA)
# use for() loops to calculate overlap between all possible pairs
# (not the most efficient way to code it ... but I think it's the clearest way)
# row counter for filling results
count <- 0
# season, port, depth
for(i in seq_along(sus)) {
for(j in seq_along(sup)) {
for(k in seq_along(sud)) {
# unique pairs of species
for(s1 in seq_along(sut)[-length(sut)]) {
for(s2 in (s1+1):length(sut)) {
# keep the row counter moving
count <- count + 1
# subset the data by season, port, and depth
sel <- season==sus[i] & portno==sup[j] & depth==sud[k]
# grap diet data from paired species
Pxi <- dietprop[sel & species==sut[s1]]
Pyi <- dietprop[sel & species==sut[s2]]
# calculate overlap if both species had diet data
if(length(Pxi) > 0 & length(Pyi) > 0) {
# make sure the proportions add up to 1 exactly (they currently range from 0.99999 to 1.00001)
Pxi <- Pxi/sum(Pxi)
Pyi <- Pyi/sum(Pyi)
overlap <- 1 - 0.5 * sum(abs(Pxi - Pyi))
} else {
overlap <- NA
}
# fill in the results data frame
results[count, c("season", "portno", "depth", "overlap")] <- c(sus[i], sup[j], sud[k], overlap)
results[count, c("species1", "species2")] <- c(sut[s1], sut[s2])
}}
}}}
# remove un-needed variables
rm(wb, nrows, count, i, j, k, s1, s2, sel, Pxi, Pyi, overlap)
# detach the data
detach(dat)
dim(dat)
dat
dim(results)
results
# assign all depths > 50 to a single depth group, 110
results$depgrp <- ifelse(results$depth>50, 110, results$depth)
# subset the results, getting rid of all the mis-matches
sub <- results[!is.na(results$overlap), ]
dim(results)
dim(sub)
# look at the subsetted results, sorted by species, depth, port, ...
sub[order(sub$species1, sub$species2, sub$depgrp, sub$portno, sub$season, sub$overlap), ]
# alternatively, read in the data as a csv file
# dat <- read.csv("g:/FoodWebModel/GLRI/diet/Ms_95_10/diet overlap/large_alewife_46m_fall_stb.csv", as.is=TRUE)
dat <- read.csv("C:/JVA/Consult/Bunnell/Diet overlap/large_alewife_46m_fall_stb.csv", as.is=TRUE)
dat
q()
10-7.65
(10-7.65) + 4 + 52/60
.217*60
cleanup()
q()
dfclip
dfclip()
dat <- dfclip()
head(dat)
lapply(dat, class)
dput(dat)
?cut
{
dat <- structure(list(Type = c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 
1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 2L, 
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 
2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 
3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 3L, 
3L, 3L, 3L, 3L, 3L), Mesh = c(2, 2.5, 3, 3.5, 4, 4.5, 5, 2, 2.5, 
3, 3.5, 4, 2, 2.5, 3, 3.5, 4, 4.5, 5, 2, 2.5, 3, 3.5, 4, 4.5, 
5, 3.5, 4, 2, 2.5, 3, 4, 5, 2, 2.5, 3.5, 4, 4.5, 2, 2.5, 3, 3.5, 
4, 4.5, 5, 2.5, 3, 3.5, 4, 4.5, 5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 
2, 2.5, 3, 3.5, 4, 5, 2.5, 3, 4, 4.5, 5, 2, 2.5, 3, 3.5, 4, 4.5, 
2, 2.5, 3, 3.5, 4, 5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 2, 2.5, 3, 3.5, 
4, 4.5, 5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 2, 3, 3.5, 4, 4.5, 5, 2, 
2.5, 3, 3.5, 4, 4.5, 5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 2, 3, 3.5, 
4, 4.5, 5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 2.5, 3, 3.5, 4, 4.5, 5, 
2, 2.5, 3.5, 4, 4.5, 5, 2, 2.5, 3, 3.5, 4, 5, 2, 2.5, 3, 3.5, 
4, 4.5, 5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 2, 2.5, 3, 3.5, 4, 4.5, 
5, 2, 2.5, 3, 3.5, 4.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 2, 2.5, 3, 
3.5, 4, 4.5, 5, 2, 2.5, 3, 3.5, 4, 5, 3, 3.5, 4.5, 5, 2, 2.5, 
3, 3.5, 4, 4.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 2, 2.5, 3, 3.5, 4, 
4.5, 5), WE = c(11L, 10L, 6L, 12L, 3L, 1L, 1L, 5L, 1L, 3L, 4L, 
6L, 0L, 16L, 20L, 20L, 17L, 22L, 2L, 5L, 13L, 36L, 17L, 27L, 
16L, 8L, 7L, 11L, 3L, 18L, 59L, 32L, 7L, 4L, 37L, 21L, 68L, 82L, 
17L, 38L, 139L, 55L, 21L, 25L, 56L, 8L, 36L, 10L, 19L, 25L, 7L, 
9L, 1L, 10L, 2L, 3L, 5L, 3L, 3L, 13L, 14L, 33L, 11L, 3L, 2L, 
2L, 4L, 4L, 2L, 11L, 10L, 3L, 3L, 1L, 0L, 4L, 4L, 1L, 2L, 0L, 
0L, 4L, 9L, 16L, 19L, 8L, 5L, 2L, 12L, 3L, 17L, 15L, 23L, 10L, 
4L, 5L, 1L, 7L, 21L, 11L, 1L, 2L, 2L, 5L, 10L, 10L, 3L, 2L, 4L, 
18L, 99L, 72L, 61L, 31L, 20L, 5L, 3L, 22L, 36L, 21L, 57L, 10L, 
0L, 2L, 3L, 13L, 18L, 4L, 4L, 1L, 1L, 9L, 9L, 5L, 0L, 4L, 22L, 
18L, 23L, 17L, 1L, 1L, 0L, 3L, 1L, 1L, 1L, 11L, 12L, 2L, 1L, 
3L, 0L, 2L, 0L, 0L, 3L, 2L, 1L, 0L, 17L, 2L, 42L, 36L, 19L, 4L, 
16L, 5L, 11L, 17L, 42L, 33L, 6L, 6L, 4L, 3L, 20L, 31L, 24L, 1L, 
14L, 55L, 27L, 17L, 7L, 2L, 3L, 24L, 74L, 72L, 28L, 32L, 17L, 
11L, 20L, 46L, 52L, 67L, 27L, 7L, 6L, 4L, 2L, 16L, 0L, 5L, 8L, 
19L, 5L, 1L, 4L, 12L, 12L, 12L, 7L, 5L, 1L, 0L, 6L, 5L, 3L, 3L, 
1L), Holes = c(9600L, 6144L, 4320L, 3151L, 2400L, 1908L, 1536L, 
9600L, 6144L, 4320L, 3151L, 2400L, 9600L, 6144L, 4320L, 3151L, 
2400L, 1908L, 1536L, 9600L, 6144L, 4320L, 3151L, 2400L, 1908L, 
1536L, 3151L, 2400L, 9600L, 6144L, 4320L, 2400L, 1536L, 9600L, 
6144L, 3151L, 2400L, 1908L, 9600L, 6144L, 4320L, 3151L, 2400L, 
1908L, 1536L, 6144L, 4320L, 3151L, 2400L, 1908L, 1536L, 9600L, 
6144L, 4320L, 3151L, 2400L, 1908L, 1536L, 9600L, 6144L, 4320L, 
3151L, 2400L, 1536L, 6144L, 4320L, 2400L, 1908L, 1536L, 12300L, 
7680L, 5400L, 3933L, 3000L, 2394L, 12300L, 7680L, 5400L, 3933L, 
3000L, 1920L, 12300L, 7680L, 5400L, 3933L, 3000L, 2394L, 1920L, 
12300L, 7680L, 5400L, 3933L, 3000L, 2394L, 1920L, 12300L, 7680L, 
5400L, 3933L, 3000L, 2394L, 1920L, 12300L, 5400L, 3933L, 3000L, 
2394L, 1920L, 12300L, 7680L, 5400L, 3933L, 3000L, 2394L, 1920L, 
12300L, 7680L, 5400L, 3933L, 3000L, 2394L, 1920L, 12300L, 5400L, 
3933L, 3000L, 2394L, 1920L, 12300L, 7680L, 5400L, 3933L, 3000L, 
2394L, 1920L, 7680L, 5400L, 3933L, 3000L, 2394L, 1920L, 12300L, 
7680L, 3933L, 3000L, 2394L, 1920L, 12300L, 7920L, 5400L, 3933L, 
3000L, 1920L, 12300L, 7920L, 5400L, 3933L, 3000L, 2394L, 1920L, 
12300L, 7920L, 5400L, 3933L, 3000L, 2394L, 1920L, 12300L, 7920L, 
5400L, 3933L, 3000L, 2394L, 1920L, 12300L, 7920L, 5400L, 3933L, 
2394L, 12300L, 7920L, 5400L, 3933L, 3000L, 2394L, 1920L, 12300L, 
7920L, 5400L, 3933L, 3000L, 2394L, 1920L, 12300L, 7920L, 5400L, 
3933L, 3000L, 1920L, 5400L, 3933L, 2394L, 1920L, 12300L, 7920L, 
5400L, 3933L, 3000L, 2394L, 12300L, 7920L, 5400L, 3933L, 3000L, 
2394L, 1920L, 12300L, 7920L, 5400L, 3933L, 3000L, 2394L, 1920L
), Catch = c(18L, 28L, 14L, 19L, 10L, 5L, 4L, 13L, 15L, 18L, 
14L, 13L, 3L, 17L, 26L, 24L, 23L, 30L, 3L, 15L, 23L, 60L, 29L, 
36L, 22L, 17L, 11L, 18L, 3L, 25L, 62L, 40L, 8L, 7L, 42L, 27L, 
72L, 87L, 23L, 46L, 165L, 57L, 22L, 27L, 60L, 11L, 38L, 11L, 
20L, 30L, 9L, 13L, 3L, 30L, 6L, 7L, 10L, 22L, 6L, 19L, 29L, 40L, 
11L, 23L, 13L, 16L, 36L, 35L, 31L, 14L, 18L, 13L, 8L, 8L, 2L, 
7L, 16L, 12L, 7L, 2L, 1L, 5L, 13L, 26L, 31L, 14L, 8L, 10L, 15L, 
9L, 39L, 19L, 33L, 13L, 13L, 7L, 16L, 26L, 25L, 15L, 2L, 2L, 
2L, 6L, 10L, 11L, 5L, 3L, 6L, 20L, 111L, 76L, 65L, 32L, 25L, 
7L, 3L, 24L, 42L, 28L, 63L, 20L, 1L, 2L, 3L, 15L, 18L, 7L, 4L, 
3L, 5L, 15L, 20L, 13L, 4L, 9L, 30L, 33L, 32L, 25L, 18L, 1L, 25L, 
29L, 10L, 24L, 24L, 16L, 21L, 11L, 9L, 4L, 1L, 5L, 6L, 11L, 9L, 
3L, 2L, 1L, 18L, 6L, 47L, 44L, 26L, 5L, 17L, 7L, 21L, 24L, 47L, 
35L, 11L, 7L, 7L, 14L, 30L, 36L, 27L, 2L, 23L, 60L, 31L, 17L, 
7L, 3L, 4L, 25L, 76L, 75L, 34L, 32L, 20L, 11L, 22L, 49L, 53L, 
70L, 28L, 8L, 8L, 7L, 3L, 16L, 1L, 11L, 15L, 25L, 13L, 2L, 6L, 
15L, 18L, 18L, 45L, 12L, 2L, 1L, 28L, 7L, 10L, 18L, 16L), Secchi = c(1, 
1, 1, 1, 1, 1, 1, 0.75, 0.75, 0.75, 0.75, 0.75, 1.5, 1.5, 1.5, 
1.5, 1.5, 1.5, 1.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, NA, NA, 
3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 
1, 1, 1, 1, 1, 1, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 0.25, 0.25, 
0.25, 0.25, 0.25, 0.25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.75, 
0.75, 0.75, 0.75, 0.75, 0.75, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 1.5, 
2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, NA, NA, NA, NA, NA, NA, NA, 
3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 0.5, 0.5, 0.5, 0.5, 0.5, 
0.5, 0.5, 1, 1, 1, 1, 1, 1, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 1.4, 
0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
1, 1, 1, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 0.75, 1.5, 1.5, 
1.5, 1.5, 1.5, 1.5, 1.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, 2.5, NA, 
NA, NA, NA, NA, 3, 3, 3, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 0.5, 
0.5, 0.5, 0.5, 0.5, 0.5, 1, 1, 1, 1, 1.4, 1.4, 1.4, 1.4, 1.4, 
1.4, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 1, 1, 1, 1, 1, 
1, 1)), .Names = c("Type", "Mesh", "WE", "Holes", "Catch", "Secchi"
), class = "data.frame", row.names = c(NA, -223L))
}
dat$Accum <- dat$Catch/dat$Holes*100;
dat$water <- cut(dat$Secchi, c(-1, 1, 2, 10), labels=FALSE)
head(dat)
dat
dat$Accum <- dat$Catch/dat$Holes*100;
dat$water <- cut(dat$Secchi, c(-1, 1, 2, 10), right=FALSE, labels=FALSE)
dat
table(dat$Secchi)
table(dat$Secchi, dat$water)
plotdf(dat)
with(dat, table(Type, Mesh, Holes))
with(dat, table(paste(Type, Mesh), Holes))
with(dat, table(paste(Type, Mesh), Holes))
fit <- gam(WE ~ as.factor(Type) + as.factor(Mesh) + s(Secchi), data=dat)
fit <- gam(WE ~ as.factor(Type) + as.factor(Mesh) + s(Secchi, k=3), data=dat)
fit <- gam(WE ~ as.factor(Type) + as.factor(Mesh) + s(Secchi, k=4), data=dat)
fit <- gam(WE ~ as.factor(Type) + as.factor(Mesh) + s(Secchi, k=5), data=dat)
fit <- gam(WE ~ as.factor(Type) + as.factor(Mesh) + s(Secchi, k=6), data=dat)
fit <- gam(WE ~ as.factor(Type) + as.factor(Mesh) + s(Secchi, k=7), data=dat)
fit <- gam(WE ~ as.factor(Type) + as.factor(Mesh) + s(Secchi, k=8), data=dat)
fit <- gam(WE ~ as.factor(Type) + as.factor(Mesh) + s(Secchi, k=18), data=dat)
fit <- gam(WE ~ as.factor(Type) + as.factor(Mesh) + s(Secchi, k=13), data=dat)
fit <- gam(WE ~ as.factor(Type) + as.factor(Mesh) + s(Secchi, k=10), data=dat)
fit <- gam(WE ~ as.factor(Type) + as.factor(Mesh) + s(Secchi, k=9), data=dat)
fit <- gam(WE ~ as.factor(Type) + as.factor(Mesh) + s(Secchi, k=8), data=dat)
plot(fit)
fit <- gam(WE ~ as.factor(Type) + as.factor(Mesh) + s(Secchi, k=3), data=dat)
plot(fit)
fit <- gam(WE ~ as.factor(Type) + s(Mesh, k=5) + s(Secchi, k=5), data=dat)
plot(fit)
?gam
fit <- gam(sqrt(WE) ~ as.factor(Type) + s(Mesh, k=5) + s(Secchi, k=5), data=dat)
?gam
plot(fit)
plot(fit)
summary(fit)
dat
fit <- gam(WE ~ typef + s(Mesh, k=5) + s(Secchi, k=5), data=dat)
fit <- gam(WE ~ typef + s(Mesh, k=5) + s(Secchi, k=5) + s(Accum, k=5), data=dat)
dat$typef <- as.factor(dat$Type)
fit <- gam(WE ~ typef + s(Mesh, k=5) + s(Secchi, k=5), data=dat)
fit <- gam(WE ~ typef + s(Mesh, k=5) + s(Secchi, k=5) + s(Accum, k=5), data=dat)
plot(fit)
attach(dat)
symbols(Type, Mesh, circles=sqrt(WE))
plot(sort(Accum))
plot(Accum, WE)
plot(Accum, WE)
plot(100*(Catch - WE)/Holes, WE)
plot(Catch - WE, WE, log="xy")
plot(jitter(sqrt(Catch - WE)), jitter(sqrt(WE)))
jitter
plot(jitter(sqrt(Catch - WE), 2), jitter(sqrt(WE), 2))
plot(jitter(sqrt(Catch - WE), 3), jitter(sqrt(WE), 3))
summary(dat)
tapply(WE, list(Type, Mesh), median)
plot(tapply(WE, list(Type, Mesh), median))
matplot(tapply(WE, list(Type, Mesh), median))
aggregate(WE ~ Type*Mesh, median)
aggregate(WE ~ Type*Mesh, median, data=dat)
smry <- aggregate(WE ~ Type*Mesh, median, data=dat)
symbols(smry$Type, smry$Mesh, circles=sqrt(smry$WE))
symbols(smry$Type, smry$Mesh, circles=sqrt(smry$WE), inches=0.5)
smry <- aggregate(WE ~ Type*Mesh, median, data=dat)
symbols(smry$Type, smry$Mesh, circles=sqrt(smry$WE), inches=0.5, xlab="Type", ylab="Mesh (in)", main="Median Walleye Catch in Gill Nets")
smry <- aggregate(WE ~ Type*Mesh, median, data=dat)
symbols(smry$Type, smry$Mesh, circles=sqrt(smry$WE), inches=0.4, las=1, xaxt="n",
xlab="Type", ylab="Mesh (in)", main="Median Walleye Catch in Gill Nets")
axis(1, at=1:3)
text(smry$Type, smry$Mesh, smry$WE)
smry <- aggregate(WE ~ Type*Mesh, median, data=dat)
windows()
symbols(smry$Type, smry$Mesh, circles=sqrt(smry$WE), inches=0.4, las=1, xaxt="n",
xlab="Type", ylab="Mesh (in)", main="Median Walleye Catch in Gill Nets")
axis(1, at=1:3)
text(smry$Type, smry$Mesh, round(smry$WE))
smry <- aggregate(WE ~ Type*Mesh, median, data=dat)
windows()
par(mar=c(4, 4, 2, 1), las=1)
symbols(smry$Type, smry$Mesh, circles=sqrt(smry$WE), inches=0.4, xaxt="n",
xlab="Type", ylab="Mesh (in)", main="Median Walleye Catch in Gill Nets")
axis(1, at=1:3)
text(smry$Type, smry$Mesh, round(smry$WE))
par(mar=c(4, 4, 2, 1), las=1)
symbols(smry$Type, smry$Mesh, circles=sqrt(smry$WE), inches=0.4, xaxt="n",
xlab="Gill net type", ylab="Gill net mesh (in)", main="Median Walleye Catch")
axis(1, at=1:3)
text(smry$Type, smry$Mesh, round(smry$WE))
par(mar=c(4, 4, 2, 1), las=1)
symbols(smry$Type, smry$Mesh, circles=sqrt(smry$WE), inches=0.4, xaxt="n", lwd=2
xlab="Gill net type", ylab="Gill net mesh (in)", main="Median Walleye Catch")
axis(1, at=1:3)
text(smry$Type, smry$Mesh, round(smry$WE))
par(mar=c(4, 4, 2, 1), las=1)
symbols(smry$Type, smry$Mesh, circles=sqrt(smry$WE), inches=0.4, xaxt="n", lwd=2,
xlab="Gill net type", ylab="Gill net mesh (in)", main="Median Walleye Catch")
axis(1, at=1:3)
text(smry$Type, smry$Mesh, round(smry$WE))
smry <- aggregate(WE ~ Type*Mesh, median, data=dat)
windows(h=9, w=6.5)
par(mar=c(4, 4, 2, 1), las=1)
symbols(smry$Type, smry$Mesh, circles=sqrt(smry$WE), inches=0.4, xaxt="n", lwd=2,
xlab="Gill net type", ylab="Gill net mesh (in)", main="Median Walleye Catch")
axis(1, at=1:3)
text(smry$Type, smry$Mesh, round(smry$WE))
smry <- aggregate(WE ~ Type*Mesh, median, data=dat)
windows(h=9, w=6.5)
par(mar=c(4, 4, 2, 1), las=1)
symbols(smry$Type, smry$Mesh, circles=sqrt(smry$WE), inches=0.4, axes=FALSE, lwd=2,
xlab="Gill net type", ylab="Gill net mesh (in)", main="Median Walleye Catch")
axis(1, at=1:3)
text(smry$Type, smry$Mesh, round(smry$WE))
?axis
smry <- aggregate(WE ~ Type*Mesh, median, data=dat)
windows(h=9, w=6.5)
par(mar=c(4, 4, 2, 1), las=1)
symbols(smry$Type, smry$Mesh, circles=sqrt(smry$WE), inches=0.4, axes=FALSE, lwd=2,
xlab="Gill net type", ylab="Gill net mesh (in)", main="Median Walleye Catch")
axis(1, at=1:3, lwd=0)
text(smry$Type, smry$Mesh, round(smry$WE))
smry <- aggregate(WE ~ Type*Mesh, median, data=dat)
windows(h=9, w=6.5)
par(mar=c(4.5, 4.5, 2, 1), las=1)
symbols(smry$Type, smry$Mesh, circles=sqrt(smry$WE), inches=0.4, axes=FALSE, lwd=2,
xlab="Gill net type", ylab="Gill net mesh (in)", main="Median Walleye Catch")
axis(1, at=1:3, lwd=0)
text(smry$Type, smry$Mesh, round(smry$WE))
par(mar=c(4.5, 4.5, 2, 1), las=1)
symbols(smry$Type, smry$Mesh, circles=sqrt(smry$WE), inches=0.4, axes=FALSE, lwd=2,
xlab="Gill net type", ylab="Gill net mesh (in)", main="Median Walleye Catch")
axis(1, at=1:3, lwd=0)
axis(2, lwd=0)
text(smry$Type, smry$Mesh, round(smry$WE))
smry <- aggregate(WE ~ Type*Mesh, median, data=dat)
windows(h=9, w=6.5)
par(mar=c(4.5, 4.5, 2, 1), las=1)
symbols(smry$Type, smry$Mesh, circles=sqrt(smry$WE), inches=0.4, axes=FALSE, lwd=2,
xlab="Gill net type", ylab="Gill net mesh (in)", main="Median Walleye Catch")
text(smry$Type, smry$Mesh, round(smry$WE), font=2)
axis(1, at=1:3, lwd=0)
axis(2, lwd=0)
locator()
smry <- aggregate(WE ~ Type*Mesh, median, data=dat)
windows(h=9, w=6.5)
par(mar=c(4.5, 4.5, 2, 1), las=1)
symbols(smry$Type, smry$Mesh, circles=sqrt(smry$WE), xlim=c(1.9, 5.1), inches=0.4, axes=FALSE, lwd=2,
xlab="Gill net type", ylab="Gill net mesh (in)", main="Median Walleye Catch")
text(smry$Type, smry$Mesh, round(smry$WE), font=2)
axis(1, at=1:3, lwd=0)
axis(2, lwd=0)
smry <- aggregate(WE ~ Type*Mesh, median, data=dat)
windows(h=9, w=6.5)
par(mar=c(4.5, 4.5, 2, 1), las=1)
symbols(smry$Type, smry$Mesh, circles=sqrt(smry$WE), ylim=c(1.9, 5.1), inches=0.4, axes=FALSE, lwd=2,
xlab="Gill net type", ylab="Gill net mesh (in)", main="Median Walleye Catch")
text(smry$Type, smry$Mesh, round(smry$WE), font=2)
axis(1, at=1:3, lwd=0)
axis(2, lwd=0)
axis(1, at=1:3, lwd=0, col="blue")
axis(1, at=1:3, lwd=0, col.axis="blue")
smry <- aggregate(WE ~ Type*Mesh, median, data=dat)
windows(h=9, w=6.5)
par(mar=c(4.5, 4.5, 2, 1), las=1)
symbols(smry$Type, smry$Mesh, circles=sqrt(smry$WE), ylim=c(1.9, 5.1), inches=0.4, axes=FALSE, lwd=2,
xlab="Gill net type", ylab="Gill net mesh (in)", main="Median Walleye Catch")
text(smry$Type, smry$Mesh, round(smry$WE), font=2)
axis(1, at=1:3, lwd=0, col.axis="blue")
axis(2, lwd=0, col.axis="blue")
?symbols
smry <- aggregate(WE ~ Type*Mesh, median, data=dat)
windows(h=9, w=6.5)
par(mar=c(4.5, 4.5, 2, 1), las=1)
plot(1, 1, type="n", xlim=c(0.5, 3.5), ylim=c(1.9, 5.1), axes=FALSE, 
xlab="Gill net type", ylab="Gill net mesh (in)", main="Median Walleye Catch")
symbols(smry$Type, smry$Mesh, circles=sqrt(smry$WE), inches=0.5, lwd=2)
text(smry$Type, smry$Mesh, round(smry$WE), font=2)
axis(1, at=1:3, lwd=0, col.axis="blue")
axis(2, lwd=0, col.axis="blue")
par(mar=c(4.5, 4.5, 2, 1), las=1)
plot(1, 1, type="n", xlim=c(0.5, 3.5), ylim=c(1.9, 5.1), axes=FALSE, 
xlab="Gill net type", ylab="Gill net mesh (in)", main="Median Walleye Catch")
symbols(smry$Type, smry$Mesh, circles=sqrt(smry$WE), inches=0.5, lwd=2, add=TRUE)
text(smry$Type, smry$Mesh, round(smry$WE), font=2)
axis(1, at=1:3, lwd=0, col.axis="blue")
axis(2, lwd=0, col.axis="blue")
smry <- aggregate(WE ~ Type*Mesh, median, data=dat)
windows(h=9, w=5.5)
par(mar=c(4.5, 4.5, 2, 1), las=1)
plot(1, 1, type="n", xlim=c(0.5, 3.5), ylim=c(1.9, 5.1), axes=FALSE, 
xlab="Gill net type", ylab="Gill net mesh (in)", main="Median Walleye Catch")
symbols(smry$Type, smry$Mesh, circles=sqrt(smry$WE), inches=0.5, lwd=2, add=TRUE)
text(smry$Type, smry$Mesh, round(smry$WE), font=2)
axis(1, at=1:3, lwd=0, col.axis="blue")
axis(2, lwd=0, col.axis="blue")
smry <- aggregate(WE ~ Type*Mesh, median, data=dat)
windows(h=9, w=5)
par(mar=c(4.5, 4.5, 2, 1), las=1)
plot(1, 1, type="n", xlim=c(0.5, 3.5), ylim=c(1.9, 5.1), axes=FALSE, 
xlab="Gill net type", ylab="Gill net mesh (in)", main="Median Walleye Catch")
symbols(smry$Type, smry$Mesh, circles=sqrt(smry$WE), inches=0.6, lwd=2, add=TRUE)
text(smry$Type, smry$Mesh, round(smry$WE), font=2)
axis(1, at=1:3, lwd=0, col.axis="blue")
axis(2, lwd=0, col.axis="blue")
cleanup()
q()
cleanup()
q()
library(LW1949)
conc <- c(0.0625, 0.125, 0.25, 0.5, 1)
numtested <- rep(8, 5)
numalive <- c(1, 4, 4, 7, 8)
mydat <- dataprep(dose=conc, ntot=numtested, nfx=numalive)
mydat
?dataprep
fLW <- fitLW(mydat)
fLW
fLW
fp <- fitprobit(mydat)
pctalive <- c(16, 50, 84)
cbind(pctalive, do.call(rbind, lapply(pctalive, predprobit, fp)))
plotDE(mydat)
abline(fp$coef, lty=2)
abline(fLW$params)
?plotDE
legend("topleft", c("LW", "Probit"), lty=c(1, 2), bg="white")
pctalive <- c(25, 50, 99.9)
cbind(pctalive, do.call(rbind, lapply(pctalive, predprobit, fp)))
predlinear(pctalive, fLW$params[1], fLW$params[2])
predLWCI(
?predLWCI
pctalive <- c(25, 50, 99.9)
EDYs <- predlinear(pctalive, b0=fLW$params[1], b1=fLW$params[2])
predLWCI(Y=pctalive, EDY=EDYs, fED50=fLW$LWest["fED50"], fS=fLW$LWest["fS"])
EDYs
cbind(pctalive, EDYs, )
predcis <- predLWCI(Y=pctalive, EDY=EDYs, fED50=fLW$LWest["fED50"], fS=fLW$LWest["fS"])
cbind(pctalive, EDYs, predcis)
pctalive <- c(25, 50, 99.9)
ED <- predlinear(pctalive, b0=fLW$params[1], b1=fLW$params[2])
predcis <- predLWCI(Y=pctalive, EDY=EDYs, fED50=fLW$LWest["fED50"], fS=fLW$LWest["fS"])
cbind(pctalive, ED, predcis)
predlinear <- function(pct, LWmod) {
b0 <- LWmod$params[1]
b1 <- LWmod$params[2]
ED <- as.numeric(10^( (probit(pct/100) - b0) / b1 ))
# X (Table 3)
X <- abs(qnorm(pct/100))
# fs^X (Nomograph 2)
fS <- LWmod$LWest["fS"]
fSX <- fS^X
# fEDY from equation 13 in Appendix (Nomograph 4)
fED50 <- LWmod$LWest["fED50"]
fEDY <- 10^sqrt( (log10(fSX))^2 + (log10(fED50))^2 )
upper <- EDY * fEDY
lower <- EDY / fEDY
cbind(pct, ED, lower, upper)
}
?fitLW
dose <- c(0.0625, 0.125, 0.25, 0.5, 1)
ntested <- rep(8, 5)
nalive <- c(1, 4, 4, 7, 8)
mydat <- dataprep(dose=dose, ntot=ntested, nfx=nalive)
mydat
fitLW(mydat)
fLW <- fitLW(mydat)
predlinear(c(25, 50, 99.9), fLW)
predlinear <- function(pct, LWmod) {
b0 <- LWmod$params[1]
b1 <- LWmod$params[2]
ED <- as.numeric(10^( (probit(pct/100) - b0) / b1 ))
# X (Table 3)
X <- abs(qnorm(pct/100))
# fs^X (Nomograph 2)
fS <- LWmod$LWest["fS"]
fSX <- fS^X
# fEDY from equation 13 in Appendix (Nomograph 4)
fED50 <- LWmod$LWest["fED50"]
fEDY <- 10^sqrt( (log10(fSX))^2 + (log10(fED50))^2 )
upper <- ED * fEDY
lower <- ED / fEDY
cbind(pct, ED, lower, upper)
}
predlinear(c(25, 50, 99.9), fLW)
rawfile="C:/JVA/Lamprey/ChemControl/Toxicity/RawToxTestData.csv"
rawdat <- read.csv(rawfile, as.is=TRUE)
rawdat2 <- data.frame(lapply(rawdat, fill))
rawcolz <- match(c("TFM.Conc...mg.L.", "No..Tested", "No..Dead"), names(rawdat2))
# use the input filename to name the output files
filesegs <- strsplit(rawfile, "/")[[1]]
L <- length(filesegs)
filename <- filesegs[L]
dirname <- paste(filesegs[-L], collapse="/")
prefix <- strsplit(filename, ".csv")[[1]]
smryname <- paste0(prefix, "Smry.csv")
sut <- sort(unique(rawdat2$Test.ID))
# empty list in which to put results
results <- vector("list", length(sut))
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- paste(df[1, 1:descrcolz], collapse=", ")
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
i <- 6
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- paste(df[1, 1:descrcolz], collapse=", ")
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
predlinear(pctalive, fLW)
predlinear <- function(pct, LWmod) {
b0 <- LWmod$params[1]
b1 <- LWmod$params[2]
ED <- as.numeric(10^( (probit(pct/100) - b0) / b1 ))
# X (Table 3)
X <- abs(qnorm(pct/100))
# fs^X (Nomograph 2)
fS <- LWmod$LWest["fS"]
fSX <- fS^X
# fEDY from equation 13 in Appendix (Nomograph 4)
fED50 <- LWmod$LWest["fED50"]
fEDY <- 10^sqrt( (log10(fSX))^2 + (log10(fED50))^2 )
upper <- ifelse(is.finite(fEDY), ED * fEDY, NA)
lower <- ifelse(is.finite(fEDY), ED / fEDY, NA)
cbind(pct, ED, lower, upper)
}
predlinear(pctalive, fLW)
pm <- predlinear(pctalive, fLW)
pm$ED
pm["ED"]
pm[, "ED"]
estimate <- c(fLW$params, pm[, "ED"], fLW$LWest["S"])
estimate
pm <- predlinear(pctalive, fLW)
estimate <- c(fLW$params, pm[, "ED"], fLW$LWest["S"])
param <- names(estimate[1:2], paste0("ED", pctalive), "S")
method <- rep("Auto Litchfield-Wilcoxon", length(param))
pm <- predlinear(pctalive, fLW)
estimate <- c(fLW$params, pm[, "ED"], fLW$LWest["S"])
param <- c(names(estimate[1:2]), paste0("ED", pctalive), "S")
method <- rep("Auto Litchfield-Wilcoxon", length(param))
pm
estimate
param
method
 data.frame(param, method, estimate, lower95ci=pm[, "lower"], upper95ci=pm[, "upper"])
i <- 4
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- paste(df[1, 1:descrcolz], collapse=", ")
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
pm <- predlinear(pctalive, fLW)
estimate <- c(fLW$params, pm[, "ED"], fLW$LWest["S"])
param <- c(names(estimate[1:2]), paste0("ED", pctalive), "S")
method <- rep("Auto Litchfield-Wilcoxon", length(param))
smryLW <- data.frame(param, method, estimate, lower95ci=pm[, "lower"], upper95ci=pm[, "upper"])
smryLW
#' User Friendly Evaluation of Dose-Effect Experiments using Litchfield-Wilcoxon and Probit Methods
#'
#' User friendly evaluation of dose-effect experiments using automated Litchfield Wilcoxon (1949) and probit estimation methods.
#'This function has been tailored for non-R users with input data set up in a particular way (see Details).
#' @param rawfileA character scalar specifying the path of the input data as a csv file.  If NULL, default, the user will be 
#'prompted to browse to a file using a menu.
#' @param descrcolzA numeric scalar, the number of columns to use as the description of the test, 
#'from 1 to \code{descrcolz}, default 4.
#' @param saveplotsA logical scalar indicating if plots should be saved to a pdf file, default TRUE.
#' @param showplotsA logical scalar indicating if plots should be shown on screen, default FALSE.
#' @param saveresultsA logical scalar indicating if results should be saved to a csv file, default TRUE.
#'The csv file is given the same name (plus the suffix "Smry") and is placed in the same directory as the input file.
#' @param showresultsA logical scalar indicating if results should be printed to the console, default TRUE. 
#'These results include the chi-squared statistic, degrees of freedom, and p-value for the Litchfield Wilcoxon method.
#' @param returnresultsA logical scalar indicating if results should be returned by the function, default FALSE.
#' @return If \code{returnresults=TRUE}, a data frame with 11 rows per test and 2 more columns than the input data.
#'Three columns from the input data are not included (\code{TFM Conc. (mg/L)}, \code{No. Tested}, and \code{No. Dead}).
#'Five columns are added: the parameter (\code{param}), the method used (\code{method}),
#'the estimate (\code{estimate}), and the 95\% confidence interval of the estimate (\code{lower95ci} and \code{upper95ci})
#' @importtcltk
#' @export
#' @references Litchfield, JT Jr. and F Wilcoxon.  1949.
#' A simplified method of evaluating dose-effect experiments. 
#' Journal of Pharmacology and Experimental Therapeutics 99(2):99-113.
#' \href{http://jpet.aspetjournals.org/content/96/2/99.abstract}{[link]}. 
#' @detailsThe input data must include at least these seven columns, with these names in the header row: 
#' \itemize{
#'   \item \code{Test ID} = A character or numeric vector, the unique identifier for each test
#'   \item \code{Source} = A character vector, the source of the chemical
#'   \item \code{Batch} = A character or numeric vector, the batch of the chemical
#'   \item \code{Species} = A character vector, the species tested
#'   \item \code{TFM Conc. (mg/L)} = A numeric vector, the concentration of TFM in mg/L
#'   \item \code{No. Tested} = A numeric vector, the number of animals tested
#'   \item \code{No. Dead} = A numeric vector, the number of animals dead
#' }
#' @examples 
#' \dontrun{
#' LWP()
#' }
LWP <- function(rawfile=NULL, descrcolz=4, saveplots=TRUE, showplots=FALSE, saveresults=TRUE, showresults=TRUE, returnresults=FALSE) {
### bring in the data ###
# allow user to choose raw data file from menu
if(is.null(rawfile)) rawfile <- tk_choose.files(default="*.csv", multi=FALSE)
# read in the data, fill in the blanks
rawdat <- read.csv(rawfile, as.is=TRUE)
rawdat2 <- data.frame(lapply(rawdat, fill))
rawcolz <- match(c("TFM.Conc...mg.L.", "No..Tested", "No..Dead"), names(rawdat2))
# use the input filename to name the output files
filesegs <- strsplit(rawfile, "/")[[1]]
L <- length(filesegs)
filename <- filesegs[L]
dirname <- paste(filesegs[-L], collapse="/")
prefix <- strsplit(filename, ".csv")[[1]]
smryname <- paste0(prefix, "Smry.csv")
if(saveplots) {
pdfname <- paste0(prefix, "Smry.pdf")
pdf(file = paste(dirname, pdfname, sep="/"), paper="letter")
}
### fit LW and probit models to the data
# unique test IDs
sut <- sort(unique(rawdat2$Test.ID))
# empty list in which to put results
results <- vector("list", length(sut))
for(i in seq(along=sut)) {
df <- rawdat2[rawdat2$Test.ID==sut[i], ]
descr <- paste(df[1, 1:descrcolz], collapse=", ")
mydat <- with(df, dataprep(dose=TFM.Conc...mg.L., ntot=No..Tested, nfx=No..Dead))
fLW <- fitLW(mydat)
fp <- fitprobit(mydat)
pctalive <- c(25, 50, 99.9)
pm <- predlinear(pctalive, fLW)
estimate <- c(fLW$params, pm[, "ED"], fLW$LWest["S"])
param <- c(names(estimate[1:2]), paste0("ED", pctalive), "S")
method <- rep("Auto Litchfield-Wilcoxon", length(param))
smryLW <- data.frame(param, method, estimate, lower95ci=pm[, "lower"], upper95ci=pm[, "upper"])
Pr <- do.call(rbind, lapply(pctalive, predprobit, fp))
cp <- coefprobit(fp)
row.names(Pr) <- paste0("ED", pctalive)
estimate <- c(fp$coef, Pr[, "ED"])
param <- names(estimate)
method <- rep("Probit", length(param))
lower95ci <- c(cp["ilower"], cp["slower"], Pr[, "lower"])
upper95ci <- c(cp["iupper"], cp["supper"], Pr[, "upper"])
smryPr <- data.frame(param, method, estimate, lower95ci, upper95ci)
smry <- rbind(smryLW, smryPr)
n <- dim(smry)[1]
results[[i]] <- cbind(df[rep(1, n), -rawcolz], smry)
if(showresults) {
# print the results to the screen
cat("\n\n\n")
cat(paste0("Test ", i, ":   ", descr, "\n"))
cat("\nLitchfield Wicoxon method\n\n")
print(fitLW(mydat)$chi$chi)
cat("\n")
print(format(smryLW[, -2], 2, nsmall=2, digits=0), row.names=FALSE)
cat("\nProbit method\n\n")
print(format(smryPr[, -2], 2, nsmall=2, digits=0), row.names=FALSE)
}
if(showplots) windows()
if(saveplots | showplots) {
# plot the results to a pdf file
par(mar=c(4, 4, 2, 1))
plotDE(mydat, main=descr, ylab="Mortality  (%)")
abline(fp$coef, lty=2, col="red")
abline(fLW$params)
# notes on graph
right <- 0.8 * (par("usr")[2] - par("usr")[1]) + par("usr")[1]
lwsel <- substring(smry$method, 1, 1)=="A"
rows <- match(c("ED25", "ED50", "ED99.9", "S"), smry$param[lwsel])
text(right, -1.2, "Litchfield Wilcoxon", font=2)
text(right, -seq(1.6, 2.8, 0.4), c("ED25", "ED50", "ED99.9", "LW Slope"), adj=1)
text(right, -seq(1.6, 2.8, 0.4), paste("  ", formatC(smry$estimate[lwsel][rows], digits=3, flag="#")), adj=0)
left <- 0.2 * (par("usr")[2] - par("usr")[1]) + par("usr")[1]
psel <- substring(smry$method, 1, 1)=="P"
rows <- match(c("ED25", "ED50", "ED99.9"), smry$param[psel])
text(left, 2.9, "Probit  (dashed)", font=2, col="red")
text(left, seq(2.5, 1.7, -0.4), c("ED25", "ED50", "ED99.9"), adj=1, col="red")
text(left, seq(2.5, 1.7, -0.4), paste("  ", formatC(smry$estimate[psel][rows], digits=3, flag="#")), adj=0, col="red")
}
}
if(saveplots) graphics.off()
# save the results to a csv file
smrydat <- do.call(rbind, results)
if(saveresults) write.csv(smrydat, paste(dirname, smryname, sep="/"), row.names=FALSE)
if(returnresults) return(smrydat) else invisible()
if(showresults) {
# print a header to the screen
cat("\n\n\n")
cat("Rounded results are printed to the screen for convenience.\n")
cat("No need to copy or print them though, because they are saved in:\n")
cat("     ", paste(dirname, smryname, sep="/"), "\n")
cat('Note that "S" is the slope defined by Litchfield and Wilcoxon (1949).\n')
}
}
graphics.off()
cleanup()
LWP(rawfile="C:/JVA/Lamprey/ChemControl/Toxicity/RawToxTestData.csv")
fLW <- fitLW(mydat)
dose <- c(0.0625, 0.125, 0.25, 0.5, 1)
ntested <- rep(8, 5)
nalive <- c(1, 4, 4, 7, 8)
mydat <- dataprep(dose=dose, ntot=ntested, nfx=nalive)
fLW <- fitLW(mydat)
pctalive <- c(25, 50, 99.9)
predlinear(pctalive, fLW)
conc <- c(0.0625, 0.125, 0.25, 0.5, 1)
numtested <- rep(8, 5)
numalive <- c(1, 4, 4, 7, 8)
mydat <- dataprep(dose=conc, ntot=numtested, nfx=numalive)
mydat
fLW <- fitLW(mydat)
fLW
pctalive <- c(25, 50, 99.9)
predlinear(pctalive, fLW)
fLW
pct=pctalive
LWmod=fLW
b0 <- LWmod$params[1]
b1 <- LWmod$params[2]
ED <- as.numeric(10^( (probit(pct/100) - b0) / b1 ))
# X (Table 3)
X <- abs(qnorm(pct/100))
# fs^X (Nomograph 2)
fS <- LWmod$LWest["fS"]
fSX <- fS^X
# fEDY from equation 13 in Appendix (Nomograph 4)
fED50 <- LWmod$LWest["fED50"]
fEDY <- 10^sqrt( (log10(fSX))^2 + (log10(fED50))^2 )
upper <- ifelse(is.finite(fEDY), ED * fEDY, NA)
lower <- ifelse(is.finite(fEDY), ED / fEDY, NA)
cbind(pct, ED, lower, upper)
predlinear(pctalive, fLW)
pct
find("pct")
fLW
cleanup()
q()
library(LW1949)
LWP(rawfile="C:/JVA/Lamprey/ChemControl/Toxicity/RawToxTestData.csv")
LWP(rawfile="C:/JVA/Lamprey/ChemControl/Toxicity/RawToxTestData.csv")
q()
q()
?cheat
wb <- loadWorkbook("C:/JVA/Consult/Johnson J/Cormorant/FishConsumption.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
dim(dat)
names(dat)
names(dat)
names(dat)
names(dat)
names(dat)
y <- dat[, c("ALEpre", "ALEtrans", "ALEpost")]
x <- rep(c("pre", "trans", "post"), rep(11, 3)
y <- dat[, c("ALEpre", "ALEtrans", "ALEpost")]
x <- rep(c("pre", "trans", "post"), rep(11, 3))
y
x
summary(y)
y <- dat[, c("ALEpre", "ALEtrans", "ALEpost")]
x <- rep(c("pre", "trans", "post"), rep(dim(dat)[1], 3))
dim(y)
length(x)
7466*3
y <- dat[1:5, c("ALEpre", "ALEtrans", "ALEpost")]
x <- rep(c("pre", "trans", "post"), rep(dim(y)[1], 3))
y
x
unlist(y)
ym <- dat[1:5, c("ALEpre", "ALEtrans", "ALEpost")]
y <- unlist(ym)
x <- as.factor(rep(c("pre", "trans", "post"), rep(dim(ym)[1], 3)))
summary(aov(y ~ x))
ym <- dat[, c("ALEpre", "ALEtrans", "ALEpost")]
y <- unlist(ym)
x <- as.factor(rep(c("pre", "trans", "post"), rep(dim(ym)[1], 3)))
summary(aov(y ~ x))
head(dat)
summary(dat)
length(y)
table(is.na(y))
table(is.na(y), x)
apply(dat, 2, boxplot)
windows()
par(mfcol=c(11, 3))
apply(dat, 2, boxplot)
windows(h=9, w=6.5)
par(mfcol=c(11, 3), mar=c(0, 2, 2, 1), oma=c(2, 2, 0, 0))
apply(dat, 2, boxplot)
windows(w=9, h=6.5)
par(mfrow=c(3, 11), mar=c(0, 2, 2, 1), oma=c(2, 2, 0, 0))
apply(dat, 2, boxplot)
par(mfrow=c(3, 11), mar=c(0, 2, 2, 1), oma=c(2, 2, 0, 0))
apply(sqrt(dat), 2, boxplot)
windows(w=9, h=6.5)
par(mfrow=c(3, 11), mar=c(0, 2, 2, 1), oma=c(2, 2, 0, 0))
apply(dat, 2, boxplot)
par(mfrow=c(3, 11), mar=c(0, 2, 2, 1), oma=c(2, 2, 0, 0))
apply(dat, 2, boxplot, ylim=c(0, 90))
?boxplot
names(dat)
dput(names(dat))
sp <- c("ALE", "YP", "CYP", "PS", "RB", "TP", "SMB", "SS", "STICK", "GOBY", "OTHER")
ti <- c("Pre", "Trans", "Post")
j <- 1
windows(w=9, h=6.5)
par(mfrow=c(3, 11), mar=c(0, 2, 2, 1), oma=c(2, 2, 0, 0))
for(i in 1:dim(dat)[1]) {
boxplot(dat[, i], ylim=c(0, 90), xlab="", ylab="", axes=FALSE)
if(i < 12) mtext(sp[i], side=3)
if(i %in% c(1, 12, 23)) {
mtext(ti[j], side=3)
j <- j + 1
}
}
windows(w=9, h=6.5)
par(mfrow=c(3, 11), mar=c(0, 2, 2, 1), oma=c(2, 2, 0, 0))
j <- 1
for(i in 1:dim(dat)[1]) {
boxplot(dat[, i], ylim=c(0, 90), xlab="", ylab="", axes=FALSE)
if(i < 12) mtext(sp[i], side=3)
if(i %in% c(1, 12, 23)) {
mtext(ti[j], side=2, line=4)
j <- j + 1
}
}
apply(dat, 2, median)
apply(dat, 2, mean, na.rm=TRUE)
order(apply(dat, 2, mean, na.rm=TRUE))
sp <- c("ALE", "YP", "CYP", "PS", "RB", "TP", "SMB", "SS", "STICK", "GOBY", "OTHER")
ti <- c("Pre", "Trans", "Post")
ord <- order(-apply(dat, 2, mean, na.rm=TRUE))
windows(w=9, h=6.5)
par(mfrow=c(3, 11), mar=c(0, 2, 2, 1), oma=c(2, 2, 0, 0))
j <- 1
for(i in 1:dim(dat)[1]) {
boxplot(dat[, ord[i]], ylim=c(0, 90), xlab="", ylab="", axes=FALSE)
if(i < 12) mtext(sp[i], side=3)
if(i %in% c(1, 12, 23)) {
mtext(ti[j], side=2, line=4)
j <- j + 1
}
}
ord
l
sp <- c("ALE", "YP", "CYP", "PS", "RB", "TP", "SMB", "SS", "STICK", "GOBY", "OTHER")
ti <- c("Pre", "Trans", "Post")
ord <- order(-apply(dat, 2, mean, na.rm=TRUE))
windows(w=9, h=6.5)
par(mfrow=c(3, 11), mar=c(0, 2, 2, 1), oma=c(2, 2, 0, 0))
j <- 1
for(i in 1:dim(dat)[2]) {
boxplot(dat[, ord[i]], ylim=c(0, 90), xlab="", ylab="", axes=FALSE)
if(i < 12) mtext(sp[i], side=3)
if(i %in% c(1, 12, 23)) {
mtext(ti[j], side=2, line=4)
j <- j + 1
}
}
sp <- c("ALE", "YP", "CYP", "PS", "RB", "TP", "SMB", "SS", "STICK", "GOBY", "OTHER")
ti <- c("Pre", "Trans", "Post")
ord <- order(-apply(dat, 2, mean, na.rm=TRUE))
windows(w=9, h=6.5)
par(mfrow=c(3, 11), mar=c(0, 2, 2, 1), oma=c(2, 2, 0, 0))
j <- 1
for(i in 1:dim(dat)[2]) {
boxplot(dat[, ord[i]], ylim=c(0, 90), xlab="", ylab="", axes=FALSE)
if(i < 12) mtext(sp[i], side=3)
if(i %in% c(1, 12, 23)) {
mtext(ti[j], side=2, line=4)
j <- j + 1
}
}
apply(dat, 2, mean, na.rm=TRUE)
matrix(apply(dat, 2, mean, na.rm=TRUE), nrow=3)
matrix(apply(dat, 2, mean, na.rm=TRUE), ncol=3)
m <- matrix(apply(dat, 2, mean, na.rm=TRUE), ncol=3)
ord <- order(apply(m, 1, mean))
ord
m <- matrix(apply(dat, 2, mean, na.rm=TRUE), ncol=3)
ord <- order(-apply(m, 1, mean))
ord
sp <- c("ALE", "YP", "CYP", "PS", "RB", "TP", "SMB", "SS", "STICK", "GOBY", "OTHER")
ti <- c("Pre", "Trans", "Post")
m <- matrix(apply(dat, 2, mean, na.rm=TRUE), ncol=3)
ord <- order(-apply(m, 1, mean))
ord <- order(-apply(dat, 2, mean, na.rm=TRUE))
windows(w=9, h=6.5)
par(mfrow=c(3, 11), mar=c(0, 2, 2, 1), oma=c(2, 2, 0, 0))
for(i in 1:3) {
for(j in ord) {
clm <- 11*(i-1) + j
boxplot(dat[, clm], ylim=c(0, 90), xlab="", ylab="", axes=FALSE)
if(i == 1) mtext(sp[j], side=3)
if(j == ord[1]) {
mtext(ti[i], side=2, line=4)
}
}
}
windows(w=9, h=6.5)
par(mfrow=c(3, 11), mar=c(0, 2, 2, 1), oma=c(2, 2, 0, 0))
for(i in 1:3) {
for(j in ord) {
clm <- 11*(i-1) + j
cat("i =" i, "j =", j, "clm =", clm, "\n")
boxplot(dat[, clm], ylim=c(0, 90), xlab="", ylab="", axes=FALSE)
if(i == 1) mtext(sp[j], side=3)
if(j == ord[1]) {
mtext(ti[i], side=2, line=4)
}
}}
par(mfrow=c(3, 11), mar=c(0, 2, 2, 1), oma=c(2, 2, 0, 0))
for(i in 1:3) {
for(j in ord) {
clm <- 11*(i-1) + j
cat("i =", i, "j =", j, "clm =", clm, "\n")
boxplot(dat[, clm], ylim=c(0, 90), xlab="", ylab="", axes=FALSE)
if(i == 1) mtext(sp[j], side=3)
if(j == ord[1]) {
mtext(ti[i], side=2, line=4)
}
}}
ord
sp <- c("ALE", "YP", "CYP", "PS", "RB", "TP", "SMB", "SS", "STICK", "GOBY", "OTHER")
ti <- c("Pre", "Trans", "Post")
m <- matrix(apply(dat, 2, mean, na.rm=TRUE), ncol=3)
ord <- order(-apply(m, 1, mean))
windows(w=9, h=6.5)
par(mfrow=c(3, 11), mar=c(0, 2, 2, 1), oma=c(2, 2, 0, 0))
for(i in 1:3) {
for(j in ord) {
clm <- 11*(i-1) + j
cat("i =", i, "j =", j, "clm =", clm, "\n")
boxplot(dat[, clm], ylim=c(0, 90), xlab="", ylab="", axes=FALSE)
if(i == 1) mtext(sp[j], side=3)
if(j == ord[1]) {
mtext(ti[i], side=2, line=4)
}
}}
windows(w=9, h=6.5)
par(mfrow=c(3, 11), mar=c(0, 0, 0, 0), oma=c(0, 2, 2, 0))
for(i in 1:3) {
for(j in ord) {
clm <- 11*(i-1) + j
cat("i =", i, "j =", j, "clm =", clm, "\n")
boxplot(dat[, clm], ylim=c(0, 90), xlab="", ylab="", axes=FALSE)
if(i == 1) mtext(sp[j], side=3, line=2)
if(j == ord[1]) {
axis(2)
mtext(ti[i], side=2, line=4)
}
}}
graphics.off()
windows(w=9, h=6.5)
par(mfrow=c(3, 11), mar=c(0, 0, 0, 0), oma=c(0, 3, 2, 0))
for(i in 1:3) {
for(j in ord) {
clm <- 11*(i-1) + j
boxplot(dat[, clm], ylim=c(0, 90), xlab="", ylab="", axes=FALSE)
if(i == 1) mtext(sp[j], side=3, line=2)
if(j == ord[1]) {
axis(2)
mtext(ti[i], side=2, line=4)
}
}}
windows(w=9, h=6.5)
par(mfrow=c(3, 11), mar=c(0, 0, 0, 0), oma=c(0, 3, 2, 0), xpd=NA)
for(i in 1:3) {
for(j in ord) {
clm <- 11*(i-1) + j
boxplot(dat[, clm], ylim=c(0, 90), xlab="", ylab="", axes=FALSE)
if(i == 1) mtext(sp[j], side=3, line=2)
if(j == ord[1]) {
axis(2)
mtext(ti[i], side=2, line=4)
}
}}
i <- 1
j <- ord[1]
windows(w=9, h=6.5)
par(mfrow=c(3, 11), mar=c(0, 0, 0, 0), oma=c(0, 3, 2, 0), xpd=NA)
clm <- 11*(i-1) + j
boxplot(dat[, clm], ylim=c(0, 90), xlab="", ylab="", axes=FALSE)
i
if(i == 1) mtext(sp[j], side=3, line=2)
sp[j]
if(i == 1) mtext(sp[j], side=3, line=-2)
if(i == 1) mtext(sp[j], side=3, line=0)
if(i == 1) mtext(sp[j], side=3, line=1)
sp <- c("ALE", "YP", "CYP", "PS", "RB", "TP", "SMB", "SS", "STICK", "GOBY", "OTHER")
ti <- c("Pre", "Trans", "Post")
m <- matrix(apply(dat, 2, mean, na.rm=TRUE), ncol=3)
ord <- order(-apply(m, 1, mean))
windows(w=9, h=6.5)
par(mfrow=c(3, 11), mar=c(0, 0, 0, 0), oma=c(0, 3, 3, 0), xpd=NA)
for(i in 1:3) {
for(j in ord) {
clm <- 11*(i-1) + j
boxplot(dat[, clm], ylim=c(0, 90), xlab="", ylab="", axes=FALSE)
if(i == 1) mtext(sp[j], side=3, line=1)
if(j == ord[1]) {
axis(2)
mtext(ti[i], side=2, line=4)
}
}}
windows(w=9, h=6.5)
par(mfrow=c(3, 11), mar=c(0, 0, 0, 0), oma=c(0, 4, 3, 0), xpd=NA)
for(i in 1:3) {
for(j in ord) {
clm <- 11*(i-1) + j
boxplot(dat[, clm], ylim=c(0, 90), xlab="", ylab="", axes=FALSE)
if(i == 1) mtext(sp[j], side=3, line=1)
if(j == ord[1]) {
axis(2)
mtext(ti[i], side=2, line=3)
}
}}
windows(w=9, h=6.5)
par(mfrow=c(3, 11), mar=c(0, 0, 0, 0), oma=c(0, 5, 3, 0), xpd=NA)
for(i in 1:3) {
for(j in ord) {
clm <- 11*(i-1) + j
boxplot(dat[, clm], ylim=c(0, 90), xlab="", ylab="", axes=FALSE)
if(i == 1) mtext(sp[j], side=3, line=1)
if(j == ord[1]) {
axis(2)
mtext(ti[i], side=2, line=3)
}
}}
cleanup()
# C:\JVA\Consult\Johnson J\Cormorant\FishCons.r
# https://mail.google.com/mail/u/0/#inbox/14a1575380816be4
wb <- loadWorkbook("C:/JVA/Consult/Johnson J/Cormorant/FishConsumption.xlsx")
dat <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
names(dat)
 # [1] "ALEpre"     "YPpre"      "CYPpre"     "PSpre"      "RBpre"      "TPpre"      "SMBpre"     "SSpre"      "STICKpre"   "GOBYpre"    "OTHERpre"  
# [12] "ALEtrans"   "Yptrans"    "CYPtrans"   "PStrans"    "RBtrans"    "TPtans"     "SMBtrans"   "SStrans"    "STICKtrans" "GOBYtrans"  "OTHERtrans"
# [23] "ALEpost"    "YPpost"     "CYPpost"    "PSpost"     "RBpost"     "TPpost"     "SMBpost"    "SSpost"     "STICKpost"  "GOBYpost"   "OTHERpost" 
# ANOVA - pseudoreplication!
ym <- dat[, c("ALEpre", "ALEtrans", "ALEpost")]
y <- unlist(ym)
x <- as.factor(rep(c("pre", "trans", "post"), rep(dim(ym)[1], 3)))
summary(aov(y ~ x))
sp <- c("ALE", "YP", "CYP", "PS", "RB", "TP", "SMB", "SS", "STICK", "GOBY", "OTHER")
ti <- c("Pre", "Trans", "Post")
m <- matrix(apply(dat, 2, mean, na.rm=TRUE), ncol=3)
ord <- order(-apply(m, 1, mean))
windows(w=9, h=6.5)
par(mfrow=c(3, 11), mar=c(0, 0, 0, 0), oma=c(0, 5, 3, 0), xpd=NA)
for(i in 1:3) {
for(j in ord) {
clm <- 11*(i-1) + j
boxplot(dat[, clm], ylim=c(0, 90), xlab="", ylab="", axes=FALSE)
if(i == 1) mtext(sp[j], side=3, line=1)
if(j == ord[1]) {
axis(2)
mtext(ti[i], side=2, line=3)
}
}}
windows()
hist(unlist(dat))
table(unlist(dat))
suv <- sort(unique(unlist(dat))
)
diff(suv)
hist(diff(suv))
table(diff(suv))
table(round(diff(suv), 2))
q <- matrix(apply(dat, 2, quartile, 0.75, na.rm=TRUE), ncol=3)
q <- matrix(apply(dat, 2, quantile, 0.75, na.rm=TRUE), ncol=3)
q
sp <- c("ALE", "YP", "CYP", "PS", "RB", "TP", "SMB", "SS", "STICK", "GOBY", "OTHER")
ti <- c("Pre", "Trans", "Post")
q <- matrix(apply(dat, 2, quantile, 0.75, na.rm=TRUE), ncol=3)
m <- matrix(apply(dat, 2, mean, na.rm=TRUE), ncol=3)
ord <- order(-apply(q, 1, mean), -apply(m, 1, mean))
windows(w=9, h=6.5)
par(mfrow=c(3, 11), mar=c(0, 0, 0, 0), oma=c(0, 5, 3, 0), xpd=NA)
for(i in 1:3) {
for(j in ord) {
clm <- 11*(i-1) + j
boxplot(dat[, clm], ylim=c(0, 90), xlab="", ylab="", axes=FALSE)
if(i == 1) mtext(sp[j], side=3, line=1)
if(j == ord[1]) {
axis(2)
mtext(ti[i], side=2, line=3)
}
}}
cleanup()
q()
4.79/3.64
f <- 4.79/3.64
f*75
f*40
q()
9/16*12
9/16*8.46
9/16*9
q()
?nls
CA <- 1:20
Slope <- 0.1*CA^-0.04 + rnomr(20)
plot(Slope~CA)
CA <- 1:20
Slope <- 0.1*CA^-0.04 + rnorm(20)
plot(Slope~CA)
Slope <- 0.1*CA^-0.04
plot(Slope~CA)
CA <- 1:20
Slope <- 0.1*CA^-0.04 + rnorm(20, 0, 0.01)
plot(Slope~CA)
CA <- 1:20
Slope <- 0.1*CA^-0.04 + rnorm(20, 0, 0.001)
plot(Slope~CA)
# create some fake data so I can run your code
CA <- 1:20
Slope <- 0.1*CA^-0.04 + rnorm(20, 0, 0.001)
slpca1 <- data.frame(CA, Slope)
rm(CA, Slope)
nls4=nls(Slope~i*CA^-z,start=list(i=0.1,z=-0.04),data=slpca1)
abline(nls4)
plot(Slope~CA,data=slpca1,xlab="Contributing area (ha)",ylab="Slope (m m[-1])",log="xy",
     xlim=c(0.001,1),ylim=c(0.01,1),xaxt="n",yaxt="n",cex.lab=2,cex.axis=1.5,
     cex=2,pch=16,family="serif") 
nls4=nls(Slope~i*CA^-z,start=list(i=0.1,z=-0.04),data=slpca1)
plot(Slope~CA, data=slpca1, log="xy")
abline(nls4)
?abline
lines(CA, predict(nls4))
lines(slpca1$CA, predict(nls4))
runif
# create some fake data so I can run your code
CA <- runif(20, 1, 20)
Slope <- 0.1*CA^-0.04 + rnorm(20, 0, 0.001)
slpca1 <- data.frame(CA, Slope)
rm(CA, Slope)
# fit a nonlinear regression
nls4 = nls(Slope ~ i*CA^-z, start=list(i=0.1,z=-0.04), data=slpca1)
# plot the observed values
plot(Slope~CA, data=slpca1, log="xy")
# plot the predicted line
ord <- order(slpca1$CA)
lines(slpca1$CA[ord], predict(nls4)[ord])
cleanup()
# create some fake data so I can run your code
CA <- runif(20, 1, 20)
Slope <- 0.1*CA^-0.04 + rnorm(20, 0, 0.001)
slpca1 <- data.frame(CA, Slope)
rm(CA, Slope)
# fit a nonlinear regression
nls4 = nls(Slope ~ i*CA^-z, start=list(i=0.1,z=-0.04), data=slpca1)
# plot the observed values
plot(Slope~CA, data=slpca1, log="xy")
# plot the predicted line
ord <- order(slpca1$CA)
lines(slpca1$CA[ord], predict(nls4)[ord])
cleanup()
q()
       east   north  point
11 273835.4 4726029 SM1112
12 273839.8 4726026 SM1112  
dfclip
dfclip()
df <- dfclip()
df
dput(df)
seq(1, 11, 3)
subsets <- list(
data.frame(east = c(273835.4, 273839.8), north = c(4726029, 4726026), point = c("SM1112", "SM1112"))
data.frame(east = c(273845.4, 273848.8), north = c(4726039, 4726035), point = c("SM1113", "SM1113"))
)
newcoords <- function(df) {
xnew <- seq(df$east[1], df$east[2], length=5)[2:4]
ynew <- seq(df$north[1], df$north[2], length=5)[2:4]
data.frame(xnew, ynew)
}
n
subsets <- list(
data.frame(east = c(273835.4, 273839.8), north = c(4726029, 4726026), point = c("SM1112", "SM1112")),
data.frame(east = c(273845.4, 273848.8), north = c(4726039, 4726035), point = c("SM1113", "SM1113"))
)
newcoords <- function(df) {
xnew <- seq(df$east[1], df$east[2], length=5)[2:4]
ynew <- seq(df$north[1], df$north[2], length=5)[2:4]
data.frame(xnew, ynew)
}
subsets <- list(
data.frame(east = c(273835.4, 273839.8), north = c(4726029, 4726026), point = c("SM1112", "SM1112")),
data.frame(east = c(273845.4, 273848.8), north = c(4726039, 4726035), point = c("SM1113", "SM1113"))
)
newcoords <- function(df) {
xnew <- seq(df$east[1], df$east[2], length=5)[2:4]
ynew <- seq(df$north[1], df$north[2], length=5)[2:4]
data.frame(xnew, ynew)
}
newcoords(subsets[[1]]
)
subsets
subsets[[1]]
class(subsets[[1]])
lapply(subsets[[1]], class)
seq(4726029, 4726026, length=5)
seq(4726029.0, 4726026.0, length=5)
a <- seq(4726029.0, 4726026.0, length=5)
a
a - 4726020
options("digits")
options(digits=10)
newcoords(subsets[[1]]
)
lapply(subsets, newcoords)
# some fake data to play with
subsets <- list(
data.frame(east = c(273835.4, 273839.8), north = c(4726029, 4726026), point = c("SM1112", "SM1112")),
data.frame(east = c(273845.4, 273848.8), north = c(4726039, 4726035), point = c("SM1113", "SM1113"))
)
# function to find three equally spaced points on a line between two x, y coordinates
newcoords <- function(df) {
xnew <- seq(df$east[1], df$east[2], length=5)[2:4]
ynew <- seq(df$north[1], df$north[2], length=5)[2:4]
data.frame(xnew, ynew)
}
# make sure you can see all the digits in the results
options(digits=10)
# apply the function to each data frame in the list
lapply(subsets, newcoords)
q()
dietdata <- read.csv("C:/JVA/Consult/Bunnell/Diet overlap/bootstrap_diet.csv", as.is=TRUE)
with(dietdata, dietdata$pdm <- paste(portno, depth, month, sep="-"))
head(dietdata)
dietdata$pdm <- with(dietdata, paste(portno, depth, month, sep="-"))
head(dietdata)
plotdf(dietdata)
formatC(dietdata$depth, #)
)
?formatC
formatC(dietdata$depth, flag="#")
unique(formatC(dietdata$depth, flag="#"))
unique(formatC(dietdata$depth, flag="0"))
formatC(c(12, 120), flag="0")
formatC(c(12, 120), flag="0#")
formatC(c(12, 120), digits=3, flag="0")
formatC(c(12, 120), digits=3, flag="0", format=)
formatC(c(12, 120), digits=3, flag="0", format="d")
formatC(c(12, 120), digits=2, flag="0", format="d")
formatC(dietdata$depth, digits=2, flag="0", format="d")
unique(formatC(dietdata$depth, digits=2, flag="0", format="d"))
dietdata <- read.csv("C:/JVA/Consult/Bunnell/Diet overlap/bootstrap_diet.csv", as.is=TRUE)
dietdata$pdm <- with(dietdata, paste(portno, formatC(dietdata$depth, digits=2, flag="0", format="d"), month, sep="-"))
head(dietdata)
search()
# input data frame with two species for selected month, portno, depth
dat <- read.csv("C:/JVA/Consult/Bunnell/Diet overlap/bootstrap_diet.csv", as.is=TRUE)
dat$pdm <- with(dat, paste(portno, formatC(dat$depth, digits=2, flag="0", format="d"), month, sep="-"))
supdm <- sort(unique(dat$pdm))
supdm
head(dat)
a <- with(dat, table(species, taxa, pdm))
dim(a)
a
a <- with(dat, table(paste(pdm, species), taxa))
a
dim(a)
a
apply(a, 1, var)
sort(apply(a, 1, var))
a
names(a)
dimnames(a)
dimnames(a)[[1]]
unpaste(dimnames(a)[[1]], " ")
unPaste(dimnames(a)[[1]], " ")
strsplit(dimnames(a)[[1]], " ")
sapply(strsplit(dimnames(a)[[1]], " "), "[", 1)
# table of port-depth-month-species by diet taxa
a <- with(dat, table(paste(pdm, species), taxa))
# each row should have the same number of records for each taxon
table(apply(a, 1, var))
# keep only those data with at least two species per port-depth-month
pdmz <- sapply(strsplit(dimnames(a)[[1]], " "), "[", 1)
pdmz
table(pdmz)
table(pdmz) > 1.5
pdmz[table(pdmz) > 1.5]
names(table(pdmz))[table(pdmz) > 1.5]
# bring in raw diet data
dat <- read.csv("C:/JVA/Consult/Bunnell/Diet overlap/bootstrap_diet.csv", as.is=TRUE)
dat$pdm <- with(dat, paste(portno, formatC(dat$depth, digits=2, flag="0", format="d"), month, sep="-"))
supdm <- sort(unique(dat$pdm))
# table of port-depth-month-species by diet taxa
a <- with(dat, table(paste(pdm, species), taxa))
# each row should have the same number of records for each taxon
table(apply(a, 1, var))
# keep only those data with at least two species per port-depth-month
pdmz <- sapply(strsplit(dimnames(a)[[1]], " "), "[", 1)
selpdmz <- names(table(pdmz))[table(pdmz) > 1.5]
sub <- dat[dat$pdm %in% selpdmz, ]
dim(dat)
dim(sub)
cleanup()
# bring in raw diet data
dat <- read.csv("C:/JVA/Consult/Bunnell/Diet overlap/bootstrap_diet.csv", as.is=TRUE)
dat$pdm <- with(dat, paste(portno, formatC(dat$depth, digits=2, flag="0", format="d"), month, sep="-"))
# table of port-depth-month-species by diet taxa
tabl <- with(dat, table(paste(pdm, species), taxa))
# each row should have the same number of records for each taxon
table(apply(tabl, 1, var))
# keep only those data with at least two species per port-depth-month
pdmz <- sapply(strsplit(dimnames(tabl)[[1]], " "), "[", 1)
supdm <- names(table(pdmz))[table(pdmz) > 1.5]
sub <- dat[dat$pdm %in% supdm, ]
# bring in raw diet data
dat <- read.csv("C:/JVA/Consult/Bunnell/Diet overlap/bootstrap_diet.csv", as.is=TRUE)
dat$pdm <- with(dat, paste(portno, formatC(dat$depth, digits=2, flag="0", format="d"), month, sep="-"))
# table of port-depth-month-species by diet taxa
tabl <- with(dat, table(paste(pdm, species), taxa))
# each row should have the same number of records for each taxon
table(apply(tabl, 1, var))
# keep only those data with at least two species per port-depth-month
pdmz <- sapply(strsplit(dimnames(tabl)[[1]], " "), "[", 1)
supdm <- names(table(pdmz))[table(pdmz) > 1.5]
sub <- dat[dat$pdm %in% supdm, ]
# select one port-depth-month
i <- supdm[1]
# select one pair of species
sus <- sort(unique(sub$species[sub$pdm == supdm[i]]))
sus
head(sub)
supdm
sub$pdm == supdm[i]]
sub$pdm == supdm[i]
sub$pdm
supdm[i]
supdm
# select one port-depth-month
i <- 1
# select one pair of species
sus <- sort(unique(sub$species[sub$pdm == supdm[i]]))
sus
# select one pair of species
sus <- sort(unique(sub$species[sub$pdm == supdm[i]]))
j1 <- 1
j2 <- 2
ovdat <- sub[sub$pdm == supdm[i] & sub$species %in% sus[c(j1, j2)], ]
dim(ovdat)
ovdat
library(boot)
?boot
boot
?as.factor
factor(ovdat$species, labels=FALSE)
ovdat$species
factor(ovdat$species)
factor(ovdat$species, labels=FALSE)
match(ovdat$species, sus)
# bring in raw diet data
dat <- read.csv("C:/JVA/Consult/Bunnell/Diet overlap/bootstrap_diet.csv", as.is=TRUE)
dat$pdm <- with(dat, paste(portno, formatC(dat$depth, digits=2, flag="0", format="d"), month, sep="-"))
# table of port-depth-month-species by diet taxa
tabl <- with(dat, table(paste(pdm, species), taxa))
# each row should have the same number of records for each taxon
table(apply(tabl, 1, var))
# keep only those data with at least two species per port-depth-month
pdmz <- sapply(strsplit(dimnames(tabl)[[1]], " "), "[", 1)
supdm <- names(table(pdmz))[table(pdmz) > 1.5]
sub <- dat[dat$pdm %in% supdm, ]
# select one port-depth-month
i <- 1
# select one pair of species
sus <- sort(unique(sub$species[sub$pdm == supdm[i]]))
j1 <- 1
j2 <- 2
# this creates the input data frame for the overlap function
# it's a data frame with diet data on two species for a single port-depth-month
ovdat <- sub[sub$pdm == supdm[i] & sub$species %in% sus[c(j1, j2)], ]
# define the overlap function, given only this data frame and a row number as input
overlap(ovdat, 1:dim(ovdat[1]))
overlap <- function(df, row) {
dietprop <- df[row, ]
susp <- sort(unique(dietprop$species))
# grap diet data from paired species
P1 <- dietprop[sel & species==susp[1]]
P2 <- dietprop[sel & species==susp[2]]
# make sure the proportions add up to 1 exactly (they currently range from 0.99999 to 1.00001)
P1 <- P1/sum(P1)
P2 <- P2/sum(P2)
overlap <- 1 - 0.5 * sum(abs(P1 - P2))
}
overlap(ovdat, 1:dim(ovdat[1]))
ovdat
head(ovdat)
overlap <- function(df, row) {
dfloc <- df[row, ]
susp <- sort(unique(dfloc$species))
# grap diet data from paired species
P1 <- with(dfloc, dietprop[species==susp[1]])
P2 <- with(dfloc, dietprop[species==susp[2]])
# make sure the proportions add up to 1 exactly (they currently range from 0.99999 to 1.00001)
P1 <- P1/sum(P1)
P2 <- P2/sum(P2)
overlap <- 1 - 0.5 * sum(abs(P1 - P2))
}
overlap(ovdat, 1:dim(ovdat[1]))
overlap(ovdat, 1:dim(ovdat)[1])
overlap <- function(df, row) {
dfloc <- df[row, ]
susp <- sort(unique(dfloc$species))
# grap diet data from paired species
P1 <- with(dfloc, dietprop[species==susp[1]])
P2 <- with(dfloc, dietprop[species==susp[2]])
# make sure the proportions add up to 1 exactly (they currently range from 0.99999 to 1.00001)
P1 <- P1/sum(P1)
P2 <- P2/sum(P2)
1 - 0.5 * sum(abs(P1 - P2))
}
overlap(ovdat, 1:dim(ovdat)[1])
boot(data=ovdat, statistic=overlap, R=1000, strata=match(ovdat$species, sus))
res <- boot(data=ovdat, statistic=overlap, R=1000, strata=match(ovdat$species, sus))
names(res)
res$t0
res$t
?boo
?boot
a$predi
search()
ls()
res$predi
res$pred.i
lapply(res, print)
windows()
hist(res$t)
abline(res$t0)
abline(v=res$t0)
search()
ls(4)
rlnorm(20)
hist(rlnorm(20))
?rlnorm
exp(rnorm(20))
hist(exp(rnorm(20)))
bcpCI <- function(tboot, orig, alpha=0.05) {
# Bias-corrected percentile 100*(1-alpha)% confidence limits
tboot <- tboot[!is.na(tboot)]
z0 <- qnorm(1-mean(tboot > orig))
# proportion of times the bootstrap estimate exceeds the original estimate
qn <- qnorm(1-alpha/2)
lp <- pnorm(2 * z0 - qn)
up <- pnorm(2 * z0 + qn)
a <- quantile(tboot, c(lp, up))
names(a) <- paste(format(100*c(alpha/2, 1-alpha/2)), "%", sep="")
a
}
bcpCI(exp(rnorm(20)), 1)
bcpCI(exp(rnorm(100)), 1)
exp(rnorm(20)
)
exp(0)
?boot
ratio <- function(d, w) sum(d$x * w)/sum(d$u * w)
boot(city, ratio, R = 999, stype = "w")
results <- boot(city, ratio, stype="w")
results <- boot(city, ratio, R=999, stype="w")
bcpCI(results$t, results$t0, 0.1)
results$t0
#' Bias-Corrected Percentile Confidence Interval
#'
#' Calculates the bias-corrected percentile confidence interval from a bootstrap sample.  
#' @param tbootA numeric vector of bootstrap estimates, typically \code{$t} from the output of the \code{\link{boot}} function.
#' @param orig A numeric scalar, the original estimate from the data, typically \code{$t0} from the output of the \code{\link{boot}} function.
#' @param alpha A numeric scalar, the desired significance level for 100*(1-\code{alpha})% confidence limits, default 0.05.
#' @return A named numeric vector of length 2, with the lower and upper confidence limits.
#' @export
#' @references Manly, Bryan F. J.  1997.
#'Randomization, Bootstrap and Monte Carlo Methods in Biology.  Chapman & Hall, London.
#' @examples 
#'
#' bcpCI(exp(rnorm(20)), 1)
#'
#' # Bootstrap of the ratio of means using the city data
#' library(boot)
#' ratio <- function(d, w) sum(d$x * w)/sum(d$u * w)
#' results <- boot(city, ratio, R=999, stype="w")
#' results$t0
#' bcpCI(results$t, results$t0, 0.1)
bcpCI <- function(tboot, orig, alpha=0.05) {
# Bias-corrected percentile 100*(1-alpha)% confidence limits
tboot <- tboot[!is.na(tboot)]
z0 <- qnorm(1-mean(tboot > orig))
# proportion of times the bootstrap estimate exceeds the original estimate
qn <- qnorm(1-alpha/2)
lp <- pnorm(2 * z0 - qn)
up <- pnorm(2 * z0 + qn)
out <- quantile(tboot, c(lp, up))
names(out) <- paste(format(100*c(alpha/2, 1-alpha/2)), "%", sep="")
out
}
cleanup()
graphics.off()
cleanup()
# C:\JVA\Consult\Bunnell\Diet overlap\DietOverlap bootstrap.r
library(boot)
# bring in raw diet data
dat <- read.csv("C:/JVA/Consult/Bunnell/Diet overlap/bootstrap_diet.csv", as.is=TRUE)
dat$pdm <- with(dat, paste(portno, formatC(dat$depth, digits=2, flag="0", format="d"), month, sep="-"))
# table of port-depth-month-species by diet taxa
tabl <- with(dat, table(paste(pdm, species), taxa))
# each row should have the same number of records for each taxon
table(apply(tabl, 1, var))
# keep only those data with at least two species per port-depth-month
pdmz <- sapply(strsplit(dimnames(tabl)[[1]], " "), "[", 1)
supdm <- names(table(pdmz))[table(pdmz) > 1.5]
sub <- dat[dat$pdm %in% supdm, ]
# select one port-depth-month
i <- 1
# select one pair of species
sus <- sort(unique(sub$species[sub$pdm == supdm[i]]))
j1 <- 1
j2 <- 2
# this creates the input data frame for the overlap function
# it's a data frame with diet data on two species for a single port-depth-month
ovdat <- sub[sub$pdm == supdm[i] & sub$species %in% sus[c(j1, j2)], ]
# define the overlap function, given only this data frame and a row number as input
overlap <- function(df, row) {
dfloc <- df[row, ]
susp <- sort(unique(dfloc$species))
# grap diet data from paired species
P1 <- with(dfloc, dietprop[species==susp[1]])
P2 <- with(dfloc, dietprop[species==susp[2]])
# make sure the proportions add up to 1 exactly (they currently range from 0.99999 to 1.00001)
P1 <- P1/sum(P1)
P2 <- P2/sum(P2)
1 - 0.5 * sum(abs(P1 - P2))
}
# define a bootstrap CI function
bcpCI <- function(tboot, orig, alpha=0.05) {
# Bias-corrected percentile 100*(1-alpha)% confidence limits
tboot <- tboot[!is.na(tboot)]
z0 <- qnorm(1-mean(tboot > orig))
# proportion of times the bootstrap estimate exceeds the original estimate
qn <- qnorm(1-alpha/2)
lp <- pnorm(2 * z0 - qn)
up <- pnorm(2 * z0 + qn)
out <- quantile(tboot, c(lp, up))
names(out) <- paste(format(100*c(alpha/2, 1-alpha/2)), "%", sep="")
out
}
overlap(ovdat, 1:dim(ovdat)[1])
res <- boot(data=ovdat, statistic=overlap, R=1000, strata=match(ovdat$species, sus))
res$t0
bcpCI(res$t, res$t0)
res
names(res)
res$statistic
names(summary(res))
sd(res$t)
boot
res
?boot.return
?boot:::boot.return
sd(res$t)
res$t
res$t0
mean(res$t)
sd(res$t)
res
c(orig=res$t0, bcpCI(res$t, res$t0), bias=mean(res$t)-res$t0, se=sd(res$t))
c(orig=res$t0, bias=mean(res$t)-res$t0, se=sd(res$t), bcpCI(res$t, res$t0))
table(pdmz)
table(pdmz)[table(pdmz) > 1.5]
choose(table(pdmz)[table(pdmz) > 1.5], 2)
sum(choose(table(pdmz)[table(pdmz) > 1.5], 2))
# create a data frame for the results
nrows <- sum(choose(tab.pdmz[tab.pdmz > 1.5], 2))
results <- data.frame(month=rep(NA, nrows), portno=NA, depth=NA, species1=NA, species2=NA, overlap=NA, bias=NA, se=NA, lower95=NA, upper95=NA)
# C:\JVA\Consult\Bunnell\Diet overlap\DietOverlap bootstrap.r
library(boot)
# define the overlap function, given only this data frame and a row number as input
overlap <- function(df, row) {
dfloc <- df[row, ]
susp <- sort(unique(dfloc$species))
# grap diet data from paired species
P1 <- with(dfloc, dietprop[species==susp[1]])
P2 <- with(dfloc, dietprop[species==susp[2]])
# make sure the proportions add up to 1 exactly (they currently range from 0.99999 to 1.00001)
P1 <- P1/sum(P1)
P2 <- P2/sum(P2)
1 - 0.5 * sum(abs(P1 - P2))
}
# define a bootstrap CI function
bcpCI <- function(tboot, orig, alpha=0.05) {
# Bias-corrected percentile 100*(1-alpha)% confidence limits
tboot <- tboot[!is.na(tboot)]
z0 <- qnorm(1-mean(tboot > orig))
# proportion of times the bootstrap estimate exceeds the original estimate
qn <- qnorm(1-alpha/2)
lp <- pnorm(2 * z0 - qn)
up <- pnorm(2 * z0 + qn)
out <- quantile(tboot, c(lp, up))
names(out) <- paste(format(100*c(alpha/2, 1-alpha/2)), "%", sep="")
out
}
# bring in raw diet data
dat <- read.csv("C:/JVA/Consult/Bunnell/Diet overlap/bootstrap_diet.csv", as.is=TRUE)
dat$pdm <- with(dat, paste(portno, formatC(dat$depth, digits=2, flag="0", format="d"), month, sep="-"))
# table of port-depth-month-species by diet taxa
tabl <- with(dat, table(paste(pdm, species), taxa))
# each row should have the same number of records for each taxon
table(apply(tabl, 1, var))
# keep only those data with at least two species per port-depth-month
pdmz <- sapply(strsplit(dimnames(tabl)[[1]], " "), "[", 1)
tab.pdmz <- table(pdmz)
supdm <- names(tab.pdmz)[tab.pdmz > 1.5]
sub <- dat[dat$pdm %in% supdm, ]
# create a data frame for the results
nrows <- sum(choose(tab.pdmz[tab.pdmz > 1.5], 2))
results <- data.frame(month=rep(NA, nrows), portno=NA, depth=NA, species1=NA, species2=NA, overlap=NA, bias=NA, se=NA, lower95=NA, upper95=NA)
results
cleanup()
search()
# C:\JVA\Consult\Bunnell\Diet overlap\DietOverlap bootstrap.r
library(boot)
# define the overlap function, given only this data frame and a row number as input
overlap <- function(df, row) {
dfloc <- df[row, ]
susp <- sort(unique(dfloc$species))
# grap diet data from paired species
P1 <- with(dfloc, dietprop[species==susp[1]])
P2 <- with(dfloc, dietprop[species==susp[2]])
# make sure the proportions add up to 1 exactly (they currently range from 0.99999 to 1.00001)
P1 <- P1/sum(P1)
P2 <- P2/sum(P2)
1 - 0.5 * sum(abs(P1 - P2))
}
# define a bootstrap CI function
bcpCI <- function(tboot, orig, alpha=0.05) {
# Bias-corrected percentile 100*(1-alpha)% confidence limits
tboot <- tboot[!is.na(tboot)]
z0 <- qnorm(1-mean(tboot > orig))
# proportion of times the bootstrap estimate exceeds the original estimate
qn <- qnorm(1-alpha/2)
lp <- pnorm(2 * z0 - qn)
up <- pnorm(2 * z0 + qn)
out <- quantile(tboot, c(lp, up))
names(out) <- paste(format(100*c(alpha/2, 1-alpha/2)), "%", sep="")
out
}
# bring in raw diet data
dat <- read.csv("C:/JVA/Consult/Bunnell/Diet overlap/bootstrap_diet.csv", as.is=TRUE)
dat$pdm <- with(dat, paste(portno, formatC(dat$depth, digits=2, flag="0", format="d"), month, sep="-"))
# table of port-depth-month-species by diet taxa
tabl <- with(dat, table(paste(pdm, species), taxa))
# each row should have the same number of records for each taxon
table(apply(tabl, 1, var))
# keep only those data with at least two species per port-depth-month
pdmz <- sapply(strsplit(dimnames(tabl)[[1]], " "), "[", 1)
tab.pdmz <- table(pdmz)
supdm <- names(tab.pdmz)[tab.pdmz > 1.5]
sub <- dat[dat$pdm %in% supdm, ]
# create a data frame for the results
nrows <- sum(choose(tab.pdmz[tab.pdmz > 1.5], 2))
results <- data.frame(month=rep(NA, nrows), portno=NA, depth=NA, species1=NA, species2=NA, overlap=NA, bias=NA, se=NA, lower95=NA, upper95=NA)
count <- 0
# select one port-depth-month
for(i in seq_along(supdm)) {
# select one pair of species
sus <- sort(unique(sub$species[sub$pdm == supdm[i]]))
for(j1 in seq_along(sus)[-length(sus)]) {
for(j2 in (j1+1):length(sus)) {
# keep track of the row number
count <- count + 1
# this creates the input data frame for the overlap function
# it's a data frame with diet data on two species for a single port-depth-month
ovdat <- sub[sub$pdm == supdm[i] & sub$species %in% sus[c(j1, j2)], ]
# boostrap the data to estimate overlap with confidence intervals
res <- boot(data=ovdat, statistic=overlap, R=1000, strata=match(ovdat$species, sus))
ci <- bcpCI(res$t, res$t0)
# fill in the results data frame
results[count, c("month", "portno", "depth")] <- ovdat[1, c("month", "portno", "depth")]
results[count, c("species1", "species2")] <- sus[c(j1, j2)]
results[count, c("overlap", "bias", "se", "lower95", "upper95")] <- c(res$t0, mean(res$t)-res$t0, sd(res$t), ci)
}}
}
# create a data frame for the results
nrows <- sum(choose(tab.pdmz[tab.pdmz > 1.5], 2))
results <- data.frame(month=rep(NA, nrows), portno=NA, depth=NA, species1=NA, species2=NA, overlap=NA, bias=NA, se=NA, lower95=NA, upper95=NA)
count <- 0
i <- 1
# select one pair of species
sus <- sort(unique(sub$species[sub$pdm == supdm[i]]))
seq_along(sus)[-length(sus)]
# select one pair of species
sus <- sort(unique(sub$species[sub$pdm == supdm[i]]))
for(j1 in seq_along(sus)[-length(sus)]) {
for(j2 in (j1+1):length(sus)) {
# keep track of the row number
count <- count + 1
# this creates the input data frame for the overlap function
# it's a data frame with diet data on two species for a single port-depth-month
ovdat <- sub[sub$pdm == supdm[i] & sub$species %in% sus[c(j1, j2)], ]
# boostrap the data to estimate overlap with confidence intervals
res <- boot(data=ovdat, statistic=overlap, R=1000, strata=match(ovdat$species, sus))
ci <- bcpCI(res$t, res$t0)
# fill in the results data frame
results[count, c("month", "portno", "depth")] <- ovdat[1, c("month", "portno", "depth")]
results[count, c("species1", "species2")] <- sus[c(j1, j2)]
results[count, c("overlap", "bias", "se", "lower95", "upper95")] <- c(res$t0, mean(res$t)-res$t0, sd(res$t), ci)
}}
warnings()
head(sub)
head(ovdat)
dim(ovdat)
with(ovdat, tapply(dietprop, list(fishno, taxa, species), mean))
with(ovdat, tapply(dietprop, list(fishno, taxa, species), mean))
a <- with(ovdat, tapply(dietprop, list(fishno, taxa, species), mean))
dim(a)
a[, 1:5, 1]
a[, 1:5, 2]
with(ovdat, tapply(dietprop, list(paste(species, fishno), taxa), mean))
with(ovdat, tapply(dietprop, list(paste(species, fishno), taxa), mean))[, 1:5]
sus
m <- with(ovdat, tapply(dietprop, list(paste(species, format(fishno)), taxa), mean))
m
class(m)
rownames(m)
strsplit(rownames(m), " ")
sapply(strsplit(rownames(m), " "), "[", 1)
i <- 1
j1 <- 1
j2 <- 2
library(boot)
# define the overlap function, given only this data frame and a row number as input
overlap <- function(df, row) {
dfloc <- df[row, ]
susp <- sort(unique(dfloc$species))
# grab diet data from paired species
P1 <- with(dfloc, dietprop[species==susp[1]])
P2 <- with(dfloc, dietprop[species==susp[2]])
# make sure the proportions add up to 1 exactly (they currently range from 0.99999 to 1.00001)
P1 <- P1/sum(P1)
P2 <- P2/sum(P2)
1 - 0.5 * sum(abs(P1 - P2))
}
# define a bootstrap CI function
bcpCI <- function(tboot, orig, alpha=0.05) {
# Bias-corrected percentile 100*(1-alpha)% confidence limits
tboot <- tboot[!is.na(tboot)]
z0 <- qnorm(1-mean(tboot > orig))
# proportion of times the bootstrap estimate exceeds the original estimate
qn <- qnorm(1-alpha/2)
lp <- pnorm(2 * z0 - qn)
up <- pnorm(2 * z0 + qn)
out <- quantile(tboot, c(lp, up))
names(out) <- paste(format(100*c(alpha/2, 1-alpha/2)), "%", sep="")
out
}
# bring in raw diet data
dat <- read.csv("C:/JVA/Consult/Bunnell/Diet overlap/bootstrap_diet.csv", as.is=TRUE)
dat$pdm <- with(dat, paste(portno, formatC(dat$depth, digits=2, flag="0", format="d"), month, sep="-"))
# table of port-depth-month-species by diet taxa
tabl <- with(dat, table(paste(pdm, species), taxa))
# each row should have the same number of records for each taxon
table(apply(tabl, 1, var))
# keep only those data with at least two species per port-depth-month
pdmz <- sapply(strsplit(dimnames(tabl)[[1]], " "), "[", 1)
tab.pdmz <- table(pdmz)
supdm <- names(tab.pdmz)[tab.pdmz > 1.5]
sub <- dat[dat$pdm %in% supdm, ]
# create a data frame for the results
nrows <- sum(choose(tab.pdmz[tab.pdmz > 1.5], 2))
results <- data.frame(month=rep(NA, nrows), portno=NA, depth=NA, species1=NA, species2=NA, overlap=NA, bias=NA, se=NA, lower95=NA, upper95=NA)
count <- 0
sus <- sort(unique(sub$species[sub$pdm == supdm[i]]))
# keep track of the row number
count <- count + 1
# this creates the input data frame for the overlap function
# it's a data frame with diet data on two species for a single port-depth-month
ovdat <- sub[sub$pdm == supdm[i] & sub$species %in% sus[c(j1, j2)], ]
m <- with(ovdat, tapply(dietprop, list(paste(species, format(fishno)), taxa), mean))
strat <- match(sapply(strsplit(rownames(m), " "), "[", 1), sus)
?boot
ovdat2 <- data.frame(with(ovdat, tapply(dietprop, list(paste(species, format(fishno)), taxa), mean)))
ovdat2$strat <- match(sapply(strsplit(rownames(m), " "), "[", 1), sus)
head(ovdat2)
head(sub)
names(sub)
dput(names(sub))
# split the data into an info part and a diet proportion part
info <- sub[sub$fishno==1, c("month", "portno", "depth", "species", "serno", "pdm")]
dim(sub)
dim(info)
head(info)
head(sub)
# split the data into an info part and a diet proportion part
info <- sub[sub$fishno==1 & sub$taxa="alona", c("month", "portno", "depth", "species", "serno", "pdm")]
# split the data into an info part and a diet proportion part
info <- sub[sub$fishno==1 & sub$taxa=="alona", c("month", "portno", "depth", "species", "serno", "pdm")]
dim(dat)
dim(sub)
head(sub)
sub$taxa
dim(dat)
dim(info)
head(dat)
head(info)
info
head(sub)
?ddply
library(plyr)
library(reshape2)
?melt
head(sub)
?melt
names(airquality) <- tolower(names(airquality))
melt(airquality, id=c("month", "day"))
names(ChickWeight) <- tolower(names(ChickWeight))
melt(ChickWeight, id=2:4)
df2 <- melt(sub, measure.vars=c("dietprop"))
dim(sub)
dim(df2)
head(sub)
head(df2)
#Air quality example
names(airquality) <- tolower(names(airquality))
aqm <- melt(airquality, id=c("month", "day"), na.rm=TRUE)
head(aqm)
acast(aqm, day ~ month ~ variable)
a <- dcast(sub, pdm + portno + depth + month + serno + species + fishno ~ taxa)
a <- dcast(sub, pdm + portno + depth + month + serno + species + fishno ~ taxa, data=sub)
dim(a)
head(a)
a <- dcast(sub, pdm + portno + depth + month + serno + species + fishno ~ taxa, value.var=dietprop, data=sub)
dim(a)
head(a)
head(sub)
acast(aqm, day ~ month ~ variable)
acast(aqm, day + month ~ variable)
dcast(aqm, day + month ~ variable)
sub2 <- melt(sub, measure.vars=c("dietprop"))
sub3 <- dcast(sub2, pdm + portno + depth + month + serno + species + fishno ~ taxa)
dim(sub)
dim(sub2)
dim(sub3)
head(sub)
head(sub2)
head(sub3)
dput(names(sub3))
# make sure the proportions add up to 1 "exactly" (they currently range from 0.99999 to 1.00001)
m <- sub3[, c("alona", "ashland", "bosmina", "bythotr", "diporei", "diptera", 
"dreisse", "episch", "eurycer", "fish", "harpact", "herb_cl", 
"limnoca", "mendot", "minutus", "miscell", "mysis", "ostraco", 
"oth_cal", "oth_cyc", "senecel", "sicilis", "thomasi")]
apply(m, 1, sum)
# make sure the proportions add up to 1 "exactly" (they currently range from 0.99999 to 1.00001)
m <- sub3[1:10, c("alona", "ashland", "bosmina", "bythotr", "diporei", "diptera", 
"dreisse", "episch", "eurycer", "fish", "harpact", "herb_cl", 
"limnoca", "mendot", "minutus", "miscell", "mysis", "ostraco", 
"oth_cal", "oth_cyc", "senecel", "sicilis", "thomasi")]
apply(m, 1, sum)
m/apply(m, 1, sum)
m
q()
# C:\JVA\Consult\Bunnell\Diet overlap\DietOverlap bootstrap.r
library(reshape2)
library(boot)
# define the overlap function, given only this data frame and a row number as input
overlap <- function(df, row) {
dfloc <- df[row, ]
susp <- sort(unique(dfloc$species))
# grab diet data from paired species
P1 <- with(dfloc, dietprop[species==susp[1]])
P2 <- with(dfloc, dietprop[species==susp[2]])
# make sure the proportions add up to 1 exactly (they currently range from 0.99999 to 1.00001)
P1 <- P1/sum(P1)
P2 <- P2/sum(P2)
1 - 0.5 * sum(abs(P1 - P2))
}
# define a bootstrap CI function
bcpCI <- function(tboot, orig, alpha=0.05) {
# Bias-corrected percentile 100*(1-alpha)% confidence limits
tboot <- tboot[!is.na(tboot)]
z0 <- qnorm(1-mean(tboot > orig))
# proportion of times the bootstrap estimate exceeds the original estimate
qn <- qnorm(1-alpha/2)
lp <- pnorm(2 * z0 - qn)
up <- pnorm(2 * z0 + qn)
out <- quantile(tboot, c(lp, up))
names(out) <- paste(format(100*c(alpha/2, 1-alpha/2)), "%", sep="")
out
}
# bring in raw diet data
dat <- read.csv("C:/JVA/Consult/Bunnell/Diet overlap/bootstrap_diet.csv", as.is=TRUE)
dat$pdm <- with(dat, paste(portno, formatC(dat$depth, digits=2, flag="0", format="d"), month, sep="-"))
# table of port-depth-month-species by diet taxa
tabl <- with(dat, table(paste(pdm, species), taxa))
# each row should have the same number of records for each taxon
table(apply(tabl, 1, var))
# keep only those data with at least two species per port-depth-month
pdmz <- sapply(strsplit(dimnames(tabl)[[1]], " "), "[", 1)
tab.pdmz <- table(pdmz)
supdm <- names(tab.pdmz)[tab.pdmz > 1.5]
sub <- dat[dat$pdm %in% supdm, ]
# rearrange selected data
sub2 <- melt(sub, measure.vars=c("dietprop"))
sub3 <- dcast(sub2, pdm + portno + depth + month + serno + species + fishno ~ taxa)
# make sure the proportions add up to 1 "exactly" (they currently range from 0.99999 to 1.00001)
taxanames <- c("alona", "ashland", "bosmina", "bythotr", "diporei", "diptera", 
"dreisse", "episch", "eurycer", "fish", "harpact", "herb_cl", 
"limnoca", "mendot", "minutus", "miscell", "mysis", "ostraco", 
"oth_cal", "oth_cyc", "senecel", "sicilis", "thomasi")
m <- sub3[, taxanames]
sub3[, taxanames] <- m/apply(m, 1, sum)
head(sub3)
head(sub3)
row <- 1:10
sub3[, 1:8]
row <- 1:35
df <- sub3
dfloc <- df[row, ]
susp <- sort(unique(dfloc$species))
apply(dfloc[, taxanames], 2, tapply, dfloc$species, mean)
sub3[row, 1:8]
sub3[1:30, 1:8]
row <- 1:30
dfloc <- df[row, ]
susp <- sort(unique(dfloc$species))
# calculate the mean by species
apply(dfloc[, taxanames], 2, tapply, dfloc$species, mean)
dfloc <- df[row, ]
susp <- sort(unique(dfloc$species))
# calculate the mean diet proportion by species
p12 <- apply(dfloc[, taxanames], 2, tapply, dfloc$species, mean)
1 - 0.5 * sum(abs(p12[1, ] - p12[2, ]))
# define the overlap function, given only this data frame and a row number as input
overlap <- function(df, row) {
dfloc <- df[row, ]
susp <- sort(unique(dfloc$species))
# calculate the mean diet proportion by species
p12 <- apply(dfloc[, taxanames], 2, tapply, dfloc$species, mean)
1 - 0.5 * sum(abs(p12[1, ] - p12[2, ]))
}
cleanup()
# C:\JVA\Consult\Bunnell\Diet overlap\DietOverlap bootstrap.r
library(reshape2)
library(boot)
# define the overlap function, given only this data frame and a row number as input
overlap <- function(df, row) {
dfloc <- df[row, ]
susp <- sort(unique(dfloc$species))
# calculate the mean diet proportion by species
p12 <- apply(dfloc[, taxanames], 2, tapply, dfloc$species, mean)
1 - 0.5 * sum(abs(p12[1, ] - p12[2, ]))
}
# define a bootstrap CI function
bcpCI <- function(tboot, orig, alpha=0.05) {
# Bias-corrected percentile 100*(1-alpha)% confidence limits
tboot <- tboot[!is.na(tboot)]
z0 <- qnorm(1-mean(tboot > orig))
# proportion of times the bootstrap estimate exceeds the original estimate
qn <- qnorm(1-alpha/2)
lp <- pnorm(2 * z0 - qn)
up <- pnorm(2 * z0 + qn)
out <- quantile(tboot, c(lp, up))
names(out) <- paste(format(100*c(alpha/2, 1-alpha/2)), "%", sep="")
out
}
# bring in raw diet data
dat <- read.csv("C:/JVA/Consult/Bunnell/Diet overlap/bootstrap_diet.csv", as.is=TRUE)
dat$pdm <- with(dat, paste(portno, formatC(dat$depth, digits=2, flag="0", format="d"), month, sep="-"))
# table of port-depth-month-species by diet taxa
tabl <- with(dat, table(paste(pdm, species), taxa))
# each row should have the same number of records for each taxon
table(apply(tabl, 1, var))
# keep only those data with at least two species per port-depth-month
pdmz <- sapply(strsplit(dimnames(tabl)[[1]], " "), "[", 1)
tab.pdmz <- table(pdmz)
supdm <- names(tab.pdmz)[tab.pdmz > 1.5]
sub <- dat[dat$pdm %in% supdm, ]
# rearrange selected data
sub2 <- melt(sub, measure.vars=c("dietprop"))
sub3 <- dcast(sub2, pdm + portno + depth + month + serno + species + fishno ~ taxa)
# make sure the proportions add up to 1 "exactly" (they currently range from 0.99999 to 1.00001)
taxanames <- c("alona", "ashland", "bosmina", "bythotr", "diporei", "diptera", 
"dreisse", "episch", "eurycer", "fish", "harpact", "herb_cl", 
"limnoca", "mendot", "minutus", "miscell", "mysis", "ostraco", 
"oth_cal", "oth_cyc", "senecel", "sicilis", "thomasi")
m <- sub3[, taxanames]
sub3[, taxanames] <- m/apply(m, 1, sum)
# create a data frame for the results
nrows <- sum(choose(tab.pdmz[tab.pdmz > 1.5], 2))
results <- data.frame(portno=NA, depth=NA, month=rep(NA, nrows), species1=NA, species2=NA, overlap=NA, bias=NA, se=NA, lower95=NA, upper95=NA)
count <- 0
i <- 1
j1 <- 1
j2 <- 2
# select one pair of species
sus <- sort(unique(sub3$species[sub3$pdm == supdm[i]]))
# keep track of the row number
count <- count + 1
# this creates the input data frame for the overlap function
# it's a data frame with diet data on two species for a single port-depth-month
ovdat <- sub3[sub3$pdm == supdm[i] & sub3$species %in% sus[c(j1, j2)], ]
ovdat$strat <- match(ovdat$species, sus)
head(ovdat)
res <- boot(data=m, statistic=overlap, R=1000, strata=strat)
strat <- match(ovdat$species, sus)
res <- boot(data=m, statistic=overlap, R=1000, strata=strat)
res <- boot(data=ovdat, statistic=overlap, R=1000, strata=strat)
res
ci <- bcpCI(res$t, res$t0)
results[count, c("portno", "depth", "month")] <- ovdat[1, c("portno", "depth", "month")]
results[count, c("species1", "species2")] <- sus[c(j1, j2)]
results[count, c("overlap", "bias", "se", "lower95", "upper95")] <- c(res$t0, mean(res$t)-res$t0, sd(res$t), ci)
results
# create a data frame for the results
nrows <- sum(choose(tab.pdmz[tab.pdmz > 1.5], 2))
results <- data.frame(portno=NA, depth=NA, month=rep(NA, nrows), species1=NA, species2=NA, overlap=NA, bias=NA, se=NA, lower95=NA, upper95=NA)
count <- 0
for(i in 1:2) {
# select one pair of species
sus <- sort(unique(sub3$species[sub3$pdm == supdm[i]]))
for(j1 in seq_along(sus)[-length(sus)]) {
for(j2 in (j1+1):length(sus)) {
# keep track of the row number
count <- count + 1
# this creates the input data frame for the overlap function
# it's a data frame with diet data on two species for a single port-depth-month
ovdat <- sub3[sub3$pdm == supdm[i] & sub3$species %in% sus[c(j1, j2)], ]
strat <- match(ovdat$species, sus)
# boostrap the data to estimate overlap with confidence intervals
res <- boot(data=ovdat, statistic=overlap, R=1000, strata=strat)
ci <- bcpCI(res$t, res$t0)
# fill in the results data frame
results[count, c("portno", "depth", "month")] <- ovdat[1, c("portno", "depth", "month")]
results[count, c("species1", "species2")] <- sus[c(j1, j2)]
results[count, c("overlap", "bias", "se", "lower95", "upper95")] <- c(res$t0, mean(res$t)-res$t0, sd(res$t), ci)
}}
}
dim(results)
results
98/16
# look at the results, sorted by species, depth, port, ...
results[order(results$species1, results$species2, results$depth, sub$portno, sub$month, sub$overlap), ]
# look at the results, sorted by species, depth, port, ...
results[order(results$species1, results$species2, results$depth, results$portno, results$month, results$overlap), ]
head(sub3)
table(sub3$depth)
ls()
rm(tabl, pdmz, tab.pdmz, dat, sub, sub2, taxanames, m, nrows)
date()
cleanup()
q()
library(lubridate)
library(plotrix)
fixnames <- function(df) {
names(df) <- make.names(casefold(names(df)), unique=TRUE, allow_=FALSE)
df
}
# bring in the data, fix the names
wb <- loadWorkbook("C:/JVA/Lamprey/Adults/Barriers/Operating Times/Operating Time Analysis data JVA.xlsx")
barrier <- readWorksheet(wb, sheet=getSheets(wb)[1], startRow=1)
barrier <- fixnames(barrier)
names(barrier) <- c("lake.code", "str.code", "slbarid", "barrier.name", "lat", "long", "miles2mouth", "feet2mouth", "gradient", "elevsiteft", "elevmouthft")
cat <- readWorksheet(wb, sheet=getSheets(wb)[2], startRow=1)
cat <- fixnames(cat)
### estimate start and end times for barrier operation based on observed (truncated) distribution of catch days
# two barrier codes have typos in them
cat$slbarid[cat$slbarid==221310048] <- 221610048
cat$slbarid[cat$slbarid==27391001] <- 273910001
cat$year <- year(cat$date)
cat$month <- month(cat$date)
cat$day <- day(cat$date)
cat$marday <- as.numeric(as.Date(paste(cat$year, cat$month, cat$day, sep="-")) - as.Date(paste0(cat$year, "-03-01")) + 1)
whatdate <- function(marday, year) {
marday + as.Date(paste0(year, "-03-01")) - 1
}
# Don't need any zero catch data for this approach
cat2 <- cat[cat$catch > 0.5, ]
attach(cat2)
sub <- sort(unique(slbarid))
suy <- sort(unique(year))
smry <- aggregate(catch, list(slbarid=slbarid, year=year), sum)
names(smry)[names(smry)=="x"] <- "totcatch"
smry$numdays <- aggregate(!is.na(catch), list(slbarid=slbarid, year=year), sum)$x
smry$dmean <- NA
smry$dsd <- NA
for(i in seq(sub)) {
for(j in seq(suy)) {
sel <- slbarid==sub[i] & year==suy[j]
x <- rep(marday[sel], catch[sel])
if(sum(sel[!is.na(sel)]) >= 2) {
x <- rep(marday[sel], catch[sel])
smry[smry$slbarid==sub[i] & smry$year==suy[j], c("dmean", "dsd")] <- c(mean(x), sd(x))
}
}}
smry2 <- smry[!is.na(smry$dmean), ]
alpha <- 0.01
z <- qnorm(1-alpha/2)
smry2$start <- smry2$dmean - z * smry2$dsd
smry2$end <- smry2$dmean + z * smry2$dsd
detach(cat2)
# merge catch data with barrier data
barrier2 <- merge(barrier, smry2, all=TRUE)
dim(smry2)
dim(barrier2)
# no catch data for ORWELL BROOK or STERLING VALLEY
barrier2[is.na(barrier2$start), ]
head(barrier2)
head(barrier2)
head(barrier2)
names(barrier2)
attach(barrier2)
addmargins(table(barrier.name, year))
addmargins(table(barrier.name, year))
fit <- gam(start ~ s(lat, k=4) + s(long, k=4) + s(log(gradient + 0.01), k=4), weight=numdays, data=barrier5)
fit <- gam(start ~ s(lat, k=4) + s(long, k=4) + s(log(gradient + 0.01), k=4), weight=numdays, data=barrier2)
plot(fit)
plotdf(barrier2)
head(barrier2)
search()
ls(6)
jvanames
tabl <- addmargins(table(barrier.name, year))
dim(tabl)
table[c(1:3, 35:38), c(1:3, 19:22)]
tabl[c(1:3, 35:38), c(1:3, 19:22)]
dimnames(tabl)
dimnames(tabl)$year
dimnames(tabl)$year <- substring(dimnames(tabl)$year, 3, 4)
tabl[c(1:3, 35:38), c(1:3, 19:22)]
tabl[c(1:3, 35:38), ]
# convert miles to km
barrier2$km2mouth <- 1.60934 * barrier2$miles2mouth
detach()
attach(barrier2)
plot(gradient)
plot(kmtmouth)
plot(km2mouth)
fit <- gam(start ~ s(lat, k=4) + s(long, k=4) + s(log(gradient + 0.01), k=4) + s(log(km2mouth + 0.01), k=4) + as.factor(lake.code), 
weight=numdays, data=barrier2)
plot(fit)
plot(fit, all.terms=TRUE)
windows()
par(mfrow=c(3, 3))
plot(fit, all.terms=TRUE)
windows(h=6.5, w=9)
par(mfrow=c(2, 3))
plot(fit, all.terms=TRUE)
par(mfrow=c(2, 3), mar=c(4, 4, 1, 1))
plot(fit, all.terms=TRUE)
summary(fit)
fit <- gam(start ~ s(lat, k=4) + s(long, k=4) + s(log(gradient + 0.01), k=4) + s(log(km2mouth + 0.01), k=4) + as.factor(lake.code) - 1, 
weight=numdays, data=barrier2)
summary(fit)
fit <- gam(start ~ s(lat, k=4) + s(long, k=4) + s(log(gradient + 0.01), k=4) + s(log(km2mouth + 0.01), k=4) + as.factor(lake.code), 
weight=numdays, data=barrier2)
summary(fit)
fit <- gam(start ~ s(lat, k=4) + s(long, k=4) + s(log(gradient + 0.01), k=4) + s(log(km2mouth + 0.01), k=4) + as.factor(lake.code), 
weight=numdays, data=barrier2)
fit2 <- gam(start ~ s(lat, k=4) + s(long, k=4) + s(log(gradient + 0.01), k=4) + s(log(km2mouth + 0.01), k=4) + as.factor(lake.code==5), 
weight=numdays, data=barrier2)
AIC(fit, fit2)
summary(fit2)
recode(lake.code, c(4, 1, 3, 2, 5), c("ES", "ES", "HM", "HM", "O"))
barrier2$lakegrp <- recode(lake.code, c(4, 1, 3, 2, 5), c("ES", "ES", "HM", "HM", "O"))
fit3 <- gam(start ~ s(lat, k=4) + s(long, k=4) + s(log(gradient + 0.01), k=4) + s(log(km2mouth + 0.01), k=4) + as.factor(lakegrp), 
weight=numdays, data=barrier2)
AIC(fit, fit2, fit3)
summary(fit3)
windows(h=6.5, w=9)
par(mfrow=c(2, 3), mar=c(4, 4, 1, 1))
plot(fit3, all.terms=TRUE)
windows(h=6.5, w=9)
par(mfrow=c(2, 2), mar=c(4, 4, 1, 1))
plot(fit3)
table(lake.code)
sort(gradient)
sort(km2mouth)
tabl <- addmargins(table(barrier.name, year))
dimnames(tabl)$year <- substring(dimnames(tabl)$year, 3, 4)
fit1 <- gam(start ~ s(lat, k=4) + s(long, k=4) + s(log10(gradient + 0.01), k=4) + s(log10(km2mouth), k=4) + as.factor(lake.code), 
weight=numdays, data=barrier2)
fit2 <- gam(start ~ s(lat, k=4) + s(long, k=4) + s(log10(gradient + 0.01), k=4) + s(log10(km2mouth), k=4) + as.factor(lake.code==5), 
weight=numdays, data=barrier2)
barrier2$lakegrp <- recode(lake.code, c(4, 1, 3, 2, 5), c("ES", "ES", "HM", "HM", "O"))
fit <- gam(start ~ s(lat, k=4) + s(long, k=4) + s(log10(gradient + 0.01), k=4) + s(log10(km2mouth), k=4) + as.factor(lakegrp), 
weight=numdays, data=barrier2)
AIC(fit1, fit2, fit)
search()
ls(6)
AICc(list(fit1, fit2, fit))
windows(w=9, h=6.5)
map(xlim=range(map5$x, na.rm=TRUE), ylim=range(map5$y, na.rm=TRUE), type="n", mar=rep(0, 4))
lines(map5, col="lightgray")
#points(long, lat, cex=rescale(start, c(0.5, 6)), col=colr(start, "blue", "cyan"), lwd=2)
points(long, lat, cex=rescale(fit$fitted, c(0.5, 6)), col=colr(fit$fitted, "blue", "cyan"), lwd=2)
map(xlim=range(map5$x, na.rm=TRUE), ylim=range(map5$y, na.rm=TRUE), type="n", mar=rep(0, 4))
lines(map5, col="lightgray")
#points(long, lat, cex=rescale(start, c(0.5, 6)), col=colr(start, "blue", "cyan"), lwd=2)
points(long, lat, cex=rescale(sqrt(fit$fitted), c(0.5, 6)), col=colr(fit$fitted, "blue", "cyan"), lwd=2)
whatdate(1, 2013)
windows(w=9, h=6.5)
map(xlim=range(map5$x, na.rm=TRUE), ylim=range(map5$y, na.rm=TRUE), type="n", mar=rep(0, 4))
lines(map5, col="lightgray")
points(long, lat, cex=rescale(sqrt(gradient), c(0.5, 6)), col=colr(fit$fitted, "blue", "cyan"), lwd=2)
map(xlim=range(map5$x, na.rm=TRUE), ylim=range(map5$y, na.rm=TRUE), type="n", mar=rep(0, 4))
lines(map5, col="lightgray")
points(long, lat, cex=rescale(sqrt(gradient), c(0.5, 6)), col=colr(gradient, "blue", "cyan"), lwd=2)
mapit <- function(xvar) {
windows(w=9, h=6.5)
map(xlim=range(map5$x, na.rm=TRUE), ylim=range(map5$y, na.rm=TRUE), type="n", mar=rep(0, 4))
lines(map5, col="lightgray")
points(long, lat, cex=rescale(xvar, c(0.5, 6)), col=colr(xvar, "blue", "cyan"), lwd=2)
}
mapit(sqrt(gradient))
mapit(sqrt(km2mouth))
mapit(sqrt(fit$fitted))
mapit <- function(xvar, main="Title") {
windows(w=9, h=6.5)
map(xlim=range(map5$x, na.rm=TRUE), ylim=range(map5$y, na.rm=TRUE), type="n", mar=rep(0, 4))
lines(map5, col="lightgray")
points(long, lat, cex=rescale(xvar, c(0.5, 6)), col=colr(xvar, "blue", "cyan"), lwd=2)
mtext(main, side=3)
}
mapit(sqrt(gradient))
mapit <- function(xvar, main="Title") {
windows(w=9, h=6.5)
map(xlim=range(map5$x, na.rm=TRUE), ylim=range(map5$y, na.rm=TRUE), type="n", mar=rep(0, 4))
lines(map5, col="lightgray")
points(long, lat, cex=rescale(xvar, c(0.5, 6)), col=colr(xvar, "blue", "cyan"), lwd=2)
mtext(main, side=3)
}
mapit(sqrt(gradient), "Gradient")
mapit(sqrt(km2mouth), "Distance from Mouth to Trap")
mapit(sqrt(fit$fitted), "Predicted Start Date")
dim(barrier2)
head(barrier2)
mapit(start, "Predicted Start Date")
summary(start)
summary(barrier2)
barrier2[is.na(start), ]
search()
detach()
graphics.off()
attach(barrier3)
tabl <- addmargins(table(barrier.name, year))
dimnames(tabl)$year <- substring(dimnames(tabl)$year, 3, 4)
fit1 <- gam(start ~ s(lat, k=4) + s(long, k=4) + s(log10(gradient + 0.01), k=4) + s(log10(km2mouth), k=4) + as.factor(lake.code), 
weight=numdays, data=barrier3)
fit2 <- gam(start ~ s(lat, k=4) + s(long, k=4) + s(log10(gradient + 0.01), k=4) + s(log10(km2mouth), k=4) + as.factor(lake.code==5), 
weight=numdays, data=barrier3)
barrier3$lakegrp <- recode(lake.code, c(4, 1, 3, 2, 5), c("ES", "ES", "HM", "HM", "O"))
fit <- gam(start ~ s(lat, k=4) + s(long, k=4) + s(log10(gradient + 0.01), k=4) + s(log10(km2mouth), k=4) + as.factor(lakegrp), 
weight=numdays, data=barrier3)
AICc(list(fit1, fit2, fit))
# no catch data for ORWELL BROOK or STERLING VALLEY
barrier2[is.na(barrier2$start), ]
barrier3 <- barrier2[!is.na(barrier2$start), ]
# convert miles to km
barrier3$km2mouth <- 1.60934 * barrier3$miles2mouth
attach(barrier3)
tabl <- addmargins(table(barrier.name, year))
dimnames(tabl)$year <- substring(dimnames(tabl)$year, 3, 4)
fit1 <- gam(start ~ s(lat, k=4) + s(long, k=4) + s(log10(gradient + 0.01), k=4) + s(log10(km2mouth), k=4) + as.factor(lake.code), 
weight=numdays, data=barrier3)
fit2 <- gam(start ~ s(lat, k=4) + s(long, k=4) + s(log10(gradient + 0.01), k=4) + s(log10(km2mouth), k=4) + as.factor(lake.code==5), 
weight=numdays, data=barrier3)
barrier3$lakegrp <- recode(lake.code, c(4, 1, 3, 2, 5), c("ES", "ES", "HM", "HM", "O"))
fit <- gam(start ~ s(lat, k=4) + s(long, k=4) + s(log10(gradient + 0.01), k=4) + s(log10(km2mouth), k=4) + as.factor(lakegrp), 
weight=numdays, data=barrier3)
AICc(list(fit1, fit2, fit))
windows(h=6.5, w=9)
par(mfrow=c(2, 3), mar=c(4, 4, 1, 1))
plot(fit, all.terms=TRUE)
windows(h=6.5, w=9)
par(mfrow=c(2, 2), mar=c(4, 4, 1, 1))
plot(fit)
mapit <- function(xvar, main="Title") {
windows(w=9, h=6.5)
map(xlim=range(map5$x, na.rm=TRUE), ylim=range(map5$y, na.rm=TRUE), type="n", mar=rep(0, 4))
lines(map5, col="lightgray")
points(long, lat, cex=rescale(xvar, c(0.5, 6)), col=colr(xvar, "blue", "cyan"), lwd=2)
mtext(main, side=3)
}
mapit(sqrt(gradient), "Gradient")
mapit(sqrt(km2mouth), "Distance from Mouth to Trap")
mapit(start, "Observed Start Date")
mapit(fit$fitted, "Predicted Start Date")
step(fit1)
fita <- gam(start ~ s(lat, k=4) + s(long, k=4), weight=numdays, data=barrier3)
fitb <- gam(start ~ s(lat, k=4) + s(long, k=4) + s(log10(gradient + 0.01), k=4), weight=numdays, data=barrier3)
fitc <- gam(start ~ s(lat, k=4) + s(long, k=4) + s(log10(gradient + 0.01), k=4) + s(log10(km2mouth), k=4), weight=numdays, data=barrier3)
summary(fita)
names(fita)
fita$R
names(summary(fita))
summary(fita)$r.sq
summary(fita)$r.sq
summary(fitb)$r.sq
summary(fitc)$r.sq
fitd <- gam(start ~ s(lat, k=4) + s(long, k=4) + s(log10(km2mouth), k=4), weight=numdays, data=barrier3)
summary(fita)$r.sq
summary(fitb)$r.sq
summary(fitc)$r.sq
summary(fitd)$r.sq
step(fitc)
fita <- gam(start ~ s(lat, k=4) + s(long, k=4), weight=numdays, data=barrier3)
fitb1 <- gam(start ~ s(lat, k=4) + s(long, k=4) + s(log10(gradient + 0.01), k=4), weight=numdays, data=barrier3)
fitb2 <- gam(start ~ s(lat, k=4) + s(long, k=4) + s(log10(km2mouth), k=4), weight=numdays, data=barrier3)
fitc <- gam(start ~ s(lat, k=4) + s(long, k=4) + s(log10(gradient + 0.01), k=4) + s(log10(km2mouth), k=4), weight=numdays, data=barrier3)
summary(fita)$r.sq
summary(fitb1)$r.sq
summary(fitb2)$r.sq
summary(fitc)$r.sq
fitz1 <- gam(start ~ s(lat, k=4), weight=numdays, data=barrier3)
fitz2 <- gam(start ~ s(long, k=4), weight=numdays, data=barrier3)
fita <- gam(start ~ s(lat, k=4) + s(long, k=4), weight=numdays, data=barrier3)
fitb1 <- gam(start ~ s(lat, k=4) + s(long, k=4) + s(log10(gradient + 0.01), k=4), weight=numdays, data=barrier3)
fitb2 <- gam(start ~ s(lat, k=4) + s(long, k=4) + s(log10(km2mouth), k=4), weight=numdays, data=barrier3)
fitc <- gam(start ~ s(lat, k=4) + s(long, k=4) + s(log10(gradient + 0.01), k=4) + s(log10(km2mouth), k=4), weight=numdays, data=barrier3)
summary(fitz1)$r.sq
summary(fitz2)$r.sq
summary(fita)$r.sq
summary(fitb1)$r.sq
summary(fitb2)$r.sq
summary(fitc)$r.sq
fitz1 <- gam(start ~ s(lat, k=4), weight=numdays, data=barrier3)
fitz2 <- gam(start ~ s(long, k=4), weight=numdays, data=barrier3)
fitz3 <- gam(start ~ s(log10(gradient + 0.01), k=4), weight=numdays, data=barrier3)
fitz4 <- gam(start ~ s(log10(km2mouth), k=4), weight=numdays, data=barrier3)
fitz1 <- gam(start ~ s(lat, k=4), weight=numdays, data=barrier3)
fitz2 <- gam(start ~ s(long, k=4), weight=numdays, data=barrier3)
fitz3 <- gam(start ~ s(log10(gradient + 0.01), k=4), weight=numdays, data=barrier3)
fitz4 <- gam(start ~ s(log10(km2mouth), k=4), weight=numdays, data=barrier3)
summary(fitz1)$r.sq
summary(fitz2)$r.sq
summary(fitz3)$r.sq
summary(fitz4)$r.sq
fito1 <- gam(start ~ s(lat, k=4) + s(long, k=4), weight=numdays, data=barrier3)
fito2 <- gam(start ~ s(lat, k=4) + s(log10(gradient + 0.01), k=4), weight=numdays, data=barrier3)
fito3 <- gam(start ~ s(lat, k=4) + s(log10(km2mouth), k=4), weight=numdays, data=barrier3)
summary(fito1)$r.sq
summary(fito2)$r.sq
summary(fito3)$r.sq
fitt1 <- gam(start ~ s(lat, k=4) + s(log10(gradient + 0.01), k=4) + s(long, k=4), weight=numdays, data=barrier3)
fitt2 <- gam(start ~ s(lat, k=4) + s(log10(gradient + 0.01), k=4) + s(log10(km2mouth), k=4), weight=numdays, data=barrier3)
summary(fitt1)$r.sq
summary(fitt2)$r.sq
fith1 <- gam(start ~ s(lat, k=4) + s(log10(gradient + 0.01), k=4) + s(log10(km2mouth), k=4) + s(long, k=4), weight=numdays, data=barrier3)
summary(fith1)$r.sq
fit <- gam(start ~ s(lat, k=4) + s(log10(gradient + 0.01), k=4) + s(log10(km2mouth), k=4), weight=numdays, data=barrier3)
windows(h=6.5, w=9)
par(mfrow=c(2, 3), mar=c(4, 4, 1, 1))
plot(fit, all.terms=TRUE)
windows(h=6.5, w=9)
par(mfrow=c(2, 2), mar=c(4, 4, 1, 1))
plot(fit)
fitbig <- gam(start ~ s(lat, k=4) + s(long, k=4) + s(log10(gradient + 0.01), k=4) + s(log10(km2mouth), k=4)
+ as.factor(lake.code) + as.factor(year), weight=numdays, data=barrier3)
summary(fitbig)
windows(h=6.5, w=9)
par(mfrow=c(2, 3), mar=c(4, 4, 1, 1))
plot(fitbig, all.terms=TRUE)
par(mfrow=c(2, 3), mar=c(4, 4, 1, 1))
plot(fitbig, all.terms=TRUE, ylim=c(-80, 50))
fitbig <- gam(start ~ lat + s(long, k=4) + log10(gradient + 0.01) + log10(km2mouth)
+ as.factor(lake.code) + as.factor(year), weight=numdays, data=barrier3)
windows(h=6.5, w=9)
par(mfrow=c(2, 3), mar=c(4, 4, 1, 1))
plot(fitbig, all.terms=TRUE, ylim=c(-80, 50))
summary(fitbig)
head(barrier2)
fitbig <- glm(start ~ lat + long + log10(gradient + 0.01) + log10(km2mouth)
+ as.factor(lake.code) + as.factor(year), weight=numdays, data=barrier3)
summary(fitbig)
fitbig <- aov(start ~ lat + long + log10(gradient + 0.01) + log10(km2mouth)
+ as.factor(lake.code) + as.factor(year), weight=numdays, data=barrier3)
summary(fitbig)
step(fitbig)
a <- step(fitbig)
summary(a)
summary(fitbig)
plot(a)
hist(start)
??added
?addedvar
names(fitbig)
fitbig$xlevels
fitbig$terms
fitbig$model
fitbig <- aov(start ~ lat + long + log10(gradient + 0.01) + as.factor(lake.code) + as.factor(year), weight=numdays, data=barrier3)
summary(fitbig)
plot(fitbig)
barrier2[c(278, 283, 284), ]
fitbig <- aov(start ~ lat + long + log10(gradient + 0.01) + as.factor(lake.code) + as.factor(year), weight=numdays, data=barrier3)
a <- summary(fitbig)
a[, "Sum Sq"]
a
dim(a)
class(a)
length(a)
a[[1]]
as.matrix(a)
as.matrix(a)[, "Sum Sq"]
b <- as.matrix(a)
class(b)
dim(b)
?summary.aov
a[[1]]
dim(a[[1]])
a[[1]][, "Sum Sq"]
ss <- a[[1]][, "Sum Sq"]
ss/sum(ss)
fitbig <- aov(start ~ lat + long + log10(gradient + 0.01) + as.factor(lake.code) + as.factor(year), weight=numdays, data=barrier3)
a <- summary(fitbig)[[1]]
ss <- a[, "Sum Sq"]
100*(ss/sum(ss))
fitbig <- aov(start ~ as.factor(year) + lat + as.factor(lake.code) + long + log10(gradient + 0.01) + log10(km2mouth), 
weight=numdays, data=barrier3)
a <- summary(fitbig)[[1]]
ss <- a[, "Sum Sq"]
100*(ss/sum(ss))
rownames(a)
fitbig <- aov(start ~ as.factor(year) + lat + as.factor(lake.code) + long + log10(gradient + 0.01) + log10(km2mouth), 
weight=numdays, data=barrier3)
a <- summary(fitbig)[[1]]
ss <- a[, "Sum Sq"]
sspct <- 100*(ss/sum(ss))
sscp <- cumsum(sspct)
windows()
plot(seq(sscp), sscp)
axis(1, at=seq(sscp), labels=rownames(a))
fitbig <- aov(start ~ as.factor(year) + lat + as.factor(lake.code) + long + log10(gradient + 0.01) + log10(km2mouth), 
weight=numdays, data=barrier3)
a <- summary(fitbig)[[1]]
ss <- a[, "Sum Sq"]
sspct <- 100*(ss/sum(ss))
sscp <- cumsum(sspct)
n <- length(sscp)
x <- c(0, seq(sscp)[-n])
y <- c(0, sscp[-n])
windows()
par(yaxs="i", mar=c(4, 4, 1, 1))
plot(x, y, type="l", ylim=c(0, 100))
axis(1, at=x, labels=c("none", rownames(a)[-n]))
par(yaxs="i", mar=c(4, 4, 1, 1))
plot(x, y, type="l", ylim=c(0, 100), xaxt="n", xlab="Effects", ylab="Cumulative Variability Explained  (%)")
axis(1, at=x, labels=c("none", rownames(a)[-n]))
x
n
c("none", rownames(a)[-n])
a
searcg*(
search()
detach()
# convert miles to km
barrier3$km2mouth <- 1.60934 * barrier3$miles2mouth
barrier3$lakegrp <- recode(lake.code, c(4, 1, 3, 2, 5), c("ES", "ES", "HM", "HM", "O"))
barrier3$lgradient <- log10(barrier3$gradient + 0.01)
barrier3$ldist <- log10(barrier3$km2mouth)
barrier3$flake <- as.factor(barrier3$lake.code)
barrier3$fyear <- as.factor(barrier3$year)
# convert miles to km
barrier3$km2mouth <- 1.60934 * barrier3$miles2mouth
barrier3$lakegrp <- recode(barrier3$lake.code, c(4, 1, 3, 2, 5), c("ES", "ES", "HM", "HM", "O"))
barrier3$lgradient <- log10(barrier3$gradient + 0.01)
barrier3$ldist <- log10(barrier3$km2mouth)
barrier3$flake <- as.factor(barrier3$lake.code)
barrier3$fyear <- as.factor(barrier3$year)
attach(barrier3)
tabl <- addmargins(table(barrier.name, year))
dimnames(tabl)$year <- substring(dimnames(tabl)$year, 3, 4)
fitbig <- aov(start ~ fyear + lat + flake + long + lgradient + ldist, weight=numdays, data=barrier3)
a <- summary(fitbig)[[1]]
ss <- a[, "Sum Sq"]
sspct <- 100*(ss/sum(ss))
sscp <- cumsum(sspct)
n <- length(sscp)
x <- c(0, seq(sscp)[-n])
y <- c(0, sscp[-n])
windows()
par(yaxs="i", mar=c(4, 4, 1, 1))
plot(x, y, type="l", ylim=c(0, 100), xaxt="n", xlab="Effects", ylab="Cumulative Variability Explained  (%)")
axis(1, at=x, labels=c("none", rownames(a)[-n]))
a <- summary(fitbig)[[1]]
ss <- a[, "Sum Sq"]
sspct <- 100*(ss/sum(ss))
sscp <- cumsum(sspct)
n <- length(sscp)
x <- c(0, seq(sscp)[-n])
y <- c(0, sscp[-n])
labz <- c("none", sub("\\s+$", "", rownames(a)[-n]))
windows()
par(yaxs="i", mar=c(4, 4, 1, 1))
plot(x, y, type="l", ylim=c(0, 100), xaxt="n", xlab="Effects", ylab="Cumulative Variability Explained  (%)")
axis(1, at=x, labels=labz)
par(yaxs="i", mar=c(4, 4, 1, 1), las=1)
plot(x, y, pch=16, ylim=c(0, 100), xaxt="n", xlab="Effects", ylab="Cumulative Variability Explained  (%)")
axis(1, at=x, labels=labz)
lines(spline(x, y))
?spline
par(yaxs="i", mar=c(4, 4, 1, 1), las=1)
plot(x, y, type="o", pch=16, ylim=c(0, 100), xaxt="n", xlab="Effects", ylab="Cumulative Variability Explained  (%)")
axis(1, at=x, labels=labz)
windows()
par(yaxs="i", mar=c(4, 4, 1, 1), las=1)
plot(x, y, type="o", pch=16, ylim=c(0, rev(y)[1]), xaxt="n", xlab="Effects", ylab="Cumulative Variability Explained  (%)")
axis(1, at=x, labels=labz)
lines(spline(x, y))
par(yaxs="i", mar=c(4, 4, 1, 1), las=1)
plot(x, y, type="o", pch=16, ylim=1.05*c(0, rev(y)[1]), xaxt="n", xlab="Effects", ylab="Cumulative Variability Explained  (%)")
axis(1, at=x, labels=labz)
par(yaxs="i", mar=c(4, 4, 1, 1), las=1, xpd=NA)
plot(x, y, type="o", pch=16, ylim=1.05*c(0, rev(y)[1]), xaxt="n", xlab="Effects", ylab="Cumulative Variability Explained  (%)")
axis(1, at=x, labels=labz)
windows(h=4, w=4)
par(yaxs="i", mar=c(4, 4, 1, 1), las=1, xpd=NA)
plot(x, y, type="o", pch=16, ylim=1.05*c(0, rev(y)[1]), xaxt="n", xlab="Effects", ylab="Cumulative Variability Explained  (%)")
axis(1, at=x, labels=labz)
windows(h=5, w=5)
par(yaxs="i", mar=c(4, 4, 1, 1), las=1, xpd=NA)
plot(x, y, type="o", pch=16, ylim=1.05*c(0, rev(y)[1]), xaxt="n", xlab="Effects", ylab="Cumulative Variability Explained  (%)")
axis(1, at=x, labels=labz)
head(barrier3)
sul <- sort(unique(lake.code))
sub <- sort(unique(slbarid))
windows(h=9, w=6.5)
par(mfrow=c(3, 2))
for(i in seq(sul)) {
if(i==2) frame()
plot(1, 1, type="n", xlab="", ylab="")
for(j in seq(sub)) {
sel <- lake.code==sul[i] & slbarid==sub[j]
if(sum(sel)>0) {
lines(year[sel], start[sel], col=j)
}
}
}
par(mfrow=c(3, 2))
for(i in seq(sul)) {
if(i==2) frame()
plot(1, 1, xlim=range(year), ylim=range(start), type="n", xlab="", ylab="")
for(j in seq(sub)) {
sel <- lake.code==sul[i] & slbarid==sub[j]
if(sum(sel)>0) {
lines(year[sel], start[sel], col=j)
}
}
}
lakenames
Lakenames
barrier3 <- barrier3[order(barrier3$slbarid, barrier3$year), ]
detach()
attach(barrier3)
sul <- sort(unique(lake.code))
sub <- sort(unique(slbarid))
windows(h=9, w=6.5)
par(mfrow=c(3, 2), mar=c(4, 4, 1, 1))
for(i in seq(sul)) {
if(i==2) frame()
plot(1, 1, xlim=range(year), ylim=range(start), type="n", xlab="", ylab="", main=Lakenames[i])
for(j in seq(sub)) {
sel <- lake.code==sul[i] & slbarid==sub[j]
if(sum(sel)>0) {
lines(year[sel], start[sel], col=j)
}
}
}
par(mfrow=c(3, 2), mar=c(3, 3, 2, 1))
for(i in seq(sul)) {
if(i==2) frame()
plot(1, 1, xlim=range(year), ylim=range(start), type="n", xlab="", ylab="", main=Lakenames[i])
for(j in seq(sub)) {
sel <- lake.code==sul[i] & slbarid==sub[j]
if(sum(sel)>0) {
lines(year[sel], start[sel], col=j)
}
}
}
search()
ls(6)
doy
?doy
?cheat
sul <- sort(unique(lake.code))
sub <- sort(unique(slbarid))
windows(h=9, w=6.5)
par(mfrow=c(3, 2), mar=c(3, 3, 2, 1))
for(i in seq(sul)) {
if(i==2) frame()
plot(1, 1, xlim=range(year), ylim=range(start), yaxt="n", type="n", xlab="", ylab="", main=Lakenames[i])
axis(2, at=doy(as.Date(paste(2000, 1:12, 1, sep="-")))-0.5, labels=FALSE)
axis(2, at=doy(as.Date(paste(2000, 1:12, 15, sep="-"))), labels=month.abb, tick=FALSE)
for(j in seq(sub)) {
sel <- lake.code==sul[i] & slbarid==sub[j]
if(sum(sel)>0) {
lines(year[sel], start[sel], col=j)
}
}
}
doy(as.Date(paste(cat$year, cat$month, cat$day, sep="-")), "03-01")
cat$marday
sul <- sort(unique(lake.code))
sub <- sort(unique(slbarid))
windows(h=9, w=6.5)
par(mfrow=c(3, 2), mar=c(3, 3, 2, 1))
for(i in seq(sul)) {
if(i==2) frame()
plot(1, 1, xlim=range(year), ylim=range(start), yaxt="n", type="n", xlab="", ylab="", main=Lakenames[i])
axis(2, at=doy(as.Date(paste(2000, 1:12, 1, sep="-")), "03-01")-0.5, labels=FALSE)
axis(2, at=doy(as.Date(paste(2000, 1:12, 15, sep="-")), "03-01"), labels=month.abb, tick=FALSE)
for(j in seq(sub)) {
sel <- lake.code==sul[i] & slbarid==sub[j]
if(sum(sel)>0) {
lines(year[sel], start[sel], col=j)
}
}
}
par(mfrow=c(3, 2), mar=c(3, 3, 2, 1))
for(i in seq(sul)) {
if(i==2) frame()
plot(1, 1, xlim=range(year), ylim=range(start), yaxt="n", type="n", xlab="", ylab="", main=Lakenames[i])
axis(2, at=doy(as.Date(paste(2000, 1:12, 1, sep="-")), "03-01")-0.5, labels=FALSE)
axis(2, at=doy(as.Date(paste(2000, 1:12, 15, sep="-")), "03-01"), labels=month.abb, tick=FALSE, las=1)
for(j in seq(sub)) {
sel <- lake.code==sul[i] & slbarid==sub[j]
if(sum(sel)>0) {
lines(year[sel], start[sel], col=j)
}
}
}
fitbig <- aov(start ~ as.factor(year) + lat + as.factor(lake.code) + long + log10(gradient + 0.01) + log10(km2mouth), 
weight=numdays, data=barrier3)
a <- summary(fitbig)[[1]]
ss <- a[, "Sum Sq"]
sspct <- 100*(ss/sum(ss))
sscp <- cumsum(sspct)
n <- length(sscp)
x <- c(0, seq(sscp)[-n])
y <- c(0, sscp[-n])
windows()
par(yaxs="i", mar=c(4, 4, 1, 1))
plot(x, y, type="l", ylim=c(0, 100), xaxt="n", xlab="Effects", ylab="Cumulative Variability Explained  (%)")
axis(1, at=x, labels=c("none", rownames(a)[-n]))
tabl <- addmargins(table(barrier.name, year))
dimnames(tabl)$year <- substring(dimnames(tabl)$year, 3, 4)
fitbig <- aov(start ~ fyear + lat + flake + long + lgradient + ldist, weight=numdays, data=barrier3)
a <- summary(fitbig)[[1]]
ss <- a[, "Sum Sq"]
sspct <- 100*(ss/sum(ss))
sscp <- cumsum(sspct)
n <- length(sscp)
x <- c(0, seq(sscp)[-n])
y <- c(0, sscp[-n])
labz <- c("none", sub("\\s+$", "", rownames(a)[-n]))
windows(h=5, w=5)
par(yaxs="i", mar=c(4, 4, 1, 1), las=1, xpd=NA)
plot(x, y, type="o", pch=16, ylim=1.05*c(0, rev(y)[1]), xaxt="n", xlab="Effects", ylab="Cumulative Variability Explained  (%)")
axis(1, at=x, labels=labz)
sul <- sort(unique(lake.code))
sub <- sort(unique(slbarid))
windows(h=9, w=6.5)
par(mfrow=c(3, 2), mar=c(3, 3, 2, 1))
for(i in seq(sul)) {
if(i==2) frame()
plot(1, 1, xlim=range(year), ylim=range(start), yaxt="n", type="n", xlab="", ylab="", main=Lakenames[i])
axis(2, at=doy(as.Date(paste(2000, 1:12, 1, sep="-")), "03-01")-0.5, labels=FALSE)
axis(2, at=doy(as.Date(paste(2000, 1:12, 15, sep="-")), "03-01"), labels=month.abb, tick=FALSE, las=1)
for(j in seq(sub)) {
sel <- lake.code==sul[i] & slbarid==sub[j]
if(sum(sel)>0) {
lines(year[sel], start[sel], col=j)
}
}
}
windows(h=5, w=5)
par(yaxs="i", mar=c(4, 4, 1, 1), las=1, xpd=NA)
plot(x, y, type="o", pch=16, ylim=1.05*c(0, rev(y)[1]), xaxt="n", 
xlab="Terms included in model", ylab="Cumulative Variability Explained  (%)", "Predicting the Barrier Operation Start Day")
axis(1, at=x, labels=labz)
windows(h=5, w=5)
par(yaxs="i", mar=c(4, 4, 1, 1), las=1, xpd=NA)
plot(x, y, type="o", pch=16, ylim=1.05*c(0, rev(y)[1]), xaxt="n", 
xlab="Terms included in model", ylab="Cumulative Variability Explained  (%)", main="Predicting the Barrier Operation Start Day")
axis(1, at=x, labels=labz)
par(yaxs="i", mar=c(4, 4, 2, 1), las=1, xpd=NA)
plot(x, y, type="o", pch=16, ylim=1.05*c(0, rev(y)[1]), xaxt="n", 
xlab="Terms included in model", ylab="Cumulative Variability Explained  (%)", main="Predicting the Barrier Operation Start Day")
axis(1, at=x, labels=labz)
windows(h=5, w=5)
par(yaxs="i", mar=c(4, 4, 2, 1), las=1, xpd=NA)
plot(x, y, type="o", pch=16, ylim=1.05*c(0, rev(y)[1]), xaxt="n", 
xlab="Terms included in model", ylab="Cumulative variability explained  (%)", main="Predicting Barrier Operation Start Day")
axis(1, at=x, labels=labz)
# convert miles to km
barrier3$km2mouth <- 1.60934 * barrier3$miles2mouth
barrier3$lakegrp <- recode(barrier3$lake.code, c(4, 1, 3, 2, 5), c("ES", "ES", "HM", "HM", "O"))
barrier3$loggradient <- log10(barrier3$gradient + 0.01)
barrier3$logdist <- log10(barrier3$km2mouth)
barrier3$lake.f <- as.factor(barrier3$lake.code)
barrier3$year.f <- as.factor(barrier3$year)
barrier3 <- barrier3[order(barrier3$slbarid, barrier3$year), ]
detach()
attach(barrier3)
tabl <- addmargins(table(barrier.name, year))
dimnames(tabl)$year <- substring(dimnames(tabl)$year, 3, 4)
fitbig <- aov(start ~ year.f + lat + lake.f + long + loggradient + logdist, weight=numdays, data=barrier3)
a <- summary(fitbig)[[1]]
ss <- a[, "Sum Sq"]
sspct <- 100*(ss/sum(ss))
sscp <- cumsum(sspct)
n <- length(sscp)
x <- c(0, seq(sscp)[-n])
y <- c(0, sscp[-n])
labz <- c("none", sub("\\s+$", "", rownames(a)[-n]))
windows(h=5, w=5)
par(yaxs="i", mar=c(4, 4, 2, 1), las=1, xpd=NA)
plot(x, y, type="o", pch=16, ylim=1.05*c(0, rev(y)[1]), xaxt="n", 
xlab="Terms included in model", ylab="Cumulative variability explained  (%)", main="Predicting Barrier Operation Start Day")
axis(1, at=x, labels=labz)
# convert miles to km
barrier3$km2mouth <- 1.60934 * barrier3$miles2mouth
barrier3$lakegrp <- recode(barrier3$lake.code, c(4, 1, 3, 2, 5), c("ES", "ES", "HM", "HM", "O"))
barrier3$l.gradient <- log10(barrier3$gradient + 0.01)
barrier3$l.dist <- log10(barrier3$km2mouth)
barrier3$lake.f <- as.factor(barrier3$lake.code)
barrier3$year.f <- as.factor(barrier3$year)
barrier3 <- barrier3[order(barrier3$slbarid, barrier3$year), ]
detach()
attach(barrier3)
tabl <- addmargins(table(barrier.name, year))
dimnames(tabl)$year <- substring(dimnames(tabl)$year, 3, 4)
fitbig <- aov(start ~ year.f + lat + lake.f + long + l.gradient + l.dist, weight=numdays, data=barrier3)
a <- summary(fitbig)[[1]]
ss <- a[, "Sum Sq"]
sspct <- 100*(ss/sum(ss))
sscp <- cumsum(sspct)
n <- length(sscp)
x <- c(0, seq(sscp)[-n])
y <- c(0, sscp[-n])
labz <- c("none", sub("\\s+$", "", rownames(a)[-n]))
windows(h=5, w=5)
par(yaxs="i", mar=c(4, 4, 2, 1), las=1, xpd=NA)
plot(x, y, type="o", pch=16, ylim=1.05*c(0, rev(y)[1]), xaxt="n", 
xlab="Terms included in model", ylab="Cumulative variability explained  (%)", main="Predicting Barrier Operation Start Day")
axis(1, at=x, labels=labz)
attach(barrier3)
tabl <- addmargins(table(barrier.name, year))
dimnames(tabl)$year <- substring(dimnames(tabl)$year, 3, 4)
fitbig <- aov(start ~ year.f + lat + lake.f + long + l.gradient + l.dist, weight=numdays, data=barrier3)
a <- summary(fitbig)[[1]]
ss <- a[, "Sum Sq"]
sspct <- 100*(ss/sum(ss))
sscp <- cumsum(sspct)
n <- length(sscp)
x <- c(0, seq(sscp)[-n])
y <- c(0, sscp[-n])
labz <- c("none", sub("\\s+$", "", rownames(a)[-n]))
windows(h=5, w=5)
par(yaxs="i", mar=c(4, 4, 2, 1), las=1, xpd=NA)
plot(x, y, type="o", pch=16, ylim=1.05*c(0, rev(y)[1]), xaxt="n", 
xlab="Terms included in model", ylab="Cumulative variability explained  (%)", main="Predicting Barrier Operation Start Day")
axis(1, at=x, labels=labz)
windows(h=5.5, w=5.5)
par(yaxs="i", mar=c(4, 4, 2, 1), las=1, xpd=NA)
plot(x, y, type="o", pch=16, ylim=1.05*c(0, rev(y)[1]), xaxt="n", 
xlab="Terms included in model", ylab="Cumulative variability explained  (%)", main="Predicting Barrier Operation Start Day")
axis(1, at=x, labels=labz)
sul <- sort(unique(lake.code))
sub <- sort(unique(slbarid))
windows(h=9, w=6.5)
par(mfrow=c(3, 2), mar=c(3, 3, 2, 1))
for(i in seq(sul)) {
if(i==2) frame()
plot(1, 1, xlim=range(year), ylim=range(start), yaxt="n", type="n", xlab="", ylab="", main=Lakenames[i])
axis(2, at=doy(as.Date(paste(2000, 1:12, 1, sep="-")), "03-01")-0.5, labels=FALSE)
axis(2, at=doy(as.Date(paste(2000, 1:12, 15, sep="-")), "03-01"), labels=month.abb, tick=FALSE, las=1)
for(j in seq(sub)) {
sel <- lake.code==sul[i] & slbarid==sub[j]
if(sum(sel)>0) {
lines(year[sel], start[sel], col=j)
}
}
}
sul <- sort(unique(lake.code))
sub <- sort(unique(slbarid))
windows(h=9, w=6.5)
par(mfrow=c(3, 2), mar=c(3, 3, 2, 1))
for(i in seq(sul)) {
if(i==2) {
plot(1, 1, xlab="", ylab="", axes=FALSE)
text(1, 1, "Barrier Operation Start Day")
}
plot(1, 1, xlim=range(year), ylim=range(start), yaxt="n", type="n", xlab="", ylab="", main=Lakenames[i])
axis(2, at=doy(as.Date(paste(2000, 1:12, 1, sep="-")), "03-01")-0.5, labels=FALSE)
axis(2, at=doy(as.Date(paste(2000, 1:12, 15, sep="-")), "03-01"), labels=month.abb, tick=FALSE, las=1)
for(j in seq(sub)) {
sel <- lake.code==sul[i] & slbarid==sub[j]
if(sum(sel)>0) {
lines(year[sel], start[sel], col=j)
}
}
}
sul <- sort(unique(lake.code))
sub <- sort(unique(slbarid))
windows(h=9, w=6.5)
par(mfrow=c(3, 2), mar=c(3, 3, 2, 1))
for(i in seq(sul)) {
if(i==2) {
plot(1, 1, xlab="", ylab="", axes=FALSE)
text(1, 1, "Barrier Operation Start Day", cex=1.5, font=2)
}
plot(1, 1, xlim=range(year), ylim=range(start), yaxt="n", type="n", xlab="", ylab="", main=Lakenames[i])
axis(2, at=doy(as.Date(paste(2000, 1:12, 1, sep="-")), "03-01")-0.5, labels=FALSE)
axis(2, at=doy(as.Date(paste(2000, 1:12, 15, sep="-")), "03-01"), labels=month.abb, tick=FALSE, las=1)
for(j in seq(sub)) {
sel <- lake.code==sul[i] & slbarid==sub[j]
if(sum(sel)>0) {
lines(year[sel], start[sel], col=j)
}
}
}
sul <- sort(unique(lake.code))
sub <- sort(unique(slbarid))
windows(h=9, w=6.5)
par(mfrow=c(3, 2), mar=c(3, 3, 2, 1))
for(i in seq(sul)) {
if(i==2) {
plot(1, 1, xlab="", ylab="", axes=FALSE)
text(1, 1, "Barrier Operation\nStart Day", cex=1.5, font=2)
}
plot(1, 1, xlim=range(year), ylim=range(start), yaxt="n", type="n", xlab="", ylab="", main=Lakenames[i])
axis(2, at=doy(as.Date(paste(2000, 1:12, 1, sep="-")), "03-01")-0.5, labels=FALSE)
axis(2, at=doy(as.Date(paste(2000, 1:12, 15, sep="-")), "03-01"), labels=month.abb, tick=FALSE, las=1)
for(j in seq(sub)) {
sel <- lake.code==sul[i] & slbarid==sub[j]
if(sum(sel)>0) {
lines(year[sel], start[sel], col=j)
}
}
}
sul <- sort(unique(lake.code))
sub <- sort(unique(slbarid))
windows(h=9, w=6.5)
par(mfrow=c(3, 2), mar=c(3, 3, 2, 1))
for(i in seq(sul)) {
if(i==2) {
plot(1, 1, type="n", xlab="", ylab="", axes=FALSE)
text(1, 1, "Barrier Operation\nStart Day", cex=1.5, font=2)
}
plot(1, 1, xlim=range(year), ylim=range(start), yaxt="n", type="n", xlab="", ylab="", main=Lakenames[i])
axis(2, at=doy(as.Date(paste(2000, 1:12, 1, sep="-")), "03-01")-0.5, labels=FALSE)
axis(2, at=doy(as.Date(paste(2000, 1:12, 15, sep="-")), "03-01"), labels=month.abb, tick=FALSE, las=1)
for(j in seq(sub)) {
sel <- lake.code==sul[i] & slbarid==sub[j]
if(sum(sel)>0) {
lines(year[sel], start[sel], col=j)
}
}
}
cleanup()
q()
binomCI
?binomCI
binomCI(414, 3)
binomCI(c(0, 0, 0, 0, 1, 1))
binomCI(4, 2, prob=FALSE)
binomCI(4, 2)
binomCI(3, 414)
binomCI(7, 465-7)
matrix(c(3, 7, 414, 458), nrow=2)
chi(matrix(c(3, 7, 414, 458), nrow=2))
(7/465) / (3/417)
args(sample)
?sample
sample(0:1, 465, prob=c(7, 458))
sample(0:1, 465, prob=c(7, 458), replace=TRUE)
sample(1:0, 465, prob=c(7, 458), replace=TRUE)
nsim <- 100
rrr <- rep(NA, nsim)
for(i in 1:nsim) {
scr <- sample(1:0, 417, prob=c(3, 414), replace=TRUE)
ele <- sample(1:0, 465, prob=c(7, 458), replace=TRUE)
rrr[i] <- mean(ele)/mean(scr)
}
rrr
quantile(rrr, c(0.025, 0.975))
nsim <- 1000
rrr <- rep(NA, nsim)
for(i in 1:nsim) {
scr <- sample(1:0, 417, prob=c(3, 414), replace=TRUE)
ele <- sample(1:0, 465, prob=c(7, 458), replace=TRUE)
rrr[i] <- mean(ele)/mean(scr)
}
quantile(rrr, c(0.025, 0.975))
rrr
rrr[is.na(rrr)]
quantile(rrr, c(0.025, 0.975), na.rm=TRUE)
summary(rrr)
hist(rrr)
hist(rrr, nclass=25)
windows()
par(mar=c(4, 4, 1, 1), las=1)
hist(rrr, nclass=25, xlab="Ratio of recovery rates")
par(mar=c(4, 4, 1, 1), las=1)
hist(rrr, nclass=25, col="cyan", xlab="Ratio of recovery rates", main="")
box()
nsim <- 10000
rrr <- rep(NA, nsim)
for(i in 1:nsim) {
scr <- sample(1:0, 417, prob=c(3, 414), replace=TRUE)
ele <- sample(1:0, 465, prob=c(7, 458), replace=TRUE)
rrr[i] <- mean(ele)/mean(scr)
}
summary(rrr)
quantile(rrr, c(0.025, 0.975), na.rm=TRUE)
windows()
par(mar=c(4, 4, 1, 1), las=1)
hist(rrr, nclass=25, col="cyan", xlab="Ratio of recovery rates", main="")
box()
windows()
par(mar=c(4, 4, 1, 1), las=1)
hist(rrr, breaks=seq(-0.5, 100.5, 1), col="cyan", xlab="Ratio of recovery rates", main="")
box()
max(rrr[is.finite(rrr)])
windows()
par(mar=c(4, 4, 1, 1), las=1)
hist(rrr, breaks=seq(-0.5, 100.5, 1), col="cyan", xlim=c(0, ceiling(max(rrr[is.finite(rrr)]))), xlab="Ratio of recovery rates", main="")
box()
?hist
windows()
par(mar=c(4, 4, 1, 1), las=1)
hist(rrr, breaks=seq(-0.5, 100.5, 1), freq=FALSE, col="cyan", xlim=c(0, ceiling(max(rrr[is.finite(rrr)]))), 
xlab="Ratio of recovery rates", main="")
box()
windows()
par(mar=c(4, 4, 1, 1), las=1, yaxs="i")
hist(rrr, breaks=seq(-0.5, 100.5, 1), freq=FALSE, col="cyan", xlim=c(0, ceiling(max(rrr[is.finite(rrr)]))),
xlab="Ratio of recovery rates", main="")
box()
windows()
par(mar=c(4, 4, 1, 1), las=1, yaxs="i")
hist(rrr, breaks=seq(-0.5, 100.5, 1), freq=FALSE, col="cyan", xlim=c(0, ceiling(max(rrr[is.finite(rrr)]))), ylim=c(0, 0.31),
xlab="Ratio of recovery rates", main="")
box()
windows()
par(mar=c(4, 4, 1, 1), las=1, yaxs="i")
hist(rrr, breaks=seq(-0.5, 100.5, 1), freq=FALSE, col="cyan", xlim=c(0, ceiling(max(rrr[is.finite(rrr)]))), ylim=c(0, 0.31),
xlab="Ratio of recovery rates", ylab="Proportion", main="")
box()
summary(rrr)
quantile(rrr, (51:99)/100, na.rm=TRUE)
quantile(rrr, c(0.05, 0.95), na.rm=TRUE)
(7/465) / (3/417)
nsim <- 10000
rrr <- rep(NA, nsim)
for(i in 1:nsim) {
scr <- sample(1:0, 417, prob=c(3, 414), replace=TRUE)
ele <- sample(1:0, 465, prob=c(7, 458), replace=TRUE)
rrr[i] <- mean(ele)/mean(scr)
}
rrr[is.na(rrr)] <- 0
summary(rrr)
quantile(rrr, c(0.025, 0.975))
quantile(rrr, c(0.05, 0.95))
windows()
par(mar=c(4, 4, 1, 1), las=1, yaxs="i")
hist(rrr, breaks=seq(-0.5, 100.5, 1), freq=FALSE, col="cyan", xlim=c(0, ceiling(max(rrr[is.finite(rrr)]))), ylim=c(0, 0.31),
xlab="Ratio of recovery rates", ylab="Proportion", main="")
box()
windows(h=4, w=4)
par(mar=c(4, 4, 1, 1), las=1, yaxs="i")
hist(rrr, breaks=seq(-0.5, 100.5, 1), freq=FALSE, col="cyan", xlim=c(0, ceiling(max(rrr[is.finite(rrr)]))), ylim=c(0, 0.31),
xlab="Ratio of recovery rates", ylab="Proportion", main="")
box()
nsim <- 10000
rrr <- rep(NA, nsim)
for(i in 1:nsim) {
scr <- sample(1:0, 417, prob=c(3, 414), replace=TRUE)
ele <- sample(1:0, 465, prob=c(7, 458), replace=TRUE)
rrr[i] <- mean(ele) > mean(scr)
}
rrr
mean(rrr)
nsim <- 100
scr <- rep(NA, nsim)
ele <- rep(NA, nsim)
for(i in 1:nsim) {
scr[i] <- mean(sample(1:0, 417, prob=c(3, 414), replace=TRUE))
ele[i] <- mean(sample(1:0, 465, prob=c(7, 458), replace=TRUE))
}
rrr[i] <- ele > scr
nsim <- 100
scr <- rep(NA, nsim)
ele <- rep(NA, nsim)
for(i in 1:nsim) {
scr[i] <- mean(sample(1:0, 417, prob=c(3, 414), replace=TRUE))
ele[i] <- mean(sample(1:0, 465, prob=c(7, 458), replace=TRUE))
}
rrr <- ele > scr
max(scr, ele)
hist(scr)
hist(ele)
nsim <- 1000
scr <- rep(NA, nsim)
ele <- rep(NA, nsim)
for(i in 1:nsim) {
scr[i] <- mean(sample(1:0, 417, prob=c(3, 414), replace=TRUE))
ele[i] <- mean(sample(1:0, 465, prob=c(7, 458), replace=TRUE))
}
windows(h=8, w=4)
par(mar=c(4, 4, 1, 1), las=1, yaxs="i", mfrow=c(2, 1))
hist(scr, breaks=seq(-0.5, 100.5, 1), freq=FALSE, col="cyan", xlim=c(0, max(scr, ele)),
xlab="Ratio of recovery rates", ylab="Proportion", main="")
box()
rrr <- ele > scr
hist(scr)
windows(h=8, w=4)
par(mar=c(4, 4, 1, 1), las=1, yaxs="i", mfrow=c(2, 1))
hist(scr, breaks=seq(-0.005, 1.005, 0.01), freq=FALSE, col="cyan", xlim=c(0, max(scr, ele)),
xlab="Ratio of recovery rates", ylab="Proportion", main="")
box()
windows(h=8, w=4)
par(mar=c(4, 4, 1, 1), las=1, yaxs="i", mfrow=c(2, 1))
hist(scr, breaks=seq(-0.0005, 1.0005, 0.001), freq=FALSE, col="cyan", xlim=c(0, max(scr, ele)),
xlab="Ratio of recovery rates", ylab="Proportion", main="")
box()
seq(-0.0005, 1.0005, 0.001)
windows(h=8, w=4)
par(mar=c(4, 4, 1, 1), las=1, yaxs="i", mfrow=c(2, 1))
hist(scr, breaks=seq(-0.0025, 1.0025, 0.005), freq=FALSE, col="cyan", xlim=c(0, max(scr, ele)),
xlab="Ratio of recovery rates", ylab="Proportion", main="")
box()
windows(h=8, w=4)
par(mar=c(4, 4, 1, 1), las=1, yaxs="i", mfrow=c(2, 1))
hist(scr, breaks=seq(-0.0025, 1.0025, 0.005), freq=FALSE, col="cyan", xlim=c(0, max(scr, ele)), ylim=c(0, 0.5), 
xlab="Ratio of recovery rates", ylab="Proportion", main="")
box()
max(scr, ele))
max(scr, ele)
nsim <- 1000
scr <- rep(NA, nsim)
ele <- rep(NA, nsim)
for(i in 1:nsim) {
scr[i] <- mean(sample(1:0, 417, prob=c(3, 414), replace=TRUE))
ele[i] <- mean(sample(1:0, 465, prob=c(7, 458), replace=TRUE))
}
windows(h=8, w=4)
par(mar=c(4, 4, 1, 1), las=1, mfrow=c(2, 1))
hist(scr, breaks=seq(-0.0025, 1.0025, 0.005), freq=TRUE, col="cyan", xlim=c(-0.0025, max(scr, ele)), 
xlab="Ratio of recovery rates", ylab="Proportion", main="")
box()
nsim <- 1000
scr <- rep(NA, nsim)
ele <- rep(NA, nsim)
for(i in 1:nsim) {
scr[i] <- mean(sample(1:0, 417, prob=c(3, 414), replace=TRUE))
ele[i] <- mean(sample(1:0, 465, prob=c(7, 458), replace=TRUE))
}
windows(h=8, w=4)
par(mar=c(4, 4, 1, 1), las=1, mfrow=c(2, 1))
hist(scr, breaks=seq(-0.0025, 1.0025, 0.005), freq=TRUE, col="cyan", xlim=c(-0.0025, max(scr, ele)), yaxt="n", 
xlab="Ratio of recovery rates", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=10), labels=seq(0, nsim, length=10)/nsim
box()
axis(2, at=seq(0, nsim, length=10), labels=seq(0, nsim, length=10)/nsim)
seq(0, nsim, length=10)
seq(0, nsim, length=11)
windows(h=8, w=4)
par(mar=c(4, 4, 1, 1), las=1, mfrow=c(2, 1))
hist(scr, breaks=seq(-0.0025, 1.0025, 0.005), freq=TRUE, col="cyan", xlim=c(-0.0025, max(scr, ele)), yaxt="n", 
xlab="Ratio of recovery rates", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
windows(h=8, w=4)
par(mar=c(4, 4, 1, 1), las=1, mfrow=c(2, 1))
hist(scr, breaks=seq(-0.0025, 1.0025, 0.005), freq=TRUE, col="cyan", xlim=c(-0.0025, max(scr, ele)), yaxt="n", 
xlab="Ratio of recovery rates", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
hist(ele, breaks=seq(-0.0025, 1.0025, 0.005), freq=TRUE, col="cyan", xlim=c(-0.0025, max(scr, ele)), yaxt="n", 
xlab="Ratio of recovery rates", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
??color
alpha("red", 0.1)
library(scales)
alpha("red", 0.1)
windows(h=8, w=4)
par(mar=c(0, 3, 0, 1), las=1, mfrow=c(2, 1), oma=c(2, 2, 0, 0))
hist(scr, breaks=seq(-0.0025, 1.0025, 0.005), freq=TRUE, col="cyan", xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.5), yaxt="n", 
xlab="Ratio of recovery rates", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
par(new=TRUE)
hist(ele, breaks=seq(-0.0025, 1.0025, 0.005), freq=TRUE, col=alpha("red", 0.1), xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.5), yaxt="n", 
xlab="Ratio of recovery rates", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
windows(h=8, w=4)
par(mar=c(0, 3, 0, 1), las=1, mfrow=c(2, 1), oma=c(2, 2, 0, 0))
hist(scr, breaks=seq(-0.0025, 1.0025, 0.005), freq=TRUE, col="cyan", xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.5)*nsim, yaxt="n", 
xlab="Ratio of recovery rates", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
par(new=TRUE)
hist(ele, breaks=seq(-0.0025, 1.0025, 0.005), freq=TRUE, col=alpha("red", 0.1), xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.5)*nsim, yaxt="n", 
xlab="Ratio of recovery rates", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
windows(h=8, w=4)
par(mar=c(4, 4, 1, 1), las=1)
hist(scr, breaks=seq(-0.0025, 1.0025, 0.005), freq=TRUE, col="cyan", xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.5)*nsim, yaxt="n", 
xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
par(new=TRUE)
hist(ele, breaks=seq(-0.0025, 1.0025, 0.005), freq=TRUE, col=alpha("orange", 0.1), xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.5)*nsim, yaxt="n", 
xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
windows(h=4, w=4)
par(mar=c(4, 4, 1, 1), las=1)
hist(scr, breaks=seq(-0.0025, 1.0025, 0.005), freq=TRUE, col="cyan", xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.5)*nsim, yaxt="n", 
xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
par(new=TRUE)
hist(ele, breaks=seq(-0.0025, 1.0025, 0.005), freq=TRUE, col=alpha("orange", 0.1), xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.5)*nsim, yaxt="n", 
xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
?hist
windows(h=4, w=4)
par(mar=c(4, 4, 1, 1), las=1)
hist(scr, breaks=seq(-0.0025, 1.0025, 0.005), freq=TRUE, col="cyan", border="blue", xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.5)*nsim, yaxt="n", 
xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
par(new=TRUE)
hist(ele, breaks=seq(-0.0025, 1.0025, 0.005), freq=TRUE, col=alpha("orange", 0.1), border=alpha("orange", 0.5), xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.5)*nsim, yaxt="n", 
xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
par(mar=c(4, 4, 1, 1), las=1)
hist(scr, breaks=seq(-0.0025, 1.0025, 0.005), freq=TRUE, col="cyan", border="blue", xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.5)*nsim, yaxt="n", 
xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
par(new=TRUE)
hist(ele, breaks=seq(-0.0025, 1.0025, 0.005), freq=TRUE, col=alpha("orange", 0.3), border=alpha("orange", 0.5), xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.5)*nsim, yaxt="n", 
xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
windows(h=4, w=4)
par(mar=c(4, 4, 1, 1), las=1)
hist(scr, breaks=seq(-0.0025, 1.0025, 0.005), freq=TRUE, col="cyan", border="blue", xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.5)*nsim, yaxt="n", 
xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
par(new=TRUE)
hist(ele, breaks=seq(-0.0025, 1.0025, 0.005), freq=TRUE, col=alpha("orange", 0.3), border=alpha("red", 0.5), xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.5)*nsim, yaxt="n", 
xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(3/417, 0.5*nsim, "SCR", col="blue")
text(7/465, 0.5*nsim, "ELE", col=alpha("red", 0.5))
windows(h=4, w=4)
par(mar=c(4, 4, 1, 1), las=1)
hist(ele, breaks=seq(-0.0025, 1.0025, 0.005), freq=TRUE, col="cyan", border="blue", xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.5)*nsim, yaxt="n", 
xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(7/465, 0.5*nsim, "ELE", col="blue")
par(new=TRUE)
hist(scr, breaks=seq(-0.0025, 1.0025, 0.005), freq=TRUE, col=alpha("orange", 0.3), border=alpha("red", 0.5), xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.5)*nsim, yaxt="n", 
xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(3/417, 0.5*nsim, "SCR", col=alpha("red", 0.5))
nsim <- 10000
scr <- rep(NA, nsim)
ele <- rep(NA, nsim)
for(i in 1:nsim) {
scr[i] <- mean(sample(1:0, 417, prob=c(3, 414), replace=TRUE))
ele[i] <- mean(sample(1:0, 465, prob=c(7, 458), replace=TRUE))
}
windows(h=4, w=4)
par(mar=c(4, 4, 1, 1), las=1)
hist(ele, breaks=seq(-0.0025, 1.0025, 0.005), freq=TRUE, col="cyan", border="blue", xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.5)*nsim, yaxt="n", 
xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(7/465, 0.5*nsim, "ELE", col="blue")
par(new=TRUE)
hist(scr, breaks=seq(-0.0025, 1.0025, 0.005), freq=TRUE, col=alpha("orange", 0.3), border=alpha("red", 0.5), xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.5)*nsim, yaxt="n", 
xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(3/417, 0.5*nsim, "SCR", col=alpha("red", 0.5))
windows(h=4, w=4)
par(mar=c(4, 4, 1, 1), las=1)
hist(ele, breaks=seq(-0.00125, 1.00125, 0.0025), freq=TRUE, col="cyan", border="blue", xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.5)*nsim, yaxt="n", 
xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(7/465, 0.5*nsim, "ELE", col="blue")
par(new=TRUE)
hist(scr, breaks=seq(-0.0025, 1.0025, 0.005), freq=TRUE, col=alpha("orange", 0.3), border=alpha("red", 0.5), xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.5)*nsim, yaxt="n", 
xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(3/417, 0.5*nsim, "SCR", col=alpha("red", 0.5))
windows(h=4, w=4)
par(mar=c(4, 4, 1, 1), las=1)
hist(ele, breaks=seq(-0.00125, 1.00125, 0.0025), freq=TRUE, col="cyan", border="blue", xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.5)*nsim, yaxt="n", 
xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(7/465, 0.5*nsim, "ELE", col="blue")
par(new=TRUE)
hist(scr, breaks=seq(-0.00125, 1.00125, 0.0025), freq=TRUE, col=alpha("orange", 0.3), border=alpha("red", 0.5), xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.5)*nsim, yaxt="n", 
xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(3/417, 0.5*nsim, "SCR", col=alpha("red", 0.5))
locator()
windows(h=4, w=4)
par(mar=c(4, 4, 1, 1), las=1)
hist(ele, breaks=seq(-0.00125, 1.00125, 0.0025), freq=TRUE, col="cyan", border="blue", xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.23)*nsim, yaxt="n", 
xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(7/465, 0.5*nsim, "ELE", col="blue")
par(new=TRUE)
hist(scr, breaks=seq(-0.00125, 1.00125, 0.0025), freq=TRUE, col=alpha("orange", 0.3), border=alpha("red", 0.5), xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.23)*nsim, yaxt="n", 
xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(3/417, 0.5*nsim, "SCR", col=alpha("red", 0.5))
par(mar=c(4, 4, 1, 1), las=1)
hist(ele, breaks=seq(-0.00125, 1.00125, 0.0025), freq=TRUE, col="cyan", border="blue", 
xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.25)*nsim, yaxt="n", xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(7/465, 0.25*nsim, "ELE", col="blue")
par(new=TRUE)
hist(scr, breaks=seq(-0.00125, 1.00125, 0.0025), freq=TRUE, col=alpha("orange", 0.3), border=alpha("red", 0.5), 
xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.25)*nsim, yaxt="n", xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(3/417, 0.25*nsim, "SCR", col=alpha("red", 0.5))
library(scales)
nsim <- 100000
scr <- rep(NA, nsim)
ele <- rep(NA, nsim)
for(i in 1:nsim) {
scr[i] <- mean(sample(1:0, 417, prob=c(3, 414), replace=TRUE))
ele[i] <- mean(sample(1:0, 465, prob=c(7, 458), replace=TRUE))
}
windows(h=4, w=4)
par(mar=c(4, 4, 1, 1), las=1)
hist(ele, breaks=seq(-0.00125, 1.00125, 0.0025), freq=TRUE, col="cyan", border="blue", 
xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.25)*nsim, yaxt="n", xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(7/465, 0.25*nsim, "ELE", col="blue")
par(new=TRUE)
hist(scr, breaks=seq(-0.00125, 1.00125, 0.0025), freq=TRUE, col=alpha("orange", 0.3), border=alpha("red", 0.5), 
xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.25)*nsim, yaxt="n", xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(3/417, 0.25*nsim, "SCR", col=alpha("red", 0.5))
library(scales)
nsim <- 100000
scr <- rep(NA, nsim)
ele <- rep(NA, nsim)
for(i in 1:nsim) {
scr[i] <- mean(sample(1:0, 417, prob=c(3, 414), replace=TRUE))
ele[i] <- mean(sample(1:0, 465, prob=c(7, 458), replace=TRUE))
}
windows(h=4, w=4)
par(mar=c(4, 4, 1, 1), las=1)
hist(ele, breaks=seq(-0.00125, 1.00125, 0.0025), freq=TRUE, col="cyan", border="blue", 
xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.25)*nsim, yaxt="n", xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(7/465, 0.25*nsim, "ELE", col="blue")
par(new=TRUE)
hist(scr, breaks=seq(-0.00125, 1.00125, 0.0025), freq=TRUE, col=alpha("orange", 0.3), border=alpha("red", 0.5), 
xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.25)*nsim, yaxt="n", xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(3/417, 0.25*nsim, "SCR", col=alpha("red", 0.5))
library(scales)
nsim <- 100000
scr <- rep(NA, nsim)
ele <- rep(NA, nsim)
for(i in 1:nsim) {
scr[i] <- mean(sample(1:0, 417, prob=c(3, 414), replace=TRUE))
ele[i] <- mean(sample(1:0, 465, prob=c(7, 458), replace=TRUE))
}
windows(h=4, w=4)
par(mar=c(4, 4, 1, 1), las=1)
hist(ele, breaks=seq(-0.00125, 1.00125, 0.0025), freq=TRUE, col="cyan", border="blue", 
xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.25)*nsim, yaxt="n", xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(7/465, 0.25*nsim, "ELE", col="blue")
par(new=TRUE)
hist(scr, breaks=seq(-0.00125, 1.00125, 0.0025), freq=TRUE, col=alpha("orange", 0.3), border=alpha("red", 0.5), 
xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.25)*nsim, yaxt="n", xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(3/417, 0.25*nsim, "SCR", col=alpha("red", 0.5))
windows(h=4, w=4)
par(mar=c(4, 4, 1, 1), las=1)
hist(ele, breaks=seq(-0.001, 1.001, 0.002), freq=TRUE, col="cyan", border="blue", 
xlim=c(-0.0025, max(scr, ele)), ylim=c(0, 0.25)*nsim, yaxt="n", xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(7/465, 0.25*nsim, "ELE", col="blue")
seq(-0.001, 1.001, 0.002)
windows(h=4, w=4)
par(mar=c(4, 4, 1, 1), las=1)
hist(ele, breaks=seq(-0.001, 1.001, 0.002), freq=TRUE, col="cyan", border="blue", 
xlim=c(-0.001, max(scr, ele)), ylim=c(0, 0.25)*nsim, yaxt="n", xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(7/465, 0.25*nsim, "ELE", col="blue")
par(new=TRUE)
hist(scr, breaks=seq(-0.001, 1.001, 0.002), freq=TRUE, col=alpha("orange", 0.3), border=alpha("red", 0.5), 
xlim=c(-0.001, max(scr, ele)), ylim=c(0, 0.25)*nsim, yaxt="n", xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(3/417, 0.25*nsim, "SCR", col=alpha("red", 0.5))
windows(h=4, w=4)
par(mar=c(4, 4, 1, 1), las=1)
hist(ele, breaks=seq(0, 0.06, 0.01), freq=TRUE, col="cyan", border="blue", 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.25)*nsim, yaxt="n", xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
windows(h=4, w=4)
par(mar=c(4, 4, 1, 1), las=1)
hist(ele, breaks=seq(0, 0.06, 0.001), freq=TRUE, col="cyan", border="blue", 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.25)*nsim, yaxt="n", xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
windows(h=4, w=4)
par(mar=c(4, 4, 1, 1), las=1)
hist(ele, breaks=seq(0, 0.06, 0.025), freq=TRUE, col="cyan", border="blue", 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.25)*nsim, yaxt="n", xlab="Recovery rate", ylab="Proportion", main="")
windows(h=4, w=4)
par(mar=c(4, 4, 1, 1), las=1)
hist(ele, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col="cyan", border="blue", 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.25)*nsim, yaxt="n", xlab="Recovery rate", ylab="Proportion", main="")
windows(h=4, w=4)
par(mar=c(4, 4, 1, 1), las=1)
hist(ele, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col="cyan", border="blue", 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.25)*nsim, yaxt="n", xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(7/465, 0.25*nsim, "ELE", col="blue")
par(new=TRUE)
hist(scr, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col=alpha("orange", 0.3), border=alpha("red", 0.5), 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.25)*nsim, yaxt="n", xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(3/417, 0.25*nsim, "SCR", col=alpha("red", 0.5))
windows(h=4, w=4)
par(mar=c(4, 4, 1, 1), las=1)
hist(ele, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col="cyan", border="blue", 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.5)*nsim, yaxt="n", xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(7/465, 0.25*nsim, "ELE", col="blue")
par(new=TRUE)
hist(scr, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col=alpha("orange", 0.3), border=alpha("red", 0.5), 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.5)*nsim, yaxt="n", xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(3/417, 0.25*nsim, "SCR", col=alpha("red", 0.5))
windows(h=4, w=4)
par(mar=c(4, 4, 1, 1), las=1)
hist(ele, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col="cyan", border="blue", 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.3)*nsim, yaxt="n", xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(7/465, 0.3*nsim, "ELE", col="blue")
par(new=TRUE)
hist(scr, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col=alpha("orange", 0.3), border=alpha("red", 0.5), 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.3)*nsim, yaxt="n", xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(3/417, 0.3*nsim, "SCR", col=alpha("red", 0.5))
windows(h=4, w=4)
par(mar=c(4, 4, 1, 1), las=1)
hist(ele, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col="cyan", border="blue", 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.3)*nsim, yaxt="n", xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(7/465, 0.3*nsim, "ELE", col="blue")
par(new=TRUE)
hist(scr, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col=alpha("orange", 0.3), border=alpha("red", 0.5), 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.3)*nsim, yaxt="n", xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(3/417, 0.3*nsim, "SCR", col=alpha("red", 0.5))
chi(matrix(c(3, 7, 414, 458), nrow=2))
windows(h=4, w=4)
par(mar=c(4, 4, 1, 1), las=1)
hist(ele, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col="cyan", border="blue", 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.3)*nsim, yaxt="n", xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(7/465, 0.3*nsim, "ELE", col="blue")
par(new=TRUE)
hist(scr, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col=alpha("orange", 0.3), border=alpha("red", 0.5), 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.3)*nsim, yaxt="n", xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(3/417, 0.3*nsim, "SCR", col=alpha("red", 0.5))
windows()
chi(matrix(c(3, 7, 414, 458), nrow=2))
rrr <- ele > scr
mean(rrr)
466*5817/8 - 1
466*5817/(8 +/- 1.96sqrt(7))
466*5817/(8 - 1.96*sqrt(7))
466*5817/(8 + 1.96*sqrt(7))
465 + 417
883*5817/11 - 1
883*5817/(11 + 1.96*sqrt(10))
883*5817/(11 - 1.96*sqrt(10))
(me+1) * (ce+1) / (re+1) - 1
(me+1) * (ce+1) / (re+1+(c(-1, 1)*1.96*sqrt(re)) - 1
mc <- 417
me <- 465
rc <- 3
re <- 6
ce <- 5816
ch <- 28707
(me+1) * (ce+1) / (re+1) - 1
(me+1) * (ce+1) / (re+1+(c(-1, 1)*1.96*sqrt(re)) - 1
(me+1) * (ce+1) / (re+1+(c(-1, 1)*1.96*sqrt(re))) - 1
(me+1) * (ce+1) / (re+1+(c(1, -1)*1.96*sqrt(re))) - 1
me
ce
mc <- 417
me <- 465
rc <- 3
re <- 6
ce <- 5816
ch <- 28707
N <- function(m, c, r) {
(m+1) * (c+1) / (r+1) - 1
}
NCI <- function(m, c, r) {
(m+1) * (c+1) / (r+1+(c(1, -1)*1.96*sqrt(r))) - 1
}
N(me, ce, re)
NCI(me, ce, re)
N(mc+me, ce, rc+re)
NCI(mc+me, ce, rc+re)
est <- function(m, c, r) {
N <- (m+1) * (c+1) / (r+1) - 1
CI <- (m+1) * (c+1) / (r+1+(c(1, -1)*1.96*sqrt(r))) - 1
c(N=N, CI=CI)
}
est(me, ce, re)
length(est(me, ce, re))
est(me, ce, re)
est(mc+me, ce, rc+re)
est(me, ce, re)/1000
est(mc+me, ce, rc+re)/1000
390000/14600
14600390000
14600/390000
sqrt(14600/390000)
sqrt(14600/510000)
14600*11
16300*11
510/14.6
390/14.6
510+390
450*.18
450*.18*.18
q()
# C:\JVA\Lamprey\Adults\AdultIndex\2014\AdultIndex v2.r
{ # functions
# the following seven plot.table related function are from the Systmatic Investor Toolbox
# load Systematic Investor Toolbox
# require(RCurl)
# sit = getURLContent("https://github.com/systematicinvestor/SIT/raw/master/sit.gz", binary=TRUE, followlocation=TRUE, ssl.verifypeer=FALSE)
# con = gzcon(rawConnection(sit, "rb"))
# source(con)
# close(con)
draw.cell <- function(title, r, c, text.cex = 1, bg.col = 'white', frame.cell = T) {
if(!frame.cell) bcol = bg.col else bcol = 'black'
rect((2*(c - 1) + .5), -(r - .5), (2*c + .5), -(r + .5), col = bg.col, border = bcol)
if( c == 1) {
text((2*(c - 1) + .5), -r, title, adj = 0, cex = text.cex)
} else if( r == 1 ) {
text((2*(c - 1) + .5), -r, title, adj = 0, cex = text.cex)
} else {
text((2*c + .5), -r, title, adj = 1, cex = text.cex)
}
}
plot.table.helper.auto.adjust.cex <- function(temp.table, keep.all.same.cex = FALSE) {
nr = nrow(temp.table)
nc = ncol(temp.table)
all.xrange = diff(par()$usr[1:2]) / nc
xrange = matrix( strwidth(paste('  ', temp.table), units = 'user', cex = 1), nc = nc)
all.yrange = diff(par()$usr[3:4]) / nr
yrange = matrix( 5/3 * strheight(temp.table, units = 'user', cex = 1), nc = nc)
plot.matrix.cex = pmin( round(all.yrange / yrange, 2) , round(all.xrange / xrange, 2) )
header.col.cex = min(plot.matrix.cex[1,-1])
header.row.cex = min(plot.matrix.cex[-1,1])
title.cex = plot.matrix.cex[1, 1]
data.cex = min(plot.matrix.cex[-1, -1])
if ( keep.all.same.cex ) {
plot.matrix.cex[] = min(plot.matrix.cex)
} else {
plot.matrix.cex[1,-1] = min(c(header.col.cex, header.row.cex))
plot.matrix.cex[-1,1] = min(c(header.col.cex, header.row.cex))
plot.matrix.cex[-1,-1]= min(c(header.col.cex, header.row.cex, data.cex))
plot.matrix.cex[1,1]= min(c(header.col.cex, header.row.cex, data.cex, title.cex))
plot.matrix.cex[1,-1] = min(c(header.col.cex))
plot.matrix.cex[-1,1] = min(c(header.row.cex))
plot.matrix.cex[-1,-1]= min(c(data.cex))
plot.matrix.cex[1,1]= min(c(title.cex))
}
return(plot.matrix.cex)
}
make.table <- function(nr, nc) {
savepar = par(mar = rep(1, 4))
plot(c(0.5, nc*2 + 0.5), c(-0.5, -(nr + 0.5)), xaxs = 'i', yaxs = 'i',
type = 'n', xlab = '', ylab = '', axes = FALSE)
savepar
}
trim <- function(s) {
s = sub(pattern = '^ +', replacement = '', x = s)
s = sub(pattern = ' +$', replacement = '', x = s)
return(s)
}
plot.table.param <- function(plot.matrix, smain = '', plot.matrix.cex, plot.matrix_bg.col, frame.cell = T, keep.all.same.cex = FALSE) {
n = nrow(plot.matrix)
pages = unique(c(seq(0, n, by = 120), n))
for(p in 1:(length(pages)-1)) {
rindex = (pages[p]+1) : pages[p+1]
temp.table = matrix('', nr = length(rindex)+1, nc = ncol(plot.matrix)+1)
temp.table[-1, -1] = plot.matrix[rindex,]
temp.table[1, -1] = colnames(plot.matrix)
temp.table[-1, 1] = rownames(plot.matrix)[rindex]
temp.table[1, 1] = smain
nr = nrow(temp.table)
nc = ncol(temp.table)
par(mar = c(0, 0, 0, 0), cex = 0.5)
oldpar = make.table(nr, nc)
text.cex = plot.matrix.cex[c(1, 1 + rindex), ]
text.cex = plot.table.helper.auto.adjust.cex(temp.table, keep.all.same.cex)
bg.col = plot.matrix_bg.col[c(1, 1 + rindex), ]
for(r in 1:nr) {
for(c in 1:nc) {
draw.cell( paste('', temp.table[r,c], '', sep=' '), r, c,
text.cex = text.cex[r,c], bg.col = bg.col[r,c], frame.cell = frame.cell)
}}
}
}
plot.table <- function(plot.matrix, smain="", text.cex=1, frame.cell=TRUE, highlight=FALSE, colorbar=FALSE, keep_all.same.cex=FALSE) {
if( is.null(rownames(plot.matrix)) & is.null(colnames(plot.matrix)) ) {
temp.matrix = plot.matrix
if( nrow(temp.matrix) == 1 ) temp.matrix = rbind("", temp.matrix)
if( ncol(temp.matrix) == 1 ) temp.matrix = cbind("", temp.matrix)
plot.matrix = temp.matrix[-1, -1, drop = FALSE]
colnames(plot.matrix) = temp.matrix[1, -1]
rownames(plot.matrix) = temp.matrix[-1, 1]
smain = temp.matrix[1, 1]
} else if( is.null(rownames(plot.matrix)) ) {
temp.matrix = plot.matrix
if( ncol(plot.matrix) == 1 ) temp.matrix = cbind("", temp.matrix)
plot.matrix = temp.matrix[, -1, drop = FALSE]
colnames(plot.matrix) = colnames(temp.matrix)[-1]
rownames(plot.matrix) = temp.matrix[,1]
smain = colnames(temp.matrix)[1]
} else if( is.null(colnames(plot.matrix)) ) {
temp.matrix = plot.matrix
if( nrow(temp.matrix) == 1 ) temp.matrix = rbind("", temp.matrix)
plot.matrix = temp.matrix[-1, , drop = FALSE]
rownames(plot.matrix) = rownames(temp.matrix)[-1]
colnames(plot.matrix) = temp.matrix[1, ]
smain = rownames(temp.matrix)[1]
}
plot.matrix[which(trim(plot.matrix) == "NA")] = ""
plot.matrix[which(trim(plot.matrix) == "NA%")] = ""
plot.matrix[which(is.na(plot.matrix))] = ""
nr = nrow(plot.matrix) + 1
nc = ncol(plot.matrix) + 1
is_highlight = TRUE
if(is.logical(highlight)) {
is_highlight = highlight
if(highlight) highlight = plot.table.helper.color(plot.matrix)
}
if(!is_highlight) {
plot.matrix.cex = matrix(1, nr = nr, nc = nc )
plot.matrix_bg.col = matrix("white", nr = nr, nc = nc )
plot.matrix_bg.col[seq(1, nr, 2), ] = "yellow"
plot.matrix_bg.col[1,] = "gray";
plot.table.param( plot.matrix, smain, plot.matrix.cex, plot.matrix_bg.col,
frame.cell, keep_all.same.cex)
} else {
plot.matrix.cex = matrix(1, nr = nr, nc = nc )
plot.matrix_bg.col = matrix("white", nr = nr, nc = nc )
plot.matrix_bg.col[1,] = "gray"
plot.matrix_bg.col[2:nr,2:nc] = highlight
plot.table.param(plot.matrix, smain, plot.matrix.cex, plot.matrix_bg.col,
frame.cell, keep_all.same.cex)
}
}
plot.table.helper.color <- function (temp) {
temp = matrix(as.double(gsub("[%,$]", "", temp)), nrow(temp), ncol(temp))
highlight = as.vector(temp)
cols = rep(NA, length(highlight))
ncols = length(highlight[!is.na(highlight)])
cols[1:ncols] = rev(rainbow(ncols, start=0.5/6, end=3.5/6))
o = sort.list(highlight, na.last = TRUE, decreasing = FALSE)
o1 = sort.list(o, na.last = TRUE, decreasing = FALSE)
highlight = matrix(cols[o1], nrow = nrow(temp))
highlight[is.na(temp)] = NA
return(highlight)
}
ModelEst <- function(fit, df) {
# derive regression estimates from log(y) fit
mse <- rev(as.matrix(summary(fit)[[1]])[, "Mean Sq"])[1]
plpe <- predict(fit, newdata=df, se.fit=T)
m <- plpe$fit
v <- plpe$se.fit^2 + mse
exp(m + v/2)
}
myrange <- function(x) {
if(all(is.na(x))) r <- c(NA, NA) else r <- range(x, na.rm=TRUE)
return(r)
}
jackindex <- function(m) {
# m is a matrix of numbers (stream PEs) with observations (years) as rows and individuals (streams) as columns
if(any(is.na(m))) stop("The input matrix may not have any missing values.")
# calculate the index as the sum of the columns for each row
rowsum <- apply(m, 1, sum)
# calculate the mean of the index
avgind <- mean(rowsum)
# recalculate the index, leaving out one individual at a time
loo <- apply(m, 2, function(column) (rowsum - column))
# rescale the loo index, relative to mean
looscaled <- apply(loo, 2, function(x) x/mean(x))
# convert to original scale
looscaled2 <- looscaled * avgind
# calculate range
ranges <- t(apply(looscaled2, 1, range))
cbind(index=rowsum, lo=ranges[, 1], hi=ranges[, 2])
}
# selstreams <- index.streams[[1]] 
# allstreamdf <- dat
# alllakedf <- lk 
# min.nmr=2 
# show=FALSE
index.est <- function(selstreams, allstreamdf, alllakedf, min.nmr=2, show=FALSE) {
# INDEX OF ADULT SEA LAMPREY ABUNDANCE
### INPUTS
# selstreams = vector of stream ids, e.g., 1.064 (lake + strcode/1000)
# allstreamdf = data frame of mark-recap estimates for all streams, with vars:  year lake ls Emr CVmr
# alllakedf = data frame of lake-wide PEs from Mullett et al. (2003) spawner model with vars:  lake year PE
# min.nmr = minimum number of mark-recapture estimates needed in a year to generate an index, default 2
# show = print out a brief summary of the results, default FALSE
### OUTPUTS
# indfit = simple model used to predict missing mark-recap estimates
# streamdf = original allstreamdf, subsetted by selstreams, with estimates for missing mark-recaps
# indxdf = original alllakedf, subsetted by lake, with annual index, including raw (indxraw), kept based on min.nmr (indxkeep, indxkeep.lo, indxkeep.hi)
# scaleup = conversion factor used to scale up annual index to spawner model PE
streamdf <- allstreamdf[allstreamdf$ls %in% selstreams, ]
# error checks
check1 <- var(streamdf$lake)
if(is.na(check1) | is.null(check1)) stop("Either no streams selected or critical data missing.") else if(check1 > 0) stop("Selected streams should be only from ONE lake.")
if(any(is.na(match(c("year", "lake", "ls", "Emr", "CVmr"), names(allstreamdf))))) stop("allstreamdf must include these variables: year lake ls Emr CVmr.")
if(any(is.na(match(c("year", "lake", "PE"), names(alllakedf))))) stop("alllakedf must include these variables: lake year PE.")
# fill in missing mark-recap data
indfit <- aov(log(Emr) ~ as.factor(ls) + as.factor(year), data=streamdf, weights=1/CVmr^2)
# figure out estimable years (those with at least 1 m-r estimate)
n.mr <- tapply(!is.na(streamdf$Emr), streamdf$year, sum)
eyrs <- as.numeric(names(n.mr)[n.mr > 0.5])
estimable <- streamdf$year %in% eyrs
streamdf$Pmr <- NA
streamdf$Pmr[estimable] <- ModelEst(fit=indfit, df=streamdf[estimable, ])
streamdf$COMBmr <- ifelse(is.na(streamdf$Emr), streamdf$Pmr, streamdf$Emr)
# annual index (sum across streams)
indxdf <- aggregate(COMBmr ~ year + lake, streamdf, sum, na.rm=TRUE, na.action=na.pass)
names(indxdf)[names(indxdf)=="COMBmr"] <- "indxraw"
indxdf$indxraw[indxdf$indxraw==0] <- NA
# only keep lake-wide index for years with at least min.nmr mark-recap estimates
indxdf$n.mr <- n.mr
indxdf$indxkeep <- ifelse(indxdf$n.mr > (min.nmr - 0.5), indxdf$indxraw, NA)
indxdf$indxkeep.lo <- NA
indxdf$indxkeep.hi <- NA
# matrix of stream estimates (rows = years, columns = index streams)
streamests <- with(streamdf, tapply(COMBmr, list(year, ls), mean))
# selection of only those streams with a keepable index
selkeep <- !is.na(indxdf$indxkeep)
jack <- jackindex(streamests[selkeep, ])
indxdf$indxkeep.lo[selkeep] <- jack[, "lo"]
indxdf$indxkeep.hi[selkeep] <- jack[, "hi"]
# scale up the index to the spawner model PE
lk1 <- lk[lk$lake == streamdf$lake[1], ]
indxdf2 <- merge(lk1, indxdf, all=TRUE)
scaleup <- median(indxdf2$PE / indxdf2$indxkeep, na.rm=TRUE)
if(show) {
cat("\nindfit\n")
print(summary(indfit))
cat("\nstreamdf\n")
print(tail(streamdf[, c("lake", "year", "ls", "Emr", "CVmr", "Pmr", "COMBmr")]))
cat("\nscaleup\n")
print(scaleup)
cat("\nindxdf\n")
print(tail(indxdf[, c("lake", "year", "n.mr", "indxraw", "indxkeep", "indxkeep.lo", "indxkeep.hi")]))
}
list(indfit=indfit, streamdf=streamdf, scaleup=scaleup, indxdf=indxdf)
}
calctarg <- function(lakenum, adults, year, targyears, adjust=c(1, 1, 0.25, 1, 1)) {
# lakenum = vector of lake numbers (1-5)
# adults = vector of lakewide adult sea lamprey estimates
# year = vector of years
# targyears = list (length 5) of selected years from which to calculate targets
# lake huron target is 25% of
targets <- data.frame(lake=1:5, target=rep(NA, 5), lo=rep(NA, 5), hi=rep(NA, 5))
for(i in 1:5) {
pick5 <- adults[lakenum==i & is.element(year, targyears[[i]]) & !is.na(adults)]
if(length(pick5) > 0) {
targets$target[i] <- mean(pick5)
n <- length(pick5)
ci <- qnorm(1 - 0.05/2) * sqrt(var(pick5)) / sqrt(n)
targets[i, c("lo", "hi")] <- mean(pick5) + c(-1, 1)*ci# using z dist (known variance)
targets[i, c("target", "lo", "hi")] <- adjust[i]*targets[i, c("target", "lo", "hi")]
} else {
targets[i, c("target", "lo", "hi")] <- c(NA, NA, NA)
}
}
targets
}
}
# bring in lake-wide spawner data
lk <- read.csv("C:/JVA/Lamprey/Adults/SpawnDisModel/2014/LakePEdynamic.csv", as.is=T)
# bring in stream-specific data
dat <- read.csv("C:/JVA/Lamprey/Adults/SpawnDisModel/2014/StreamPEdynamicALLCOLS.csv", as.is=T)
dat$ls <- dat$lscode
# 2014-04-09 Jess and Gale agreed that the East Au Gres (38) should be replaced with the Au Sable (36) in Lake Huron
# 2014-04-10 Jess thinks that we should just stick with the East Au Gres (38)
index.streams <- list(
Sup = c(1, 2, 9, 29, 31, 32, 62),
Mic = c(5, 6, 15, 24, 26, 35),
Hur = c(10, 16, 27, 32, 999, 38),
Eri = c(1, 2, 3, 7, 9),
Ont = c(5, 9, 22, 23, 36)
)
index.streams <- lapply(1:5, function(i) i + index.streams[[i]]/1000)
# estimate adult index of abundance for each lake using index streams
indices <- lapply(index.streams, index.est, dat, lk)
# combine index data for all lakes in one dataframe
indxall <- do.call(rbind, lapply(indices, "[[", "indxdf"))
# calculate targets 
sptargyrz <- list(1994:1998, 1988:1992, 1989:1993, 1991:1995, 1999:2003)
targyrz <- apply(sapply(sptargyrz, range), 2, paste, collapse="-")
# spawner model
targets.sm <- calctarg(lakenum=lk$lake, adults=lk$PE, year=lk$year, targyears=sptargyrz)
# adult index
targets.ai <- calctarg(lakenum=indxall$lake, adults=indxall$indxkeep, year=indxall$year, targyears=sptargyrz)
# spawner model targets scaled down to adult index
targets.sm.su <- cbind(lake=targets.sm[, 1], (1/sapply(indices, "[[", "scaleup")) * targets.sm[, -1])
# adult index adjusted
targets.ai.adj <- targets.ai
targets.ai.adj[is.na(targets.ai$target), ] <- targets.sm.su[is.na(targets.ai$target), ]
YEAR1 <- 1984
# create a Word document with results
doc <- startrtf(file="2014-10 SLCB Index", dir="C:/JVA/Lamprey/Adults/AdultIndex/2014", omi=c(1, 1.25, 1, 1.25))
heading("Index of Adult Sea Lamprey Abundance in each Great Lake")
heading(paste("Adams, Barber, Bravener, Steeves -", as.character(Sys.Date())), htype=2)
para("Conversion factors: ", paste(Lakenames, round(sapply(indices, "[[", "scaleup"), 2), collapse=", "), ".")
# position of text for selected streams in each lake (for map drawing)
posp <- list(c(3, 1, 3, 1, 1, 3, 1),
c(2, 2, 2, 2, 2, 2),
c(4, 1, 4, 4, 4, 4),
c(2, 4, 3, 4, 4),
c(2, 2, 3, 2, 2, 2))
### map of selected streams
col5 <- c("#e41a1c", "#377eb8", "#4daf4a", "#984ea3", "#ff7f00")
mymap <- map5
fig <- function() {
par(mar=c(0, 0, 0, 0))
map(xlim=range(mymap$x, na.rm=T), ylim=range(mymap$y, na.rm=T), col=NA, mar=rep(1, 4))
lines(mymap$x, mymap$y, col="darkgray", lwd=0.5)
for(i in 1:5) {
mystreamdf <- indices[[i]]$streamdf
with(mystreamdf[mystreamdf$year==2010, ], {
points(long, lat, cex=1.5, pch=16, col=col5[i])
par(xpd=NA)
text(long, lat, strname, cex=1.2, pos=posp[[i]], col=col5[i])
print(strname)
})
}
}
figu("Streams selected for inclusion in the index of adult sea lamprey abundance.", newpage="land", w=9, h=5.7)
outcex <- 1.2
YEARb <- 1995
### bar plot of individual index stream PEs
col7 <- c("#8dd3c7", "#ffffb3", "#bebada", "#fb8072", "#80b1d3", "#fdb462", "#b3de69")
fig <- function() {
par(mar=c(2.5, 2.5, 1, 1), mfrow=c(3, 2), yaxs="i", oma=c(1.5, 1.5, 0, 0), cex=1.2)
for(i in 1:5) {
mymap <- mapL[[i]]
mystreamdf <- indices[[i]]$streamdf
myindxdf <- indices[[i]]$indxdf
mystreamdf <- mystreamdf[mystreamdf$year >= YEARb, ]
myindxdf <- myindxdf[myindxdf$year >= YEARb, ]
p <- with(mystreamdf, tapply(COMBmr, list(year, substring(strname, 1, 10)), mean))
p[is.na(myindxdf$indxkeep), ] <- NA
p <- p[, rev(order(apply(p, 2, median, na.rm=TRUE)))]
yrz <- as.numeric(dimnames(p)[[1]])
pyrz <- pretty(yrz)
a <- barplot(t(p)/1000, las=1, col=col7, axes=FALSE, names.arg=rep("", dim(p)[1]), ylim=1.03*c(0, max(apply(p, 1, sum, na.rm=TRUE)))/1000, 
xlab="", ylab="", main=Lakenames[i], border=NA)
axis(1, at=a[match(pyrz, yrz)], pyrz)
axis(2, las=1)
box()
legend("topleft", rev(colnames(p)), fill=rev(col7[1:dim(p)[2]]), cex=0.5, bty="n", border=NA)
if(i==1) {
frame()
}
}
mtext("Year", outer=TRUE, side=1, cex=outcex)
mtext("Adult abundance  (thousands)", outer=TRUE, side=2, cex=outcex)
}
figu("Adult sea lamprey abundance estimates for index streams.", newpage="port", w=6, h=7.5)
### spawner model and adult index time series overlaid
fig <- function() {
par(mfrow=c(3, 2), mar=c(3, 3, 1, 3), oma=c(1.5, 1.5, 0, 0), cex=1.2, yaxs="i")
for(i in 1:5) {
mylk <- lk[lk$lake==i, ]# lake year PE lo hi
myindxdf <- indices[[i]]$indxdf# year lake indxraw n.mr indxkeep indxkeep.lo indxkeep.hi
convfac <- indices[[i]]$scaleup
x1 <- myindxdf$year
y1 <- myindxdf$indxkeep/1000
x2 <- mylk$year
y2 <- mylk$PE/convfac/1000
yr <- 1.05*range(0, y1, y2[x2>=YEAR1], na.rm=TRUE)
plot(1, 1, type="n", xlim=range(lk$year), ylim=yr, xlab="", ylab="", main=Lakenames[i], axes=FALSE)
axis(1)
axis(2, col=blindcolz[7], col.axis=blindcolz[7], las=1)
par(mgp=c(3, 2.2, 0))
axis(4, at=pretty(convfac*yr)/convfac, labels=pretty(convfac*yr), col=blindcolz[3], col.axis=blindcolz[3], las=1, hadj=1)
par(mgp=c(3, 1, 0))
box()
abline(h=targets.sm$target[i]/convfac/1000, col=blindcolz[3], lty=2)
abline(h=targets.ai.adj$target[i]/1000, col=blindcolz[7], lty=2)
lines(x2, y2, col=blindcolz[3], type="o", pch=18, lwd=2)
lines(x1, y1, col=blindcolz[7], type="o", pch=17, lwd=2)
if(i==1) {
plot(1, 1, type="n", xlab="", ylab="", axes=FALSE)
legend("center", c("Adult index", "Spawner model"), col=blindcolz[c(7, 3)], lwd=2, pch=c(17, 18))
}
}
mtext("Year", outer=TRUE, side=1, cex=outcex)
mtext("Adult abundance  (thousands)", outer=TRUE, side=2, cex=outcex)
}
figu("Patterns over time in adult sea lamprey abundance, comparing the newly derived index with the spawner model.",
"  Targets are indicated by dashed horizontal lines.",
"  Targets are based on averages from five years with historically acceptable wounding rates: ", paste(paste(targyrz, "in", Lakenames), collapse=", "), ".", 
newpage="port", w=6, h=7.5)
### same as above, but on landscape
### spawner model and adult index time series overlaid
fig <- function() {
par(mfrow=c(2, 3), mar=c(3, 3, 1, 3), oma=c(1.5, 1.5, 0, 0), cex=1.2, yaxs="i")
for(i in 1:5) {
mylk <- lk[lk$lake==i, ]# lake year PE lo hi
myindxdf <- indices[[i]]$indxdf# year lake indxraw n.mr indxkeep indxkeep.lo indxkeep.hi
convfac <- indices[[i]]$scaleup
x1 <- myindxdf$year
y1 <- myindxdf$indxkeep/1000
x2 <- mylk$year
y2 <- mylk$PE/convfac/1000
yr <- 1.05*range(0, y1, y2[x2>=YEAR1], na.rm=TRUE)
plot(1, 1, type="n", xlim=range(lk$year), ylim=yr, xlab="", ylab="", main=Lakenames[i], axes=FALSE)
axis(1)
axis(2, col=blindcolz[7], col.axis=blindcolz[7], las=1)
par(mgp=c(3, 2.2, 0))
axis(4, at=pretty(convfac*yr)/convfac, labels=pretty(convfac*yr), col=blindcolz[3], col.axis=blindcolz[3], las=1, hadj=1)
par(mgp=c(3, 1, 0))
box()
abline(h=targets.sm$target[i]/convfac/1000, col=blindcolz[3], lty=2)
abline(h=targets.ai.adj$target[i]/1000, col=blindcolz[7], lty=2)
lines(x2, y2, col=blindcolz[3], type="o", pch=18, lwd=2)
lines(x1, y1, col=blindcolz[7], type="o", pch=17, lwd=2)
if(i==3) {
plot(1, 1, type="n", xlab="", ylab="", axes=FALSE)
legend("center", c("Adult index", "Spawner model"), col=blindcolz[c(7, 3)], lwd=2, pch=c(17, 18))
}
}
mtext("Year", outer=TRUE, side=1, cex=outcex)
mtext("Adult abundance  (thousands)", outer=TRUE, side=2, cex=outcex)
}
figu("Patterns over time in adult sea lamprey abundance, comparing the newly derived index with the spawner model.",
"  Targets are indicated by dashed horizontal lines.",
"  Targets are based on averages from five years with historically acceptable wounding rates: ", paste(paste(targyrz, "in", Lakenames), collapse=", "), ".", 
newpage="land", w=9, h=6)
endrtf()
names(indices[[1]])
# "indfit"   "streamdf" "scaleup"  "indxdf"
# scale up
round(sapply(indices, "[[", 3), 2)
# 3.84 1.85 2.82 1.01 2.40
# print 2014 results
do.call(rbind, lapply(indices, function(lis) 
lis$streamdf[lis$streamdf$year==2014, c("year", "lscode", "lake", "country", "strcode", "estr", "strname", "trapcatch", "Emr", "CVmr")]))
tail(indxall)
dim(indxall)
head(indxall)
indxall
write.csv(indxall[, -3], "C:/JVA/Lamprey/Adults/AdultIndex/2014/StreamSummaryTable.xlsx", row.names=FALSE)
write.csv(indxall[, -3], "C:/JVA/Lamprey/Adults/AdultIndex/2014/AdultIndex.csv", row.names=FALSE)
names(indxall)
dput(names(indxall))
names(indxall) <- c("year", "lake", "indxraw", "num.mr", "indx", "indx.lo", "indx.hi")
write.csv(indxall[, -3], "C:/JVA/Lamprey/Adults/AdultIndex/2014/AdultIndex.csv", row.names=FALSE)
cleanup()
q()
library(scales)
mc <- 417
me <- 465
rc <- 3
re <- 6
ce <- 5816
ch <- 28707
est <- function(m, c, r) {
N <- (m+1) * (c+1) / (r+1) - 1
CI <- (m+1) * (c+1) / (r+1+(c(1, -1)*1.96*sqrt(r))) - 1
c(N=N, CI=CI)
}
est(me, ce, re)/1000
est(mc+me, ce, rc+re)/1000
(me+1) * (ce+1) / (re+1) - 1
(me+1) * (ce+1) / (re+1+(c(1, -1)*1.96*sqrt(re))) - 1
(mc+me+1) * (ce+1) / (rc+re+1) - 1
binomCI(rc, mc-rc)
est <- function(m, c, r) {
N <- (m+1) * (c+1) / (r+1) - 1
CI <- (m+1) * (c+1) / (r+1+(c(1, -1)*1.96*sqrt(r))) - 1
c(N=N, CI=CI)
}
mc <- 417
me <- 465
rc <- 3
re <- 6
ce <- 5816
ch <- 28707
binomCI(rc, mc-rc)
binomCI(re, me-re)
est(me, ce, re)/1000
est(mc+me, ce, rc+re)/1000
nsim <- 100000
scr <- rep(NA, nsim)
ele <- rep(NA, nsim)
for(i in 1:nsim) {
scr[i] <- mean(sample(1:0, mc, prob=c(rc, mc-rc), replace=TRUE))
ele[i] <- mean(sample(1:0, me, prob=c(re, me-re), replace=TRUE))
}
windows(h=4, w=4)
par(mar=c(4, 4, 1, 1), las=1)
hist(ele, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col="cyan", border="blue", 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.3)*nsim, yaxt="n", xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(re/me, 0.3*nsim, "ELE", col="blue")
par(new=TRUE)
hist(scr, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col=alpha("orange", 0.3), border=alpha("red", 0.5), 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.3)*nsim, yaxt="n", xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(rc/mc, 0.3*nsim, "SCR", col=alpha("red", 0.5))
q()
windows(h=4.5, w=4.5)
par(mar=c(4, 4, 1, 1), las=1)
hist(ele, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col="cyan", border="blue", 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.3)*nsim, yaxt="n", xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(re/me, 0.3*nsim, "ELE", col="blue")
par(new=TRUE)
hist(scr, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col=alpha("orange", 0.3), border=alpha("red", 0.5), 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.3)*nsim, yaxt="n", xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(rc/mc, 0.3*nsim, "SCR", col=alpha("red", 0.5))
# C:\JVA\Lamprey\HEC\TransfMR\HEC Transf Mark Recap.r
library(scales)
est <- function(m, c, r) {
N <- (m+1) * (c+1) / (r+1) - 1
CI <- (m+1) * (c+1) / (r+1+(c(1, -1)*1.96*sqrt(r))) - 1
c(N=N, CI=CI)
}
mc <- 417
me <- 465
rc <- 3
re <- 6
ce <- 5816
ch <- 28707
binomCI(rc, mc-rc)
binomCI(re, me-re)
est(me, ce, re)/1000
est(mc+me, ce, rc+re)/1000
nsim <- 100000
scr <- rep(NA, nsim)
ele <- rep(NA, nsim)
for(i in 1:nsim) {
scr[i] <- mean(sample(1:0, mc, prob=c(rc, mc-rc), replace=TRUE))
ele[i] <- mean(sample(1:0, me, prob=c(re, me-re), replace=TRUE))
}
windows(h=4.5, w=4.5)
par(mar=c(4, 4, 1, 1), las=1)
hist(ele, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col="cyan", border="blue", 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.3)*nsim, yaxt="n", xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(re/me, 0.3*nsim, "ELE", col="blue")
par(new=TRUE)
hist(scr, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col=alpha("orange", 0.3), border=alpha("red", 0.5), 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.3)*nsim, yaxt="n", xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(rc/mc, 0.3*nsim, "SCR", col=alpha("red", 0.5))
windows()
chi(matrix(c(rc, re, mc-rc, me-re), nrow=2))
rrr <- ele > scr
mean(rrr)
(me + 1)(
axis(4, at=c(re/me, rc/mc))
axis(4, at=c(re/me, rc/mc))
axis(4, at=c(re/me, rc/mc))
windows(h=4.5, w=4.5)
par(mar=c(4, 4, 2, 1), las=1)
hist(ele, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col="cyan", border="blue", 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.3)*nsim, yaxt="n", xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(re/me, 0.3*nsim, "ELE", col="blue")
par(new=TRUE)
hist(scr, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col=alpha("orange", 0.3), border=alpha("red", 0.5), 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.3)*nsim, yaxt="n", xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(rc/mc, 0.3*nsim, "SCR", col=alpha("red", 0.5))
axis(3, at=c(re/me, rc/mc))
par(mar=c(4, 4, 2, 1), las=1)
hist(ele, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col="cyan", border="blue", 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.3)*nsim, yaxt="n", xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(re/me, 0.3*nsim, "ELE", col="blue")
par(new=TRUE)
hist(scr, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col=alpha("orange", 0.3), border=alpha("red", 0.5), 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.3)*nsim, yaxt="n", xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(rc/mc, 0.3*nsim, "SCR", col=alpha("red", 0.5))
axis(3, at=c(re/me, rc/mc), labels=round(c(re/me, rc/mc), 3))
windows(h=4.5, w=4.5)
par(mar=c(4, 4, 2, 1), las=1)
hist(ele, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col="cyan", border="blue", 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.3)*nsim, yaxt="n", xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(re/me, 0.28*nsim, "ELE", col="blue")
par(new=TRUE)
hist(scr, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col=alpha("orange", 0.3), border=alpha("red", 0.5), 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.3)*nsim, yaxt="n", xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(rc/mc, 0.28*nsim, "SCR", col=alpha("red", 0.5))
axis(3, at=c(re/me, rc/mc), labels=round(c(re/me, rc/mc), 3), cex=0.8)
axis(3, at=c(re/me, rc/mc), labels=round(c(re/me, rc/mc), 3), cex=0.7)
axis(3, at=c(re/me, rc/mc), labels=round(c(re/me, rc/mc), 3), cex=0.6)
axis(3, at=c(re/me, rc/mc), labels=round(c(re/me, rc/mc), 3), cex=0.5)
axis(3, at=c(re/me, rc/mc), labels=round(c(re/me, rc/mc), 3), cex=0.4)
axis(3, at=c(re/me, rc/mc), labels=round(c(re/me, rc/mc), 3), cex=0.3)
axis(3, at=c(re/me, rc/mc), labels=round(c(re/me, rc/mc), 3), cex.axis=0.3)
axis(3, at=c(re/me, rc/mc), labels=round(c(re/me, rc/mc), 3), cex.axis=0.8)
axis(3, at=c(re/me, rc/mc), labels=round(c(re/me, rc/mc), 3), cex.axis=0.7)
par(mar=c(4, 4, 2, 1), las=1)
hist(ele, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col="cyan", border="blue", 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.3)*nsim, yaxt="n", xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(re/me, 0.28*nsim, "ELE", col="blue")
par(new=TRUE)
hist(scr, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col=alpha("orange", 0.3), border=alpha("red", 0.5), 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.3)*nsim, yaxt="n", xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(rc/mc, 0.28*nsim, "SCR", col=alpha("red", 0.5))
axis(3, at=re/me, labels=round(re/me, 3), cex.axis=0.8)
axis(3, at=rc/mc, labels=round(rc/mc, 3), cex.axis=0.8)
par(mar=c(4, 4, 2, 1), las=1)
hist(ele, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col="cyan", border="blue", 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.3)*nsim, yaxt="n", xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(re/me, 0.28*nsim, "ELE", col="blue")
par(new=TRUE)
hist(scr, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col=alpha("orange", 0.3), border=alpha("red", 0.5), 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.3)*nsim, yaxt="n", xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(rc/mc, 0.28*nsim, "SCR", col=alpha("red", 0.5))
axis(3, at=re/me, labels=round(re/me, 3), cex.axis=0.8, col=alpha("red", 0.5))
axis(3, at=rc/mc, labels=round(rc/mc, 3), cex.axis=0.8, col="blue")
axis(3, at=re/me, labels=round(re/me, 3), cex.axis=0.8, col.axis=alpha("red", 0.5))
axis(3, at=rc/mc, labels=round(rc/mc, 3), cex.axis=0.8, col.axis="blue")
windows(h=4.5, w=4.5)
par(mar=c(4, 4, 2, 1), las=1)
hist(ele, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col="cyan", border="blue", 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.3)*nsim, yaxt="n", xlab="Recovery rate", ylab="Proportion", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(re/me, 0.28*nsim, "ELE", col="blue")
par(new=TRUE)
hist(scr, breaks=seq(0, 0.06, 0.0025), freq=TRUE, col=alpha("orange", 0.3), border=alpha("red", 0.5), 
xlim=c(0, max(scr, ele)), ylim=c(0, 0.3)*nsim, yaxt="n", xlab="", ylab="", main="")
axis(2, at=seq(0, nsim, length=11), labels=seq(0, nsim, length=11)/nsim)
box()
text(rc/mc, 0.28*nsim, "SCR", col=alpha("red", 0.5))
axis(3, at=rc/mc, labels=round(rc/mc, 3), cex.axis=0.8, col.axis=alpha("red", 0.5))
axis(3, at=re/me, labels=round(re/me, 3), cex.axis=0.8, col.axis="blue")
mc <- 417
me <- 465
rc <- 3
re <- 6
ce <- 5816
ch <- 28707
binomCI(rc, mc-rc)
binomCI(re, me-re)
est(me, ce, re)/1000
est(mc+me, ce, rc+re)/1000
q()
0.3*0.3
0.7*0.75
14600/390000
14600/510000
16.3/230)
16.3/230
binomCI(rc, mc-rc)
est <- function(m, c, r) {
U <- binomCI(r, m-r)[1:3]
N <- (m+1) * (c+1) / (r+1) - 1
CI <- (m+1) * (c+1) / (r+1+(c(1, -1)*1.96*sqrt(r))) - 1
c(U=U, N=N, CI=CI)
}
est(me, ce, re)/1000
me
ce
re
# bias-corrected Petersen estimator (Chapman 1954; Table 3):
# The 95% confidence interval was calculated using the normal approximation of the Poisson for R (Ricker 1975):
est <- function(m, c, r) {
U <- binomCI(r, m-r)[1:3]
N <- (m+1) * (c+1) / (r+1) - 1
CI <- (m+1) * (c+1) / (r+1+(c(1, -1)*1.96*sqrt(r))) - 1
c(U=U, N=N, CI=CI)
}
est(me, ce, re)
q()
binomCI
qnorm(0.05)
qnorm(1-0.05)
qnorm(1-0.05/2)
#' Estimates from Mark-Recapture Studies
#'
#' Estimates the recovery rate and abundance of a closed population from a mark-recapture study with a single capture and marking event and a single recapture event.  
#' @param m A numeric scalar, the number of individuals marked and released.
#' @param r A numeric scalar, the number of marked individuals recaptured.
#' @param cA numeric scalar, the number of individuals checked for marks.
#' @param alpha A scalar, the desired confidence level, default \code{0.05}.
#' @return A named vector with the estimated recovery rate \code{U} with lower and upper 100*(1-\code{alpha})\% confidence limits from \code{\link{binomCI}},
#' and the number of observations \code{N} (the bias-corrected Petersen estimator from Chapman 1954 Table 3)
#' with lower and upper 100*(1-\code{alpha})\% confidence limits from the normal approximation of the Poisson for \code{r} (Ricker 1975).
#' @export
#' @seealso\code{\link{binomCI}}
#' @references
#'
#' D. G. Chapman.  1954.
#'The estimation of biological populations.  
#'Annals of Mathematical Statistics 25:1-15.
#' \href{http://projecteuclid.org/euclid.aoms/1177728844}{[link]}.
#'
#' W. E. Ricker.  1975.
#'Computation and interpretation of biological statistics of fish populations. 
#'Fisheries Research Board of Canada Bulletin. 191.
mrc <- function(m, r, c, alpha=0.05) {
U <- binomCI(r, m-r, alpha=alpha)[1:3]
N <- (m+1) * (c+1) / (r+1) - 1
CI <- (m+1) * (c+1) / (r+1+(c(1, -1)*qnorm(1-alpha/2)*sqrt(r))) - 1
c(U=U, N=N, CI=CI)
}
mrc
mrc(100, 10, 1000)
mrc(100, 10, 1000)
mrc <- function(m, r, c, alpha=0.05) {
U <- binomCI(r, m-r, alpha=alpha)[1:3]
N <- (m+1) * (c+1) / (r+1) - 1
CI <- (m+1) * (c+1) / (r+1+(c(1, -1)*qnorm(1-alpha/2)*sqrt(r))) - 1
c(U=U, N=N, N.L=CI[1], N.U=CI[2])
}
mrc(100, 10, 1000)
?cheat
pkgup("jvamisc")
q()
