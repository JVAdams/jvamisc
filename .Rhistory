scale_color_viridis_c() +
scale_x_date(date_breaks="2 months", date_minor_breaks="1 month",
date_labels="%b") +
theme(legend.position="none")
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE,
fig.width=4, fig.height=3)
library(RcppRoll)
library(tidyverse)
options(stringsAsFactors=FALSE)
theme_set(theme_bw(base_size=9))
loc1 <- tibble::tribble(
~Station,        ~County,      ~State,         ~City,  ~St,
"LSBS",      "Ashland", "Wisconsin",     "Ashland", "WI",
"Antigo",     "Langlade", "Wisconsin",      "Antigo", "WI",
"CVB",    "Cheboygan",  "Michigan",   "Cheboygan", "MI",
"HBBS", "Presque Isle",  "Michigan", "Millersburg", "MI",
"AA",    "Washtenaw",  "Michigan",   "Ann Arbor", "MI",
"LMERS",       "Porter",   "Indiana",  "Chesterton", "IN",
"Columbus",     "Franklin",      "Ohio",    "Columbus", "OH",
"LEBS",         "Erie",      "Ohio",    "Sandusky", "OH",
"TLAS",     "Cortland",  "New York",    "Cortland", "NY",
"LOBS",       "Oswego",  "New York",      "Oswego", "NY"
)
# Johns Hopkins COVID-19 data
dat <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv") %>%
select(Date=date, County=county, State=state, CumCases=cases, CumDeaths=deaths)
# City lat/long data
citidat <- read_csv("C:/JVA/GeoLiteCity-Location.csv", skip=1) %>%
filter(country=="US") %>%
group_by(region, city) %>%
summarise(Lat=mean(latitude), Long=mean(longitude)) %>%
select(St=region, City=city, Lat, Long)
# County population data
pop <- read_csv("https://www2.census.gov/programs-surveys/popest/datasets/2010-2019/counties/totals/co-est2019-alldata.csv") %>%
select(State=STNAME, CTYNAME, CountyPop=POPESTIMATE2019)
# combine location information
loc <- loc1 %>%
left_join(citidat) %>%
mutate(
CTYNAME = paste(County, "County"),
Station = factor(Station, levels=loc1$Station)
) %>%
left_join(pop) %>%
select(-CTYNAME)
# subset the COVID data
sub1 <- loc %>%
left_join(dat)
sub <- sub1 %>%
group_by(State, County, City, Station, Lat, Long, CountyPop) %>%
arrange(State, County, City, Station, Lat, Long, CountyPop, Date) %>%
mutate(
NewCases = CumCases - lag(CumCases),
NewDeaths = CumDeaths - lag(CumDeaths),
New.pWpC = 10^5*roll_sum(NewCases, 7, align="right", fill=NA)/CountyPop,
Dth.pWpC = 10^5*roll_sum(NewDeaths, 7, align="right", fill=NA)/CountyPop
)
# last record from each county
last <- sub %>%
slice_tail(n=1) %>%
arrange(-New.pWpC)
sub$Station <- factor(sub$Station, levels=last$Station)
last$Station <- factor(last$Station, levels=last$Station)
ggplot(sub, aes(Date, New.pWpC)) +
geom_hline(data=last, aes(yintercept=New.pWpC, color=-New.pWpC)) +
geom_point(alpha=0.5, aes(color=-New.pWpC)) +
geom_line() +
geom_label(data=last, size=3, fill="white", alpha=0.7,
aes(Date-80, New.pWpC, label=round(New.pWpC))) +
coord_cartesian(xlim=as.Date(c("2020-10-01", NA))) +
facet_wrap(~Station, nrow=2) +
labs(y="New cases per week per 100,000 people") +
scale_color_viridis_c() +
scale_x_date(date_breaks="2 months", date_minor_breaks="1 month",
date_labels="%b") +
theme(legend.position="none")
ggplot(sub, aes(Date, New.pWpC)) +
geom_hline(data=last, aes(yintercept=New.pWpC, color=-New.pWpC)) +
geom_point(alpha=0.5, aes(color=-New.pWpC)) +
geom_line() +
geom_label(data=last, size=3, fill="white", alpha=0.7,
aes(Date-80, New.pWpC, label=round(New.pWpC))) +
coord_cartesian(xlim=as.Date(c("2020-10-01", NA))) +
facet_wrap(~Station, nrow=2, scales="free_y") +
labs(y="New cases per week per 100,000 people") +
scale_color_viridis_c() +
scale_x_date(date_breaks="2 months", date_minor_breaks="1 month",
date_labels="%b") +
theme(legend.position="none")
ggplot(filter(sub, Station=="Antigo"), aes(Date, New.pWpC)) +
geom_point(alpha=0.5, aes(color=-New.pWpC)) +
geom_line() +
labs(y="New cases per week per 100,000 people") +
scale_color_viridis_c() +
scale_x_date(date_breaks="2 months", date_minor_breaks="1 month",
date_labels="%b") +
theme(legend.position="none")
install.packages(c("emmeans", "magick", "RCurl", "XML"))
install.packages(c("magick", "osmdata"))
source('~/.active-rstudio-document', echo=TRUE)
ggplot(df, aes(Control, SL)) +
geom_point() +
theme_bw(base_size = 20)
ggplot(df, aes(Control, SL)) +
geom_point() +
theme_bw(base_size = 20) +
scale_x_continuous(breaks=NULL)
ggplot(df, aes(Control, SL)) +
geom_point() +
theme_bw(base_size = 20) +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL)
ggplot(df, aes(Control, SL)) +
geom_point() +
theme_bw(base_size = 20) +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
labs(x="Control effort  ($)", y="Sea lamprey abundance")
ggplot(df, aes(Control, SL)) +
geom_smooth(data=df[-4, ]) +
geom_point(size=5) +
theme_bw(base_size = 20) +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
labs(x="Control effort  ($)", y="Sea lamprey abundance")
?geom_spline
df <- data.frame(
Control=c(1, 26, 371, 1),
SL=c(100, 10, 1, 1)
)
ggplot(df, aes(Control, SL)) +
geom_smooth(data=df[-4, ]) +
geom_point(size=5) +
theme_bw(base_size = 20) +
scale_x_log10() +
scale_y_log10()
df <- data.frame(
Control=c(0, 26, 371, 0),
SL=c(100, 10, 0, 0)
)
fit <- lm(log(SL + 1) = log(Control + 1))
fit <- lm(log(SL + 1) ~ log(Control + 1), data=df)
fit
summary(fit)
?spline
spline(df$Control, df$SL)
fit <- spline(df$Control, df$SL)
as.data.frame(fit)
fit <- as.data.frame(spline(df$Control, df$SL))
ggplot(df, aes(Control, SL)) +
geom_smooth(data=fit, aes(x, y)) +
geom_point(size=5) +
theme_bw(base_size = 20) +
scale_x_log10() +
scale_y_log10()
ggplot(df, aes(Control, SL)) +
geom_line(data=fit, aes(x, y)) +
geom_point(size=5) +
theme_bw(base_size = 20) +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
labs(x="Control effort  ($)", y="Sea lamprey abundance")
?geom_smooth
fit <- nls(y = exp(a + blog(x+1)) - 1, data=df, start=list(a=100, b=-100/371))
fit <- nls(y ~ exp(a + blog(x+1)) - 1, data=df, start=list(a=100, b=-100/371))
fit <- nls(SL ~ exp(a + blog(Control+1)) - 1, data=df,
start=list(a=100, b=-100/371))
fit <- nls(SL ~ exp(a + b*log(Control+1)) - 1, data=df,
start=list(a=100, b=-100/371))
plot(log(df$Control+1), log(df$SL+1))
fit <- as.data.frame(spline(df$Control[-4], df$SL[-4]))
ggplot(df, aes(Control, SL)) +
geom_line(data=fit, aes(x, y)) +
geom_point(size=5) +
theme_bw(base_size = 20) +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
labs(x="Control effort  ($)", y="Sea lamprey abundance")
fit <- nls(SL ~ exp(a + b*log(Control+1)) - 1, data=df[-4, ],
start=list(a=100, b=-100/371))
log(101)
start=list(a=log(101), b=-log(101)/log(371))
fit <- nls(SL ~ exp(a + b*log(Control+1)) - 1, data=df[-4, ],
start=list(a=log(101), b=-log(101)/log(371)))
fit
predict(fit)
predict(fit, newdata=data.frame(Control=0:371))
fit <- as.data.frame(spline(log(df$Control[-4]+1), log(df$SL[-4]+1)))
fit
?spline
newx <- log((0:371) + 1)
fit <- as.data.frame(spline(log(df$Control[-4]+1), log(df$SL[-4]+1)), xout=newx)
fit
newx
fit <- as.data.frame(spline(log(df$Control[-4]+1), log(df$SL[-4]+1), xout=newx))
fit
ggplot(df, aes(Control, SL)) +
geom_line(data=fit, aes(x, y)) +
geom_point(size=5) +
theme_bw(base_size = 20) +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
labs(x="Control effort  ($)", y="Sea lamprey abundance")
head(fit)
newx <- log((0:371) + 1)
fit <- as.data.frame(
spline(log(df$Control[-4]+1), log(df$SL[-4]+1), xout=newx)
) %>%
mutate(
Control = exp(x) - 1,
SL = exp(y) - 1
)
ggplot(df, aes(Control, SL)) +
geom_line(data=fit) +
geom_point(size=5) +
theme_bw(base_size = 20) +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
labs(x="Control effort  ($)", y="Sea lamprey abundance")
ggplot(df, aes(Control, SL)) +
geom_line(data=fit, stroke=2) +
geom_point(size=5) +
theme_bw(base_size = 20) +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
labs(x="Control effort  ($)", y="Sea lamprey abundance")
ggplot(df, aes(Control, SL)) +
geom_line(data=fit, stroke=5) +
geom_point(size=5) +
theme_bw(base_size = 20) +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
labs(x="Control effort  ($)", y="Sea lamprey abundance")
?geom_line
ggplot(df, aes(Control, SL)) +
geom_line(data=fit, size=5) +
geom_point(size=5) +
theme_bw(base_size = 20) +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
labs(x="Control effort  ($)", y="Sea lamprey abundance")
ggplot(df, aes(Control, SL)) +
geom_line(data=fit, size=2) +
geom_point(size=5) +
theme_bw(base_size = 20) +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
labs(x="Control effort  ($)", y="Sea lamprey abundance")
ggplot(df, aes(Control, SL)) +
geom_line(data=fit, size=2) +
geom_line(data=df[3:4, ], size=2) +
geom_point(size=5) +
theme_bw(base_size = 20) +
scale_x_continuous(breaks=NULL) +
scale_y_continuous(breaks=NULL) +
labs(x="Control effort  ($)", y="Sea lamprey abundance")
10^(-10)
10^(-15)
exp(-10)
exp(-15)
t.test(c(23, 28, 24), 24.5)
?t.test
t.test(x=c(23, 28, 24), mu=49.2)
t.test(x=c(23, 28, 24), mu=49/2)
t.test(x=rep(30, 3), mu=49/2)
t.test(x=rep(30, 3)+c(-1, 0, 1), mu=49/2)
t.test(x=rep(29, 3)+c(-1, 0, 1), mu=49/2)
t.test(x=rep(26, 3)+c(-1, 0, 1), mu=49/2)
t.test(x=rep(27, 3)+c(-1, 0, 1), mu=49/2)
49-27
install.packages(c("processx", "tweenr"))
w <- c(80, 98, 110, 112, 123, 127)
l <- c(385, 390, 440, 438, 430, 455)
plot(w, l)
plot(w, l, xlim=c(50, 300), ylim=c(300, 550))
lm(l ~ w)
lm(w ~ l)
1/1.478
1/.5342
?stat_regline_equation
??stat_regline_equation
?labs
library(tidyverse)
?labs
install.packages(c("callr", "caTools", "cpp11", "gert", "sfsmisc", "vctrs"))
install.packages(c("gh", "lwgeom", "officer", "processx", "remotes", "reprex"))
install.packages(c("lwgeom", "processx"))
install.packages("mschart")
install.packages(c("blogdown", "DescTools", "DT", "flextable", "haven", "knitr", "nycflights13", "pillar", "RcppArmadillo", "rsconnect", "servr", "sfsmisc", "tidyverse", "viridis", "viridisLite", "XLConnect"))
install.packages("haven")
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE,
fig.width=4, fig.height=3)
#date: '`r format(Sys.Date(), "%B %d, %Y")` - Jean V. Adams'
library(RcppRoll)
library(tidyverse)
options(stringsAsFactors=FALSE)
theme_set(theme_bw(base_size=9))
loc1 <- tibble::tribble(
~Station,        ~County,      ~State,         ~City,  ~St,
"LSBS",      "Ashland", "Wisconsin",     "Ashland", "WI",
"Antigo",     "Langlade", "Wisconsin",      "Antigo", "WI",
"CVB",    "Cheboygan",  "Michigan",   "Cheboygan", "MI",
"HBBS", "Presque Isle",  "Michigan", "Millersburg", "MI",
"AA",    "Washtenaw",  "Michigan",   "Ann Arbor", "MI",
"LMERS",       "Porter",   "Indiana",  "Chesterton", "IN",
"Columbus",     "Franklin",      "Ohio",    "Columbus", "OH",
"LEBS",         "Erie",      "Ohio",    "Sandusky", "OH",
"TLAS",     "Cortland",  "New York",    "Cortland", "NY",
"LOBS",       "Oswego",  "New York",      "Oswego", "NY"
)
# Johns Hopkins COVID-19 data
dat <- read_csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv") %>%
select(Date=date, County=county, State=state, CumCases=cases, CumDeaths=deaths)
# City lat/long data
citidat <- read_csv("C:/JVA/GeoLiteCity-Location.csv", skip=1) %>%
filter(country=="US") %>%
group_by(region, city) %>%
summarise(Lat=mean(latitude), Long=mean(longitude)) %>%
select(St=region, City=city, Lat, Long)
# County population data
pop <- read_csv("https://www2.census.gov/programs-surveys/popest/datasets/2010-2019/counties/totals/co-est2019-alldata.csv") %>%
select(State=STNAME, CTYNAME, CountyPop=POPESTIMATE2019)
# combine location information
loc <- loc1 %>%
left_join(citidat) %>%
mutate(
CTYNAME = paste(County, "County"),
Station = factor(Station, levels=loc1$Station)
) %>%
left_join(pop) %>%
select(-CTYNAME)
# subset the COVID data
sub1 <- loc %>%
left_join(dat)
sub <- sub1 %>%
group_by(State, County, City, Station, Lat, Long, CountyPop) %>%
arrange(State, County, City, Station, Lat, Long, CountyPop, Date) %>%
mutate(
NewCases = CumCases - lag(CumCases),
NewDeaths = CumDeaths - lag(CumDeaths),
New.pWpC = 10^5*roll_sum(NewCases, 7, align="right", fill=NA)/CountyPop,
Dth.pWpC = 10^5*roll_sum(NewDeaths, 7, align="right", fill=NA)/CountyPop
)
# last record from each county
last <- sub %>%
slice_tail(n=1) %>%
arrange(-New.pWpC)
sub$Station <- factor(sub$Station, levels=last$Station)
last$Station <- factor(last$Station, levels=last$Station)
ggplot(sub, aes(Date, New.pWpC)) +
geom_hline(data=last, aes(yintercept=New.pWpC, color=-New.pWpC)) +
geom_point(alpha=0.5, aes(color=-New.pWpC)) +
geom_line() +
geom_label(data=last, size=3, fill="white", alpha=0.7,
aes(Date-80, New.pWpC, label=round(New.pWpC))) +
coord_cartesian(xlim=as.Date(c("2020-10-01", NA))) +
facet_wrap(~Station, ncol=2, scales="free_y") +
labs(y="New cases per week per 100,000 people",
title=paste("New cases through", max(sub$Date)),
subtitle="Stations on different scales") +
scale_color_viridis_c() +
scale_x_date(date_breaks="2 months", date_minor_breaks="1 month",
date_labels="%b") +
theme(legend.position="none")
install.packages(c("cluster", "highr", "mgcv", "mschart", "recipes", "tibble", "withr"))
install.packages(c("cluster", "mgcv", "tibble"))
install.packages(c("bitops", "brio", "emmeans", "haven", "httpuv", "knitr", "later", "V8"))
install.packages(c("cli", "jquerylib"))
install.packages("scholar")
install.packages(c("boot", "class", "curl", "ellipsis", "gh", "lattice", "magick", "MASS", "multcomp", "nnet", "openssl", "parallelly", "processx", "R.cache", "raster", "rJava", "rlang", "spatial", "tidyselect", "V8", "vctrs"))
install.packages(c("class", "ellipsis", "lattice", "magick", "MASS", "nnet", "processx", "raster", "spatial", "vctrs"))
citation("vegan")
install.packages(c("colorspace", "devtools", "diptest", "dplyr", "KernSmooth", "Matrix", "pdftools"))
install.packages(c("jqr", "pdftools"))
install.packages(c("corrplot", "dendextend", "installr", "rsample", "statmod", "stringi"))
install.packages(c("cachem", "lme4", "naniar", "pillar", "stringi", "tibble", "xfun"))
R.version()
R.Version()
install.packages(c("DEoptimR", "fansi", "leafem", "priceR", "rsconnect", "rversions"))
install.packages("rmapshaper")
install.packages("geojsonlint")
install.packages("rmapshaper")
install.packages("httpcode")
install.packages("rmapshaper")
install.packages("jsonvalidate")
install.packages("rmapshaper")
install.packages("fitdistrplus")
install.packages(c("emmeans", "forecast", "Matrix", "matrixStats", "mgcv", "rversions", "tinytex", "zip"))
install.packages(c("remotes", "robustbase"))
?mgcv::gam
?mgcv::s
install.packages(c("agricolae", "corrplot", "devtools", "gtools", "mapview", "mvtnorm", "quantreg"))
install.packages(c("broom", "FSA", "ggsignif", "pander", "parallelly", "sf"))
install.packages("pander")
install.packages(c("DescTools", "dplyr", "GGally", "ggplot2", "openxlsx", "plotly", "raster", "rio", "rmarkdown", "s2", "spData", "testthat", "tmap", "xfun"))
install.packages(c("curl", "lme4", "mime", "rticles"))
library(tidyverse)
df <- data.frame(
Day = 1:25,
End = c(3, 15, 26, 31, 44, 56, 69, 80, 92, 106, 109, 118, 125, 136, 137, 149,
166, 181, 196, 208, 211, 223, 242, 257, 275)
)
plot(df)
as.Date("2021-06-25")
as.Date("2021-06-25") + 0:24
df <- data.frame(
Day = 1:25,
Date = as.Date("2021-06-25") + 0:24,
End = c(3, 15, 26, 31, 44, 56, 69, 80, 92, 106, 109, 118, 125, 136, 137, 149,
166, 181, 196, 208, 211, 223, 242, 257, 275)
) %>%
mutate(
Miles = End - lag(End)
)
df
df <- data.frame(
Day = 0:25,
Date = as.Date("2021-06-24") + 0:25,
End = c(0, 3, 15, 26, 31, 44, 56, 69, 80, 92, 106, 109, 118, 125, 136, 137, 149,
166, 181, 196, 208, 211, 223, 242, 257, 275)
) %>%
mutate(
Miles = End - lag(End)
)
df
plot(df)
plot(sort(df$Miles)
)
arrange(df, Miles)
df <- data.frame(
Day = 0:25,
Date = as.Date("2021-06-24") + 0:25,
End = c(0, 3, 15, 26, 31, 44, 56, 69, 80, 92, 106, 109, 118, 125, 136, 137, 149,
166, 181, 196, 208, 211, 223, 242, 257, 275)
) %>%
mutate(
Miles = End - lag(End),
Note = case_when(
Day in c(1, 4, 11, 15, 21) ~ "Nero",
Day in 12:15 ~ "Jill",
Day in 18:24 ~ "Smokies"
)
df <- data.frame(
Day = 0:25,
Date = as.Date("2021-06-24") + 0:25,
End = c(0, 3, 15, 26, 31, 44, 56, 69, 80, 92, 106, 109, 118, 125, 136, 137, 149,
166, 181, 196, 208, 211, 223, 242, 257, 275)
) %>%
mutate(
Miles = End - lag(End),
Note = case_when(
Day %in% c(1, 4, 11, 15, 21) ~ "Nero",
Day %in% 12:15 ~ "Jill",
Day %in% 18:24 ~ "Smokies"
)
df
ggplot(df, aes(Day, Miles, color=Note)) +
geom_point()
theme_set(theme_bw(base_size=914)
theme_set(theme_bw(base_size=14))
ggplot(df, aes(Day, Miles, color=Note)) +
geom_point()
df <- data.frame(
Day = 0:25,
Date = as.Date("2021-06-24") + 0:25,
End = c(0, 3, 15, 26, 31, 44, 56, 69, 80, 92, 106, 109, 118, 125, 136, 137, 149,
166, 181, 196, 208, 211, 223, 242, 257, 275)
) %>%
mutate(
Miles = End - lag(End),
Note = case_when(
Day %in% c(1, 4, 11, 15, 21) ~ "Nero",
Day %in% 12:15 ~ "Jill",
Day %in% 18:24 ~ "Smokies",
TRUE ~ "Unconstrained"
),
Note = factor(Note, levels=c("Unconstrained", "Smokies", "Jill", "Nero"))
)
ggplot(df, aes(Day, Miles, color=Note)) +
geom_point()
ggplot(df, aes(Day, Miles, color=Note)) +
geom_point(size=3)
ggplot(df, aes(Day, End, color=Note)) +
geom_point(size=3)
ggplot(df, aes(Day, Miles, color=Note)) +
geom_point(size=3) +
geom_smooth(method="lm")
ggplot(df, aes(Day, Miles, color=Note)) +
geom_point(size=3) +
geom_smooth(method="lm", se=FALSE)
ggplot(df, aes(Day, Miles, color=Note)) +
geom_point(size=3) +
geom_smooth(method="lm", se=FALSE) +
scale_y_continuous(minor_breaks=0:30)
mean(df$Miles, na.rm=TRUE)
install.packages(c("blob", "blogdown", "broom", "car", "cli", "colorspace", "corrplot", "cpp11", "dataRetrieval", "emmeans", "fishmethods", "flextable", "FSA", "furrr", "gargle", "gert", "ggplot2", "googledrive", "googlesheets4", "isoband", "LaplacesDemon", "modeldata", "officer", "parallelly", "Rcpp", "RcppArmadillo", "readr", "rootSolve", "Rttf2pt1", "scholar", "seriation", "sf", "slider", "stringi", "styler", "survey", "testthat", "tibble", "wk"))
install.packages(c("colorspace", "jpeg", "readr", "Rttf2pt1", "stringi", "tibble", "tzdb"))
install.packages(c("colorspace", "credentials", "pryr", "rvest", "tibble", "utf8"))
install.packages("sf")
3:12
sample(10)
(sample(10)+2)*2
install.packages(c("broom", "matrixStats"))
install.packages(c("e1071", "osmdata"))
install.packages(c("lwgeom", "pillar", "protolite"))
install.packages("dataRetrieval")
install.packages("haven")
R.version.string
jvamisc::cleanup()
jvamisc::pkgup(myPkg)
myPkg <- "jvamisc"
jvamisc::pkgup(myPkg)
?jvamisc
