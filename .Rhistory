mtext(groupnames, at=gf, side=3, line=1)
abline(h=0, lty=2)
gf <- tapply(fitted(fit3), group, mean)
windows(h=4, w=4)
par(mar=c(4, 4, 3, 1))
plot(jitter(fitted(fit3)), resid(fit3), xlab="Predicted values for each group", ylab="Residuals for each group")
mtext(groupnames, at=gf, side=3, line=1)
abline(h=0, lty=2)
gf <- tapply(fitted(fit3), group, mean)
windows(h=4, w=4)
par(mar=c(4, 4, 3, 1))
plot(jitter(fitted(fit3)), resid(fit3), xlab="Predicted values for each group", ylab="Residuals for each group")
mtext(groupnames, at=gf, side=3, line=1, cex=0.8)
abline(h=0, lty=2)
gf <- tapply(fitted(fit3), group, mean)
windows(h=4, w=4)
par(mar=c(4, 4, 3, 1))
plot(jitter(fitted(fit3)), resid(fit3), xlab="Predicted values for each group", ylab="Residuals for each group")
mtext(groupnames, at=gf, side=3, line=1, cex=0.6)
abline(h=0, lty=2)
gf <- tapply(fitted(fit3), group, mean)
windows(h=4, w=4)
par(mar=c(4, 4, 3, 1))
plot(jitter(fitted(fit3)), resid(fit3), xlab="Predicted values for each group", ylab="Residuals for each group")
mtext(groupnames, at=gf, side=3, line=1, las=2)
abline(h=0, lty=2)
gf <- tapply(fitted(fit3), group, mean)
windows(h=4, w=4)
par(mar=c(4, 4, 3, 1))
plot(jitter(fitted(fit3)), resid(fit3), xlab="Predicted values for each group", ylab="Residuals for each group")
mtext(groupnames, at=gf, side=3, line=0, las=2)
abline(h=0, lty=2)
gf <- tapply(fitted(fit3), group, mean)
windows(h=4, w=4)
par(mar=c(4, 4, 3, 1))
plot(jitter(fitted(fit3)), resid(fit3), xlab="Predicted values for each group", ylab="Residuals for each group")
mtext(groupnames, at=gf, side=3, line=0.1, las=2)
abline(h=0, lty=2)
gf <- tapply(fitted(fit3), group, mean)
windows(h=4, w=4)
par(mar=c(4, 4, 3, 1))
plot(jitter(fitted(fit3)), resid(fit3), xlab="Predicted values for each group", ylab="Residuals for each group")
mtext(groupnames, at=gf, side=3, line=0.2, las=2)
abline(h=0, lty=2)
cleanup()
q()
# After restarting R, attach/install packages
library(devtools)
library(roxygen2)
# install from local folder
setwd("C:/JVA/GitHub")
install("jvamisc")
setwd("C:/JVA/R/Working Directory")
library(jvamisc)
?heading
?circles
## Not run: 
doc <- startrtf()
heading("Heading 1")
para("First paragraph.")
tab <- head(cars)
tabl("First few rows of cars data.", row.names=FALSE)
heading("Heading 2", 2)
para("Second paragraph.")
fig <- function() {
plot(cars)
lo <- loess(cars$dist ~ cars$speed)
lines(lo$x, lo$fitted)
}
figu("Speed vs. distance from the cars data.")
endrtf()
## End(Not run)
## Not run: 
doc <- startrtf()
heading("Heading 1")
para("First paragraph.")
tab <- head(cars)
tabl("First few rows of cars data.", row.names=FALSE)
heading("Heading 2", 2)
para("Second paragraph.")
fig <- function() {
plot(cars)
lo <- loess(cars$dist ~ cars$speed)
lines(lo$x, lo$fitted)
}
figu("Speed vs. distance from the cars data.")
endrtf()
## End(Not run)
cleanup()
search()
detach(2)
# or, sync GitHub and install from shared GitHub site
library(devtools)
devtools::install_github("JVAdams/jvamisc")
library(jvamisc)
search()
rtf
done
heading()
startrtf()
?heading
?startrtf
q()
search()
?startrtf
doc <- startrtf()
heading("Heading 1")
para("First paragraph.")
tab <- head(cars)
tabl("First few rows of cars data.", row.names=FALSE)
heading("Heading 2", 2)
para("Second paragraph.")
fig <- function() {
plot(cars)
lo <- loess(cars$dist ~ cars$speed)
lines(lo$x, lo$fitted)
}
figu("Speed vs. distance from the cars data.")
endrtf()
q()
# After restarting R, attach/install packages
library(devtools)
library(roxygen2)
# install from local folder
setwd("C:/JVA/GitHub")
install("jvamisc")
setwd("C:/JVA/R/Working Directory")
library(jvamisc)
## Not run: 
doc <- startrtf()
heading("Heading 1")
para("First paragraph.")
tab <- head(cars)
tabl("First few rows of cars data.", row.names=FALSE)
heading("Heading 2", 2)
para("Second paragraph.")
fig <- function() {
plot(cars)
lo <- loess(cars$dist ~ cars$speed)
lines(lo$x, lo$fitted)
}
figbig("Speed vs. distance from the cars data.", newpage="land")
endrtf()
## End(Not run)
q()
?subset
args(polygon)
args(line)
head(mtcars)
?data
data()
head(calcium)
head(capability)
head(poisons)
head(EuStockMarkets)
head(LakeHuron)
LakeHuron
head(USArrests)
?error
??error
cars
head(cars)
head(mtcars)
plotdf(mtcars)
dim(mtcars)
plotdf(mtcars)
with(mtcars, plot(carb, qsec))
y<-runif(10)
 err<-runif(10)
plot(1:10, y)
sample(10)
shadepoly <- function(x, ymd, ylo, yhi, subsel=NULL, kol="black", opq=c(20, 50), addline=TRUE) {
# add a line with polygon for the upper and lower bounds
# x = x variable (year)
# ymd = y variable (metric) mean for line
# ylo, yhi = y variable bounds for polygon
# subsel = subset of data to use (e.g., lake==_)
# kol = color for the metric
# opq = opacity for the polygon (1) and the line (2)
if(is.null(subsel)) {
subsel2 <- !is.na(ymd)
} else {
subsel2 <- subsel & !is.na(ymd)
}
a <- spline(x[subsel2], ylo[subsel2], n=100)
b <- spline(x[subsel2], yhi[subsel2], n=100)
polygon(c(a$x, rev(b$x)), c(a$y, rev(b$y)), col=paste0(kol, opq[1]), border=NA)
if(addline) lines(spline(x[subsel2], ymd[subsel2], n=100), col=paste0(kol, opq[2]), lwd=2)
invisible()
}
x <- 1:10
y <- sample(10)
noise <- rnorm(10)
plot(x, y, ylim=range(y-noise, y+noise), type="n")
shadepoly(x, y, y-noise, y+noise)
?hex
??hex
col2hex(cname)
library(gplots)
col2hex(cname)
col2hex("black")
#' @examples plotdf(mtcars)
shadepoly <- function(x, ymd, ylo, yhi, subsel=NULL, kol="#000000", opq=c(20, 50), addline=TRUE) {
# add a line with polygon for the upper and lower bounds
# x = x variable (year)
# ymd = y variable (metric) mean for line
# ylo, yhi = y variable bounds for polygon
# subsel = subset of data to use (e.g., lake==_)
# kol = color for the metric
# opq = opacity for the polygon (1) and the line (2)
if(is.null(subsel)) {
subsel2 <- !is.na(ymd)
} else {
subsel2 <- subsel & !is.na(ymd)
}
a <- spline(x[subsel2], ylo[subsel2], n=100)
b <- spline(x[subsel2], yhi[subsel2], n=100)
polygon(c(a$x, rev(b$x)), c(a$y, rev(b$y)), col=paste0(kol, opq[1]), border=NA)
if(addline) lines(spline(x[subsel2], ymd[subsel2], n=100), col=paste0(kol, opq[2]), lwd=2)
invisible()
}
x <- 1:10
y <- sample(10)
noise <- rnorm(10)
plot(x, y, ylim=range(y-noise, y+noise), type="n")
shadepoly(x, y, y-noise, y+noise)
x <- 1:10
y <- sample(10)
noise <- abs(rnorm(10))
plot(x, y, ylim=range(y-noise, y+noise), type="n")
shadepoly(x, y, y-noise, y+noise)
recall
huh
cheat
### MAPS
library(ggmap)
map <- get_map(location="Antigo, Wisconsin", zoom=10)
ggmap(map)
murder <- subset(crime, offense == "murder")
qmplot(lon, lat, data=murder, color=I("red"), size=I(3), darken=0.3)
antigo <- "Antigo, Wisconsin"
qmap(antigo, zoom=14)
?qmap
?qmplot
qmplot(lon, lat, data = crime)
qmplot(lon, lat, data = crime)
library(RgoogleMaps) 
windows()
MyMap <- GetMap.bbox(bx, by, maptype="terrain", destfile="junk.png", zoom=8)
PlotOnStaticMap(MyMap, lat=dat2$lat, lon=dat2$long, col="red")
library(RgoogleMaps) 
windows()
MyMap <- GetMap.bbox(c(-80, -79), c(45, 46), maptype="terrain", destfile="junk.png", zoom=8)
PlotOnStaticMap(MyMap, lat=dat2$lat, lon=dat2$long, col="red")
?lat
??latitude
?data
data()
canada.cities
search()
head(canada.cities)
find("us.cities")
lls()
lls(17)
maps::us.cities
library(RgoogleMaps) 
windows()
MyMap <- GetMap.bbox(c(-80, -79), c(45, 46), maptype="terrain", destfile="junk.png", zoom=8)
PlotOnStaticMap(MyMap, lat=seq(45, 46, 0.1), lon=seq(-80, -79, 0.1), col="red")
MyMap <- GetMap.bbox(c(-80, -79), c(45, 46), maptype="terrain", destfile="junk.png", zoom=8)
PlotOnStaticMap(MyMap, lat=seq(45, 46, 0.1), lon=seq(-80, -79, 0.1), col="red")
# Code from R-help posting by Phil Spector, UC Berkeley, Mar 16, 2010; 3:57pm 
addr = "Antigo, WI" 
url = paste0("http://maps.google.com/maps/api/geocode/xml?address=", addr, "&sensor=false") 
library(XML) 
root = xmlRoot(xmlTreeParse(url)) 
lat = xmlValue(root[["result"]][["geometry"]][["location"]][["lat"]]) 
long = xmlValue(root[["result"]][["geometry"]][["location"]][["lng"]]) 
utils:::menuInstallPkgs()
# Code from R-help posting by Phil Spector, UC Berkeley, Mar 16, 2010; 3:57pm 
addr = "Antigo, WI" 
url = paste0("http://maps.google.com/maps/api/geocode/xml?address=", addr, "&sensor=false") 
library(XML) 
root = xmlRoot(xmlTreeParse(url)) 
lat = xmlValue(root[["result"]][["geometry"]][["location"]][["lat"]]) 
long = xmlValue(root[["result"]][["geometry"]][["location"]][["lng"]]) 
lat
long
x <- sample(100, 10)
names(x) <- x
hc <- hclust(dist(x))
dd <- as.dendrogram(hc)
dd.reorder <- reorder(dd, x, mean)
par(mfcol = 1:2)
plot(dd, main="default dendrogram")
plot(dd.reorder, main="reordered")
library(jpeg)
x <- rnorm(20)
y <- rnorm(20)
img <- readJPEG("C:/Users/Public/Pictures/Sample Pictures/Chrysanthemum.jpg")
plot(x, y, type="n")
pusr <- par("usr")
rasterImage(img, pusr[1], pusr[3], pusr[2], pusr[4])
points(x, y, pch=16, cex=3)
plot(1, 1, xlab="Length  (\U03BCm)", ylab="Temperature  (\U00b0 C)", main="Lambda squared = \\U03BB\\U00B2 = \U03BB\U00B2")
### CONTOUR ###
library(akima)
y <- rnorm(50)
x <- runif(50)
z <- 2*x^2 - y^2 + 4
contour(interp(x, y, z, duplicate="mean"))
### LABEL MONTHS ON JDAY AXIS ###
plot(101:200, rnorm(100))
axis(1, at=julian(as.Date(paste(2005, 1:12, 1, sep="-")), origin=as.Date("2004-12-31"))-0.5,
labels=F)
axis(1, at=julian(as.Date(paste(2005, 1:12, 15, sep="-")), origin=as.Date("2004-12-31")),
labels=month.abb, tick=F)
### LABEL MONTHS ON JDAY AXIS ###
plot(101:200, rnorm(100), axes=FALSE)
axis(1, at=julian(as.Date(paste(2005, 1:12, 1, sep="-")), origin=as.Date("2004-12-31"))-0.5,
labels=F)
axis(1, at=julian(as.Date(paste(2005, 1:12, 15, sep="-")), origin=as.Date("2004-12-31")),
labels=month.abb, tick=F)
### LABEL MONTHS ON JDAY AXIS ###
plot(101:200, rnorm(100), axes=FALSE)
axis(1, at=julian(as.Date(paste(2005, 1:12, 1, sep="-")), origin=as.Date("2004-12-31"))-0.5,
labels=F)
axis(1, at=julian(as.Date(paste(2005, 1:12, 15, sep="-")), origin=as.Date("2004-12-31")),
labels=month.abb, tick=F)
axis(2)
box()
windows()
plot(x, y, ylim=range(c(lo, hi)))
arrows(x, lo, x, hi, length=0.1, angle=90, code=3)
### MULTIPLE COMPARISON TUKEY TEST ###
library(multcomp)
amod <- aov(breaks ~ tension, data = warpbreaks)
mc <- glht(amod, linfct = mcp(tension = "Tukey"))
summary(amod)
summary(mc)
confint(mc)
windows()
plot(mc)
TukeyHSD(amod)
### set up two-way ANOVA with interactions
fit <- aov(y ~ f1 + f2 + f1:f2)
### set up linear hypotheses for all-pairs of both factors
wht <- glht(fit, linfct = mcp(f1 = "Tukey", f2 = "Tukey"))
### cf. Westfall et al. (1999, page 181)
summary(wht, test = adjusted("Shaffer"))
xx <- rnorm(30)
yy <- runif(30)
windows()
layout(matrix(2:1, ncol=1), heights=c(1/5, 4/5)) 
par(mar=c(4, 4, 0, 1), cex=1, las=1)
plot(xx, yy)
addhist(xx, type="x")
windows()
layout(matrix(1:2, ncol=2), widths=c(4/5, 1/5)) 
par(mar=c(4, 4, 1, 0), cex=1, las=1)
plot(xx, yy)
addhist(yy, type="y")
windows()
layout(matrix(c(2, 1, 0, 3), ncol=2), heights=c(1/5, 4/5), widths=c(4/5, 1/5)) 
par(mar=c(4, 4, 0, 0), cex=1, las=1)
plot(xx, yy)
usr <- par("usr")
mar <- par("mar")
addhist(xx, yy, type="xy")
addhist <- function(x, y=NULL, type="xy", nclass=20, newmar=0:1, adj.fac=1.05, xlab="Frequency", ylab="", fill="gray") {
# tip, if using type="xy", use something like
# layout(matrix(c(2, 1, 0, 3), ncol=2), heights=c(1, 4)/5, widths=c(4, 1)/5)
oldmar <- par("mar")
oldusr <- par("usr")
xhist <- hist(x, nclass=nclass, plot=FALSE) 
if(type=="xy" | type=="x") {
par(mar=c(newmar[1], oldmar[2], newmar[2], oldmar[4]), xaxs="i", yaxs="i") 
plot(xhist$mids, xhist$counts, type="n", xlim=oldusr[1:2], ylim=adj.fac*c(0, max(xhist$counts)), axes=FALSE, xlab=xlab, ylab=ylab)
symbols(xhist$mids, xhist$counts/2, rectangles=cbind(diff(xhist$mids)[1], xhist$counts), inches=FALSE, bg=fill, add=TRUE)
px <- pretty(xhist$counts)
axis(2, at=px[-1])
box()
}
if(type=="xy" | type=="y") {
if(type=="xy") xhist <- hist(y, nclass=nclass, plot=FALSE) 
par(mar=c(oldmar[1], newmar[1], oldmar[3], newmar[2]), xaxs="i", yaxs="i") 
plot(xhist$counts/2, xhist$mids, type="n", xlim=adj.fac*c(0, max(xhist$counts)), ylim=oldusr[3:4], axes=FALSE, xlab=xlab, ylab=ylab)
symbols(xhist$counts/2, xhist$mids, rectangles=cbind(xhist$counts, diff(xhist$mids)[1]), inches=FALSE, bg=fill, add=TRUE)
px <- pretty(xhist$counts)
axis(1, at=px[-1])
box()
}
}
xx <- rnorm(30)
yy <- runif(30)
windows()
layout(matrix(2:1, ncol=1), heights=c(1/5, 4/5)) 
par(mar=c(4, 4, 0, 1), cex=1, las=1)
plot(xx, yy)
addhist(xx, type="x")
windows()
layout(matrix(1:2, ncol=2), widths=c(4/5, 1/5)) 
par(mar=c(4, 4, 1, 0), cex=1, las=1)
plot(xx, yy)
addhist(yy, type="y")
windows()
layout(matrix(c(2, 1, 0, 3), ncol=2), heights=c(1/5, 4/5), widths=c(4/5, 1/5)) 
par(mar=c(4, 4, 0, 0), cex=1, las=1)
plot(xx, yy)
usr <- par("usr")
mar <- par("mar")
addhist(xx, yy, type="xy")
for(i in 1:10) {
windows()
plot(1:10, 1:10, type="l")
points(i, i, pch=16, cex=2)
savePlot(filename=paste("Rplot", i), type="bmp") #saved to C:\Program Files\R\R-2.4.0
}
getdir()
home()
?dir
??dir
getwed
getwd
getwd()
cat(paste("Plots saved to", getwd()))
?hist
simplename <- function(charvec) {
# convert to all lower case
t2 <- casefold(charvec)
# remove all apostrophes (and any surrounding spaces)
t2 <- gsub("[[:space:]]\\"[[:space:]]", "", t2)
t2 <- gsub("[[:space:]]\\"", "", t2)
t2 <- gsub("\\"[[:space:]]", "", t2)
# cut off equal sign and everything after
t2 <- gsub("=.*", "", t2)
# replace all remaining punctuation marks with spaces
t2 <- gsub("[[:punct:]]", " ", t2)
# get rid of leading and trailing white space
t2 <- gsub("^[ \t]+|[ \t]+$", "", t2)
# change double spaces to single spaces
t2 <- gsub("[ \t]+", " ", t2)
# use only the last name and the first initial
t2 <- sapply(strsplit(t2, " "), function(x) paste(x[1], substring(x[2], 1, 1)))
t2
}
simplename <- function(charvec) {
# convert to all lower case
t2 <- casefold(charvec)
# remove all apostrophes (and any surrounding spaces)
t2 <- gsub("[[:space:]]\\"[[:space:]]", "", t2)
t2 <- gsub("[[:space:]]\\"", "", t2)
t2 <- gsub("\\"[[:space:]]", "", t2)
# cut off equal sign and everything after
t2 <- gsub("=.*", "", t2)
# replace all remaining punctuation marks with spaces
t2 <- gsub("[[:punct:]]", " ", t2)
# get rid of leading and trailing white space
t2 <- gsub("^[ \t]+|[ \t]+$", "", t2)
# change double spaces to single spaces
t2 <- gsub("[ \t]+", " ", t2)
# use only the last name and the first initial
t2 <- sapply(strsplit(t2, " "), function(x) paste(x[1], substring(x[2], 1, 1)))
t2
}
simplename <- function(charvec) {
# convert to all lower case
t2 <- casefold(charvec)
# remove all apostrophes (and any surrounding spaces)
t2 <- gsub('[[:space:]]\\"[[:space:]]', "", t2)
t2 <- gsub('[[:space:]]\\"', "", t2)
t2 <- gsub('\\"[[:space:]]', "", t2)
# cut off equal sign and everything after
t2 <- gsub("=.*", "", t2)
# replace all remaining punctuation marks with spaces
t2 <- gsub("[[:punct:]]", " ", t2)
# get rid of leading and trailing white space
t2 <- gsub("^[ \t]+|[ \t]+$", "", t2)
# change double spaces to single spaces
t2 <- gsub("[ \t]+", " ", t2)
# use only the last name and the first initial
t2 <- sapply(strsplit(t2, " "), function(x) paste(x[1], substring(x[2], 1, 1)))
t2
}
simplename(c("%TOC", " Bob's Data", "X = 32", "No.per.m2   ", "Taylor, Jimmy Dean"))
simplename <- function(charvec) {
# convert to all lower case
t2 <- casefold(charvec)
# remove all apostrophes (and any surrounding spaces)
t2 <- gsub('[[:space:]]\\"[[:space:]]', "", t2)
t2 <- gsub('[[:space:]]\\"', "", t2)
t2 <- gsub('\\"[[:space:]]', "", t2)
# cut off equal sign and everything after
t2 <- gsub("=.*", "", t2)
# replace all remaining punctuation marks with spaces
t2 <- gsub("[[:punct:]]", " ", t2)
# get rid of leading and trailing white space
t2 <- gsub("^[ \t]+|[ \t]+$", "", t2)
# change double spaces to single spaces
t2 <- gsub("[ \t]+", " ", t2)
# use only the last name and the first initial
#t2 <- sapply(strsplit(t2, " "), function(x) paste(x[1], substring(x[2], 1, 1)))
t2
}
simplename(c("%TOC", " Bob's Data", "X = 32", "No.per.m2   ", "Taylor, Jimmy Dean"))
#########
# Make any changes you like
# update documentation, then quit and restart R
library(devtools)
setwd("C:/JVA/GitHub/jvamisc")
document()
q()
